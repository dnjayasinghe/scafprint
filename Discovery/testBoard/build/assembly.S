
stm32f4_usb_cdc_mini_ecsm.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000188:	b082      	sub	sp, #8
 800018a:	4603      	mov	r3, r0
 800018c:	9100      	str	r1, [sp, #0]
 800018e:	f88d 3007 	strb.w	r3, [sp, #7]
  if(IRQn < 0) {
 8000192:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000196:	2b00      	cmp	r3, #0
 8000198:	da0f      	bge.n	80001ba <NVIC_SetPriority+0x32>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800019a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800019e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80001a6:	f002 020f 	and.w	r2, r2, #15
 80001aa:	1f11      	subs	r1, r2, #4
 80001ac:	9a00      	ldr	r2, [sp, #0]
 80001ae:	b2d2      	uxtb	r2, r2
 80001b0:	0112      	lsls	r2, r2, #4
 80001b2:	b2d2      	uxtb	r2, r2
 80001b4:	440b      	add	r3, r1
 80001b6:	761a      	strb	r2, [r3, #24]
 80001b8:	e00c      	b.n	80001d4 <NVIC_SetPriority+0x4c>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80001ba:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001be:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001c2:	f99d 1007 	ldrsb.w	r1, [sp, #7]
 80001c6:	9a00      	ldr	r2, [sp, #0]
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	0112      	lsls	r2, r2, #4
 80001cc:	b2d2      	uxtb	r2, r2
 80001ce:	440b      	add	r3, r1
 80001d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80001d4:	b002      	add	sp, #8
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b500      	push	{lr}
 80001da:	b083      	sub	sp, #12
 80001dc:	9001      	str	r0, [sp, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80001de:	9b01      	ldr	r3, [sp, #4]
 80001e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e4:	d301      	bcc.n	80001ea <SysTick_Config+0x12>
 80001e6:	2301      	movs	r3, #1
 80001e8:	e01a      	b.n	8000220 <SysTick_Config+0x48>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80001ea:	f24e 0310 	movw	r3, #57360	; 0xe010
 80001ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80001f2:	9a01      	ldr	r2, [sp, #4]
 80001f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80001f8:	3a01      	subs	r2, #1
 80001fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000200:	210f      	movs	r1, #15
 8000202:	f7ff ffc1 	bl	8000188 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000206:	f24e 0310 	movw	r3, #57360	; 0xe010
 800020a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800020e:	2200      	movs	r2, #0
 8000210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000212:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000216:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800021a:	2207      	movs	r2, #7
 800021c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800021e:	2300      	movs	r3, #0
}
 8000220:	4618      	mov	r0, r3
 8000222:	b003      	add	sp, #12
 8000224:	f85d fb04 	ldr.w	pc, [sp], #4

08000228 <main>:
    while (dst < &_eccm) {
        *dst++ = *src++;
    }
}

int main(void) {
 8000228:	b530      	push	{r4, r5, lr}
 800022a:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
	printf("main\n\r");
 800022e:	f243 7020 	movw	r0, #14112	; 0x3720
 8000232:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000236:	f00e f87d 	bl	800e334 <printf>
	init();
 800023a:	f000 fb4f 	bl	80008dc <init>

	unsigned char *key =  malloc( sizeof(unsigned char) * KEY_SIZE ) ;
 800023e:	2010      	movs	r0, #16
 8000240:	f00d fd10 	bl	800dc64 <malloc>
 8000244:	4603      	mov	r3, r0
 8000246:	93b0      	str	r3, [sp, #704]	; 0x2c0
	unsigned char *pt  =  malloc( sizeof(unsigned char) * PT_SIZE ) ;
 8000248:	2010      	movs	r0, #16
 800024a:	f00d fd0b 	bl	800dc64 <malloc>
 800024e:	4603      	mov	r3, r0
 8000250:	93af      	str	r3, [sp, #700]	; 0x2bc
	unsigned char *ct  =  malloc( sizeof(unsigned char) * CT_SIZE ) ;
 8000252:	2010      	movs	r0, #16
 8000254:	f00d fd06 	bl	800dc64 <malloc>
 8000258:	4603      	mov	r3, r0
 800025a:	93ae      	str	r3, [sp, #696]	; 0x2b8

	unsigned char *PTGENkey =  malloc( sizeof(unsigned char) * KEY_SIZE ) ;
 800025c:	2010      	movs	r0, #16
 800025e:	f00d fd01 	bl	800dc64 <malloc>
 8000262:	4603      	mov	r3, r0
 8000264:	93ad      	str	r3, [sp, #692]	; 0x2b4
	unsigned char *PTGENpt  =  malloc( sizeof(unsigned char) * PT_SIZE ) ;
 8000266:	2010      	movs	r0, #16
 8000268:	f00d fcfc 	bl	800dc64 <malloc>
 800026c:	4603      	mov	r3, r0
 800026e:	93ac      	str	r3, [sp, #688]	; 0x2b0
	unsigned char *PTGENct  =  malloc( sizeof(unsigned char) * CT_SIZE ) ;
 8000270:	2010      	movs	r0, #16
 8000272:	f00d fcf7 	bl	800dc64 <malloc>
 8000276:	4603      	mov	r3, r0
 8000278:	93ab      	str	r3, [sp, #684]	; 0x2ac

	int i=0; int j=0; int k=0; int dir=0; int omit=0;
 800027a:	2300      	movs	r3, #0
 800027c:	93b3      	str	r3, [sp, #716]	; 0x2cc
 800027e:	2300      	movs	r3, #0
 8000280:	93b2      	str	r3, [sp, #712]	; 0x2c8
 8000282:	2300      	movs	r3, #0
 8000284:	93b1      	str	r3, [sp, #708]	; 0x2c4
 8000286:	2300      	movs	r3, #0
 8000288:	93aa      	str	r3, [sp, #680]	; 0x2a8
 800028a:	2300      	movs	r3, #0
 800028c:	93a9      	str	r3, [sp, #676]	; 0x2a4

unsigned int *ClkCycles   =  malloc(TRACES*sizeof(unsigned int*));
 800028e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000292:	f00d fce7 	bl	800dc64 <malloc>
 8000296:	4603      	mov	r3, r0
 8000298:	93a8      	str	r3, [sp, #672]	; 0x2a0
	 // MemAllocationERROR();

/* readkey     */
 // ReadKey(key);

  char SKey[]="00000000000000000000000000000000";
 800029a:	f243 7328 	movw	r3, #14120	; 0x3728
 800029e:	f6c0 0301 	movt	r3, #2049	; 0x801
 80002a2:	ac9f      	add	r4, sp, #636	; 0x27c
 80002a4:	461d      	mov	r5, r3
 80002a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ae:	682b      	ldr	r3, [r5, #0]
 80002b0:	7023      	strb	r3, [r4, #0]
  char SPt[] ="00000000000000000000000000000000";
 80002b2:	f243 7328 	movw	r3, #14120	; 0x3728
 80002b6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80002ba:	ac96      	add	r4, sp, #600	; 0x258
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c6:	682b      	ldr	r3, [r5, #0]
 80002c8:	7023      	strb	r3, [r4, #0]
  TobyteArray(SKey,key);
 80002ca:	ab9f      	add	r3, sp, #636	; 0x27c
 80002cc:	4618      	mov	r0, r3
 80002ce:	99b0      	ldr	r1, [sp, #704]	; 0x2c0
 80002d0:	f000 fa7c 	bl	80007cc <TobyteArray>
 unsigned char keyAT[] = {
 80002d4:	f243 734c 	movw	r3, #14156	; 0x374c
 80002d8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80002dc:	ac92      	add	r4, sp, #584	; 0x248
 80002de:	6818      	ldr	r0, [r3, #0]
 80002e0:	6859      	ldr	r1, [r3, #4]
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  0x01, 0xab, 0x02, 0xcd, 0x04, 0x05, 0xef, 0x88,
   0xb2, 0xc3, 0xd4, 0xe5, 0x54, 0x76, 0x98, 0xbf,
         };
//0xb2, 0xc3, 0xd4, 0xe5, 0x54, 0x76, 0x98, 0xbf,
 unsigned char keyST[] = {
 80002e8:	ab8e      	add	r3, sp, #568	; 0x238
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	3304      	adds	r3, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	3304      	adds	r3, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	3304      	adds	r3, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	3304      	adds	r3, #4
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         };

  TobyteArray(SPt,pt);
 8000302:	ab96      	add	r3, sp, #600	; 0x258
 8000304:	4618      	mov	r0, r3
 8000306:	99af      	ldr	r1, [sp, #700]	; 0x2bc
 8000308:	f000 fa60 	bl	80007cc <TobyteArray>

 char PTGENSKey[]="00000000000000000000000000000000";
 800030c:	f243 7328 	movw	r3, #14120	; 0x3728
 8000310:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000314:	ac85      	add	r4, sp, #532	; 0x214
 8000316:	461d      	mov	r5, r3
 8000318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000320:	682b      	ldr	r3, [r5, #0]
 8000322:	7023      	strb	r3, [r4, #0]
 char PTGENSPt[] ="00000000000000000000000000000000";
 8000324:	f243 7328 	movw	r3, #14120	; 0x3728
 8000328:	f6c0 0301 	movt	r3, #2049	; 0x801
 800032c:	ac7c      	add	r4, sp, #496	; 0x1f0
 800032e:	461d      	mov	r5, r3
 8000330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000338:	682b      	ldr	r3, [r5, #0]
 800033a:	7023      	strb	r3, [r4, #0]

 TobyteArray(PTGENSKey,PTGENkey);
 800033c:	ab85      	add	r3, sp, #532	; 0x214
 800033e:	4618      	mov	r0, r3
 8000340:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
 8000342:	f000 fa43 	bl	80007cc <TobyteArray>
 TobyteArray(PTGENSPt,PTGENpt);
 8000346:	ab7c      	add	r3, sp, #496	; 0x1f0
 8000348:	4618      	mov	r0, r3
 800034a:	99ac      	ldr	r1, [sp, #688]	; 0x2b0
 800034c:	f000 fa3e 	bl	80007cc <TobyteArray>

  InitCYCCNT();
 8000350:	f000 fb3e 	bl	80009d0 <InitCYCCNT>
  unsigned int cyc[2];
  WaitSignal(0x45);
 8000354:	2045      	movs	r0, #69	; 0x45
 8000356:	f000 f8a9 	bl	80004ac <WaitSignal>
  ResetCYCCNT();
 800035a:	f000 fb4f 	bl	80009fc <ResetCYCCNT>
  StartCYCCNT();
 800035e:	f000 fb55 	bl	8000a0c <StartCYCCNT>


  /*   Init AES */
	
	 AES_KEY wctx; AES_KEY PTGENwctx;
         private_AES_set_encrypt_key(keyST, 128, &wctx);
 8000362:	aa8e      	add	r2, sp, #568	; 0x238
 8000364:	ab3d      	add	r3, sp, #244	; 0xf4
 8000366:	4610      	mov	r0, r2
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	461a      	mov	r2, r3
 800036c:	f00a fdc8 	bl	800af00 <private_AES_set_encrypt_key>
         //private_AES_set_encrypt_key(PTGENkey, 128, &PTGENwctx);

  /*  Main loop  */
 	 for(i=0;i<ROUNDS;i++){
 8000370:	2300      	movs	r3, #0
 8000372:	93b3      	str	r3, [sp, #716]	; 0x2cc
 8000374:	e094      	b.n	80004a0 <main+0x278>
 		 // encrypt TRACES number of encryptions
 		 for(j=0;j<TRACES;j++){
 8000376:	2300      	movs	r3, #0
 8000378:	93b2      	str	r3, [sp, #712]	; 0x2c8
 800037a:	e087      	b.n	800048c <main+0x264>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800037c:	b672      	cpsid	i
 			 //Generate PT
			//pt[15] = pt[15]+1;
 			 //save data
			__disable_irq();
  			ResetCYCCNT();
 800037e:	f000 fb3d 	bl	80009fc <ResetCYCCNT>
 			cyc[0]= *DWT_CYCCNT;
 8000382:	f240 0300 	movw	r3, #0
 8000386:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	937a      	str	r3, [sp, #488]	; 0x1e8

 			 //Encrypt
 			//AES_encrypt(pt, ct, &wctx);  
			AES_encrypt(pt, ct, &wctx);  
 8000390:	ab3d      	add	r3, sp, #244	; 0xf4
 8000392:	98af      	ldr	r0, [sp, #700]	; 0x2bc
 8000394:	99ae      	ldr	r1, [sp, #696]	; 0x2b8
 8000396:	461a      	mov	r2, r3
 8000398:	f00b f86a 	bl	800b470 <AES_encrypt>
			//aes_crypt_ecb(&aes, AES_ENCRYPT, pt, ct);
			
			
 			cyc[1]=*DWT_CYCCNT;
 800039c:	f240 0300 	movw	r3, #0
 80003a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	937b      	str	r3, [sp, #492]	; 0x1ec
 			ClkCycles[j] = cyc[1]-cyc[0];
 80003aa:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	9aa8      	ldr	r2, [sp, #672]	; 0x2a0
 80003b0:	4413      	add	r3, r2
 80003b2:	997b      	ldr	r1, [sp, #492]	; 0x1ec
 80003b4:	9a7a      	ldr	r2, [sp, #488]	; 0x1e8
 80003b6:	1a8a      	subs	r2, r1, r2
 80003b8:	601a      	str	r2, [r3, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80003ba:	b662      	cpsie	i
				//pt[k]=ct[k];
		
				// } 

			//AES_encrypt(PTGENpt, PTGENct, &PTGENwctx); 
			 AES128_ECB_encrypt(PTGENpt, PTGENkey, PTGENct);
 80003bc:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
 80003be:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
 80003c0:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 80003c2:	f00b ff81 	bl	800c2c8 <AES128_ECB_encrypt>
			for (k = 0; k < CT_SIZE; k++) { PTGENpt[k]= PTGENct[k];  }
 80003c6:	2300      	movs	r3, #0
 80003c8:	93b1      	str	r3, [sp, #708]	; 0x2c4
 80003ca:	e00a      	b.n	80003e2 <main+0x1ba>
 80003cc:	9bb1      	ldr	r3, [sp, #708]	; 0x2c4
 80003ce:	9aac      	ldr	r2, [sp, #688]	; 0x2b0
 80003d0:	4413      	add	r3, r2
 80003d2:	9ab1      	ldr	r2, [sp, #708]	; 0x2c4
 80003d4:	99ab      	ldr	r1, [sp, #684]	; 0x2ac
 80003d6:	440a      	add	r2, r1
 80003d8:	7812      	ldrb	r2, [r2, #0]
 80003da:	701a      	strb	r2, [r3, #0]
 80003dc:	9bb1      	ldr	r3, [sp, #708]	; 0x2c4
 80003de:	3301      	adds	r3, #1
 80003e0:	93b1      	str	r3, [sp, #708]	; 0x2c4
 80003e2:	9bb1      	ldr	r3, [sp, #708]	; 0x2c4
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	ddf1      	ble.n	80003cc <main+0x1a4>
			pt[0]= PTGENct[0]; 
 80003e8:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
 80003ea:	781a      	ldrb	r2, [r3, #0]
 80003ec:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 80003ee:	701a      	strb	r2, [r3, #0]
			pt[5]= PTGENct[5]; 
 80003f0:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 80003f2:	3305      	adds	r3, #5
 80003f4:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 80003f6:	7952      	ldrb	r2, [r2, #5]
 80003f8:	701a      	strb	r2, [r3, #0]
			pt[10]= PTGENct[10]; 
 80003fa:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 80003fc:	330a      	adds	r3, #10
 80003fe:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000400:	7a92      	ldrb	r2, [r2, #10]
 8000402:	701a      	strb	r2, [r3, #0]
			pt[15]= PTGENct[15];  
 8000404:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000406:	330f      	adds	r3, #15
 8000408:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 800040a:	7bd2      	ldrb	r2, [r2, #15]
 800040c:	701a      	strb	r2, [r3, #0]
 
			pt[1]= PTGENct[1];
 800040e:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000410:	3301      	adds	r3, #1
 8000412:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000414:	7852      	ldrb	r2, [r2, #1]
 8000416:	701a      	strb	r2, [r3, #0]
			pt[6]= PTGENct[6];
 8000418:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 800041a:	3306      	adds	r3, #6
 800041c:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 800041e:	7992      	ldrb	r2, [r2, #6]
 8000420:	701a      	strb	r2, [r3, #0]
			pt[11]= PTGENct[11];
 8000422:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000424:	330b      	adds	r3, #11
 8000426:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000428:	7ad2      	ldrb	r2, [r2, #11]
 800042a:	701a      	strb	r2, [r3, #0]
			pt[12]= PTGENct[12];
 800042c:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 800042e:	330c      	adds	r3, #12
 8000430:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000432:	7b12      	ldrb	r2, [r2, #12]
 8000434:	701a      	strb	r2, [r3, #0]

			pt[2]= PTGENct[2]; 
 8000436:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000438:	3302      	adds	r3, #2
 800043a:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 800043c:	7892      	ldrb	r2, [r2, #2]
 800043e:	701a      	strb	r2, [r3, #0]
			pt[8]= PTGENct[8]; 
 8000440:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000442:	3308      	adds	r3, #8
 8000444:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000446:	7a12      	ldrb	r2, [r2, #8]
 8000448:	701a      	strb	r2, [r3, #0]
			pt[7]= PTGENct[7];
 800044a:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 800044c:	3307      	adds	r3, #7
 800044e:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000450:	79d2      	ldrb	r2, [r2, #7]
 8000452:	701a      	strb	r2, [r3, #0]
			pt[13]= PTGENct[13];
 8000454:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000456:	330d      	adds	r3, #13
 8000458:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 800045a:	7b52      	ldrb	r2, [r2, #13]
 800045c:	701a      	strb	r2, [r3, #0]

			pt[3]= PTGENct[3]; 
 800045e:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000460:	3303      	adds	r3, #3
 8000462:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000464:	78d2      	ldrb	r2, [r2, #3]
 8000466:	701a      	strb	r2, [r3, #0]
			pt[4]= PTGENct[4];
 8000468:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 800046a:	3304      	adds	r3, #4
 800046c:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	701a      	strb	r2, [r3, #0]
			pt[9]= PTGENct[9];
 8000472:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 8000474:	3309      	adds	r3, #9
 8000476:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000478:	7a52      	ldrb	r2, [r2, #9]
 800047a:	701a      	strb	r2, [r3, #0]
			pt[14]= PTGENct[14];		
 800047c:	9baf      	ldr	r3, [sp, #700]	; 0x2bc
 800047e:	330e      	adds	r3, #14
 8000480:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
 8000482:	7b92      	ldrb	r2, [r2, #14]
 8000484:	701a      	strb	r2, [r3, #0]
         //private_AES_set_encrypt_key(PTGENkey, 128, &PTGENwctx);

  /*  Main loop  */
 	 for(i=0;i<ROUNDS;i++){
 		 // encrypt TRACES number of encryptions
 		 for(j=0;j<TRACES;j++){
 8000486:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 8000488:	3301      	adds	r3, #1
 800048a:	93b2      	str	r3, [sp, #712]	; 0x2c8
 800048c:	9bb2      	ldr	r3, [sp, #712]	; 0x2c8
 800048e:	2bff      	cmp	r3, #255	; 0xff
 8000490:	f77f af74 	ble.w	800037c <main+0x154>

 		 }

 		 // send data to PC
 	//	SendData(CTtraces, start, end, TRACES);
 	if	(SendDataCCycles(ClkCycles)==1);// ComunicationPC2BoardERROR() ;
 8000494:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8000496:	f000 f85b 	bl	8000550 <SendDataCCycles>
	 AES_KEY wctx; AES_KEY PTGENwctx;
         private_AES_set_encrypt_key(keyST, 128, &wctx);
         //private_AES_set_encrypt_key(PTGENkey, 128, &PTGENwctx);

  /*  Main loop  */
 	 for(i=0;i<ROUNDS;i++){
 800049a:	9bb3      	ldr	r3, [sp, #716]	; 0x2cc
 800049c:	3301      	adds	r3, #1
 800049e:	93b3      	str	r3, [sp, #716]	; 0x2cc
 80004a0:	9bb3      	ldr	r3, [sp, #716]	; 0x2cc
 80004a2:	f5b3 1ffa 	cmp.w	r3, #2048000	; 0x1f4000
 80004a6:	f6ff af66 	blt.w	8000376 <main+0x14e>
 	//	SendData(CTtraces, start, end, TRACES);
 	if	(SendDataCCycles(ClkCycles)==1);// ComunicationPC2BoardERROR() ;
		//SendDataCCyclesandCT(ClkCycles, ctData);
 	 }

 	while (1);
 80004aa:	e7fe      	b.n	80004aa <main+0x282>

080004ac <WaitSignal>:
	
	return 0;
}

/* wait for the signal from the computer */
unsigned int WaitSignal(uint8_t c){
 80004ac:	b500      	push	{lr}
 80004ae:	b085      	sub	sp, #20
 80004b0:	4603      	mov	r3, r0
 80004b2:	f88d 3007 	strb.w	r3, [sp, #7]
	  uint8_t  read;
		int i=0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	9303      	str	r3, [sp, #12]
		while(1){
			 //while(TM_USB_VCP_BufferEmpty==0);
			if(VCP_get_char(&read) >0 && read==c) // if some data arrived
 80004ba:	f10d 030b 	add.w	r3, sp, #11
 80004be:	4618      	mov	r0, r3
 80004c0:	f007 ff26 	bl	8008310 <VCP_get_char>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dd07      	ble.n	80004da <WaitSignal+0x2e>
 80004ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80004ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d101      	bne.n	80004da <WaitSignal+0x2e>
						return 0;	// and that data is 'c'
 80004d6:	2300      	movs	r3, #0
 80004d8:	e035      	b.n	8000546 <WaitSignal+0x9a>
			else
				fifty_nop  //some delay
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	bf00      	nop
			i++;
 800053e:	9b03      	ldr	r3, [sp, #12]
 8000540:	3301      	adds	r3, #1
 8000542:	9303      	str	r3, [sp, #12]
		}
 8000544:	e7b9      	b.n	80004ba <WaitSignal+0xe>
		return 1;
}
 8000546:	4618      	mov	r0, r3
 8000548:	b005      	add	sp, #20
 800054a:	f85d fb04 	ldr.w	pc, [sp], #4
 800054e:	bf00      	nop

08000550 <SendDataCCycles>:
unsigned int SendDataCCycles(unsigned int *CCyles){
 8000550:	b500      	push	{lr}
 8000552:	b085      	sub	sp, #20
 8000554:	9001      	str	r0, [sp, #4]

	int i=0;
 8000556:	2300      	movs	r3, #0
 8000558:	9303      	str	r3, [sp, #12]
	GPIO_SetBits(GPIOD, GPIO_Pin_13);
 800055a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800055e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	f008 fe39 	bl	80091dc <GPIO_SetBits>
	
	for(i=0;i<TRACES;i++){
 800056a:	2300      	movs	r3, #0
 800056c:	9303      	str	r3, [sp, #12]
 800056e:	e029      	b.n	80005c4 <SendDataCCycles+0x74>

		VCP_put_char((CCyles[i] >>24)&0xff);
 8000570:	9b03      	ldr	r3, [sp, #12]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	9a01      	ldr	r2, [sp, #4]
 8000576:	4413      	add	r3, r2
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	0e1b      	lsrs	r3, r3, #24
 800057c:	b2db      	uxtb	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	f007 fe18 	bl	80081b4 <VCP_put_char>
			//return 1;
		VCP_put_char((CCyles[i] >>16)&0xff);
 8000584:	9b03      	ldr	r3, [sp, #12]
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	9a01      	ldr	r2, [sp, #4]
 800058a:	4413      	add	r3, r2
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	b2db      	uxtb	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f007 fe0e 	bl	80081b4 <VCP_put_char>
			//return 1;
		VCP_put_char((CCyles[i] >>8)&0xff);
 8000598:	9b03      	ldr	r3, [sp, #12]
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	9a01      	ldr	r2, [sp, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f007 fe04 	bl	80081b4 <VCP_put_char>
			//return 1;
		VCP_put_char((CCyles[i] >>0)&0xff);
 80005ac:	9b03      	ldr	r3, [sp, #12]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	9a01      	ldr	r2, [sp, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f007 fdfb 	bl	80081b4 <VCP_put_char>
unsigned int SendDataCCycles(unsigned int *CCyles){

	int i=0;
	GPIO_SetBits(GPIOD, GPIO_Pin_13);
	
	for(i=0;i<TRACES;i++){
 80005be:	9b03      	ldr	r3, [sp, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	9303      	str	r3, [sp, #12]
 80005c4:	9b03      	ldr	r3, [sp, #12]
 80005c6:	2bff      	cmp	r3, #255	; 0xff
 80005c8:	ddd2      	ble.n	8000570 <SendDataCCycles+0x20>
			//return 1;
		VCP_put_char((CCyles[i] >>0)&0xff);
			//return 1;
		 // WaitSignal(0x46);
	}
	GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 80005ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80005ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	f008 fe03 	bl	80091e0 <GPIO_ResetBits>
for(i=0;i<TRACES*1000;i++);
 80005da:	2300      	movs	r3, #0
 80005dc:	9303      	str	r3, [sp, #12]
 80005de:	e002      	b.n	80005e6 <SendDataCCycles+0x96>
 80005e0:	9b03      	ldr	r3, [sp, #12]
 80005e2:	3301      	adds	r3, #1
 80005e4:	9303      	str	r3, [sp, #12]
 80005e6:	9b03      	ldr	r3, [sp, #12]
 80005e8:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
 80005ec:	dbf8      	blt.n	80005e0 <SendDataCCycles+0x90>
	return 0;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	b005      	add	sp, #20
 80005f4:	f85d fb04 	ldr.w	pc, [sp], #4

080005f8 <SendDataCCyclesandCT>:

unsigned int SendDataCCyclesandCT(unsigned int *CCyles, unsigned char * Data){
 80005f8:	b500      	push	{lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	9001      	str	r0, [sp, #4]
 80005fe:	9100      	str	r1, [sp, #0]

	int i=0; int j=0;
 8000600:	2300      	movs	r3, #0
 8000602:	9303      	str	r3, [sp, #12]
 8000604:	2300      	movs	r3, #0
 8000606:	9302      	str	r3, [sp, #8]
	GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000608:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800060c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000614:	f008 fde2 	bl	80091dc <GPIO_SetBits>
	
	for(i=0;i<TRACES;i++){
 8000618:	2300      	movs	r3, #0
 800061a:	9303      	str	r3, [sp, #12]
 800061c:	e0b8      	b.n	8000790 <SendDataCCyclesandCT+0x198>

		VCP_put_char((CCyles[i] >>24)&0xff);
 800061e:	9b03      	ldr	r3, [sp, #12]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	9a01      	ldr	r2, [sp, #4]
 8000624:	4413      	add	r3, r2
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	0e1b      	lsrs	r3, r3, #24
 800062a:	b2db      	uxtb	r3, r3
 800062c:	4618      	mov	r0, r3
 800062e:	f007 fdc1 	bl	80081b4 <VCP_put_char>
			//return 1;
		VCP_put_char((CCyles[i] >>16)&0xff);
 8000632:	9b03      	ldr	r3, [sp, #12]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	9a01      	ldr	r2, [sp, #4]
 8000638:	4413      	add	r3, r2
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	0c1b      	lsrs	r3, r3, #16
 800063e:	b2db      	uxtb	r3, r3
 8000640:	4618      	mov	r0, r3
 8000642:	f007 fdb7 	bl	80081b4 <VCP_put_char>
			//return 1;
		VCP_put_char((CCyles[i] >>8)&0xff);
 8000646:	9b03      	ldr	r3, [sp, #12]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	9a01      	ldr	r2, [sp, #4]
 800064c:	4413      	add	r3, r2
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	f007 fdad 	bl	80081b4 <VCP_put_char>
			//return 1;
		VCP_put_char((CCyles[i] >>0)&0xff);
 800065a:	9b03      	ldr	r3, [sp, #12]
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	9a01      	ldr	r2, [sp, #4]
 8000660:	4413      	add	r3, r2
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f007 fda4 	bl	80081b4 <VCP_put_char>
			//return 1;
		//for(j=0;j<16;j++)
		VCP_put_char(Data[i*CT_SIZE+0]);
 800066c:	9b03      	ldr	r3, [sp, #12]
 800066e:	011b      	lsls	r3, r3, #4
 8000670:	9a00      	ldr	r2, [sp, #0]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f007 fd9c 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+1]);
 800067c:	9b03      	ldr	r3, [sp, #12]
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	3301      	adds	r3, #1
 8000682:	9a00      	ldr	r2, [sp, #0]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f007 fd93 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+2]);
 800068e:	9b03      	ldr	r3, [sp, #12]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	3302      	adds	r3, #2
 8000694:	9a00      	ldr	r2, [sp, #0]
 8000696:	4413      	add	r3, r2
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f007 fd8a 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+3]);
 80006a0:	9b03      	ldr	r3, [sp, #12]
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	3303      	adds	r3, #3
 80006a6:	9a00      	ldr	r2, [sp, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 fd81 	bl	80081b4 <VCP_put_char>

		VCP_put_char(Data[i*CT_SIZE+4]);
 80006b2:	9b03      	ldr	r3, [sp, #12]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	3304      	adds	r3, #4
 80006b8:	9a00      	ldr	r2, [sp, #0]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 fd78 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+5]);
 80006c4:	9b03      	ldr	r3, [sp, #12]
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	3305      	adds	r3, #5
 80006ca:	9a00      	ldr	r2, [sp, #0]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f007 fd6f 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+6]);
 80006d6:	9b03      	ldr	r3, [sp, #12]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	3306      	adds	r3, #6
 80006dc:	9a00      	ldr	r2, [sp, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 fd66 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+7]);
 80006e8:	9b03      	ldr	r3, [sp, #12]
 80006ea:	011b      	lsls	r3, r3, #4
 80006ec:	3307      	adds	r3, #7
 80006ee:	9a00      	ldr	r2, [sp, #0]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f007 fd5d 	bl	80081b4 <VCP_put_char>

		VCP_put_char(Data[i*CT_SIZE+8]);
 80006fa:	9b03      	ldr	r3, [sp, #12]
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	3308      	adds	r3, #8
 8000700:	9a00      	ldr	r2, [sp, #0]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f007 fd54 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+9]);
 800070c:	9b03      	ldr	r3, [sp, #12]
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	3309      	adds	r3, #9
 8000712:	9a00      	ldr	r2, [sp, #0]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f007 fd4b 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+10]);
 800071e:	9b03      	ldr	r3, [sp, #12]
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	330a      	adds	r3, #10
 8000724:	9a00      	ldr	r2, [sp, #0]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f007 fd42 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+11]);
 8000730:	9b03      	ldr	r3, [sp, #12]
 8000732:	011b      	lsls	r3, r3, #4
 8000734:	330b      	adds	r3, #11
 8000736:	9a00      	ldr	r2, [sp, #0]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f007 fd39 	bl	80081b4 <VCP_put_char>

		VCP_put_char(Data[i*CT_SIZE+12]);
 8000742:	9b03      	ldr	r3, [sp, #12]
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	330c      	adds	r3, #12
 8000748:	9a00      	ldr	r2, [sp, #0]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f007 fd30 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+13]);
 8000754:	9b03      	ldr	r3, [sp, #12]
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	330d      	adds	r3, #13
 800075a:	9a00      	ldr	r2, [sp, #0]
 800075c:	4413      	add	r3, r2
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f007 fd27 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+14]);
 8000766:	9b03      	ldr	r3, [sp, #12]
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	330e      	adds	r3, #14
 800076c:	9a00      	ldr	r2, [sp, #0]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f007 fd1e 	bl	80081b4 <VCP_put_char>
		VCP_put_char(Data[i*CT_SIZE+15]);
 8000778:	9b03      	ldr	r3, [sp, #12]
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	330f      	adds	r3, #15
 800077e:	9a00      	ldr	r2, [sp, #0]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f007 fd15 	bl	80081b4 <VCP_put_char>
unsigned int SendDataCCyclesandCT(unsigned int *CCyles, unsigned char * Data){

	int i=0; int j=0;
	GPIO_SetBits(GPIOD, GPIO_Pin_13);
	
	for(i=0;i<TRACES;i++){
 800078a:	9b03      	ldr	r3, [sp, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	9303      	str	r3, [sp, #12]
 8000790:	9b03      	ldr	r3, [sp, #12]
 8000792:	2bff      	cmp	r3, #255	; 0xff
 8000794:	f77f af43 	ble.w	800061e <SendDataCCyclesandCT+0x26>
		VCP_put_char(Data[i*CT_SIZE+14]);
		VCP_put_char(Data[i*CT_SIZE+15]);

		 //WaitSignal(0x46);
	}
	GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 8000798:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800079c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	f008 fd1c 	bl	80091e0 <GPIO_ResetBits>
	for(i=0;i<TRACES*10000;i++);  // for windows 7
 80007a8:	2300      	movs	r3, #0
 80007aa:	9303      	str	r3, [sp, #12]
 80007ac:	e002      	b.n	80007b4 <SendDataCCyclesandCT+0x1bc>
 80007ae:	9b03      	ldr	r3, [sp, #12]
 80007b0:	3301      	adds	r3, #1
 80007b2:	9303      	str	r3, [sp, #12]
 80007b4:	9a03      	ldr	r2, [sp, #12]
 80007b6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80007ba:	f2c0 0327 	movt	r3, #39	; 0x27
 80007be:	429a      	cmp	r2, r3
 80007c0:	ddf5      	ble.n	80007ae <SendDataCCyclesandCT+0x1b6>
	//for(i=0;i<TRACES*100;i++);
	return 0;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	b005      	add	sp, #20
 80007c8:	f85d fb04 	ldr.w	pc, [sp], #4

080007cc <TobyteArray>:

void TobyteArray(char *CharString, unsigned char *UCharArray ){
 80007cc:	b086      	sub	sp, #24
 80007ce:	9001      	str	r0, [sp, #4]
 80007d0:	9100      	str	r1, [sp, #0]

	 unsigned int i, t, hn, ln;

	    for (t = 0,i = 0; i < KEY_SIZE * 2 ; i+=2,++t) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	9304      	str	r3, [sp, #16]
 80007d6:	2300      	movs	r3, #0
 80007d8:	9305      	str	r3, [sp, #20]
 80007da:	e03e      	b.n	800085a <TobyteArray+0x8e>

	            hn = CharString[i] > '9' ? (CharString[i]|32) - 'a' + 10 : CharString[i] - '0';
 80007dc:	9a01      	ldr	r2, [sp, #4]
 80007de:	9b05      	ldr	r3, [sp, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b39      	cmp	r3, #57	; 0x39
 80007e6:	d908      	bls.n	80007fa <TobyteArray+0x2e>
 80007e8:	9a01      	ldr	r2, [sp, #4]
 80007ea:	9b05      	ldr	r3, [sp, #20]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	3b57      	subs	r3, #87	; 0x57
 80007f8:	e004      	b.n	8000804 <TobyteArray+0x38>
 80007fa:	9a01      	ldr	r2, [sp, #4]
 80007fc:	9b05      	ldr	r3, [sp, #20]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3b30      	subs	r3, #48	; 0x30
 8000804:	9303      	str	r3, [sp, #12]
	            ln = CharString[i+1] > '9' ? (CharString[i+1]|32) - 'a' + 10 : CharString[i+1] - '0';
 8000806:	9b05      	ldr	r3, [sp, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	9a01      	ldr	r2, [sp, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b39      	cmp	r3, #57	; 0x39
 8000812:	d909      	bls.n	8000828 <TobyteArray+0x5c>
 8000814:	9b05      	ldr	r3, [sp, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	9a01      	ldr	r2, [sp, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f043 0320 	orr.w	r3, r3, #32
 8000822:	b2db      	uxtb	r3, r3
 8000824:	3b57      	subs	r3, #87	; 0x57
 8000826:	e005      	b.n	8000834 <TobyteArray+0x68>
 8000828:	9b05      	ldr	r3, [sp, #20]
 800082a:	3301      	adds	r3, #1
 800082c:	9a01      	ldr	r2, [sp, #4]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	3b30      	subs	r3, #48	; 0x30
 8000834:	9302      	str	r3, [sp, #8]

	            UCharArray[t] = (hn << 4 ) | ln;
 8000836:	9a00      	ldr	r2, [sp, #0]
 8000838:	9b04      	ldr	r3, [sp, #16]
 800083a:	4413      	add	r3, r2
 800083c:	9a03      	ldr	r2, [sp, #12]
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d1      	uxtb	r1, r2
 8000844:	9a02      	ldr	r2, [sp, #8]
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	430a      	orrs	r2, r1
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	701a      	strb	r2, [r3, #0]

void TobyteArray(char *CharString, unsigned char *UCharArray ){

	 unsigned int i, t, hn, ln;

	    for (t = 0,i = 0; i < KEY_SIZE * 2 ; i+=2,++t) {
 800084e:	9b05      	ldr	r3, [sp, #20]
 8000850:	3302      	adds	r3, #2
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	9b04      	ldr	r3, [sp, #16]
 8000856:	3301      	adds	r3, #1
 8000858:	9304      	str	r3, [sp, #16]
 800085a:	9b05      	ldr	r3, [sp, #20]
 800085c:	2b1f      	cmp	r3, #31
 800085e:	d9bd      	bls.n	80007dc <TobyteArray+0x10>
	            hn = CharString[i] > '9' ? (CharString[i]|32) - 'a' + 10 : CharString[i] - '0';
	            ln = CharString[i+1] > '9' ? (CharString[i+1]|32) - 'a' + 10 : CharString[i+1] - '0';

	            UCharArray[t] = (hn << 4 ) | ln;
	    }
	 return ;
 8000860:	bf00      	nop

}
 8000862:	b006      	add	sp, #24
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop

08000868 <calculation_test>:

void calculation_test() {
 8000868:	b500      	push	{lr}
 800086a:	b0ab      	sub	sp, #172	; 0xac
    for(;;) {

		//#if defined(__UART__)
		char x[100]={0};
 800086c:	aa11      	add	r2, sp, #68	; 0x44
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	4610      	mov	r0, r2
 8000872:	2100      	movs	r1, #0
 8000874:	461a      	mov	r2, r3
 8000876:	f00d fcff 	bl	800e278 <memset>
		char y[65]={0};
 800087a:	466a      	mov	r2, sp
 800087c:	2341      	movs	r3, #65	; 0x41
 800087e:	4610      	mov	r0, r2
 8000880:	2100      	movs	r1, #0
 8000882:	461a      	mov	r2, r3
 8000884:	f00d fcf8 	bl	800e278 <memset>
		
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8000888:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800088c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000894:	f008 fca2 	bl	80091dc <GPIO_SetBits>
		fgets(x,65,stdin); //get point coordinates from usb port
 8000898:	f240 5388 	movw	r3, #1416	; 0x588
 800089c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	aa11      	add	r2, sp, #68	; 0x44
 80008a6:	4610      	mov	r0, r2
 80008a8:	2141      	movs	r1, #65	; 0x41
 80008aa:	461a      	mov	r2, r3
 80008ac:	f00c ffb0 	bl	800d810 <fgets>
		fgets(y,65,stdin);
 80008b0:	f240 5388 	movw	r3, #1416	; 0x588
 80008b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	466a      	mov	r2, sp
 80008be:	4610      	mov	r0, r2
 80008c0:	2141      	movs	r1, #65	; 0x41
 80008c2:	461a      	mov	r2, r3
 80008c4:	f00c ffa4 	bl	800d810 <fgets>
		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 80008c8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80008cc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80008d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d4:	f008 fc84 	bl	80091e0 <GPIO_ResetBits>
		
		
		//code start here
  
	}
 80008d8:	e7c8      	b.n	800086c <calculation_test+0x4>
 80008da:	bf00      	nop

080008dc <init>:
}

void init() {
 80008dc:	b500      	push	{lr}
 80008de:	b085      	sub	sp, #20
	GPIO_InitTypeDef  GPIO_InitStructure;
	// ---------- SysTick timer -------- //
	if (SysTick_Config(SystemCoreClock / 1000)) {
 80008e0:	f240 0318 	movw	r3, #24
 80008e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80008ee:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80008f2:	fba3 1302 	umull	r1, r3, r3, r2
 80008f6:	099b      	lsrs	r3, r3, #6
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc6d 	bl	80001d8 <SysTick_Config>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d000      	beq.n	8000906 <init+0x2a>
		// Capture error
		while (1){};
 8000904:	e7fe      	b.n	8000904 <init+0x28>
	}
	// ---------- GPIO -------- //
	// GPIOD Periph clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000906:	2008      	movs	r0, #8
 8000908:	2101      	movs	r1, #1
 800090a:	f008 f9a5 	bl	8008c58 <RCC_AHB1PeriphClockCmd>
	// Configure PD12, PD13, PD14 and PD15 in output pushpull mode
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 800090e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000912:	9302      	str	r3, [sp, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000914:	2301      	movs	r3, #1
 8000916:	f88d 300c 	strb.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800091a:	2300      	movs	r3, #0
 800091c:	f88d 300e 	strb.w	r3, [sp, #14]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000920:	2303      	movs	r3, #3
 8000922:	f88d 300d 	strb.w	r3, [sp, #13]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 800092c:	ab02      	add	r3, sp, #8
 800092e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000932:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000936:	4619      	mov	r1, r3
 8000938:	f008 fbc0 	bl	80090bc <GPIO_Init>

	// ------------- USB -------------- //
 USBD_Init(&USB_OTG_dev,
 800093c:	f240 032c 	movw	r3, #44	; 0x2c
 8000940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	f640 30e0 	movw	r0, #3040	; 0xbe0
 800094a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800094e:	2101      	movs	r1, #1
 8000950:	f240 0264 	movw	r2, #100	; 0x64
 8000954:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000958:	f240 132c 	movw	r3, #300	; 0x12c
 800095c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000960:	f008 fd5c 	bl	800941c <USBD_Init>
	/* Return OK */
	//return TM_USB_VCP_OK;



}
 8000964:	b005      	add	sp, #20
 8000966:	f85d fb04 	ldr.w	pc, [sp], #4
 800096a:	bf00      	nop

0800096c <timing_handler>:
/*
 * Called from systick handler
 */

void timing_handler() {
	if (time_var1) {
 800096c:	f640 33d8 	movw	r3, #3032	; 0xbd8
 8000970:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00a      	beq.n	8000990 <timing_handler+0x24>
		time_var1--;
 800097a:	f640 33d8 	movw	r3, #3032	; 0xbd8
 800097e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	f640 33d8 	movw	r3, #3032	; 0xbd8
 800098a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800098e:	601a      	str	r2, [r3, #0]
	}
	time_var2++;
 8000990:	f640 33dc 	movw	r3, #3036	; 0xbdc
 8000994:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	f640 33dc 	movw	r3, #3036	; 0xbdc
 80009a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	4770      	bx	lr

080009a8 <Delay>:
void Delay(volatile uint32_t nCount) {
 80009a8:	b082      	sub	sp, #8
 80009aa:	9001      	str	r0, [sp, #4]
	time_var1 = nCount;
 80009ac:	9a01      	ldr	r2, [sp, #4]
 80009ae:	f640 33d8 	movw	r3, #3032	; 0xbd8
 80009b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009b6:	601a      	str	r2, [r3, #0]
	while(time_var1){};
 80009b8:	bf00      	nop
 80009ba:	f640 33d8 	movw	r3, #3032	; 0xbd8
 80009be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f8      	bne.n	80009ba <Delay+0x12>
}
 80009c8:	b002      	add	sp, #8
 80009ca:	4770      	bx	lr

080009cc <_init>:

void _init() {

}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <InitCYCCNT>:

/* Initialize Counter */
void InitCYCCNT(){
	    *SCB_DEMCR = *SCB_DEMCR | 0x01000000;
 80009d0:	f240 0308 	movw	r3, #8
 80009d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	f240 0308 	movw	r3, #8
 80009de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ea:	6013      	str	r3, [r2, #0]
		*DWT_CYCCNT = 0; // reset the counter
 80009ec:	f240 0300 	movw	r3, #0
 80009f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	4770      	bx	lr

080009fc <ResetCYCCNT>:

/* Initialize Counter */
void ResetCYCCNT(){
		*DWT_CYCCNT = 0; // reset the counter
 80009fc:	f240 0300 	movw	r3, #0
 8000a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
}
 8000a0a:	4770      	bx	lr

08000a0c <StartCYCCNT>:

/* start counter */
void StartCYCCNT(){
		*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 8000a0c:	f240 0304 	movw	r3, #4
 8000a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f240 0304 	movw	r3, #4
 8000a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <ReadCYCCNT>:

/* start counter */
uint32_t  ReadCYCCNT(){
	return *DWT_CYCCNT;
 8000a2c:	f240 0300 	movw	r3, #0
 8000a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	4770      	bx	lr

08000a3c <gmp_die>:


/* Memory allocation and other helper functions. */
static void
gmp_die (const char *msg)
{
 8000a3c:	b500      	push	{lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	9001      	str	r0, [sp, #4]
  fprintf (stderr, "%s\n", msg);
 8000a42:	f240 5388 	movw	r3, #1416	; 0x588
 8000a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f243 7160 	movw	r1, #14176	; 0x3760
 8000a54:	f6c0 0101 	movt	r1, #2049	; 0x801
 8000a58:	9a01      	ldr	r2, [sp, #4]
 8000a5a:	f00d f82d 	bl	800dab8 <fprintf>
  abort();
 8000a5e:	f00c fe57 	bl	800d710 <abort>
 8000a62:	bf00      	nop

08000a64 <gmp_default_alloc>:
}

static void *
gmp_default_alloc (size_t size)
{
 8000a64:	b500      	push	{lr}
 8000a66:	b085      	sub	sp, #20
 8000a68:	9001      	str	r0, [sp, #4]
  void *p;

  assert (size > 0);
 8000a6a:	9b01      	ldr	r3, [sp, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10e      	bne.n	8000a8e <gmp_default_alloc+0x2a>
 8000a70:	f243 7064 	movw	r0, #14180	; 0x3764
 8000a74:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000a78:	21ff      	movs	r1, #255	; 0xff
 8000a7a:	f643 426c 	movw	r2, #15468	; 0x3c6c
 8000a7e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8000a82:	f243 7374 	movw	r3, #14196	; 0x3774
 8000a86:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000a8a:	f00c fe49 	bl	800d720 <__assert_func>

  p = malloc (size);
 8000a8e:	9801      	ldr	r0, [sp, #4]
 8000a90:	f00d f8e8 	bl	800dc64 <malloc>
 8000a94:	4603      	mov	r3, r0
 8000a96:	9303      	str	r3, [sp, #12]
  if (!p)
 8000a98:	9b03      	ldr	r3, [sp, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d105      	bne.n	8000aaa <gmp_default_alloc+0x46>
    gmp_die("gmp_default_alloc: Virtual memory exhausted.");
 8000a9e:	f243 7080 	movw	r0, #14208	; 0x3780
 8000aa2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000aa6:	f7ff ffc9 	bl	8000a3c <gmp_die>

  return p;
 8000aaa:	9b03      	ldr	r3, [sp, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	b005      	add	sp, #20
 8000ab0:	f85d fb04 	ldr.w	pc, [sp], #4

08000ab4 <gmp_default_realloc>:

static void *
gmp_default_realloc (void *old, size_t old_size, size_t new_size)
{
 8000ab4:	b500      	push	{lr}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	9003      	str	r0, [sp, #12]
 8000aba:	9102      	str	r1, [sp, #8]
 8000abc:	9201      	str	r2, [sp, #4]
  mp_ptr p;

  p = realloc (old, new_size);
 8000abe:	9803      	ldr	r0, [sp, #12]
 8000ac0:	9901      	ldr	r1, [sp, #4]
 8000ac2:	f00d fc4b 	bl	800e35c <realloc>
 8000ac6:	9005      	str	r0, [sp, #20]

  if (!p)
 8000ac8:	9b05      	ldr	r3, [sp, #20]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d105      	bne.n	8000ada <gmp_default_realloc+0x26>
    gmp_die("gmp_default_realoc: Virtual memory exhausted.");
 8000ace:	f243 70b0 	movw	r0, #14256	; 0x37b0
 8000ad2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000ad6:	f7ff ffb1 	bl	8000a3c <gmp_die>

  return p;
 8000ada:	9b05      	ldr	r3, [sp, #20]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	b007      	add	sp, #28
 8000ae0:	f85d fb04 	ldr.w	pc, [sp], #4

08000ae4 <gmp_default_free>:

static void
gmp_default_free (void *p, size_t size)
{
 8000ae4:	b500      	push	{lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	9001      	str	r0, [sp, #4]
 8000aea:	9100      	str	r1, [sp, #0]
  free (p);
 8000aec:	9801      	ldr	r0, [sp, #4]
 8000aee:	f00d f8c1 	bl	800dc74 <free>
}
 8000af2:	b003      	add	sp, #12
 8000af4:	f85d fb04 	ldr.w	pc, [sp], #4

08000af8 <mp_get_memory_functions>:

void
mp_get_memory_functions (void *(**alloc_func) (size_t),
			 void *(**realloc_func) (void *, size_t, size_t),
			 void (**free_func) (void *, size_t))
{
 8000af8:	b084      	sub	sp, #16
 8000afa:	9003      	str	r0, [sp, #12]
 8000afc:	9102      	str	r1, [sp, #8]
 8000afe:	9201      	str	r2, [sp, #4]
  if (alloc_func)
 8000b00:	9b03      	ldr	r3, [sp, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <mp_get_memory_functions+0x1c>
    *alloc_func = gmp_allocate_func;
 8000b06:	f240 030c 	movw	r3, #12
 8000b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	9b03      	ldr	r3, [sp, #12]
 8000b12:	601a      	str	r2, [r3, #0]

  if (realloc_func)
 8000b14:	9b02      	ldr	r3, [sp, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <mp_get_memory_functions+0x30>
    *realloc_func = gmp_reallocate_func;
 8000b1a:	f240 0310 	movw	r3, #16
 8000b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	9b02      	ldr	r3, [sp, #8]
 8000b26:	601a      	str	r2, [r3, #0]

  if (free_func)
 8000b28:	9b01      	ldr	r3, [sp, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <mp_get_memory_functions+0x44>
    *free_func = gmp_free_func;
 8000b2e:	f240 0314 	movw	r3, #20
 8000b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	9b01      	ldr	r3, [sp, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <mp_set_memory_functions>:

void
mp_set_memory_functions (void *(*alloc_func) (size_t),
			 void *(*realloc_func) (void *, size_t, size_t),
			 void (*free_func) (void *, size_t))
{
 8000b40:	b084      	sub	sp, #16
 8000b42:	9003      	str	r0, [sp, #12]
 8000b44:	9102      	str	r1, [sp, #8]
 8000b46:	9201      	str	r2, [sp, #4]
  if (!alloc_func)
 8000b48:	9b03      	ldr	r3, [sp, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d104      	bne.n	8000b58 <mp_set_memory_functions+0x18>
    alloc_func = gmp_default_alloc;
 8000b4e:	f640 2365 	movw	r3, #2661	; 0xa65
 8000b52:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000b56:	9303      	str	r3, [sp, #12]
  if (!realloc_func)
 8000b58:	9b02      	ldr	r3, [sp, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d104      	bne.n	8000b68 <mp_set_memory_functions+0x28>
    realloc_func = gmp_default_realloc;
 8000b5e:	f640 23b5 	movw	r3, #2741	; 0xab5
 8000b62:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000b66:	9302      	str	r3, [sp, #8]
  if (!free_func)
 8000b68:	9b01      	ldr	r3, [sp, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d104      	bne.n	8000b78 <mp_set_memory_functions+0x38>
    free_func = gmp_default_free;
 8000b6e:	f640 23e5 	movw	r3, #2789	; 0xae5
 8000b72:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000b76:	9301      	str	r3, [sp, #4]

  gmp_allocate_func = alloc_func;
 8000b78:	f240 030c 	movw	r3, #12
 8000b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b80:	9a03      	ldr	r2, [sp, #12]
 8000b82:	601a      	str	r2, [r3, #0]
  gmp_reallocate_func = realloc_func;
 8000b84:	f240 0310 	movw	r3, #16
 8000b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b8c:	9a02      	ldr	r2, [sp, #8]
 8000b8e:	601a      	str	r2, [r3, #0]
  gmp_free_func = free_func;
 8000b90:	f240 0314 	movw	r3, #20
 8000b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b98:	9a01      	ldr	r2, [sp, #4]
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr

08000ba0 <gmp_xalloc_limbs>:
#define gmp_xalloc(size) ((*gmp_allocate_func)((size)))
#define gmp_free(p) ((*gmp_free_func) ((p), 0))

static mp_ptr
gmp_xalloc_limbs (mp_size_t size)
{
 8000ba0:	b500      	push	{lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	9001      	str	r0, [sp, #4]
  return gmp_xalloc (size * sizeof (mp_limb_t));
 8000ba6:	f240 030c 	movw	r3, #12
 8000baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	9a01      	ldr	r2, [sp, #4]
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4798      	blx	r3
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	b003      	add	sp, #12
 8000bbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bc2:	bf00      	nop

08000bc4 <gmp_xrealloc_limbs>:

static mp_ptr
gmp_xrealloc_limbs (mp_ptr old, mp_size_t size)
{
 8000bc4:	b500      	push	{lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	9001      	str	r0, [sp, #4]
 8000bca:	9100      	str	r1, [sp, #0]
  assert (size > 0);
 8000bcc:	9b00      	ldr	r3, [sp, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	dc0f      	bgt.n	8000bf2 <gmp_xrealloc_limbs+0x2e>
 8000bd2:	f243 7064 	movw	r0, #14180	; 0x3764
 8000bd6:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000bda:	f240 114b 	movw	r1, #331	; 0x14b
 8000bde:	f643 4280 	movw	r2, #15488	; 0x3c80
 8000be2:	f6c0 0201 	movt	r2, #2049	; 0x801
 8000be6:	f243 7374 	movw	r3, #14196	; 0x3774
 8000bea:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000bee:	f00c fd97 	bl	800d720 <__assert_func>
  return (*gmp_reallocate_func) (old, 0, size * sizeof (mp_limb_t));
 8000bf2:	f240 0310 	movw	r3, #16
 8000bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	9a00      	ldr	r2, [sp, #0]
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	9801      	ldr	r0, [sp, #4]
 8000c02:	2100      	movs	r1, #0
 8000c04:	4798      	blx	r3
 8000c06:	4603      	mov	r3, r0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	b003      	add	sp, #12
 8000c0c:	f85d fb04 	ldr.w	pc, [sp], #4

08000c10 <mpn_copyi>:

/* MPN interface */

void
mpn_copyi (mp_ptr d, mp_srcptr s, mp_size_t n)
{
 8000c10:	b086      	sub	sp, #24
 8000c12:	9003      	str	r0, [sp, #12]
 8000c14:	9102      	str	r1, [sp, #8]
 8000c16:	9201      	str	r2, [sp, #4]
  mp_size_t i;
  for (i = 0; i < n; i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9305      	str	r3, [sp, #20]
 8000c1c:	e00c      	b.n	8000c38 <mpn_copyi+0x28>
    d[i] = s[i];
 8000c1e:	9b05      	ldr	r3, [sp, #20]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	9a03      	ldr	r2, [sp, #12]
 8000c24:	4413      	add	r3, r2
 8000c26:	9a05      	ldr	r2, [sp, #20]
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	9902      	ldr	r1, [sp, #8]
 8000c2c:	440a      	add	r2, r1
 8000c2e:	6812      	ldr	r2, [r2, #0]
 8000c30:	601a      	str	r2, [r3, #0]

void
mpn_copyi (mp_ptr d, mp_srcptr s, mp_size_t n)
{
  mp_size_t i;
  for (i = 0; i < n; i++)
 8000c32:	9b05      	ldr	r3, [sp, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	9305      	str	r3, [sp, #20]
 8000c38:	9a05      	ldr	r2, [sp, #20]
 8000c3a:	9b01      	ldr	r3, [sp, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbee      	blt.n	8000c1e <mpn_copyi+0xe>
    d[i] = s[i];
}
 8000c40:	b006      	add	sp, #24
 8000c42:	4770      	bx	lr

08000c44 <mpn_copyd>:

void
mpn_copyd (mp_ptr d, mp_srcptr s, mp_size_t n)
{
 8000c44:	b084      	sub	sp, #16
 8000c46:	9003      	str	r0, [sp, #12]
 8000c48:	9102      	str	r1, [sp, #8]
 8000c4a:	9201      	str	r2, [sp, #4]
  while (n-- > 0)
 8000c4c:	e009      	b.n	8000c62 <mpn_copyd+0x1e>
    d[n] = s[n];
 8000c4e:	9b01      	ldr	r3, [sp, #4]
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	9a03      	ldr	r2, [sp, #12]
 8000c54:	4413      	add	r3, r2
 8000c56:	9a01      	ldr	r2, [sp, #4]
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	9902      	ldr	r1, [sp, #8]
 8000c5c:	440a      	add	r2, r1
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	601a      	str	r2, [r3, #0]
}

void
mpn_copyd (mp_ptr d, mp_srcptr s, mp_size_t n)
{
  while (n-- > 0)
 8000c62:	9b01      	ldr	r3, [sp, #4]
 8000c64:	1e5a      	subs	r2, r3, #1
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dcf0      	bgt.n	8000c4e <mpn_copyd+0xa>
    d[n] = s[n];
}
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <mpn_cmp>:

int
mpn_cmp (mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
 8000c70:	b084      	sub	sp, #16
 8000c72:	9003      	str	r0, [sp, #12]
 8000c74:	9102      	str	r1, [sp, #8]
 8000c76:	9201      	str	r2, [sp, #4]
  while (--n >= 0)
 8000c78:	e01c      	b.n	8000cb4 <mpn_cmp+0x44>
    {
      if (ap[n] != bp[n])
 8000c7a:	9b01      	ldr	r3, [sp, #4]
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	9a03      	ldr	r2, [sp, #12]
 8000c80:	4413      	add	r3, r2
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	9b01      	ldr	r3, [sp, #4]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	9902      	ldr	r1, [sp, #8]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d010      	beq.n	8000cb4 <mpn_cmp+0x44>
	return ap[n] > bp[n] ? 1 : -1;
 8000c92:	9b01      	ldr	r3, [sp, #4]
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	9a03      	ldr	r2, [sp, #12]
 8000c98:	4413      	add	r3, r2
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	9b01      	ldr	r3, [sp, #4]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	9902      	ldr	r1, [sp, #8]
 8000ca2:	440b      	add	r3, r1
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d901      	bls.n	8000cae <mpn_cmp+0x3e>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e001      	b.n	8000cb2 <mpn_cmp+0x42>
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb2:	e006      	b.n	8000cc2 <mpn_cmp+0x52>
}

int
mpn_cmp (mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
  while (--n >= 0)
 8000cb4:	9b01      	ldr	r3, [sp, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	9b01      	ldr	r3, [sp, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dadc      	bge.n	8000c7a <mpn_cmp+0xa>
    {
      if (ap[n] != bp[n])
	return ap[n] > bp[n] ? 1 : -1;
    }
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <mpn_cmp4>:

static int
mpn_cmp4 (mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)
{
 8000cc8:	b500      	push	{lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	9003      	str	r0, [sp, #12]
 8000cce:	9102      	str	r1, [sp, #8]
 8000cd0:	9201      	str	r2, [sp, #4]
 8000cd2:	9300      	str	r3, [sp, #0]
  if (an != bn)
 8000cd4:	9a02      	ldr	r2, [sp, #8]
 8000cd6:	9b00      	ldr	r3, [sp, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d008      	beq.n	8000cee <mpn_cmp4+0x26>
    return an < bn ? -1 : 1;
 8000cdc:	9a02      	ldr	r2, [sp, #8]
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	da02      	bge.n	8000cea <mpn_cmp4+0x22>
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce8:	e000      	b.n	8000cec <mpn_cmp4+0x24>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e005      	b.n	8000cfa <mpn_cmp4+0x32>
  else
    return mpn_cmp (ap, bp, an);
 8000cee:	9803      	ldr	r0, [sp, #12]
 8000cf0:	9901      	ldr	r1, [sp, #4]
 8000cf2:	9a02      	ldr	r2, [sp, #8]
 8000cf4:	f7ff ffbc 	bl	8000c70 <mpn_cmp>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	b005      	add	sp, #20
 8000cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d02:	bf00      	nop

08000d04 <mpn_normalized_size>:

static mp_size_t
mpn_normalized_size (mp_srcptr xp, mp_size_t n)
{
 8000d04:	b082      	sub	sp, #8
 8000d06:	9001      	str	r0, [sp, #4]
 8000d08:	9100      	str	r1, [sp, #0]
  for (; n > 0 && xp[n-1] == 0; n--)
 8000d0a:	e002      	b.n	8000d12 <mpn_normalized_size+0xe>
 8000d0c:	9b00      	ldr	r3, [sp, #0]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	9b00      	ldr	r3, [sp, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	dd09      	ble.n	8000d2c <mpn_normalized_size+0x28>
 8000d18:	9b00      	ldr	r3, [sp, #0]
 8000d1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	9a01      	ldr	r2, [sp, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0ef      	beq.n	8000d0c <mpn_normalized_size+0x8>
    ;
  return n;
 8000d2c:	9b00      	ldr	r3, [sp, #0]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	b002      	add	sp, #8
 8000d32:	4770      	bx	lr

08000d34 <mpn_zero>:

#define mpn_zero_p(xp, n) (mpn_normalized_size ((xp), (n)) == 0)

void
mpn_zero (mp_ptr rp, mp_size_t n)
{
 8000d34:	b084      	sub	sp, #16
 8000d36:	9001      	str	r0, [sp, #4]
 8000d38:	9100      	str	r1, [sp, #0]
  mp_size_t i;

  for (i = 0; i < n; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9303      	str	r3, [sp, #12]
 8000d3e:	e008      	b.n	8000d52 <mpn_zero+0x1e>
    rp[i] = 0;
 8000d40:	9b03      	ldr	r3, [sp, #12]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	9a01      	ldr	r2, [sp, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
void
mpn_zero (mp_ptr rp, mp_size_t n)
{
  mp_size_t i;

  for (i = 0; i < n; i++)
 8000d4c:	9b03      	ldr	r3, [sp, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	9303      	str	r3, [sp, #12]
 8000d52:	9a03      	ldr	r2, [sp, #12]
 8000d54:	9b00      	ldr	r3, [sp, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dbf2      	blt.n	8000d40 <mpn_zero+0xc>
    rp[i] = 0;
}
 8000d5a:	b004      	add	sp, #16
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <mpn_add_1>:

mp_limb_t
mpn_add_1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b)
{
 8000d60:	b500      	push	{lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	9003      	str	r0, [sp, #12]
 8000d66:	9102      	str	r1, [sp, #8]
 8000d68:	9201      	str	r2, [sp, #4]
 8000d6a:	9300      	str	r3, [sp, #0]
  mp_size_t i;

  assert (n > 0);
 8000d6c:	9b01      	ldr	r3, [sp, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dc0f      	bgt.n	8000d92 <mpn_add_1+0x32>
 8000d72:	f243 7064 	movw	r0, #14180	; 0x3764
 8000d76:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000d7a:	f240 118d 	movw	r1, #397	; 0x18d
 8000d7e:	f643 4294 	movw	r2, #15508	; 0x3c94
 8000d82:	f6c0 0201 	movt	r2, #2049	; 0x801
 8000d86:	f243 73e0 	movw	r3, #14304	; 0x37e0
 8000d8a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000d8e:	f00c fcc7 	bl	800d720 <__assert_func>
  i = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	9305      	str	r3, [sp, #20]
  do
    {
      mp_limb_t r = ap[i] + b;
 8000d96:	9b05      	ldr	r3, [sp, #20]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	9a02      	ldr	r2, [sp, #8]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	9b00      	ldr	r3, [sp, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	9304      	str	r3, [sp, #16]
      /* Carry out */
      b = (r < b);
 8000da6:	9a04      	ldr	r2, [sp, #16]
 8000da8:	9b00      	ldr	r3, [sp, #0]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	bf2c      	ite	cs
 8000dae:	2300      	movcs	r3, #0
 8000db0:	2301      	movcc	r3, #1
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	9300      	str	r3, [sp, #0]
      rp[i] = r;
 8000db6:	9b05      	ldr	r3, [sp, #20]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	9a03      	ldr	r2, [sp, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	9a04      	ldr	r2, [sp, #16]
 8000dc0:	601a      	str	r2, [r3, #0]
    }
  while (++i < n);
 8000dc2:	9b05      	ldr	r3, [sp, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	9305      	str	r3, [sp, #20]
 8000dc8:	9a05      	ldr	r2, [sp, #20]
 8000dca:	9b01      	ldr	r3, [sp, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbe2      	blt.n	8000d96 <mpn_add_1+0x36>

  return b;
 8000dd0:	9b00      	ldr	r3, [sp, #0]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	b007      	add	sp, #28
 8000dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dda:	bf00      	nop

08000ddc <mpn_add_n>:

mp_limb_t
mpn_add_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
 8000ddc:	b08a      	sub	sp, #40	; 0x28
 8000dde:	9003      	str	r0, [sp, #12]
 8000de0:	9102      	str	r1, [sp, #8]
 8000de2:	9201      	str	r2, [sp, #4]
 8000de4:	9300      	str	r3, [sp, #0]
  mp_size_t i;
  mp_limb_t cy;

  for (i = 0, cy = 0; i < n; i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	9309      	str	r3, [sp, #36]	; 0x24
 8000dea:	2300      	movs	r3, #0
 8000dec:	9308      	str	r3, [sp, #32]
 8000dee:	e02e      	b.n	8000e4e <mpn_add_n+0x72>
    {
      mp_limb_t a, b, r;
      a = ap[i]; b = bp[i];
 8000df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	9a02      	ldr	r2, [sp, #8]
 8000df6:	4413      	add	r3, r2
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	9307      	str	r3, [sp, #28]
 8000dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	9a01      	ldr	r2, [sp, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	9306      	str	r3, [sp, #24]
      r = a + cy;
 8000e08:	9a07      	ldr	r2, [sp, #28]
 8000e0a:	9b08      	ldr	r3, [sp, #32]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	9305      	str	r3, [sp, #20]
      cy = (r < cy);
 8000e10:	9a05      	ldr	r2, [sp, #20]
 8000e12:	9b08      	ldr	r3, [sp, #32]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	bf2c      	ite	cs
 8000e18:	2300      	movcs	r3, #0
 8000e1a:	2301      	movcc	r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	9308      	str	r3, [sp, #32]
      r += b;
 8000e20:	9a05      	ldr	r2, [sp, #20]
 8000e22:	9b06      	ldr	r3, [sp, #24]
 8000e24:	4413      	add	r3, r2
 8000e26:	9305      	str	r3, [sp, #20]
      cy += (r < b);
 8000e28:	9a05      	ldr	r2, [sp, #20]
 8000e2a:	9b06      	ldr	r3, [sp, #24]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	bf2c      	ite	cs
 8000e30:	2300      	movcs	r3, #0
 8000e32:	2301      	movcc	r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	9a08      	ldr	r2, [sp, #32]
 8000e38:	4413      	add	r3, r2
 8000e3a:	9308      	str	r3, [sp, #32]
      rp[i] = r;
 8000e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	9a03      	ldr	r2, [sp, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	9a05      	ldr	r2, [sp, #20]
 8000e46:	601a      	str	r2, [r3, #0]
mpn_add_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
  mp_size_t i;
  mp_limb_t cy;

  for (i = 0, cy = 0; i < n; i++)
 8000e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8000e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e50:	9b00      	ldr	r3, [sp, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dbcc      	blt.n	8000df0 <mpn_add_n+0x14>
      cy = (r < cy);
      r += b;
      cy += (r < b);
      rp[i] = r;
    }
  return cy;
 8000e56:	9b08      	ldr	r3, [sp, #32]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	b00a      	add	sp, #40	; 0x28
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <mpn_add>:

mp_limb_t
mpn_add (mp_ptr rp, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)
{
 8000e60:	b500      	push	{lr}
 8000e62:	b087      	sub	sp, #28
 8000e64:	9003      	str	r0, [sp, #12]
 8000e66:	9102      	str	r1, [sp, #8]
 8000e68:	9201      	str	r2, [sp, #4]
 8000e6a:	9300      	str	r3, [sp, #0]
  mp_limb_t cy;

  assert (an >= bn);
 8000e6c:	9a01      	ldr	r2, [sp, #4]
 8000e6e:	9b08      	ldr	r3, [sp, #32]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	da0f      	bge.n	8000e94 <mpn_add+0x34>
 8000e74:	f243 7064 	movw	r0, #14180	; 0x3764
 8000e78:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000e7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8000e80:	f643 42a0 	movw	r2, #15520	; 0x3ca0
 8000e84:	f6c0 0201 	movt	r2, #2049	; 0x801
 8000e88:	f243 73e8 	movw	r3, #14312	; 0x37e8
 8000e8c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000e90:	f00c fc46 	bl	800d720 <__assert_func>

  cy = mpn_add_n (rp, ap, bp, bn);
 8000e94:	9803      	ldr	r0, [sp, #12]
 8000e96:	9902      	ldr	r1, [sp, #8]
 8000e98:	9a00      	ldr	r2, [sp, #0]
 8000e9a:	9b08      	ldr	r3, [sp, #32]
 8000e9c:	f7ff ff9e 	bl	8000ddc <mpn_add_n>
 8000ea0:	9005      	str	r0, [sp, #20]
  if (an > bn)
 8000ea2:	9a01      	ldr	r2, [sp, #4]
 8000ea4:	9b08      	ldr	r3, [sp, #32]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dd11      	ble.n	8000ece <mpn_add+0x6e>
    cy = mpn_add_1 (rp + bn, ap + bn, an - bn, cy);
 8000eaa:	9b08      	ldr	r3, [sp, #32]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	9a03      	ldr	r2, [sp, #12]
 8000eb0:	18d1      	adds	r1, r2, r3
 8000eb2:	9b08      	ldr	r3, [sp, #32]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	9a02      	ldr	r2, [sp, #8]
 8000eb8:	441a      	add	r2, r3
 8000eba:	9801      	ldr	r0, [sp, #4]
 8000ebc:	9b08      	ldr	r3, [sp, #32]
 8000ebe:	1ac3      	subs	r3, r0, r3
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	9b05      	ldr	r3, [sp, #20]
 8000ec8:	f7ff ff4a 	bl	8000d60 <mpn_add_1>
 8000ecc:	9005      	str	r0, [sp, #20]
  return cy;
 8000ece:	9b05      	ldr	r3, [sp, #20]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	b007      	add	sp, #28
 8000ed4:	f85d fb04 	ldr.w	pc, [sp], #4

08000ed8 <mpn_sub_1>:

mp_limb_t
mpn_sub_1 (mp_ptr rp, mp_srcptr ap, mp_size_t n, mp_limb_t b)
{
 8000ed8:	b500      	push	{lr}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	9003      	str	r0, [sp, #12]
 8000ede:	9102      	str	r1, [sp, #8]
 8000ee0:	9201      	str	r2, [sp, #4]
 8000ee2:	9300      	str	r3, [sp, #0]
  mp_size_t i;

  assert (n > 0);
 8000ee4:	9b01      	ldr	r3, [sp, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dc0f      	bgt.n	8000f0a <mpn_sub_1+0x32>
 8000eea:	f243 7064 	movw	r0, #14180	; 0x3764
 8000eee:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000ef2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000ef6:	f643 42a8 	movw	r2, #15528	; 0x3ca8
 8000efa:	f6c0 0201 	movt	r2, #2049	; 0x801
 8000efe:	f243 73e0 	movw	r3, #14304	; 0x37e0
 8000f02:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000f06:	f00c fc0b 	bl	800d720 <__assert_func>

  i = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9307      	str	r3, [sp, #28]
  do
    {
      mp_limb_t a = ap[i];
 8000f0e:	9b07      	ldr	r3, [sp, #28]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	9a02      	ldr	r2, [sp, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	9306      	str	r3, [sp, #24]
      /* Carry out */
      mp_limb_t cy = a < b;;
 8000f1a:	9a06      	ldr	r2, [sp, #24]
 8000f1c:	9b00      	ldr	r3, [sp, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	bf2c      	ite	cs
 8000f22:	2300      	movcs	r3, #0
 8000f24:	2301      	movcc	r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	9305      	str	r3, [sp, #20]
      rp[i] = a - b;
 8000f2a:	9b07      	ldr	r3, [sp, #28]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	9a03      	ldr	r2, [sp, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	9906      	ldr	r1, [sp, #24]
 8000f34:	9a00      	ldr	r2, [sp, #0]
 8000f36:	1a8a      	subs	r2, r1, r2
 8000f38:	601a      	str	r2, [r3, #0]
      b = cy;
 8000f3a:	9b05      	ldr	r3, [sp, #20]
 8000f3c:	9300      	str	r3, [sp, #0]
    }
  while (++i < n);
 8000f3e:	9b07      	ldr	r3, [sp, #28]
 8000f40:	3301      	adds	r3, #1
 8000f42:	9307      	str	r3, [sp, #28]
 8000f44:	9a07      	ldr	r2, [sp, #28]
 8000f46:	9b01      	ldr	r3, [sp, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbe0      	blt.n	8000f0e <mpn_sub_1+0x36>

  return b;
 8000f4c:	9b00      	ldr	r3, [sp, #0]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	b009      	add	sp, #36	; 0x24
 8000f52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f56:	bf00      	nop

08000f58 <mpn_sub_n>:

mp_limb_t
mpn_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
 8000f58:	b088      	sub	sp, #32
 8000f5a:	9003      	str	r0, [sp, #12]
 8000f5c:	9102      	str	r1, [sp, #8]
 8000f5e:	9201      	str	r2, [sp, #4]
 8000f60:	9300      	str	r3, [sp, #0]
  mp_size_t i;
  mp_limb_t cy;

  for (i = 0, cy = 0; i < n; i++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	9307      	str	r3, [sp, #28]
 8000f66:	2300      	movs	r3, #0
 8000f68:	9306      	str	r3, [sp, #24]
 8000f6a:	e02c      	b.n	8000fc6 <mpn_sub_n+0x6e>
    {
      mp_limb_t a, b;
      a = ap[i]; b = bp[i];
 8000f6c:	9b07      	ldr	r3, [sp, #28]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	9a02      	ldr	r2, [sp, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	9305      	str	r3, [sp, #20]
 8000f78:	9b07      	ldr	r3, [sp, #28]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	9a01      	ldr	r2, [sp, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	9304      	str	r3, [sp, #16]
      b += cy;
 8000f84:	9a04      	ldr	r2, [sp, #16]
 8000f86:	9b06      	ldr	r3, [sp, #24]
 8000f88:	4413      	add	r3, r2
 8000f8a:	9304      	str	r3, [sp, #16]
      cy = (b < cy);
 8000f8c:	9a04      	ldr	r2, [sp, #16]
 8000f8e:	9b06      	ldr	r3, [sp, #24]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	bf2c      	ite	cs
 8000f94:	2300      	movcs	r3, #0
 8000f96:	2301      	movcc	r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	9306      	str	r3, [sp, #24]
      cy += (a < b);
 8000f9c:	9a05      	ldr	r2, [sp, #20]
 8000f9e:	9b04      	ldr	r3, [sp, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	bf2c      	ite	cs
 8000fa4:	2300      	movcs	r3, #0
 8000fa6:	2301      	movcc	r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	9a06      	ldr	r2, [sp, #24]
 8000fac:	4413      	add	r3, r2
 8000fae:	9306      	str	r3, [sp, #24]
      rp[i] = a - b;
 8000fb0:	9b07      	ldr	r3, [sp, #28]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	9a03      	ldr	r2, [sp, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	9905      	ldr	r1, [sp, #20]
 8000fba:	9a04      	ldr	r2, [sp, #16]
 8000fbc:	1a8a      	subs	r2, r1, r2
 8000fbe:	601a      	str	r2, [r3, #0]
mpn_sub_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
  mp_size_t i;
  mp_limb_t cy;

  for (i = 0, cy = 0; i < n; i++)
 8000fc0:	9b07      	ldr	r3, [sp, #28]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	9307      	str	r3, [sp, #28]
 8000fc6:	9a07      	ldr	r2, [sp, #28]
 8000fc8:	9b00      	ldr	r3, [sp, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbce      	blt.n	8000f6c <mpn_sub_n+0x14>
      b += cy;
      cy = (b < cy);
      cy += (a < b);
      rp[i] = a - b;
    }
  return cy;
 8000fce:	9b06      	ldr	r3, [sp, #24]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	b008      	add	sp, #32
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <mpn_sub>:

mp_limb_t
mpn_sub (mp_ptr rp, mp_srcptr ap, mp_size_t an, mp_srcptr bp, mp_size_t bn)
{
 8000fd8:	b500      	push	{lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	9003      	str	r0, [sp, #12]
 8000fde:	9102      	str	r1, [sp, #8]
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	9300      	str	r3, [sp, #0]
  mp_limb_t cy;

  assert (an >= bn);
 8000fe4:	9a01      	ldr	r2, [sp, #4]
 8000fe6:	9b08      	ldr	r3, [sp, #32]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	da0f      	bge.n	800100c <mpn_sub+0x34>
 8000fec:	f243 7064 	movw	r0, #14180	; 0x3764
 8000ff0:	f6c0 0001 	movt	r0, #2049	; 0x801
 8000ff4:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000ff8:	f643 42b4 	movw	r2, #15540	; 0x3cb4
 8000ffc:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001000:	f243 73e8 	movw	r3, #14312	; 0x37e8
 8001004:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001008:	f00c fb8a 	bl	800d720 <__assert_func>

  cy = mpn_sub_n (rp, ap, bp, bn);
 800100c:	9803      	ldr	r0, [sp, #12]
 800100e:	9902      	ldr	r1, [sp, #8]
 8001010:	9a00      	ldr	r2, [sp, #0]
 8001012:	9b08      	ldr	r3, [sp, #32]
 8001014:	f7ff ffa0 	bl	8000f58 <mpn_sub_n>
 8001018:	9005      	str	r0, [sp, #20]
  if (an > bn)
 800101a:	9a01      	ldr	r2, [sp, #4]
 800101c:	9b08      	ldr	r3, [sp, #32]
 800101e:	429a      	cmp	r2, r3
 8001020:	dd11      	ble.n	8001046 <mpn_sub+0x6e>
    cy = mpn_sub_1 (rp + bn, ap + bn, an - bn, cy);
 8001022:	9b08      	ldr	r3, [sp, #32]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	9a03      	ldr	r2, [sp, #12]
 8001028:	18d1      	adds	r1, r2, r3
 800102a:	9b08      	ldr	r3, [sp, #32]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	9a02      	ldr	r2, [sp, #8]
 8001030:	441a      	add	r2, r3
 8001032:	9801      	ldr	r0, [sp, #4]
 8001034:	9b08      	ldr	r3, [sp, #32]
 8001036:	1ac3      	subs	r3, r0, r3
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	9b05      	ldr	r3, [sp, #20]
 8001040:	f7ff ff4a 	bl	8000ed8 <mpn_sub_1>
 8001044:	9005      	str	r0, [sp, #20]
  return cy;
 8001046:	9b05      	ldr	r3, [sp, #20]
}
 8001048:	4618      	mov	r0, r3
 800104a:	b007      	add	sp, #28
 800104c:	f85d fb04 	ldr.w	pc, [sp], #4

08001050 <mpn_mul_1>:

mp_limb_t
mpn_mul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)
{
 8001050:	b500      	push	{lr}
 8001052:	b093      	sub	sp, #76	; 0x4c
 8001054:	9003      	str	r0, [sp, #12]
 8001056:	9102      	str	r1, [sp, #8]
 8001058:	9201      	str	r2, [sp, #4]
 800105a:	9300      	str	r3, [sp, #0]
  mp_limb_t ul, cl, hpl, lpl;

  assert (n >= 1);
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	dc0f      	bgt.n	8001082 <mpn_mul_1+0x32>
 8001062:	f243 7064 	movw	r0, #14180	; 0x3764
 8001066:	f6c0 0001 	movt	r0, #2049	; 0x801
 800106a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800106e:	f643 42bc 	movw	r2, #15548	; 0x3cbc
 8001072:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001076:	f243 73f4 	movw	r3, #14324	; 0x37f4
 800107a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800107e:	f00c fb4f 	bl	800d720 <__assert_func>

  cl = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	9311      	str	r3, [sp, #68]	; 0x44
  do
    {
      ul = *up++;
 8001086:	9b02      	ldr	r3, [sp, #8]
 8001088:	1d1a      	adds	r2, r3, #4
 800108a:	9202      	str	r2, [sp, #8]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	930f      	str	r3, [sp, #60]	; 0x3c
      gmp_umul_ppmm (hpl, lpl, ul, vl);
 8001090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001092:	930e      	str	r3, [sp, #56]	; 0x38
 8001094:	9b00      	ldr	r3, [sp, #0]
 8001096:	930d      	str	r3, [sp, #52]	; 0x34
 8001098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800109a:	b29b      	uxth	r3, r3
 800109c:	930c      	str	r3, [sp, #48]	; 0x30
 800109e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80010a0:	0c1b      	lsrs	r3, r3, #16
 80010a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80010a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	930a      	str	r3, [sp, #40]	; 0x28
 80010aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80010ac:	0c1b      	lsrs	r3, r3, #16
 80010ae:	9309      	str	r3, [sp, #36]	; 0x24
 80010b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80010b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	9308      	str	r3, [sp, #32]
 80010ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80010bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	9307      	str	r3, [sp, #28]
 80010c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	9306      	str	r3, [sp, #24]
 80010ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80010d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	9310      	str	r3, [sp, #64]	; 0x40
 80010d8:	9b08      	ldr	r3, [sp, #32]
 80010da:	0c1b      	lsrs	r3, r3, #16
 80010dc:	9a07      	ldr	r2, [sp, #28]
 80010de:	4413      	add	r3, r2
 80010e0:	9307      	str	r3, [sp, #28]
 80010e2:	9a07      	ldr	r2, [sp, #28]
 80010e4:	9b06      	ldr	r3, [sp, #24]
 80010e6:	4413      	add	r3, r2
 80010e8:	9307      	str	r3, [sp, #28]
 80010ea:	9a07      	ldr	r2, [sp, #28]
 80010ec:	9b06      	ldr	r3, [sp, #24]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d203      	bcs.n	80010fa <mpn_mul_1+0xaa>
 80010f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80010f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010f8:	9310      	str	r3, [sp, #64]	; 0x40
 80010fa:	9b07      	ldr	r3, [sp, #28]
 80010fc:	0c1a      	lsrs	r2, r3, #16
 80010fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001100:	4413      	add	r3, r2
 8001102:	9305      	str	r3, [sp, #20]
 8001104:	9b07      	ldr	r3, [sp, #28]
 8001106:	041a      	lsls	r2, r3, #16
 8001108:	9b08      	ldr	r3, [sp, #32]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4413      	add	r3, r2
 800110e:	9304      	str	r3, [sp, #16]

      lpl += cl;
 8001110:	9a04      	ldr	r2, [sp, #16]
 8001112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001114:	4413      	add	r3, r2
 8001116:	9304      	str	r3, [sp, #16]
      cl = (lpl < cl) + hpl;
 8001118:	9a04      	ldr	r2, [sp, #16]
 800111a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800111c:	429a      	cmp	r2, r3
 800111e:	bf2c      	ite	cs
 8001120:	2300      	movcs	r3, #0
 8001122:	2301      	movcc	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	9b05      	ldr	r3, [sp, #20]
 800112a:	4413      	add	r3, r2
 800112c:	9311      	str	r3, [sp, #68]	; 0x44

      *rp++ = lpl;
 800112e:	9b03      	ldr	r3, [sp, #12]
 8001130:	1d1a      	adds	r2, r3, #4
 8001132:	9203      	str	r2, [sp, #12]
 8001134:	9a04      	ldr	r2, [sp, #16]
 8001136:	601a      	str	r2, [r3, #0]
    }
  while (--n != 0);
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	9b01      	ldr	r3, [sp, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1a0      	bne.n	8001086 <mpn_mul_1+0x36>

  return cl;
 8001144:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
 8001146:	4618      	mov	r0, r3
 8001148:	b013      	add	sp, #76	; 0x4c
 800114a:	f85d fb04 	ldr.w	pc, [sp], #4
 800114e:	bf00      	nop

08001150 <mpn_addmul_1>:

mp_limb_t
mpn_addmul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)
{
 8001150:	b500      	push	{lr}
 8001152:	b095      	sub	sp, #84	; 0x54
 8001154:	9003      	str	r0, [sp, #12]
 8001156:	9102      	str	r1, [sp, #8]
 8001158:	9201      	str	r2, [sp, #4]
 800115a:	9300      	str	r3, [sp, #0]
  mp_limb_t ul, cl, hpl, lpl, rl;

  assert (n >= 1);
 800115c:	9b01      	ldr	r3, [sp, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dc0f      	bgt.n	8001182 <mpn_addmul_1+0x32>
 8001162:	f243 7064 	movw	r0, #14180	; 0x3764
 8001166:	f6c0 0001 	movt	r0, #2049	; 0x801
 800116a:	f240 210b 	movw	r1, #523	; 0x20b
 800116e:	f643 42c8 	movw	r2, #15560	; 0x3cc8
 8001172:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001176:	f243 73f4 	movw	r3, #14324	; 0x37f4
 800117a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800117e:	f00c facf 	bl	800d720 <__assert_func>

  cl = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	9313      	str	r3, [sp, #76]	; 0x4c
  do
    {
      ul = *up++;
 8001186:	9b02      	ldr	r3, [sp, #8]
 8001188:	1d1a      	adds	r2, r3, #4
 800118a:	9202      	str	r2, [sp, #8]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	9311      	str	r3, [sp, #68]	; 0x44
      gmp_umul_ppmm (hpl, lpl, ul, vl);
 8001190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001192:	9310      	str	r3, [sp, #64]	; 0x40
 8001194:	9b00      	ldr	r3, [sp, #0]
 8001196:	930f      	str	r3, [sp, #60]	; 0x3c
 8001198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800119a:	b29b      	uxth	r3, r3
 800119c:	930e      	str	r3, [sp, #56]	; 0x38
 800119e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80011a0:	0c1b      	lsrs	r3, r3, #16
 80011a2:	930d      	str	r3, [sp, #52]	; 0x34
 80011a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	930c      	str	r3, [sp, #48]	; 0x30
 80011aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011ac:	0c1b      	lsrs	r3, r3, #16
 80011ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80011b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	930a      	str	r3, [sp, #40]	; 0x28
 80011ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	9309      	str	r3, [sp, #36]	; 0x24
 80011c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	9308      	str	r3, [sp, #32]
 80011ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	9312      	str	r3, [sp, #72]	; 0x48
 80011d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011da:	0c1b      	lsrs	r3, r3, #16
 80011dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011de:	4413      	add	r3, r2
 80011e0:	9309      	str	r3, [sp, #36]	; 0x24
 80011e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011e4:	9b08      	ldr	r3, [sp, #32]
 80011e6:	4413      	add	r3, r2
 80011e8:	9309      	str	r3, [sp, #36]	; 0x24
 80011ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80011ec:	9b08      	ldr	r3, [sp, #32]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d203      	bcs.n	80011fa <mpn_addmul_1+0xaa>
 80011f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80011f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011f8:	9312      	str	r3, [sp, #72]	; 0x48
 80011fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011fc:	0c1a      	lsrs	r2, r3, #16
 80011fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001200:	4413      	add	r3, r2
 8001202:	9307      	str	r3, [sp, #28]
 8001204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001206:	041a      	lsls	r2, r3, #16
 8001208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	9306      	str	r3, [sp, #24]

      lpl += cl;
 8001210:	9a06      	ldr	r2, [sp, #24]
 8001212:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001214:	4413      	add	r3, r2
 8001216:	9306      	str	r3, [sp, #24]
      cl = (lpl < cl) + hpl;
 8001218:	9a06      	ldr	r2, [sp, #24]
 800121a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800121c:	429a      	cmp	r2, r3
 800121e:	bf2c      	ite	cs
 8001220:	2300      	movcs	r3, #0
 8001222:	2301      	movcc	r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	9b07      	ldr	r3, [sp, #28]
 800122a:	4413      	add	r3, r2
 800122c:	9313      	str	r3, [sp, #76]	; 0x4c

      rl = *rp;
 800122e:	9b03      	ldr	r3, [sp, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	9305      	str	r3, [sp, #20]
      lpl = rl + lpl;
 8001234:	9a06      	ldr	r2, [sp, #24]
 8001236:	9b05      	ldr	r3, [sp, #20]
 8001238:	4413      	add	r3, r2
 800123a:	9306      	str	r3, [sp, #24]
      cl += lpl < rl;
 800123c:	9a06      	ldr	r2, [sp, #24]
 800123e:	9b05      	ldr	r3, [sp, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	bf2c      	ite	cs
 8001244:	2300      	movcs	r3, #0
 8001246:	2301      	movcc	r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800124c:	4413      	add	r3, r2
 800124e:	9313      	str	r3, [sp, #76]	; 0x4c
      *rp++ = lpl;
 8001250:	9b03      	ldr	r3, [sp, #12]
 8001252:	1d1a      	adds	r2, r3, #4
 8001254:	9203      	str	r2, [sp, #12]
 8001256:	9a06      	ldr	r2, [sp, #24]
 8001258:	601a      	str	r2, [r3, #0]
    }
  while (--n != 0);
 800125a:	9b01      	ldr	r3, [sp, #4]
 800125c:	3b01      	subs	r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	9b01      	ldr	r3, [sp, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d18f      	bne.n	8001186 <mpn_addmul_1+0x36>

  return cl;
 8001266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
}
 8001268:	4618      	mov	r0, r3
 800126a:	b015      	add	sp, #84	; 0x54
 800126c:	f85d fb04 	ldr.w	pc, [sp], #4

08001270 <mpn_submul_1>:

mp_limb_t
mpn_submul_1 (mp_ptr rp, mp_srcptr up, mp_size_t n, mp_limb_t vl)
{
 8001270:	b500      	push	{lr}
 8001272:	b095      	sub	sp, #84	; 0x54
 8001274:	9003      	str	r0, [sp, #12]
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	9300      	str	r3, [sp, #0]
  mp_limb_t ul, cl, hpl, lpl, rl;

  assert (n >= 1);
 800127c:	9b01      	ldr	r3, [sp, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	dc0f      	bgt.n	80012a2 <mpn_submul_1+0x32>
 8001282:	f243 7064 	movw	r0, #14180	; 0x3764
 8001286:	f6c0 0001 	movt	r0, #2049	; 0x801
 800128a:	f240 2125 	movw	r1, #549	; 0x225
 800128e:	f643 42d8 	movw	r2, #15576	; 0x3cd8
 8001292:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001296:	f243 73f4 	movw	r3, #14324	; 0x37f4
 800129a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800129e:	f00c fa3f 	bl	800d720 <__assert_func>

  cl = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	9313      	str	r3, [sp, #76]	; 0x4c
  do
    {
      ul = *up++;
 80012a6:	9b02      	ldr	r3, [sp, #8]
 80012a8:	1d1a      	adds	r2, r3, #4
 80012aa:	9202      	str	r2, [sp, #8]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	9311      	str	r3, [sp, #68]	; 0x44
      gmp_umul_ppmm (hpl, lpl, ul, vl);
 80012b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80012b2:	9310      	str	r3, [sp, #64]	; 0x40
 80012b4:	9b00      	ldr	r3, [sp, #0]
 80012b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80012b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	930e      	str	r3, [sp, #56]	; 0x38
 80012be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	930d      	str	r3, [sp, #52]	; 0x34
 80012c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	930c      	str	r3, [sp, #48]	; 0x30
 80012ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80012d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80012d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	930a      	str	r3, [sp, #40]	; 0x28
 80012da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80012dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	9309      	str	r3, [sp, #36]	; 0x24
 80012e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	9308      	str	r3, [sp, #32]
 80012ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	9312      	str	r3, [sp, #72]	; 0x48
 80012f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80012fa:	0c1b      	lsrs	r3, r3, #16
 80012fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80012fe:	4413      	add	r3, r2
 8001300:	9309      	str	r3, [sp, #36]	; 0x24
 8001302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001304:	9b08      	ldr	r3, [sp, #32]
 8001306:	4413      	add	r3, r2
 8001308:	9309      	str	r3, [sp, #36]	; 0x24
 800130a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800130c:	9b08      	ldr	r3, [sp, #32]
 800130e:	429a      	cmp	r2, r3
 8001310:	d203      	bcs.n	800131a <mpn_submul_1+0xaa>
 8001312:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001314:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001318:	9312      	str	r3, [sp, #72]	; 0x48
 800131a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800131c:	0c1a      	lsrs	r2, r3, #16
 800131e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001320:	4413      	add	r3, r2
 8001322:	9307      	str	r3, [sp, #28]
 8001324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	9306      	str	r3, [sp, #24]

      lpl += cl;
 8001330:	9a06      	ldr	r2, [sp, #24]
 8001332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001334:	4413      	add	r3, r2
 8001336:	9306      	str	r3, [sp, #24]
      cl = (lpl < cl) + hpl;
 8001338:	9a06      	ldr	r2, [sp, #24]
 800133a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800133c:	429a      	cmp	r2, r3
 800133e:	bf2c      	ite	cs
 8001340:	2300      	movcs	r3, #0
 8001342:	2301      	movcc	r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	9b07      	ldr	r3, [sp, #28]
 800134a:	4413      	add	r3, r2
 800134c:	9313      	str	r3, [sp, #76]	; 0x4c

      rl = *rp;
 800134e:	9b03      	ldr	r3, [sp, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	9305      	str	r3, [sp, #20]
      lpl = rl - lpl;
 8001354:	9a05      	ldr	r2, [sp, #20]
 8001356:	9b06      	ldr	r3, [sp, #24]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	9306      	str	r3, [sp, #24]
      cl += lpl > rl;
 800135c:	9a06      	ldr	r2, [sp, #24]
 800135e:	9b05      	ldr	r3, [sp, #20]
 8001360:	429a      	cmp	r2, r3
 8001362:	bf94      	ite	ls
 8001364:	2300      	movls	r3, #0
 8001366:	2301      	movhi	r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800136c:	4413      	add	r3, r2
 800136e:	9313      	str	r3, [sp, #76]	; 0x4c
      *rp++ = lpl;
 8001370:	9b03      	ldr	r3, [sp, #12]
 8001372:	1d1a      	adds	r2, r3, #4
 8001374:	9203      	str	r2, [sp, #12]
 8001376:	9a06      	ldr	r2, [sp, #24]
 8001378:	601a      	str	r2, [r3, #0]
    }
  while (--n != 0);
 800137a:	9b01      	ldr	r3, [sp, #4]
 800137c:	3b01      	subs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d18f      	bne.n	80012a6 <mpn_submul_1+0x36>

  return cl;
 8001386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
}
 8001388:	4618      	mov	r0, r3
 800138a:	b015      	add	sp, #84	; 0x54
 800138c:	f85d fb04 	ldr.w	pc, [sp], #4

08001390 <mpn_mul>:

mp_limb_t
mpn_mul (mp_ptr rp, mp_srcptr up, mp_size_t un, mp_srcptr vp, mp_size_t vn)
{
 8001390:	b510      	push	{r4, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	9003      	str	r0, [sp, #12]
 8001396:	9102      	str	r1, [sp, #8]
 8001398:	9201      	str	r2, [sp, #4]
 800139a:	9300      	str	r3, [sp, #0]
  assert (un >= vn);
 800139c:	9a01      	ldr	r2, [sp, #4]
 800139e:	9b06      	ldr	r3, [sp, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	da0f      	bge.n	80013c4 <mpn_mul+0x34>
 80013a4:	f243 7064 	movw	r0, #14180	; 0x3764
 80013a8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80013ac:	f240 213d 	movw	r1, #573	; 0x23d
 80013b0:	f643 42e8 	movw	r2, #15592	; 0x3ce8
 80013b4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80013b8:	f243 73fc 	movw	r3, #14332	; 0x37fc
 80013bc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80013c0:	f00c f9ae 	bl	800d720 <__assert_func>
  assert (vn >= 1);
 80013c4:	9b06      	ldr	r3, [sp, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dc0f      	bgt.n	80013ea <mpn_mul+0x5a>
 80013ca:	f243 7064 	movw	r0, #14180	; 0x3764
 80013ce:	f6c0 0001 	movt	r0, #2049	; 0x801
 80013d2:	f240 213e 	movw	r1, #574	; 0x23e
 80013d6:	f643 42e8 	movw	r2, #15592	; 0x3ce8
 80013da:	f6c0 0201 	movt	r2, #2049	; 0x801
 80013de:	f643 0308 	movw	r3, #14344	; 0x3808
 80013e2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80013e6:	f00c f99b 	bl	800d720 <__assert_func>

  /* We first multiply by the low order limb. This result can be
     stored, not added, to rp. We also avoid a loop for zeroing this
     way. */

  rp[un] = mpn_mul_1 (rp, up, un, vp[0]);
 80013ea:	9b01      	ldr	r3, [sp, #4]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	9a03      	ldr	r2, [sp, #12]
 80013f0:	18d4      	adds	r4, r2, r3
 80013f2:	9b00      	ldr	r3, [sp, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	9803      	ldr	r0, [sp, #12]
 80013f8:	9902      	ldr	r1, [sp, #8]
 80013fa:	9a01      	ldr	r2, [sp, #4]
 80013fc:	f7ff fe28 	bl	8001050 <mpn_mul_1>
 8001400:	4603      	mov	r3, r0
 8001402:	6023      	str	r3, [r4, #0]
  rp += 1, vp += 1, vn -= 1;
 8001404:	9b03      	ldr	r3, [sp, #12]
 8001406:	3304      	adds	r3, #4
 8001408:	9303      	str	r3, [sp, #12]
 800140a:	9b00      	ldr	r3, [sp, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	9b06      	ldr	r3, [sp, #24]
 8001412:	3b01      	subs	r3, #1
 8001414:	9306      	str	r3, [sp, #24]

  /* Now accumulate the product of up[] and the next higher limb from
     vp[]. */

  while (vn >= 1)
 8001416:	e015      	b.n	8001444 <mpn_mul+0xb4>
    {
      rp[un] = mpn_addmul_1 (rp, up, un, vp[0]);
 8001418:	9b01      	ldr	r3, [sp, #4]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	9a03      	ldr	r2, [sp, #12]
 800141e:	18d4      	adds	r4, r2, r3
 8001420:	9b00      	ldr	r3, [sp, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	9803      	ldr	r0, [sp, #12]
 8001426:	9902      	ldr	r1, [sp, #8]
 8001428:	9a01      	ldr	r2, [sp, #4]
 800142a:	f7ff fe91 	bl	8001150 <mpn_addmul_1>
 800142e:	4603      	mov	r3, r0
 8001430:	6023      	str	r3, [r4, #0]
      rp += 1, vp += 1, vn -= 1;
 8001432:	9b03      	ldr	r3, [sp, #12]
 8001434:	3304      	adds	r3, #4
 8001436:	9303      	str	r3, [sp, #12]
 8001438:	9b00      	ldr	r3, [sp, #0]
 800143a:	3304      	adds	r3, #4
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	9b06      	ldr	r3, [sp, #24]
 8001440:	3b01      	subs	r3, #1
 8001442:	9306      	str	r3, [sp, #24]
  rp += 1, vp += 1, vn -= 1;

  /* Now accumulate the product of up[] and the next higher limb from
     vp[]. */

  while (vn >= 1)
 8001444:	9b06      	ldr	r3, [sp, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dce6      	bgt.n	8001418 <mpn_mul+0x88>
    {
      rp[un] = mpn_addmul_1 (rp, up, un, vp[0]);
      rp += 1, vp += 1, vn -= 1;
    }
  return rp[un - 1];
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001450:	3b01      	subs	r3, #1
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	9a03      	ldr	r2, [sp, #12]
 8001456:	4413      	add	r3, r2
 8001458:	681b      	ldr	r3, [r3, #0]
}
 800145a:	4618      	mov	r0, r3
 800145c:	b004      	add	sp, #16
 800145e:	bd10      	pop	{r4, pc}

08001460 <mpn_mul_n>:

void
mpn_mul_n (mp_ptr rp, mp_srcptr ap, mp_srcptr bp, mp_size_t n)
{
 8001460:	b500      	push	{lr}
 8001462:	b087      	sub	sp, #28
 8001464:	9005      	str	r0, [sp, #20]
 8001466:	9104      	str	r1, [sp, #16]
 8001468:	9203      	str	r2, [sp, #12]
 800146a:	9302      	str	r3, [sp, #8]
  mpn_mul (rp, ap, n, bp, n);
 800146c:	9b02      	ldr	r3, [sp, #8]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	9805      	ldr	r0, [sp, #20]
 8001472:	9904      	ldr	r1, [sp, #16]
 8001474:	9a02      	ldr	r2, [sp, #8]
 8001476:	9b03      	ldr	r3, [sp, #12]
 8001478:	f7ff ff8a 	bl	8001390 <mpn_mul>
}
 800147c:	b007      	add	sp, #28
 800147e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001482:	bf00      	nop

08001484 <mpn_sqr>:

void
mpn_sqr (mp_ptr rp, mp_srcptr ap, mp_size_t n)
{
 8001484:	b500      	push	{lr}
 8001486:	b087      	sub	sp, #28
 8001488:	9005      	str	r0, [sp, #20]
 800148a:	9104      	str	r1, [sp, #16]
 800148c:	9203      	str	r2, [sp, #12]
  mpn_mul (rp, ap, n, ap, n);
 800148e:	9b03      	ldr	r3, [sp, #12]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	9805      	ldr	r0, [sp, #20]
 8001494:	9904      	ldr	r1, [sp, #16]
 8001496:	9a03      	ldr	r2, [sp, #12]
 8001498:	9b04      	ldr	r3, [sp, #16]
 800149a:	f7ff ff79 	bl	8001390 <mpn_mul>
}
 800149e:	b007      	add	sp, #28
 80014a0:	f85d fb04 	ldr.w	pc, [sp], #4

080014a4 <mpn_lshift>:

mp_limb_t
mpn_lshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)
{
 80014a4:	b500      	push	{lr}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	9003      	str	r0, [sp, #12]
 80014aa:	9102      	str	r1, [sp, #8]
 80014ac:	9201      	str	r2, [sp, #4]
 80014ae:	9300      	str	r3, [sp, #0]
  mp_limb_t high_limb, low_limb;
  unsigned int tnc;
  mp_size_t i;
  mp_limb_t retval;

  assert (n >= 1);
 80014b0:	9b01      	ldr	r3, [sp, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dc0f      	bgt.n	80014d6 <mpn_lshift+0x32>
 80014b6:	f243 7064 	movw	r0, #14180	; 0x3764
 80014ba:	f6c0 0001 	movt	r0, #2049	; 0x801
 80014be:	f240 2166 	movw	r1, #614	; 0x266
 80014c2:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80014c6:	f6c0 0201 	movt	r2, #2049	; 0x801
 80014ca:	f243 73f4 	movw	r3, #14324	; 0x37f4
 80014ce:	f6c0 0301 	movt	r3, #2049	; 0x801
 80014d2:	f00c f925 	bl	800d720 <__assert_func>
  assert (cnt >= 1);
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10f      	bne.n	80014fc <mpn_lshift+0x58>
 80014dc:	f243 7064 	movw	r0, #14180	; 0x3764
 80014e0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80014e4:	f240 2167 	movw	r1, #615	; 0x267
 80014e8:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80014ec:	f6c0 0201 	movt	r2, #2049	; 0x801
 80014f0:	f643 0310 	movw	r3, #14352	; 0x3810
 80014f4:	f6c0 0301 	movt	r3, #2049	; 0x801
 80014f8:	f00c f912 	bl	800d720 <__assert_func>
  assert (cnt < GMP_LIMB_BITS);
 80014fc:	9b00      	ldr	r3, [sp, #0]
 80014fe:	2b1f      	cmp	r3, #31
 8001500:	d90f      	bls.n	8001522 <mpn_lshift+0x7e>
 8001502:	f243 7064 	movw	r0, #14180	; 0x3764
 8001506:	f6c0 0001 	movt	r0, #2049	; 0x801
 800150a:	f44f 711a 	mov.w	r1, #616	; 0x268
 800150e:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 8001512:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001516:	f643 031c 	movw	r3, #14364	; 0x381c
 800151a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800151e:	f00c f8ff 	bl	800d720 <__assert_func>

  up += n;
 8001522:	9b01      	ldr	r3, [sp, #4]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	9a02      	ldr	r2, [sp, #8]
 8001528:	4413      	add	r3, r2
 800152a:	9302      	str	r3, [sp, #8]
  rp += n;
 800152c:	9b01      	ldr	r3, [sp, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	9a03      	ldr	r2, [sp, #12]
 8001532:	4413      	add	r3, r2
 8001534:	9303      	str	r3, [sp, #12]

  tnc = GMP_LIMB_BITS - cnt;
 8001536:	9b00      	ldr	r3, [sp, #0]
 8001538:	f1c3 0320 	rsb	r3, r3, #32
 800153c:	9307      	str	r3, [sp, #28]
  low_limb = *--up;
 800153e:	9b02      	ldr	r3, [sp, #8]
 8001540:	3b04      	subs	r3, #4
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	9b02      	ldr	r3, [sp, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	9306      	str	r3, [sp, #24]
  retval = low_limb >> tnc;
 800154a:	9b07      	ldr	r3, [sp, #28]
 800154c:	9a06      	ldr	r2, [sp, #24]
 800154e:	fa22 f303 	lsr.w	r3, r2, r3
 8001552:	9305      	str	r3, [sp, #20]
  high_limb = (low_limb << cnt);
 8001554:	9b00      	ldr	r3, [sp, #0]
 8001556:	9a06      	ldr	r2, [sp, #24]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	9309      	str	r3, [sp, #36]	; 0x24

  for (i = n; --i != 0;)
 800155e:	9b01      	ldr	r3, [sp, #4]
 8001560:	9308      	str	r3, [sp, #32]
 8001562:	e014      	b.n	800158e <mpn_lshift+0xea>
    {
      low_limb = *--up;
 8001564:	9b02      	ldr	r3, [sp, #8]
 8001566:	3b04      	subs	r3, #4
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	9b02      	ldr	r3, [sp, #8]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	9306      	str	r3, [sp, #24]
      *--rp = high_limb | (low_limb >> tnc);
 8001570:	9b03      	ldr	r3, [sp, #12]
 8001572:	3b04      	subs	r3, #4
 8001574:	9303      	str	r3, [sp, #12]
 8001576:	9b07      	ldr	r3, [sp, #28]
 8001578:	9a06      	ldr	r2, [sp, #24]
 800157a:	40da      	lsrs	r2, r3
 800157c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800157e:	431a      	orrs	r2, r3
 8001580:	9b03      	ldr	r3, [sp, #12]
 8001582:	601a      	str	r2, [r3, #0]
      high_limb = (low_limb << cnt);
 8001584:	9b00      	ldr	r3, [sp, #0]
 8001586:	9a06      	ldr	r2, [sp, #24]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	9309      	str	r3, [sp, #36]	; 0x24
  tnc = GMP_LIMB_BITS - cnt;
  low_limb = *--up;
  retval = low_limb >> tnc;
  high_limb = (low_limb << cnt);

  for (i = n; --i != 0;)
 800158e:	9b08      	ldr	r3, [sp, #32]
 8001590:	3b01      	subs	r3, #1
 8001592:	9308      	str	r3, [sp, #32]
 8001594:	9b08      	ldr	r3, [sp, #32]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1e4      	bne.n	8001564 <mpn_lshift+0xc0>
    {
      low_limb = *--up;
      *--rp = high_limb | (low_limb >> tnc);
      high_limb = (low_limb << cnt);
    }
  *--rp = high_limb;
 800159a:	9b03      	ldr	r3, [sp, #12]
 800159c:	3b04      	subs	r3, #4
 800159e:	9303      	str	r3, [sp, #12]
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015a4:	601a      	str	r2, [r3, #0]

  return retval;
 80015a6:	9b05      	ldr	r3, [sp, #20]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	b00b      	add	sp, #44	; 0x2c
 80015ac:	f85d fb04 	ldr.w	pc, [sp], #4

080015b0 <mpn_rshift>:

mp_limb_t
mpn_rshift (mp_ptr rp, mp_srcptr up, mp_size_t n, unsigned int cnt)
{
 80015b0:	b500      	push	{lr}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	9003      	str	r0, [sp, #12]
 80015b6:	9102      	str	r1, [sp, #8]
 80015b8:	9201      	str	r2, [sp, #4]
 80015ba:	9300      	str	r3, [sp, #0]
  mp_limb_t high_limb, low_limb;
  unsigned int tnc;
  mp_size_t i;
  mp_limb_t retval;

  assert (n >= 1);
 80015bc:	9b01      	ldr	r3, [sp, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	dc0f      	bgt.n	80015e2 <mpn_rshift+0x32>
 80015c2:	f243 7064 	movw	r0, #14180	; 0x3764
 80015c6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80015ca:	f240 2185 	movw	r1, #645	; 0x285
 80015ce:	f643 42fc 	movw	r2, #15612	; 0x3cfc
 80015d2:	f6c0 0201 	movt	r2, #2049	; 0x801
 80015d6:	f243 73f4 	movw	r3, #14324	; 0x37f4
 80015da:	f6c0 0301 	movt	r3, #2049	; 0x801
 80015de:	f00c f89f 	bl	800d720 <__assert_func>
  assert (cnt >= 1);
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10f      	bne.n	8001608 <mpn_rshift+0x58>
 80015e8:	f243 7064 	movw	r0, #14180	; 0x3764
 80015ec:	f6c0 0001 	movt	r0, #2049	; 0x801
 80015f0:	f240 2186 	movw	r1, #646	; 0x286
 80015f4:	f643 42fc 	movw	r2, #15612	; 0x3cfc
 80015f8:	f6c0 0201 	movt	r2, #2049	; 0x801
 80015fc:	f643 0310 	movw	r3, #14352	; 0x3810
 8001600:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001604:	f00c f88c 	bl	800d720 <__assert_func>
  assert (cnt < GMP_LIMB_BITS);
 8001608:	9b00      	ldr	r3, [sp, #0]
 800160a:	2b1f      	cmp	r3, #31
 800160c:	d90f      	bls.n	800162e <mpn_rshift+0x7e>
 800160e:	f243 7064 	movw	r0, #14180	; 0x3764
 8001612:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001616:	f240 2187 	movw	r1, #647	; 0x287
 800161a:	f643 42fc 	movw	r2, #15612	; 0x3cfc
 800161e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001622:	f643 031c 	movw	r3, #14364	; 0x381c
 8001626:	f6c0 0301 	movt	r3, #2049	; 0x801
 800162a:	f00c f879 	bl	800d720 <__assert_func>

  tnc = GMP_LIMB_BITS - cnt;
 800162e:	9b00      	ldr	r3, [sp, #0]
 8001630:	f1c3 0320 	rsb	r3, r3, #32
 8001634:	9307      	str	r3, [sp, #28]
  high_limb = *up++;
 8001636:	9b02      	ldr	r3, [sp, #8]
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	9202      	str	r2, [sp, #8]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	9306      	str	r3, [sp, #24]
  retval = (high_limb << tnc);
 8001640:	9b07      	ldr	r3, [sp, #28]
 8001642:	9a06      	ldr	r2, [sp, #24]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	9305      	str	r3, [sp, #20]
  low_limb = high_limb >> cnt;
 800164a:	9b00      	ldr	r3, [sp, #0]
 800164c:	9a06      	ldr	r2, [sp, #24]
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	9309      	str	r3, [sp, #36]	; 0x24

  for (i = n; --i != 0;)
 8001654:	9b01      	ldr	r3, [sp, #4]
 8001656:	9308      	str	r3, [sp, #32]
 8001658:	e012      	b.n	8001680 <mpn_rshift+0xd0>
    {
      high_limb = *up++;
 800165a:	9b02      	ldr	r3, [sp, #8]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	9202      	str	r2, [sp, #8]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	9306      	str	r3, [sp, #24]
      *rp++ = low_limb | (high_limb << tnc);
 8001664:	9b03      	ldr	r3, [sp, #12]
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	9203      	str	r2, [sp, #12]
 800166a:	9a07      	ldr	r2, [sp, #28]
 800166c:	9906      	ldr	r1, [sp, #24]
 800166e:	4091      	lsls	r1, r2
 8001670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
      low_limb = high_limb >> cnt;
 8001676:	9b00      	ldr	r3, [sp, #0]
 8001678:	9a06      	ldr	r2, [sp, #24]
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	9309      	str	r3, [sp, #36]	; 0x24
  tnc = GMP_LIMB_BITS - cnt;
  high_limb = *up++;
  retval = (high_limb << tnc);
  low_limb = high_limb >> cnt;

  for (i = n; --i != 0;)
 8001680:	9b08      	ldr	r3, [sp, #32]
 8001682:	3b01      	subs	r3, #1
 8001684:	9308      	str	r3, [sp, #32]
 8001686:	9b08      	ldr	r3, [sp, #32]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e6      	bne.n	800165a <mpn_rshift+0xaa>
    {
      high_limb = *up++;
      *rp++ = low_limb | (high_limb << tnc);
      low_limb = high_limb >> cnt;
    }
  *rp = low_limb;
 800168c:	9b03      	ldr	r3, [sp, #12]
 800168e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001690:	601a      	str	r2, [r3, #0]

  return retval;
 8001692:	9b05      	ldr	r3, [sp, #20]
}
 8001694:	4618      	mov	r0, r3
 8001696:	b00b      	add	sp, #44	; 0x2c
 8001698:	f85d fb04 	ldr.w	pc, [sp], #4

0800169c <mpn_common_scan>:

static mp_bitcnt_t
mpn_common_scan (mp_limb_t limb, mp_size_t i, mp_srcptr up, mp_size_t un,
		 mp_limb_t ux)
{
 800169c:	b500      	push	{lr}
 800169e:	b08b      	sub	sp, #44	; 0x2c
 80016a0:	9003      	str	r0, [sp, #12]
 80016a2:	9102      	str	r1, [sp, #8]
 80016a4:	9201      	str	r2, [sp, #4]
 80016a6:	9300      	str	r3, [sp, #0]
  unsigned cnt;

  assert (ux == 0 || ux == GMP_LIMB_MAX);
 80016a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d013      	beq.n	80016d6 <mpn_common_scan+0x3a>
 80016ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d00f      	beq.n	80016d6 <mpn_common_scan+0x3a>
 80016b6:	f243 7064 	movw	r0, #14180	; 0x3764
 80016ba:	f6c0 0001 	movt	r0, #2049	; 0x801
 80016be:	f240 219f 	movw	r1, #671	; 0x29f
 80016c2:	f643 5208 	movw	r2, #15624	; 0x3d08
 80016c6:	f6c0 0201 	movt	r2, #2049	; 0x801
 80016ca:	f643 0330 	movw	r3, #14384	; 0x3830
 80016ce:	f6c0 0301 	movt	r3, #2049	; 0x801
 80016d2:	f00c f825 	bl	800d720 <__assert_func>
  assert (0 <= i && i <= un );
 80016d6:	9b02      	ldr	r3, [sp, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db03      	blt.n	80016e4 <mpn_common_scan+0x48>
 80016dc:	9a02      	ldr	r2, [sp, #8]
 80016de:	9b00      	ldr	r3, [sp, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dd0f      	ble.n	8001704 <mpn_common_scan+0x68>
 80016e4:	f243 7064 	movw	r0, #14180	; 0x3764
 80016e8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80016ec:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80016f0:	f643 5208 	movw	r2, #15624	; 0x3d08
 80016f4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80016f8:	f643 0350 	movw	r3, #14416	; 0x3850
 80016fc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001700:	f00c f80e 	bl	800d720 <__assert_func>

  while (limb == 0)
 8001704:	e017      	b.n	8001736 <mpn_common_scan+0x9a>
    {
      i++;
 8001706:	9b02      	ldr	r3, [sp, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	9302      	str	r3, [sp, #8]
      if (i == un)
 800170c:	9a02      	ldr	r2, [sp, #8]
 800170e:	9b00      	ldr	r3, [sp, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d108      	bne.n	8001726 <mpn_common_scan+0x8a>
	return (ux == 0 ? ~(mp_bitcnt_t) 0 : un * GMP_LIMB_BITS);
 8001714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <mpn_common_scan+0x84>
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	e001      	b.n	8001724 <mpn_common_scan+0x88>
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001724:	e035      	b.n	8001792 <mpn_common_scan+0xf6>
      limb = ux ^ up[i];
 8001726:	9b02      	ldr	r3, [sp, #8]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	9a01      	ldr	r2, [sp, #4]
 800172c:	4413      	add	r3, r2
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001732:	4053      	eors	r3, r2
 8001734:	9303      	str	r3, [sp, #12]
  unsigned cnt;

  assert (ux == 0 || ux == GMP_LIMB_MAX);
  assert (0 <= i && i <= un );

  while (limb == 0)
 8001736:	9b03      	ldr	r3, [sp, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0e4      	beq.n	8001706 <mpn_common_scan+0x6a>
      i++;
      if (i == un)
	return (ux == 0 ? ~(mp_bitcnt_t) 0 : un * GMP_LIMB_BITS);
      limb = ux ^ up[i];
    }
  gmp_ctz (cnt, limb);
 800173c:	9b03      	ldr	r3, [sp, #12]
 800173e:	9307      	str	r3, [sp, #28]
 8001740:	2300      	movs	r3, #0
 8001742:	9306      	str	r3, [sp, #24]
 8001744:	9b07      	ldr	r3, [sp, #28]
 8001746:	425a      	negs	r2, r3
 8001748:	9b07      	ldr	r3, [sp, #28]
 800174a:	4013      	ands	r3, r2
 800174c:	9309      	str	r3, [sp, #36]	; 0x24
 800174e:	2300      	movs	r3, #0
 8001750:	9308      	str	r3, [sp, #32]
 8001752:	e005      	b.n	8001760 <mpn_common_scan+0xc4>
 8001754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	9309      	str	r3, [sp, #36]	; 0x24
 800175a:	9b08      	ldr	r3, [sp, #32]
 800175c:	3308      	adds	r3, #8
 800175e:	9308      	str	r3, [sp, #32]
 8001760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001762:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f4      	beq.n	8001754 <mpn_common_scan+0xb8>
 800176a:	e005      	b.n	8001778 <mpn_common_scan+0xdc>
 800176c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	9309      	str	r3, [sp, #36]	; 0x24
 8001772:	9b08      	ldr	r3, [sp, #32]
 8001774:	3301      	adds	r3, #1
 8001776:	9308      	str	r3, [sp, #32]
 8001778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800177a:	2b00      	cmp	r3, #0
 800177c:	daf6      	bge.n	800176c <mpn_common_scan+0xd0>
 800177e:	9b08      	ldr	r3, [sp, #32]
 8001780:	9306      	str	r3, [sp, #24]
 8001782:	9b06      	ldr	r3, [sp, #24]
 8001784:	f1c3 031f 	rsb	r3, r3, #31
 8001788:	9305      	str	r3, [sp, #20]
  return (mp_bitcnt_t) i * GMP_LIMB_BITS + cnt;
 800178a:	9b02      	ldr	r3, [sp, #8]
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	9b05      	ldr	r3, [sp, #20]
 8001790:	4413      	add	r3, r2
}
 8001792:	4618      	mov	r0, r3
 8001794:	b00b      	add	sp, #44	; 0x2c
 8001796:	f85d fb04 	ldr.w	pc, [sp], #4
 800179a:	bf00      	nop

0800179c <mpn_scan1>:

mp_bitcnt_t
mpn_scan1 (mp_srcptr ptr, mp_bitcnt_t bit)
{
 800179c:	b500      	push	{lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	9003      	str	r0, [sp, #12]
 80017a2:	9102      	str	r1, [sp, #8]
  mp_size_t i;
  i = bit / GMP_LIMB_BITS;
 80017a4:	9b02      	ldr	r3, [sp, #8]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	9305      	str	r3, [sp, #20]

  return mpn_common_scan ( ptr[i] & (GMP_LIMB_MAX << (bit % GMP_LIMB_BITS)),
 80017aa:	9b05      	ldr	r3, [sp, #20]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	9a03      	ldr	r2, [sp, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	9b02      	ldr	r3, [sp, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	4013      	ands	r3, r2
 80017c4:	2200      	movs	r2, #0
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	9905      	ldr	r1, [sp, #20]
 80017cc:	9a03      	ldr	r2, [sp, #12]
 80017ce:	9b05      	ldr	r3, [sp, #20]
 80017d0:	f7ff ff64 	bl	800169c <mpn_common_scan>
 80017d4:	4603      	mov	r3, r0
			  i, ptr, i, 0);
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	b007      	add	sp, #28
 80017da:	f85d fb04 	ldr.w	pc, [sp], #4
 80017de:	bf00      	nop

080017e0 <mpn_scan0>:

mp_bitcnt_t
mpn_scan0 (mp_srcptr ptr, mp_bitcnt_t bit)
{
 80017e0:	b500      	push	{lr}
 80017e2:	b087      	sub	sp, #28
 80017e4:	9003      	str	r0, [sp, #12]
 80017e6:	9102      	str	r1, [sp, #8]
  mp_size_t i;
  i = bit / GMP_LIMB_BITS;
 80017e8:	9b02      	ldr	r3, [sp, #8]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	9305      	str	r3, [sp, #20]

  return mpn_common_scan (~ptr[i] & (GMP_LIMB_MAX << (bit % GMP_LIMB_BITS)),
 80017ee:	9b05      	ldr	r3, [sp, #20]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	9a03      	ldr	r2, [sp, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	43da      	mvns	r2, r3
 80017fa:	9b02      	ldr	r3, [sp, #8]
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	4013      	ands	r3, r2
 800180a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800180e:	9200      	str	r2, [sp, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	9905      	ldr	r1, [sp, #20]
 8001814:	9a03      	ldr	r2, [sp, #12]
 8001816:	9b05      	ldr	r3, [sp, #20]
 8001818:	f7ff ff40 	bl	800169c <mpn_common_scan>
 800181c:	4603      	mov	r3, r0
			  i, ptr, i, GMP_LIMB_MAX);
}
 800181e:	4618      	mov	r0, r3
 8001820:	b007      	add	sp, #28
 8001822:	f85d fb04 	ldr.w	pc, [sp], #4
 8001826:	bf00      	nop

08001828 <mpn_invert_3by2>:


/* MPN division interface. */
mp_limb_t
mpn_invert_3by2 (mp_limb_t u1, mp_limb_t u0)
{
 8001828:	b500      	push	{lr}
 800182a:	b097      	sub	sp, #92	; 0x5c
 800182c:	9001      	str	r0, [sp, #4]
 800182e:	9100      	str	r1, [sp, #0]
  unsigned ql, qh;

  /* First, do a 2/1 inverse. */
  /* The inverse m is defined as floor( (B^2 - 1 - u1)/u1 ), so that 0 <
   * B^2 - (B + m) u1 <= u1 */
  assert (u1 >= GMP_LIMB_HIGHBIT);
 8001830:	9b01      	ldr	r3, [sp, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0f      	blt.n	8001856 <mpn_invert_3by2+0x2e>
 8001836:	f243 7064 	movw	r0, #14180	; 0x3764
 800183a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800183e:	f240 21cd 	movw	r1, #717	; 0x2cd
 8001842:	f643 5218 	movw	r2, #15640	; 0x3d18
 8001846:	f6c0 0201 	movt	r2, #2049	; 0x801
 800184a:	f643 0364 	movw	r3, #14436	; 0x3864
 800184e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001852:	f00b ff65 	bl	800d720 <__assert_func>

  ul = u1 & GMP_LLIMB_MASK;
 8001856:	9b01      	ldr	r3, [sp, #4]
 8001858:	b29b      	uxth	r3, r3
 800185a:	9310      	str	r3, [sp, #64]	; 0x40
  uh = u1 >> (GMP_LIMB_BITS / 2);
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	0c1b      	lsrs	r3, r3, #16
 8001860:	930f      	str	r3, [sp, #60]	; 0x3c

  qh = ~u1 / uh;
 8001862:	9b01      	ldr	r3, [sp, #4]
 8001864:	43da      	mvns	r2, r3
 8001866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	9312      	str	r3, [sp, #72]	; 0x48
  r = ((~u1 - (mp_limb_t) qh * uh) << (GMP_LIMB_BITS / 2)) | GMP_LLIMB_MASK;
 800186e:	9b01      	ldr	r3, [sp, #4]
 8001870:	43da      	mvns	r2, r3
 8001872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001874:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8001882:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8001886:	9315      	str	r3, [sp, #84]	; 0x54

  p = (mp_limb_t) qh * ul;
 8001888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800188a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	930e      	str	r3, [sp, #56]	; 0x38
  /* Adjustment steps taken from udiv_qrnnd_c */
  if (r < p)
 8001892:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001896:	429a      	cmp	r2, r3
 8001898:	d215      	bcs.n	80018c6 <mpn_invert_3by2+0x9e>
    {
      qh--;
 800189a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800189c:	3b01      	subs	r3, #1
 800189e:	9312      	str	r3, [sp, #72]	; 0x48
      r += u1;
 80018a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80018a2:	9b01      	ldr	r3, [sp, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	9315      	str	r3, [sp, #84]	; 0x54
      if (r >= u1) /* i.e. we didn't get carry when adding to r */
 80018a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80018aa:	9b01      	ldr	r3, [sp, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d30a      	bcc.n	80018c6 <mpn_invert_3by2+0x9e>
	if (r < p)
 80018b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80018b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d206      	bcs.n	80018c6 <mpn_invert_3by2+0x9e>
	  {
	    qh--;
 80018b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80018ba:	3b01      	subs	r3, #1
 80018bc:	9312      	str	r3, [sp, #72]	; 0x48
	    r += u1;
 80018be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80018c0:	9b01      	ldr	r3, [sp, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	9315      	str	r3, [sp, #84]	; 0x54
	  }
    }
  r -= p;
 80018c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80018c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	9315      	str	r3, [sp, #84]	; 0x54

  /* Do a 3/2 division (with half limb size) */
  p = (r >> (GMP_LIMB_BITS / 2)) * qh + r;
 80018ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80018d4:	fb02 f203 	mul.w	r2, r2, r3
 80018d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80018da:	4413      	add	r3, r2
 80018dc:	930e      	str	r3, [sp, #56]	; 0x38
  ql = (p >> (GMP_LIMB_BITS / 2)) + 1;
 80018de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	3301      	adds	r3, #1
 80018e4:	9313      	str	r3, [sp, #76]	; 0x4c

  /* By the 3/2 method, we don't need the high half limb. */
  r = (r << (GMP_LIMB_BITS / 2)) + GMP_LLIMB_MASK - ql * u1;
 80018e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80018ec:	9901      	ldr	r1, [sp, #4]
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018f8:	33ff      	adds	r3, #255	; 0xff
 80018fa:	9315      	str	r3, [sp, #84]	; 0x54

  if (r >= (p << (GMP_LIMB_BITS / 2)))
 80018fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018fe:	041a      	lsls	r2, r3, #16
 8001900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001902:	429a      	cmp	r2, r3
 8001904:	d806      	bhi.n	8001914 <mpn_invert_3by2+0xec>
    {
      ql--;
 8001906:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001908:	3b01      	subs	r3, #1
 800190a:	9313      	str	r3, [sp, #76]	; 0x4c
      r += u1;
 800190c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800190e:	9b01      	ldr	r3, [sp, #4]
 8001910:	4413      	add	r3, r2
 8001912:	9315      	str	r3, [sp, #84]	; 0x54
    }
  m = ((mp_limb_t) qh << (GMP_LIMB_BITS / 2)) + ql;
 8001914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001916:	041a      	lsls	r2, r3, #16
 8001918:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800191a:	4413      	add	r3, r2
 800191c:	9314      	str	r3, [sp, #80]	; 0x50
  if (r >= u1)
 800191e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001920:	9b01      	ldr	r3, [sp, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	d306      	bcc.n	8001934 <mpn_invert_3by2+0x10c>
    {
      m++;
 8001926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001928:	3301      	adds	r3, #1
 800192a:	9314      	str	r3, [sp, #80]	; 0x50
      r -= u1;
 800192c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800192e:	9b01      	ldr	r3, [sp, #4]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	9315      	str	r3, [sp, #84]	; 0x54
    }

  if (u0 > 0)
 8001934:	9b00      	ldr	r3, [sp, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8084 	beq.w	8001a44 <mpn_invert_3by2+0x21c>
    {
      mp_limb_t th, tl;
      r = ~r;
 800193c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800193e:	43db      	mvns	r3, r3
 8001940:	9315      	str	r3, [sp, #84]	; 0x54
      r += u0;
 8001942:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001944:	9b00      	ldr	r3, [sp, #0]
 8001946:	4413      	add	r3, r2
 8001948:	9315      	str	r3, [sp, #84]	; 0x54
      if (r < u0)
 800194a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800194c:	9b00      	ldr	r3, [sp, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d211      	bcs.n	8001976 <mpn_invert_3by2+0x14e>
	{
	  m--;
 8001952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001954:	3b01      	subs	r3, #1
 8001956:	9314      	str	r3, [sp, #80]	; 0x50
	  if (r >= u1)
 8001958:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d306      	bcc.n	800196e <mpn_invert_3by2+0x146>
	    {
	      m--;
 8001960:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001962:	3b01      	subs	r3, #1
 8001964:	9314      	str	r3, [sp, #80]	; 0x50
	      r -= u1;
 8001966:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001968:	9b01      	ldr	r3, [sp, #4]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	9315      	str	r3, [sp, #84]	; 0x54
	    }
	  r -= u1;
 800196e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001970:	9b01      	ldr	r3, [sp, #4]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	9315      	str	r3, [sp, #84]	; 0x54
	}
      gmp_umul_ppmm (th, tl, u0, m);
 8001976:	9b00      	ldr	r3, [sp, #0]
 8001978:	930d      	str	r3, [sp, #52]	; 0x34
 800197a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800197c:	930c      	str	r3, [sp, #48]	; 0x30
 800197e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001980:	b29b      	uxth	r3, r3
 8001982:	930b      	str	r3, [sp, #44]	; 0x2c
 8001984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	930a      	str	r3, [sp, #40]	; 0x28
 800198a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800198c:	b29b      	uxth	r3, r3
 800198e:	9309      	str	r3, [sp, #36]	; 0x24
 8001990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001992:	0c1b      	lsrs	r3, r3, #16
 8001994:	9308      	str	r3, [sp, #32]
 8001996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	9307      	str	r3, [sp, #28]
 80019a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019a2:	9a08      	ldr	r2, [sp, #32]
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	9306      	str	r3, [sp, #24]
 80019aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	9305      	str	r3, [sp, #20]
 80019b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019b6:	9a08      	ldr	r2, [sp, #32]
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	9311      	str	r3, [sp, #68]	; 0x44
 80019be:	9b07      	ldr	r3, [sp, #28]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	9a06      	ldr	r2, [sp, #24]
 80019c4:	4413      	add	r3, r2
 80019c6:	9306      	str	r3, [sp, #24]
 80019c8:	9a06      	ldr	r2, [sp, #24]
 80019ca:	9b05      	ldr	r3, [sp, #20]
 80019cc:	4413      	add	r3, r2
 80019ce:	9306      	str	r3, [sp, #24]
 80019d0:	9a06      	ldr	r2, [sp, #24]
 80019d2:	9b05      	ldr	r3, [sp, #20]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d203      	bcs.n	80019e0 <mpn_invert_3by2+0x1b8>
 80019d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80019da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80019de:	9311      	str	r3, [sp, #68]	; 0x44
 80019e0:	9b06      	ldr	r3, [sp, #24]
 80019e2:	0c1a      	lsrs	r2, r3, #16
 80019e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80019e6:	4413      	add	r3, r2
 80019e8:	9304      	str	r3, [sp, #16]
 80019ea:	9b06      	ldr	r3, [sp, #24]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	9b07      	ldr	r3, [sp, #28]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	9303      	str	r3, [sp, #12]
      r += th;
 80019f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80019f8:	9b04      	ldr	r3, [sp, #16]
 80019fa:	4413      	add	r3, r2
 80019fc:	9315      	str	r3, [sp, #84]	; 0x54
      if (r < th)
 80019fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001a00:	9b04      	ldr	r3, [sp, #16]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d21e      	bcs.n	8001a44 <mpn_invert_3by2+0x21c>
	{
	  m--;
 8001a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	9314      	str	r3, [sp, #80]	; 0x50
	  m -= ((r > u1) | ((r == u1) & (tl > u0)));
 8001a0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001a0e:	9b01      	ldr	r3, [sp, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	bf94      	ite	ls
 8001a14:	2300      	movls	r3, #0
 8001a16:	2301      	movhi	r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	9915      	ldr	r1, [sp, #84]	; 0x54
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	4299      	cmp	r1, r3
 8001a22:	bf14      	ite	ne
 8001a24:	2300      	movne	r3, #0
 8001a26:	2301      	moveq	r3, #1
 8001a28:	b2d9      	uxtb	r1, r3
 8001a2a:	9803      	ldr	r0, [sp, #12]
 8001a2c:	9b00      	ldr	r3, [sp, #0]
 8001a2e:	4298      	cmp	r0, r3
 8001a30:	bf94      	ite	ls
 8001a32:	2300      	movls	r3, #0
 8001a34:	2301      	movhi	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	400b      	ands	r3, r1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	9314      	str	r3, [sp, #80]	; 0x50
	}
    }

  return m;
 8001a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	b017      	add	sp, #92	; 0x5c
 8001a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a4e:	bf00      	nop

08001a50 <mpn_div_qr_1_invert>:
  mp_limb_t di;
};

static void
mpn_div_qr_1_invert (struct gmp_div_inverse *inv, mp_limb_t d)
{
 8001a50:	b500      	push	{lr}
 8001a52:	b087      	sub	sp, #28
 8001a54:	9001      	str	r0, [sp, #4]
 8001a56:	9100      	str	r1, [sp, #0]
  unsigned shift;

  assert (d > 0);
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10f      	bne.n	8001a7e <mpn_div_qr_1_invert+0x2e>
 8001a5e:	f243 7064 	movw	r0, #14180	; 0x3764
 8001a62:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001a66:	f240 3121 	movw	r1, #801	; 0x321
 8001a6a:	f643 5228 	movw	r2, #15656	; 0x3d28
 8001a6e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001a72:	f643 037c 	movw	r3, #14460	; 0x387c
 8001a76:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001a7a:	f00b fe51 	bl	800d720 <__assert_func>
  gmp_clz (shift, d);
 8001a7e:	9b00      	ldr	r3, [sp, #0]
 8001a80:	9305      	str	r3, [sp, #20]
 8001a82:	2300      	movs	r3, #0
 8001a84:	9304      	str	r3, [sp, #16]
 8001a86:	e005      	b.n	8001a94 <mpn_div_qr_1_invert+0x44>
 8001a88:	9b05      	ldr	r3, [sp, #20]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	9305      	str	r3, [sp, #20]
 8001a8e:	9b04      	ldr	r3, [sp, #16]
 8001a90:	3308      	adds	r3, #8
 8001a92:	9304      	str	r3, [sp, #16]
 8001a94:	9b05      	ldr	r3, [sp, #20]
 8001a96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f4      	beq.n	8001a88 <mpn_div_qr_1_invert+0x38>
 8001a9e:	e005      	b.n	8001aac <mpn_div_qr_1_invert+0x5c>
 8001aa0:	9b05      	ldr	r3, [sp, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	9305      	str	r3, [sp, #20]
 8001aa6:	9b04      	ldr	r3, [sp, #16]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	9304      	str	r3, [sp, #16]
 8001aac:	9b05      	ldr	r3, [sp, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	daf6      	bge.n	8001aa0 <mpn_div_qr_1_invert+0x50>
 8001ab2:	9b04      	ldr	r3, [sp, #16]
 8001ab4:	9303      	str	r3, [sp, #12]
  inv->shift = shift;
 8001ab6:	9b01      	ldr	r3, [sp, #4]
 8001ab8:	9a03      	ldr	r2, [sp, #12]
 8001aba:	601a      	str	r2, [r3, #0]
  inv->d1 = d << shift;
 8001abc:	9b03      	ldr	r3, [sp, #12]
 8001abe:	9a00      	ldr	r2, [sp, #0]
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	9b01      	ldr	r3, [sp, #4]
 8001ac4:	605a      	str	r2, [r3, #4]
  inv->di = mpn_invert_limb (inv->d1);
 8001ac6:	9b01      	ldr	r3, [sp, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	2100      	movs	r1, #0
 8001ace:	f7ff feab 	bl	8001828 <mpn_invert_3by2>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	9b01      	ldr	r3, [sp, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
}
 8001ad8:	b007      	add	sp, #28
 8001ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ade:	bf00      	nop

08001ae0 <mpn_div_qr_2_invert>:

static void
mpn_div_qr_2_invert (struct gmp_div_inverse *inv,
		     mp_limb_t d1, mp_limb_t d0)
{
 8001ae0:	b500      	push	{lr}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	9003      	str	r0, [sp, #12]
 8001ae6:	9102      	str	r1, [sp, #8]
 8001ae8:	9201      	str	r2, [sp, #4]
  unsigned shift;

  assert (d1 > 0);
 8001aea:	9b02      	ldr	r3, [sp, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10f      	bne.n	8001b10 <mpn_div_qr_2_invert+0x30>
 8001af0:	f243 7064 	movw	r0, #14180	; 0x3764
 8001af4:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001af8:	f240 312e 	movw	r1, #814	; 0x32e
 8001afc:	f643 523c 	movw	r2, #15676	; 0x3d3c
 8001b00:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001b04:	f643 0384 	movw	r3, #14468	; 0x3884
 8001b08:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001b0c:	f00b fe08 	bl	800d720 <__assert_func>
  gmp_clz (shift, d1);
 8001b10:	9b02      	ldr	r3, [sp, #8]
 8001b12:	9307      	str	r3, [sp, #28]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9306      	str	r3, [sp, #24]
 8001b18:	e005      	b.n	8001b26 <mpn_div_qr_2_invert+0x46>
 8001b1a:	9b07      	ldr	r3, [sp, #28]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	9307      	str	r3, [sp, #28]
 8001b20:	9b06      	ldr	r3, [sp, #24]
 8001b22:	3308      	adds	r3, #8
 8001b24:	9306      	str	r3, [sp, #24]
 8001b26:	9b07      	ldr	r3, [sp, #28]
 8001b28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f4      	beq.n	8001b1a <mpn_div_qr_2_invert+0x3a>
 8001b30:	e005      	b.n	8001b3e <mpn_div_qr_2_invert+0x5e>
 8001b32:	9b07      	ldr	r3, [sp, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	9307      	str	r3, [sp, #28]
 8001b38:	9b06      	ldr	r3, [sp, #24]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	9306      	str	r3, [sp, #24]
 8001b3e:	9b07      	ldr	r3, [sp, #28]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	daf6      	bge.n	8001b32 <mpn_div_qr_2_invert+0x52>
 8001b44:	9b06      	ldr	r3, [sp, #24]
 8001b46:	9305      	str	r3, [sp, #20]
  inv->shift = shift;
 8001b48:	9b03      	ldr	r3, [sp, #12]
 8001b4a:	9a05      	ldr	r2, [sp, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
  if (shift > 0)
 8001b4e:	9b05      	ldr	r3, [sp, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00f      	beq.n	8001b74 <mpn_div_qr_2_invert+0x94>
    {
      d1 = (d1 << shift) | (d0 >> (GMP_LIMB_BITS - shift));
 8001b54:	9b05      	ldr	r3, [sp, #20]
 8001b56:	9a02      	ldr	r2, [sp, #8]
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	9b05      	ldr	r3, [sp, #20]
 8001b5c:	f1c3 0320 	rsb	r3, r3, #32
 8001b60:	9901      	ldr	r1, [sp, #4]
 8001b62:	fa21 f303 	lsr.w	r3, r1, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	9302      	str	r3, [sp, #8]
      d0 <<= shift;
 8001b6a:	9b05      	ldr	r3, [sp, #20]
 8001b6c:	9a01      	ldr	r2, [sp, #4]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	9301      	str	r3, [sp, #4]
    }
  inv->d1 = d1;
 8001b74:	9b03      	ldr	r3, [sp, #12]
 8001b76:	9a02      	ldr	r2, [sp, #8]
 8001b78:	605a      	str	r2, [r3, #4]
  inv->d0 = d0;
 8001b7a:	9b03      	ldr	r3, [sp, #12]
 8001b7c:	9a01      	ldr	r2, [sp, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
  inv->di = mpn_invert_3by2 (d1, d0);
 8001b80:	9802      	ldr	r0, [sp, #8]
 8001b82:	9901      	ldr	r1, [sp, #4]
 8001b84:	f7ff fe50 	bl	8001828 <mpn_invert_3by2>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	9b03      	ldr	r3, [sp, #12]
 8001b8c:	60da      	str	r2, [r3, #12]
}
 8001b8e:	b009      	add	sp, #36	; 0x24
 8001b90:	f85d fb04 	ldr.w	pc, [sp], #4

08001b94 <mpn_div_qr_invert>:

static void
mpn_div_qr_invert (struct gmp_div_inverse *inv,
		   mp_srcptr dp, mp_size_t dn)
{
 8001b94:	b500      	push	{lr}
 8001b96:	b08b      	sub	sp, #44	; 0x2c
 8001b98:	9003      	str	r0, [sp, #12]
 8001b9a:	9102      	str	r1, [sp, #8]
 8001b9c:	9201      	str	r2, [sp, #4]
  assert (dn > 0);
 8001b9e:	9b01      	ldr	r3, [sp, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dc0f      	bgt.n	8001bc4 <mpn_div_qr_invert+0x30>
 8001ba4:	f243 7064 	movw	r0, #14180	; 0x3764
 8001ba8:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001bac:	f240 313f 	movw	r1, #831	; 0x33f
 8001bb0:	f643 5250 	movw	r2, #15696	; 0x3d50
 8001bb4:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001bb8:	f643 038c 	movw	r3, #14476	; 0x388c
 8001bbc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001bc0:	f00b fdae 	bl	800d720 <__assert_func>

  if (dn == 1)
 8001bc4:	9b01      	ldr	r3, [sp, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d106      	bne.n	8001bd8 <mpn_div_qr_invert+0x44>
    mpn_div_qr_1_invert (inv, dp[0]);
 8001bca:	9b02      	ldr	r3, [sp, #8]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	9803      	ldr	r0, [sp, #12]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff ff3d 	bl	8001a50 <mpn_div_qr_1_invert>
 8001bd6:	e07e      	b.n	8001cd6 <mpn_div_qr_invert+0x142>
  else if (dn == 2)
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d10a      	bne.n	8001bf4 <mpn_div_qr_invert+0x60>
    mpn_div_qr_2_invert (inv, dp[1], dp[0]);
 8001bde:	9b02      	ldr	r3, [sp, #8]
 8001be0:	3304      	adds	r3, #4
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	9b02      	ldr	r3, [sp, #8]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	9803      	ldr	r0, [sp, #12]
 8001bea:	4611      	mov	r1, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	f7ff ff77 	bl	8001ae0 <mpn_div_qr_2_invert>
 8001bf2:	e070      	b.n	8001cd6 <mpn_div_qr_invert+0x142>
  else
    {
      unsigned shift;
      mp_limb_t d1, d0;

      d1 = dp[dn-1];
 8001bf4:	9b01      	ldr	r3, [sp, #4]
 8001bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	9a02      	ldr	r2, [sp, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	9309      	str	r3, [sp, #36]	; 0x24
      d0 = dp[dn-2];
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c0c:	3b02      	subs	r3, #2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	9a02      	ldr	r2, [sp, #8]
 8001c12:	4413      	add	r3, r2
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	9308      	str	r3, [sp, #32]
      assert (d1 > 0);
 8001c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <mpn_div_qr_invert+0xaa>
 8001c1e:	f243 7064 	movw	r0, #14180	; 0x3764
 8001c22:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001c26:	f44f 7153 	mov.w	r1, #844	; 0x34c
 8001c2a:	f643 5250 	movw	r2, #15696	; 0x3d50
 8001c2e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001c32:	f643 0384 	movw	r3, #14468	; 0x3884
 8001c36:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001c3a:	f00b fd71 	bl	800d720 <__assert_func>
      gmp_clz (shift, d1);
 8001c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c40:	9307      	str	r3, [sp, #28]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9306      	str	r3, [sp, #24]
 8001c46:	e005      	b.n	8001c54 <mpn_div_qr_invert+0xc0>
 8001c48:	9b07      	ldr	r3, [sp, #28]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	9307      	str	r3, [sp, #28]
 8001c4e:	9b06      	ldr	r3, [sp, #24]
 8001c50:	3308      	adds	r3, #8
 8001c52:	9306      	str	r3, [sp, #24]
 8001c54:	9b07      	ldr	r3, [sp, #28]
 8001c56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f4      	beq.n	8001c48 <mpn_div_qr_invert+0xb4>
 8001c5e:	e005      	b.n	8001c6c <mpn_div_qr_invert+0xd8>
 8001c60:	9b07      	ldr	r3, [sp, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	9307      	str	r3, [sp, #28]
 8001c66:	9b06      	ldr	r3, [sp, #24]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	9306      	str	r3, [sp, #24]
 8001c6c:	9b07      	ldr	r3, [sp, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	daf6      	bge.n	8001c60 <mpn_div_qr_invert+0xcc>
 8001c72:	9b06      	ldr	r3, [sp, #24]
 8001c74:	9305      	str	r3, [sp, #20]
      inv->shift = shift;
 8001c76:	9b03      	ldr	r3, [sp, #12]
 8001c78:	9a05      	ldr	r2, [sp, #20]
 8001c7a:	601a      	str	r2, [r3, #0]
      if (shift > 0)
 8001c7c:	9b05      	ldr	r3, [sp, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01c      	beq.n	8001cbc <mpn_div_qr_invert+0x128>
	{
	  d1 = (d1 << shift) | (d0 >> (GMP_LIMB_BITS - shift));
 8001c82:	9b05      	ldr	r3, [sp, #20]
 8001c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c86:	409a      	lsls	r2, r3
 8001c88:	9b05      	ldr	r3, [sp, #20]
 8001c8a:	f1c3 0320 	rsb	r3, r3, #32
 8001c8e:	9908      	ldr	r1, [sp, #32]
 8001c90:	fa21 f303 	lsr.w	r3, r1, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	9309      	str	r3, [sp, #36]	; 0x24
	  d0 = (d0 << shift) | (dp[dn-3] >> (GMP_LIMB_BITS - shift));
 8001c98:	9b05      	ldr	r3, [sp, #20]
 8001c9a:	9a08      	ldr	r2, [sp, #32]
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	9b01      	ldr	r3, [sp, #4]
 8001ca0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	9902      	ldr	r1, [sp, #8]
 8001caa:	440b      	add	r3, r1
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	9b05      	ldr	r3, [sp, #20]
 8001cb0:	f1c3 0320 	rsb	r3, r3, #32
 8001cb4:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	9308      	str	r3, [sp, #32]
	}
      inv->d1 = d1;
 8001cbc:	9b03      	ldr	r3, [sp, #12]
 8001cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cc0:	605a      	str	r2, [r3, #4]
      inv->d0 = d0;
 8001cc2:	9b03      	ldr	r3, [sp, #12]
 8001cc4:	9a08      	ldr	r2, [sp, #32]
 8001cc6:	609a      	str	r2, [r3, #8]
      inv->di = mpn_invert_3by2 (d1, d0);
 8001cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cca:	9908      	ldr	r1, [sp, #32]
 8001ccc:	f7ff fdac 	bl	8001828 <mpn_invert_3by2>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	9b03      	ldr	r3, [sp, #12]
 8001cd4:	60da      	str	r2, [r3, #12]
    }
}
 8001cd6:	b00b      	add	sp, #44	; 0x2c
 8001cd8:	f85d fb04 	ldr.w	pc, [sp], #4

08001cdc <mpn_div_qr_1_preinv>:
/* Not matching current public gmp interface, rather corresponding to
   the sbpi1_div_* functions. */
static mp_limb_t
mpn_div_qr_1_preinv (mp_ptr qp, mp_srcptr np, mp_size_t nn,
		     const struct gmp_div_inverse *inv)
{
 8001cdc:	b500      	push	{lr}
 8001cde:	b099      	sub	sp, #100	; 0x64
 8001ce0:	9003      	str	r0, [sp, #12]
 8001ce2:	9102      	str	r1, [sp, #8]
 8001ce4:	9201      	str	r2, [sp, #4]
 8001ce6:	9300      	str	r3, [sp, #0]
  mp_limb_t d, di;
  mp_limb_t r;
  mp_ptr tp = NULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9316      	str	r3, [sp, #88]	; 0x58

  if (inv->shift > 0)
 8001cec:	9b00      	ldr	r3, [sp, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00e      	beq.n	8001d12 <mpn_div_qr_1_preinv+0x36>
    {
      tp = gmp_xalloc_limbs (nn);
 8001cf4:	9801      	ldr	r0, [sp, #4]
 8001cf6:	f7fe ff53 	bl	8000ba0 <gmp_xalloc_limbs>
 8001cfa:	9016      	str	r0, [sp, #88]	; 0x58
      r = mpn_lshift (tp, np, nn, inv->shift);
 8001cfc:	9b00      	ldr	r3, [sp, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d02:	9902      	ldr	r1, [sp, #8]
 8001d04:	9a01      	ldr	r2, [sp, #4]
 8001d06:	f7ff fbcd 	bl	80014a4 <mpn_lshift>
 8001d0a:	9017      	str	r0, [sp, #92]	; 0x5c
      np = tp;
 8001d0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	e001      	b.n	8001d16 <mpn_div_qr_1_preinv+0x3a>
    }
  else
    r = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	9317      	str	r3, [sp, #92]	; 0x5c

  d = inv->d1;
 8001d16:	9b00      	ldr	r3, [sp, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	9312      	str	r3, [sp, #72]	; 0x48
  di = inv->di;
 8001d1c:	9b00      	ldr	r3, [sp, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	9311      	str	r3, [sp, #68]	; 0x44
  while (nn-- > 0)
 8001d22:	e08c      	b.n	8001e3e <mpn_div_qr_1_preinv+0x162>
    {
      mp_limb_t q;

      gmp_udiv_qrnnd_preinv (q, r, r, np[nn], d, di);
 8001d24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001d26:	9310      	str	r3, [sp, #64]	; 0x40
 8001d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001d2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	930e      	str	r3, [sp, #56]	; 0x38
 8001d32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	930d      	str	r3, [sp, #52]	; 0x34
 8001d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8001d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	930a      	str	r3, [sp, #40]	; 0x28
 8001d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	9309      	str	r3, [sp, #36]	; 0x24
 8001d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	9308      	str	r3, [sp, #32]
 8001d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d72:	4413      	add	r3, r2
 8001d74:	9309      	str	r3, [sp, #36]	; 0x24
 8001d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d78:	9b08      	ldr	r3, [sp, #32]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d80:	9b08      	ldr	r3, [sp, #32]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d203      	bcs.n	8001d8e <mpn_div_qr_1_preinv+0xb2>
 8001d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001d88:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d90:	0c1a      	lsrs	r2, r3, #16
 8001d92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001d94:	4413      	add	r3, r2
 8001d96:	9315      	str	r3, [sp, #84]	; 0x54
 8001d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	9307      	str	r3, [sp, #28]
 8001da4:	9b01      	ldr	r3, [sp, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	9a02      	ldr	r2, [sp, #8]
 8001daa:	4413      	add	r3, r2
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	9b07      	ldr	r3, [sp, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	9306      	str	r3, [sp, #24]
 8001db4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001db8:	441a      	add	r2, r3
 8001dba:	9906      	ldr	r1, [sp, #24]
 8001dbc:	9b07      	ldr	r3, [sp, #28]
 8001dbe:	4299      	cmp	r1, r3
 8001dc0:	bf2c      	ite	cs
 8001dc2:	2300      	movcs	r3, #0
 8001dc4:	2301      	movcc	r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3301      	adds	r3, #1
 8001dcc:	9315      	str	r3, [sp, #84]	; 0x54
 8001dce:	9b06      	ldr	r3, [sp, #24]
 8001dd0:	9307      	str	r3, [sp, #28]
 8001dd2:	9b01      	ldr	r3, [sp, #4]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	9a02      	ldr	r2, [sp, #8]
 8001dd8:	4413      	add	r3, r2
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001dde:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	9314      	str	r3, [sp, #80]	; 0x50
 8001de8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001dea:	9b07      	ldr	r3, [sp, #28]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	bf94      	ite	ls
 8001df0:	2300      	movls	r3, #0
 8001df2:	2301      	movhi	r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	425b      	negs	r3, r3
 8001df8:	9305      	str	r3, [sp, #20]
 8001dfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001dfc:	9b05      	ldr	r3, [sp, #20]
 8001dfe:	4413      	add	r3, r2
 8001e00:	9315      	str	r3, [sp, #84]	; 0x54
 8001e02:	9a05      	ldr	r2, [sp, #20]
 8001e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001e06:	4013      	ands	r3, r2
 8001e08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001e0a:	4413      	add	r3, r2
 8001e0c:	9314      	str	r3, [sp, #80]	; 0x50
 8001e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d306      	bcc.n	8001e24 <mpn_div_qr_1_preinv+0x148>
 8001e16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	9314      	str	r3, [sp, #80]	; 0x50
 8001e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001e20:	3301      	adds	r3, #1
 8001e22:	9315      	str	r3, [sp, #84]	; 0x54
 8001e24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001e26:	9317      	str	r3, [sp, #92]	; 0x5c
 8001e28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001e2a:	9304      	str	r3, [sp, #16]
      if (qp)
 8001e2c:	9b03      	ldr	r3, [sp, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <mpn_div_qr_1_preinv+0x162>
	qp[nn] = q;
 8001e32:	9b01      	ldr	r3, [sp, #4]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	9a03      	ldr	r2, [sp, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	9a04      	ldr	r2, [sp, #16]
 8001e3c:	601a      	str	r2, [r3, #0]
  else
    r = 0;

  d = inv->d1;
  di = inv->di;
  while (nn-- > 0)
 8001e3e:	9b01      	ldr	r3, [sp, #4]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	9201      	str	r2, [sp, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f73f af6d 	bgt.w	8001d24 <mpn_div_qr_1_preinv+0x48>

      gmp_udiv_qrnnd_preinv (q, r, r, np[nn], d, di);
      if (qp)
	qp[nn] = q;
    }
  if (inv->shift > 0)
 8001e4a:	9b00      	ldr	r3, [sp, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <mpn_div_qr_1_preinv+0x186>
    gmp_free (tp);
 8001e52:	f240 0314 	movw	r3, #20
 8001e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4798      	blx	r3

  return r >> inv->shift;
 8001e62:	9b00      	ldr	r3, [sp, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	b019      	add	sp, #100	; 0x64
 8001e70:	f85d fb04 	ldr.w	pc, [sp], #4

08001e74 <mpn_div_qr_1>:

static mp_limb_t
mpn_div_qr_1 (mp_ptr qp, mp_srcptr np, mp_size_t nn, mp_limb_t d)
{
 8001e74:	b500      	push	{lr}
 8001e76:	b08f      	sub	sp, #60	; 0x3c
 8001e78:	9003      	str	r0, [sp, #12]
 8001e7a:	9102      	str	r1, [sp, #8]
 8001e7c:	9201      	str	r2, [sp, #4]
 8001e7e:	9300      	str	r3, [sp, #0]
  assert (d > 0);
 8001e80:	9b00      	ldr	r3, [sp, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <mpn_div_qr_1+0x32>
 8001e86:	f243 7064 	movw	r0, #14180	; 0x3764
 8001e8a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001e8e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001e92:	f643 5264 	movw	r2, #15716	; 0x3d64
 8001e96:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001e9a:	f643 037c 	movw	r3, #14460	; 0x387c
 8001e9e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001ea2:	f00b fc3d 	bl	800d720 <__assert_func>

  /* Special case for powers of two. */
  if ((d & (d-1)) == 0)
 8001ea6:	9b00      	ldr	r3, [sp, #0]
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	9b00      	ldr	r3, [sp, #0]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d140      	bne.n	8001f34 <mpn_div_qr_1+0xc0>
    {
      mp_limb_t r = np[0] & (d-1);
 8001eb2:	9b02      	ldr	r3, [sp, #8]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	9b00      	ldr	r3, [sp, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	4013      	ands	r3, r2
 8001ebc:	930b      	str	r3, [sp, #44]	; 0x2c
      if (qp)
 8001ebe:	9b03      	ldr	r3, [sp, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d035      	beq.n	8001f30 <mpn_div_qr_1+0xbc>
	{
	  if (d <= 1)
 8001ec4:	9b00      	ldr	r3, [sp, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d805      	bhi.n	8001ed6 <mpn_div_qr_1+0x62>
	    mpn_copyi (qp, np, nn);
 8001eca:	9803      	ldr	r0, [sp, #12]
 8001ecc:	9902      	ldr	r1, [sp, #8]
 8001ece:	9a01      	ldr	r2, [sp, #4]
 8001ed0:	f7fe fe9e 	bl	8000c10 <mpn_copyi>
 8001ed4:	e02c      	b.n	8001f30 <mpn_div_qr_1+0xbc>
	  else
	    {
	      unsigned shift;
	      gmp_ctz (shift, d);
 8001ed6:	9b00      	ldr	r3, [sp, #0]
 8001ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8001eda:	2300      	movs	r3, #0
 8001edc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ee0:	425a      	negs	r2, r3
 8001ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8001ee8:	2300      	movs	r3, #0
 8001eea:	930c      	str	r3, [sp, #48]	; 0x30
 8001eec:	e005      	b.n	8001efa <mpn_div_qr_1+0x86>
 8001eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8001ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8001efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001efc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f4      	beq.n	8001eee <mpn_div_qr_1+0x7a>
 8001f04:	e005      	b.n	8001f12 <mpn_div_qr_1+0x9e>
 8001f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	930d      	str	r3, [sp, #52]	; 0x34
 8001f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f0e:	3301      	adds	r3, #1
 8001f10:	930c      	str	r3, [sp, #48]	; 0x30
 8001f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	daf6      	bge.n	8001f06 <mpn_div_qr_1+0x92>
 8001f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f1e:	f1c3 031f 	rsb	r3, r3, #31
 8001f22:	9308      	str	r3, [sp, #32]
	      mpn_rshift (qp, np, nn, shift);
 8001f24:	9803      	ldr	r0, [sp, #12]
 8001f26:	9902      	ldr	r1, [sp, #8]
 8001f28:	9a01      	ldr	r2, [sp, #4]
 8001f2a:	9b08      	ldr	r3, [sp, #32]
 8001f2c:	f7ff fb40 	bl	80015b0 <mpn_rshift>
	    }
	}
      return r;
 8001f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f32:	e00b      	b.n	8001f4c <mpn_div_qr_1+0xd8>
    }
  else
    {
      struct gmp_div_inverse inv;
      mpn_div_qr_1_invert (&inv, d);
 8001f34:	ab04      	add	r3, sp, #16
 8001f36:	4618      	mov	r0, r3
 8001f38:	9900      	ldr	r1, [sp, #0]
 8001f3a:	f7ff fd89 	bl	8001a50 <mpn_div_qr_1_invert>
      return mpn_div_qr_1_preinv (qp, np, nn, &inv);
 8001f3e:	ab04      	add	r3, sp, #16
 8001f40:	9803      	ldr	r0, [sp, #12]
 8001f42:	9902      	ldr	r1, [sp, #8]
 8001f44:	9a01      	ldr	r2, [sp, #4]
 8001f46:	f7ff fec9 	bl	8001cdc <mpn_div_qr_1_preinv>
 8001f4a:	4603      	mov	r3, r0
    }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	b00f      	add	sp, #60	; 0x3c
 8001f50:	f85d fb04 	ldr.w	pc, [sp], #4

08001f54 <mpn_div_qr_2_preinv>:

static void
mpn_div_qr_2_preinv (mp_ptr qp, mp_ptr rp, mp_srcptr np, mp_size_t nn,
		     const struct gmp_div_inverse *inv)
{
 8001f54:	b500      	push	{lr}
 8001f56:	b0ad      	sub	sp, #180	; 0xb4
 8001f58:	9003      	str	r0, [sp, #12]
 8001f5a:	9102      	str	r1, [sp, #8]
 8001f5c:	9201      	str	r2, [sp, #4]
 8001f5e:	9300      	str	r3, [sp, #0]
  unsigned shift;
  mp_size_t i;
  mp_limb_t d1, d0, di, r1, r0;
  mp_ptr tp;

  assert (nn >= 2);
 8001f60:	9b00      	ldr	r3, [sp, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	dc0f      	bgt.n	8001f86 <mpn_div_qr_2_preinv+0x32>
 8001f66:	f243 7064 	movw	r0, #14180	; 0x3764
 8001f6a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001f6e:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001f72:	f643 5274 	movw	r2, #15732	; 0x3d74
 8001f76:	f6c0 0201 	movt	r2, #2049	; 0x801
 8001f7a:	f643 0394 	movw	r3, #14484	; 0x3894
 8001f7e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001f82:	f00b fbcd 	bl	800d720 <__assert_func>
  shift = inv->shift;
 8001f86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	9324      	str	r3, [sp, #144]	; 0x90
  d1 = inv->d1;
 8001f8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	9323      	str	r3, [sp, #140]	; 0x8c
  d0 = inv->d0;
 8001f92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	9322      	str	r3, [sp, #136]	; 0x88
  di = inv->di;
 8001f98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	9321      	str	r3, [sp, #132]	; 0x84

  if (shift > 0)
 8001f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <mpn_div_qr_2_preinv+0x6c>
    {
      tp = gmp_xalloc_limbs (nn);
 8001fa4:	9800      	ldr	r0, [sp, #0]
 8001fa6:	f7fe fdfb 	bl	8000ba0 <gmp_xalloc_limbs>
 8001faa:	9028      	str	r0, [sp, #160]	; 0xa0
      r1 = mpn_lshift (tp, np, nn, shift);
 8001fac:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8001fae:	9901      	ldr	r1, [sp, #4]
 8001fb0:	9a00      	ldr	r2, [sp, #0]
 8001fb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001fb4:	f7ff fa76 	bl	80014a4 <mpn_lshift>
 8001fb8:	902a      	str	r0, [sp, #168]	; 0xa8
      np = tp;
 8001fba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	e001      	b.n	8001fc4 <mpn_div_qr_2_preinv+0x70>
    }
  else
    r1 = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	932a      	str	r3, [sp, #168]	; 0xa8

  r0 = np[nn - 1];
 8001fc4:	9b00      	ldr	r3, [sp, #0]
 8001fc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	9a01      	ldr	r2, [sp, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	9329      	str	r3, [sp, #164]	; 0xa4

  i = nn - 2;
 8001fd6:	9b00      	ldr	r3, [sp, #0]
 8001fd8:	3b02      	subs	r3, #2
 8001fda:	932b      	str	r3, [sp, #172]	; 0xac
  do
    {
      mp_limb_t n0, q;
      n0 = np[i];
 8001fdc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	9a01      	ldr	r2, [sp, #4]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	9320      	str	r3, [sp, #128]	; 0x80
      gmp_udiv_qr_3by2 (q, r1, r0, r1, r0, n0, d1, d0, di);
 8001fe8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001fea:	931f      	str	r3, [sp, #124]	; 0x7c
 8001fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001fee:	931e      	str	r3, [sp, #120]	; 0x78
 8001ff0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	931d      	str	r3, [sp, #116]	; 0x74
 8001ff6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	931c      	str	r3, [sp, #112]	; 0x70
 8001ffc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	931b      	str	r3, [sp, #108]	; 0x6c
 8002002:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	931a      	str	r3, [sp, #104]	; 0x68
 8002008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800200a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	9319      	str	r3, [sp, #100]	; 0x64
 8002012:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002014:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	9318      	str	r3, [sp, #96]	; 0x60
 800201c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800201e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	9317      	str	r3, [sp, #92]	; 0x5c
 8002026:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002028:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	9326      	str	r3, [sp, #152]	; 0x98
 8002030:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002032:	0c1b      	lsrs	r3, r3, #16
 8002034:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002036:	4413      	add	r3, r2
 8002038:	9318      	str	r3, [sp, #96]	; 0x60
 800203a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800203c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800203e:	4413      	add	r3, r2
 8002040:	9318      	str	r3, [sp, #96]	; 0x60
 8002042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002046:	429a      	cmp	r2, r3
 8002048:	d203      	bcs.n	8002052 <mpn_div_qr_2_preinv+0xfe>
 800204a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800204c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002050:	9326      	str	r3, [sp, #152]	; 0x98
 8002052:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002054:	0c1a      	lsrs	r2, r3, #16
 8002056:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002058:	4413      	add	r3, r2
 800205a:	9327      	str	r3, [sp, #156]	; 0x9c
 800205c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800205e:	041a      	lsls	r2, r3, #16
 8002060:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002062:	b29b      	uxth	r3, r3
 8002064:	4413      	add	r3, r2
 8002066:	9316      	str	r3, [sp, #88]	; 0x58
 8002068:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800206a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800206c:	4413      	add	r3, r2
 800206e:	9315      	str	r3, [sp, #84]	; 0x54
 8002070:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002072:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002074:	441a      	add	r2, r3
 8002076:	9915      	ldr	r1, [sp, #84]	; 0x54
 8002078:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800207a:	4299      	cmp	r1, r3
 800207c:	bf2c      	ite	cs
 800207e:	2300      	movcs	r3, #0
 8002080:	2301      	movcc	r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4413      	add	r3, r2
 8002086:	9327      	str	r3, [sp, #156]	; 0x9c
 8002088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800208a:	9316      	str	r3, [sp, #88]	; 0x58
 800208c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800208e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	932a      	str	r3, [sp, #168]	; 0xa8
 800209a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800209c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	9314      	str	r3, [sp, #80]	; 0x50
 80020a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80020a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80020a6:	1ad2      	subs	r2, r2, r3
 80020a8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80020aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80020ac:	4299      	cmp	r1, r3
 80020ae:	bf2c      	ite	cs
 80020b0:	2300      	movcs	r3, #0
 80020b2:	2301      	movcc	r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	932a      	str	r3, [sp, #168]	; 0xa8
 80020ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80020bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80020be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80020c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80020c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80020c4:	9312      	str	r3, [sp, #72]	; 0x48
 80020c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	9311      	str	r3, [sp, #68]	; 0x44
 80020cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	9310      	str	r3, [sp, #64]	; 0x40
 80020d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80020d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	930e      	str	r3, [sp, #56]	; 0x38
 80020de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80020e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	930d      	str	r3, [sp, #52]	; 0x34
 80020e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80020ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	930c      	str	r3, [sp, #48]	; 0x30
 80020f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80020fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	9325      	str	r3, [sp, #148]	; 0x94
 8002106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800210c:	4413      	add	r3, r2
 800210e:	930c      	str	r3, [sp, #48]	; 0x30
 8002110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002114:	4413      	add	r3, r2
 8002116:	930c      	str	r3, [sp, #48]	; 0x30
 8002118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800211a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800211c:	429a      	cmp	r2, r3
 800211e:	d203      	bcs.n	8002128 <mpn_div_qr_2_preinv+0x1d4>
 8002120:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002122:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002126:	9325      	str	r3, [sp, #148]	; 0x94
 8002128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800212a:	0c1a      	lsrs	r2, r3, #16
 800212c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800212e:	4413      	add	r3, r2
 8002130:	930a      	str	r3, [sp, #40]	; 0x28
 8002132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002138:	b29b      	uxth	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	9309      	str	r3, [sp, #36]	; 0x24
 800213e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	9308      	str	r3, [sp, #32]
 8002146:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800214e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002150:	4299      	cmp	r1, r3
 8002152:	bf2c      	ite	cs
 8002154:	2300      	movcs	r3, #0
 8002156:	2301      	movcc	r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	932a      	str	r3, [sp, #168]	; 0xa8
 800215e:	9b08      	ldr	r3, [sp, #32]
 8002160:	9329      	str	r3, [sp, #164]	; 0xa4
 8002162:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002164:	3301      	adds	r3, #1
 8002166:	9327      	str	r3, [sp, #156]	; 0x9c
 8002168:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800216a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800216c:	429a      	cmp	r2, r3
 800216e:	bf34      	ite	cc
 8002170:	2300      	movcc	r3, #0
 8002172:	2301      	movcs	r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	425b      	negs	r3, r3
 8002178:	9307      	str	r3, [sp, #28]
 800217a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800217c:	9b07      	ldr	r3, [sp, #28]
 800217e:	4413      	add	r3, r2
 8002180:	9327      	str	r3, [sp, #156]	; 0x9c
 8002182:	9a07      	ldr	r2, [sp, #28]
 8002184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002186:	401a      	ands	r2, r3
 8002188:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800218a:	4413      	add	r3, r2
 800218c:	9306      	str	r3, [sp, #24]
 800218e:	9a07      	ldr	r2, [sp, #28]
 8002190:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002192:	401a      	ands	r2, r3
 8002194:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002196:	441a      	add	r2, r3
 8002198:	9906      	ldr	r1, [sp, #24]
 800219a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800219c:	4299      	cmp	r1, r3
 800219e:	bf2c      	ite	cs
 80021a0:	2300      	movcs	r3, #0
 80021a2:	2301      	movcc	r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	932a      	str	r3, [sp, #168]	; 0xa8
 80021aa:	9b06      	ldr	r3, [sp, #24]
 80021ac:	9329      	str	r3, [sp, #164]	; 0xa4
 80021ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80021b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d31c      	bcc.n	80021f0 <mpn_div_qr_2_preinv+0x29c>
 80021b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80021b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d803      	bhi.n	80021c6 <mpn_div_qr_2_preinv+0x272>
 80021be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80021c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d314      	bcc.n	80021f0 <mpn_div_qr_2_preinv+0x29c>
 80021c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80021c8:	3301      	adds	r3, #1
 80021ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80021cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80021ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	9305      	str	r3, [sp, #20]
 80021d4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80021d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80021d8:	1ad2      	subs	r2, r2, r3
 80021da:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80021dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80021de:	4299      	cmp	r1, r3
 80021e0:	bf2c      	ite	cs
 80021e2:	2300      	movcs	r3, #0
 80021e4:	2301      	movcc	r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	932a      	str	r3, [sp, #168]	; 0xa8
 80021ec:	9b05      	ldr	r3, [sp, #20]
 80021ee:	9329      	str	r3, [sp, #164]	; 0xa4

      if (qp)
 80021f0:	9b03      	ldr	r3, [sp, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <mpn_div_qr_2_preinv+0x2ae>
	qp[i] = q;
 80021f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	9a03      	ldr	r2, [sp, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002200:	601a      	str	r2, [r3, #0]
    }
  while (--i >= 0);
 8002202:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002204:	3b01      	subs	r3, #1
 8002206:	932b      	str	r3, [sp, #172]	; 0xac
 8002208:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800220a:	2b00      	cmp	r3, #0
 800220c:	f6bf aee6 	bge.w	8001fdc <mpn_div_qr_2_preinv+0x88>

  if (shift > 0)
 8002210:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002212:	2b00      	cmp	r3, #0
 8002214:	d02f      	beq.n	8002276 <mpn_div_qr_2_preinv+0x322>
    {
      assert ((r0 << (GMP_LIMB_BITS - shift)) == 0);
 8002216:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002218:	f1c3 0320 	rsb	r3, r3, #32
 800221c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00f      	beq.n	8002246 <mpn_div_qr_2_preinv+0x2f2>
 8002226:	f243 7064 	movw	r0, #14180	; 0x3764
 800222a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800222e:	f240 31c3 	movw	r1, #963	; 0x3c3
 8002232:	f643 5274 	movw	r2, #15732	; 0x3d74
 8002236:	f6c0 0201 	movt	r2, #2049	; 0x801
 800223a:	f643 039c 	movw	r3, #14492	; 0x389c
 800223e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002242:	f00b fa6d 	bl	800d720 <__assert_func>
      r0 = (r0 >> shift) | (r1 << (GMP_LIMB_BITS - shift));
 8002246:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002248:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800224a:	40da      	lsrs	r2, r3
 800224c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800224e:	f1c3 0320 	rsb	r3, r3, #32
 8002252:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	9329      	str	r3, [sp, #164]	; 0xa4
      r1 >>= shift;
 800225c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800225e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
 8002264:	932a      	str	r3, [sp, #168]	; 0xa8

      gmp_free (tp);
 8002266:	f240 0314 	movw	r3, #20
 800226a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8002272:	2100      	movs	r1, #0
 8002274:	4798      	blx	r3
    }

  rp[1] = r1;
 8002276:	9b02      	ldr	r3, [sp, #8]
 8002278:	3304      	adds	r3, #4
 800227a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800227c:	601a      	str	r2, [r3, #0]
  rp[0] = r0;
 800227e:	9b02      	ldr	r3, [sp, #8]
 8002280:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	b02d      	add	sp, #180	; 0xb4
 8002286:	f85d fb04 	ldr.w	pc, [sp], #4
 800228a:	bf00      	nop

0800228c <mpn_div_qr_pi1>:
static void
mpn_div_qr_pi1 (mp_ptr qp,
		mp_ptr np, mp_size_t nn, mp_limb_t n1,
		mp_srcptr dp, mp_size_t dn,
		mp_limb_t dinv)
{
 800228c:	b500      	push	{lr}
 800228e:	b0a9      	sub	sp, #164	; 0xa4
 8002290:	9003      	str	r0, [sp, #12]
 8002292:	9102      	str	r1, [sp, #8]
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	9300      	str	r3, [sp, #0]

  mp_limb_t d1, d0;
  mp_limb_t cy, cy1;
  mp_limb_t q;

  assert (dn > 2);
 8002298:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800229a:	2b02      	cmp	r3, #2
 800229c:	dc0f      	bgt.n	80022be <mpn_div_qr_pi1+0x32>
 800229e:	f243 7064 	movw	r0, #14180	; 0x3764
 80022a2:	f6c0 0001 	movt	r0, #2049	; 0x801
 80022a6:	f240 31e7 	movw	r1, #999	; 0x3e7
 80022aa:	f643 5288 	movw	r2, #15752	; 0x3d88
 80022ae:	f6c0 0201 	movt	r2, #2049	; 0x801
 80022b2:	f643 03c4 	movw	r3, #14532	; 0x38c4
 80022b6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80022ba:	f00b fa31 	bl	800d720 <__assert_func>
  assert (nn >= dn);
 80022be:	9a01      	ldr	r2, [sp, #4]
 80022c0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80022c2:	429a      	cmp	r2, r3
 80022c4:	da0f      	bge.n	80022e6 <mpn_div_qr_pi1+0x5a>
 80022c6:	f243 7064 	movw	r0, #14180	; 0x3764
 80022ca:	f6c0 0001 	movt	r0, #2049	; 0x801
 80022ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022d2:	f643 5288 	movw	r2, #15752	; 0x3d88
 80022d6:	f6c0 0201 	movt	r2, #2049	; 0x801
 80022da:	f643 03cc 	movw	r3, #14540	; 0x38cc
 80022de:	f6c0 0301 	movt	r3, #2049	; 0x801
 80022e2:	f00b fa1d 	bl	800d720 <__assert_func>

  d1 = dp[dn - 1];
 80022e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80022e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	3b01      	subs	r3, #1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80022f2:	4413      	add	r3, r2
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	9322      	str	r3, [sp, #136]	; 0x88
  d0 = dp[dn - 2];
 80022f8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80022fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022fe:	3b02      	subs	r3, #2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002304:	4413      	add	r3, r2
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	9321      	str	r3, [sp, #132]	; 0x84

  assert ((d1 & GMP_LIMB_HIGHBIT) != 0);
 800230a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0f      	blt.n	8002330 <mpn_div_qr_pi1+0xa4>
 8002310:	f243 7064 	movw	r0, #14180	; 0x3764
 8002314:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002318:	f240 31ed 	movw	r1, #1005	; 0x3ed
 800231c:	f643 5288 	movw	r2, #15752	; 0x3d88
 8002320:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002324:	f643 03d8 	movw	r3, #14552	; 0x38d8
 8002328:	f6c0 0301 	movt	r3, #2049	; 0x801
 800232c:	f00b f9f8 	bl	800d720 <__assert_func>
   *
   * We divide <n1, np[dn-1+i], np[dn-2+i], np[dn-3+i],..., np[i]>
   * by            <d1,          d0,        dp[dn-3],  ..., dp[0] >
   */

  i = nn - dn;
 8002330:	9a01      	ldr	r2, [sp, #4]
 8002332:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	9327      	str	r3, [sp, #156]	; 0x9c
  do
    {
      mp_limb_t n0 = np[dn-1+i];
 8002338:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800233a:	1e5a      	subs	r2, r3, #1
 800233c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	9a02      	ldr	r2, [sp, #8]
 8002344:	4413      	add	r3, r2
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	9325      	str	r3, [sp, #148]	; 0x94

      if (n1 == d1 && n0 == d0)
 800234a:	9a00      	ldr	r2, [sp, #0]
 800234c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800234e:	429a      	cmp	r2, r3
 8002350:	d11a      	bne.n	8002388 <mpn_div_qr_pi1+0xfc>
 8002352:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002356:	429a      	cmp	r2, r3
 8002358:	d116      	bne.n	8002388 <mpn_div_qr_pi1+0xfc>
	{
	  q = GMP_LIMB_MAX;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800235e:	9326      	str	r3, [sp, #152]	; 0x98
	  mpn_submul_1 (np+i, dp, dn, q);
 8002360:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	9a02      	ldr	r2, [sp, #8]
 8002366:	4413      	add	r3, r2
 8002368:	4618      	mov	r0, r3
 800236a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800236c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800236e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002370:	f7fe ff7e 	bl	8001270 <mpn_submul_1>
	  n1 = np[dn-1+i];	/* update n1, last loop's value will now be invalid */
 8002374:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	9a02      	ldr	r2, [sp, #8]
 8002380:	4413      	add	r3, r2
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	e15a      	b.n	800263e <mpn_div_qr_pi1+0x3b2>
	}
      else
	{
	  gmp_udiv_qr_3by2 (q, n1, n0, n1, n0, np[dn-2+i], d1, d0, dinv);
 8002388:	9b00      	ldr	r3, [sp, #0]
 800238a:	9320      	str	r3, [sp, #128]	; 0x80
 800238c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800238e:	931f      	str	r3, [sp, #124]	; 0x7c
 8002390:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002392:	b29b      	uxth	r3, r3
 8002394:	931e      	str	r3, [sp, #120]	; 0x78
 8002396:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	931d      	str	r3, [sp, #116]	; 0x74
 800239c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800239e:	b29b      	uxth	r3, r3
 80023a0:	931c      	str	r3, [sp, #112]	; 0x70
 80023a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80023a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80023aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	931a      	str	r3, [sp, #104]	; 0x68
 80023b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80023b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	9319      	str	r3, [sp, #100]	; 0x64
 80023bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80023be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	9318      	str	r3, [sp, #96]	; 0x60
 80023c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80023c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	9324      	str	r3, [sp, #144]	; 0x90
 80023d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80023d6:	4413      	add	r3, r2
 80023d8:	9319      	str	r3, [sp, #100]	; 0x64
 80023da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80023dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80023de:	4413      	add	r3, r2
 80023e0:	9319      	str	r3, [sp, #100]	; 0x64
 80023e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80023e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d203      	bcs.n	80023f2 <mpn_div_qr_pi1+0x166>
 80023ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80023ec:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80023f0:	9324      	str	r3, [sp, #144]	; 0x90
 80023f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80023f4:	0c1a      	lsrs	r2, r3, #16
 80023f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80023f8:	4413      	add	r3, r2
 80023fa:	9326      	str	r3, [sp, #152]	; 0x98
 80023fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80023fe:	041a      	lsls	r2, r3, #16
 8002400:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002402:	b29b      	uxth	r3, r3
 8002404:	4413      	add	r3, r2
 8002406:	9317      	str	r3, [sp, #92]	; 0x5c
 8002408:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800240a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800240c:	4413      	add	r3, r2
 800240e:	9316      	str	r3, [sp, #88]	; 0x58
 8002410:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002412:	9b00      	ldr	r3, [sp, #0]
 8002414:	441a      	add	r2, r3
 8002416:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800241a:	4299      	cmp	r1, r3
 800241c:	bf2c      	ite	cs
 800241e:	2300      	movcs	r3, #0
 8002420:	2301      	movcc	r3, #1
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4413      	add	r3, r2
 8002426:	9326      	str	r3, [sp, #152]	; 0x98
 8002428:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800242a:	9317      	str	r3, [sp, #92]	; 0x5c
 800242c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800242e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800243c:	1e9a      	subs	r2, r3, #2
 800243e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	9a02      	ldr	r2, [sp, #8]
 8002446:	4413      	add	r3, r2
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	9315      	str	r3, [sp, #84]	; 0x54
 8002450:	9a00      	ldr	r2, [sp, #0]
 8002452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002458:	1e99      	subs	r1, r3, #2
 800245a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800245c:	440b      	add	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	9902      	ldr	r1, [sp, #8]
 8002462:	440b      	add	r3, r1
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002468:	4299      	cmp	r1, r3
 800246a:	bf2c      	ite	cs
 800246c:	2300      	movcs	r3, #0
 800246e:	2301      	movcc	r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002478:	9325      	str	r3, [sp, #148]	; 0x94
 800247a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800247c:	9314      	str	r3, [sp, #80]	; 0x50
 800247e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002480:	9313      	str	r3, [sp, #76]	; 0x4c
 8002482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002484:	b29b      	uxth	r3, r3
 8002486:	9312      	str	r3, [sp, #72]	; 0x48
 8002488:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	9311      	str	r3, [sp, #68]	; 0x44
 800248e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002490:	b29b      	uxth	r3, r3
 8002492:	9310      	str	r3, [sp, #64]	; 0x40
 8002494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	930f      	str	r3, [sp, #60]	; 0x3c
 800249a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800249c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	930e      	str	r3, [sp, #56]	; 0x38
 80024a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80024a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	930d      	str	r3, [sp, #52]	; 0x34
 80024ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	930c      	str	r3, [sp, #48]	; 0x30
 80024b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80024ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80024c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024c8:	4413      	add	r3, r2
 80024ca:	930d      	str	r3, [sp, #52]	; 0x34
 80024cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024d0:	4413      	add	r3, r2
 80024d2:	930d      	str	r3, [sp, #52]	; 0x34
 80024d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80024d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024d8:	429a      	cmp	r2, r3
 80024da:	d203      	bcs.n	80024e4 <mpn_div_qr_pi1+0x258>
 80024dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80024de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80024e2:	9323      	str	r3, [sp, #140]	; 0x8c
 80024e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024e6:	0c1a      	lsrs	r2, r3, #16
 80024e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80024ea:	4413      	add	r3, r2
 80024ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80024ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	930a      	str	r3, [sp, #40]	; 0x28
 80024fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80024fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	9309      	str	r3, [sp, #36]	; 0x24
 8002502:	9a00      	ldr	r2, [sp, #0]
 8002504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002506:	1ad2      	subs	r2, r2, r3
 8002508:	9925      	ldr	r1, [sp, #148]	; 0x94
 800250a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800250c:	4299      	cmp	r1, r3
 800250e:	bf2c      	ite	cs
 8002510:	2300      	movcs	r3, #0
 8002512:	2301      	movcc	r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800251c:	9325      	str	r3, [sp, #148]	; 0x94
 800251e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002520:	3301      	adds	r3, #1
 8002522:	9326      	str	r3, [sp, #152]	; 0x98
 8002524:	9a00      	ldr	r2, [sp, #0]
 8002526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002528:	429a      	cmp	r2, r3
 800252a:	bf34      	ite	cc
 800252c:	2300      	movcc	r3, #0
 800252e:	2301      	movcs	r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	425b      	negs	r3, r3
 8002534:	9308      	str	r3, [sp, #32]
 8002536:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002538:	9b08      	ldr	r3, [sp, #32]
 800253a:	4413      	add	r3, r2
 800253c:	9326      	str	r3, [sp, #152]	; 0x98
 800253e:	9a08      	ldr	r2, [sp, #32]
 8002540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002542:	401a      	ands	r2, r3
 8002544:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002546:	4413      	add	r3, r2
 8002548:	9307      	str	r3, [sp, #28]
 800254a:	9a08      	ldr	r2, [sp, #32]
 800254c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800254e:	401a      	ands	r2, r3
 8002550:	9b00      	ldr	r3, [sp, #0]
 8002552:	441a      	add	r2, r3
 8002554:	9907      	ldr	r1, [sp, #28]
 8002556:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002558:	4299      	cmp	r1, r3
 800255a:	bf2c      	ite	cs
 800255c:	2300      	movcs	r3, #0
 800255e:	2301      	movcc	r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	4413      	add	r3, r2
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	9b07      	ldr	r3, [sp, #28]
 8002568:	9325      	str	r3, [sp, #148]	; 0x94
 800256a:	9a00      	ldr	r2, [sp, #0]
 800256c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800256e:	429a      	cmp	r2, r3
 8002570:	d31c      	bcc.n	80025ac <mpn_div_qr_pi1+0x320>
 8002572:	9a00      	ldr	r2, [sp, #0]
 8002574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002576:	429a      	cmp	r2, r3
 8002578:	d803      	bhi.n	8002582 <mpn_div_qr_pi1+0x2f6>
 800257a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800257c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800257e:	429a      	cmp	r2, r3
 8002580:	d314      	bcc.n	80025ac <mpn_div_qr_pi1+0x320>
 8002582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002584:	3301      	adds	r3, #1
 8002586:	9326      	str	r3, [sp, #152]	; 0x98
 8002588:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800258a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	9306      	str	r3, [sp, #24]
 8002590:	9a00      	ldr	r2, [sp, #0]
 8002592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	9925      	ldr	r1, [sp, #148]	; 0x94
 8002598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800259a:	4299      	cmp	r1, r3
 800259c:	bf2c      	ite	cs
 800259e:	2300      	movcs	r3, #0
 80025a0:	2301      	movcc	r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	9b06      	ldr	r3, [sp, #24]
 80025aa:	9325      	str	r3, [sp, #148]	; 0x94

	  cy = mpn_submul_1 (np + i, dp, dn-2, q);
 80025ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	9a02      	ldr	r2, [sp, #8]
 80025b2:	441a      	add	r2, r3
 80025b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80025b6:	3b02      	subs	r3, #2
 80025b8:	4610      	mov	r0, r2
 80025ba:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80025bc:	461a      	mov	r2, r3
 80025be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80025c0:	f7fe fe56 	bl	8001270 <mpn_submul_1>
 80025c4:	9005      	str	r0, [sp, #20]

	  cy1 = n0 < cy;
 80025c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80025c8:	9b05      	ldr	r3, [sp, #20]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	bf2c      	ite	cs
 80025ce:	2300      	movcs	r3, #0
 80025d0:	2301      	movcc	r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	9304      	str	r3, [sp, #16]
	  n0 = n0 - cy;
 80025d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80025d8:	9b05      	ldr	r3, [sp, #20]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	9325      	str	r3, [sp, #148]	; 0x94
	  cy = n1 < cy1;
 80025de:	9a00      	ldr	r2, [sp, #0]
 80025e0:	9b04      	ldr	r3, [sp, #16]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	bf2c      	ite	cs
 80025e6:	2300      	movcs	r3, #0
 80025e8:	2301      	movcc	r3, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	9305      	str	r3, [sp, #20]
	  n1 = n1 - cy1;
 80025ee:	9a00      	ldr	r2, [sp, #0]
 80025f0:	9b04      	ldr	r3, [sp, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	9300      	str	r3, [sp, #0]
	  np[dn-2+i] = n0;
 80025f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80025f8:	1e9a      	subs	r2, r3, #2
 80025fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	9a02      	ldr	r2, [sp, #8]
 8002602:	4413      	add	r3, r2
 8002604:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002606:	601a      	str	r2, [r3, #0]

	  if (cy != 0)
 8002608:	9b05      	ldr	r3, [sp, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d017      	beq.n	800263e <mpn_div_qr_pi1+0x3b2>
	    {
	      n1 += d1 + mpn_add_n (np + i, np + i, dp, dn - 1);
 800260e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	9a02      	ldr	r2, [sp, #8]
 8002614:	18d1      	adds	r1, r2, r3
 8002616:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	9a02      	ldr	r2, [sp, #8]
 800261c:	441a      	add	r2, r3
 800261e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002620:	3b01      	subs	r3, #1
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002628:	f7fe fbd8 	bl	8000ddc <mpn_add_n>
 800262c:	4602      	mov	r2, r0
 800262e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002630:	4413      	add	r3, r2
 8002632:	9a00      	ldr	r2, [sp, #0]
 8002634:	4413      	add	r3, r2
 8002636:	9300      	str	r3, [sp, #0]
	      q--;
 8002638:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800263a:	3b01      	subs	r3, #1
 800263c:	9326      	str	r3, [sp, #152]	; 0x98
	    }
	}

      if (qp)
 800263e:	9b03      	ldr	r3, [sp, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <mpn_div_qr_pi1+0x3c4>
	qp[i] = q;
 8002644:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	9a03      	ldr	r2, [sp, #12]
 800264a:	4413      	add	r3, r2
 800264c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800264e:	601a      	str	r2, [r3, #0]
    }
  while (--i >= 0);
 8002650:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002652:	3b01      	subs	r3, #1
 8002654:	9327      	str	r3, [sp, #156]	; 0x9c
 8002656:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002658:	2b00      	cmp	r3, #0
 800265a:	f6bf ae6d 	bge.w	8002338 <mpn_div_qr_pi1+0xac>

  np[dn - 1] = n1;
 800265e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8002660:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002664:	3b01      	subs	r3, #1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	9a02      	ldr	r2, [sp, #8]
 800266a:	4413      	add	r3, r2
 800266c:	9a00      	ldr	r2, [sp, #0]
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	b029      	add	sp, #164	; 0xa4
 8002672:	f85d fb04 	ldr.w	pc, [sp], #4
 8002676:	bf00      	nop

08002678 <mpn_div_qr_preinv>:

static void
mpn_div_qr_preinv (mp_ptr qp, mp_ptr np, mp_size_t nn,
		   mp_srcptr dp, mp_size_t dn,
		   const struct gmp_div_inverse *inv)
{
 8002678:	b500      	push	{lr}
 800267a:	b08d      	sub	sp, #52	; 0x34
 800267c:	9007      	str	r0, [sp, #28]
 800267e:	9106      	str	r1, [sp, #24]
 8002680:	9205      	str	r2, [sp, #20]
 8002682:	9304      	str	r3, [sp, #16]
  assert (dn > 0);
 8002684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002686:	2b00      	cmp	r3, #0
 8002688:	dc0f      	bgt.n	80026aa <mpn_div_qr_preinv+0x32>
 800268a:	f243 7064 	movw	r0, #14180	; 0x3764
 800268e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002692:	f240 411f 	movw	r1, #1055	; 0x41f
 8002696:	f643 5298 	movw	r2, #15768	; 0x3d98
 800269a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800269e:	f643 038c 	movw	r3, #14476	; 0x388c
 80026a2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80026a6:	f00b f83b 	bl	800d720 <__assert_func>
  assert (nn >= dn);
 80026aa:	9a05      	ldr	r2, [sp, #20]
 80026ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026ae:	429a      	cmp	r2, r3
 80026b0:	da0f      	bge.n	80026d2 <mpn_div_qr_preinv+0x5a>
 80026b2:	f243 7064 	movw	r0, #14180	; 0x3764
 80026b6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80026ba:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80026be:	f643 5298 	movw	r2, #15768	; 0x3d98
 80026c2:	f6c0 0201 	movt	r2, #2049	; 0x801
 80026c6:	f643 03cc 	movw	r3, #14540	; 0x38cc
 80026ca:	f6c0 0301 	movt	r3, #2049	; 0x801
 80026ce:	f00b f827 	bl	800d720 <__assert_func>

  if (dn == 1)
 80026d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d109      	bne.n	80026ec <mpn_div_qr_preinv+0x74>
    np[0] = mpn_div_qr_1_preinv (qp, np, nn, inv);
 80026d8:	9807      	ldr	r0, [sp, #28]
 80026da:	9906      	ldr	r1, [sp, #24]
 80026dc:	9a05      	ldr	r2, [sp, #20]
 80026de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80026e0:	f7ff fafc 	bl	8001cdc <mpn_div_qr_1_preinv>
 80026e4:	4602      	mov	r2, r0
 80026e6:	9b06      	ldr	r3, [sp, #24]
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e091      	b.n	8002810 <mpn_div_qr_preinv+0x198>
  else if (dn == 2)
 80026ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d108      	bne.n	8002704 <mpn_div_qr_preinv+0x8c>
    mpn_div_qr_2_preinv (qp, np, np, nn, inv);
 80026f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	9807      	ldr	r0, [sp, #28]
 80026f8:	9906      	ldr	r1, [sp, #24]
 80026fa:	9a06      	ldr	r2, [sp, #24]
 80026fc:	9b05      	ldr	r3, [sp, #20]
 80026fe:	f7ff fc29 	bl	8001f54 <mpn_div_qr_2_preinv>
 8002702:	e085      	b.n	8002810 <mpn_div_qr_preinv+0x198>
  else
    {
      mp_limb_t nh;
      unsigned shift;

      assert (inv->d1 == dp[dn-1]);
 8002704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800270a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800270e:	3b01      	subs	r3, #1
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	9904      	ldr	r1, [sp, #16]
 8002714:	440b      	add	r3, r1
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d00f      	beq.n	800273c <mpn_div_qr_preinv+0xc4>
 800271c:	f243 7064 	movw	r0, #14180	; 0x3764
 8002720:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002724:	f240 412b 	movw	r1, #1067	; 0x42b
 8002728:	f643 5298 	movw	r2, #15768	; 0x3d98
 800272c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002730:	f643 03f8 	movw	r3, #14584	; 0x38f8
 8002734:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002738:	f00a fff2 	bl	800d720 <__assert_func>
      assert (inv->d0 == dp[dn-2]);
 800273c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002742:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002746:	3b02      	subs	r3, #2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	9904      	ldr	r1, [sp, #16]
 800274c:	440b      	add	r3, r1
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d00f      	beq.n	8002774 <mpn_div_qr_preinv+0xfc>
 8002754:	f243 7064 	movw	r0, #14180	; 0x3764
 8002758:	f6c0 0001 	movt	r0, #2049	; 0x801
 800275c:	f240 412c 	movw	r1, #1068	; 0x42c
 8002760:	f643 5298 	movw	r2, #15768	; 0x3d98
 8002764:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002768:	f643 130c 	movw	r3, #14604	; 0x390c
 800276c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002770:	f00a ffd6 	bl	800d720 <__assert_func>
      assert ((inv->d1 & GMP_LIMB_HIGHBIT) != 0);
 8002774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db0f      	blt.n	800279c <mpn_div_qr_preinv+0x124>
 800277c:	f243 7064 	movw	r0, #14180	; 0x3764
 8002780:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002784:	f240 412d 	movw	r1, #1069	; 0x42d
 8002788:	f643 5298 	movw	r2, #15768	; 0x3d98
 800278c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002790:	f643 1320 	movw	r3, #14624	; 0x3920
 8002794:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002798:	f00a ffc2 	bl	800d720 <__assert_func>

      shift = inv->shift;
 800279c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	930a      	str	r3, [sp, #40]	; 0x28
      if (shift > 0)
 80027a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <mpn_div_qr_preinv+0x140>
	nh = mpn_lshift (np, np, nn, shift);
 80027a8:	9806      	ldr	r0, [sp, #24]
 80027aa:	9906      	ldr	r1, [sp, #24]
 80027ac:	9a05      	ldr	r2, [sp, #20]
 80027ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027b0:	f7fe fe78 	bl	80014a4 <mpn_lshift>
 80027b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80027b6:	e001      	b.n	80027bc <mpn_div_qr_preinv+0x144>
      else
	nh = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	930b      	str	r3, [sp, #44]	; 0x2c

      mpn_div_qr_pi1 (qp, np, nn, nh, dp, dn, inv->di);
 80027bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	9a04      	ldr	r2, [sp, #16]
 80027c2:	9200      	str	r2, [sp, #0]
 80027c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027c6:	9201      	str	r2, [sp, #4]
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	9807      	ldr	r0, [sp, #28]
 80027cc:	9906      	ldr	r1, [sp, #24]
 80027ce:	9a05      	ldr	r2, [sp, #20]
 80027d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027d2:	f7ff fd5b 	bl	800228c <mpn_div_qr_pi1>

      if (shift > 0)
 80027d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d019      	beq.n	8002810 <mpn_div_qr_preinv+0x198>
	gmp_assert_nocarry (mpn_rshift (np, np, dn, shift));
 80027dc:	9806      	ldr	r0, [sp, #24]
 80027de:	9906      	ldr	r1, [sp, #24]
 80027e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027e4:	f7fe fee4 	bl	80015b0 <mpn_rshift>
 80027e8:	9009      	str	r0, [sp, #36]	; 0x24
 80027ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00f      	beq.n	8002810 <mpn_div_qr_preinv+0x198>
 80027f0:	f243 7064 	movw	r0, #14180	; 0x3764
 80027f4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80027f8:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80027fc:	f643 5298 	movw	r2, #15768	; 0x3d98
 8002800:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002804:	f643 1344 	movw	r3, #14660	; 0x3944
 8002808:	f6c0 0301 	movt	r3, #2049	; 0x801
 800280c:	f00a ff88 	bl	800d720 <__assert_func>
    }
}
 8002810:	b00d      	add	sp, #52	; 0x34
 8002812:	f85d fb04 	ldr.w	pc, [sp], #4
 8002816:	bf00      	nop

08002818 <mpn_div_qr>:

static void
mpn_div_qr (mp_ptr qp, mp_ptr np, mp_size_t nn, mp_srcptr dp, mp_size_t dn)
{
 8002818:	b500      	push	{lr}
 800281a:	b08d      	sub	sp, #52	; 0x34
 800281c:	9005      	str	r0, [sp, #20]
 800281e:	9104      	str	r1, [sp, #16]
 8002820:	9203      	str	r2, [sp, #12]
 8002822:	9302      	str	r3, [sp, #8]
  struct gmp_div_inverse inv;
  mp_ptr tp = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	930b      	str	r3, [sp, #44]	; 0x2c

  assert (dn > 0);
 8002828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800282a:	2b00      	cmp	r3, #0
 800282c:	dc0f      	bgt.n	800284e <mpn_div_qr+0x36>
 800282e:	f243 7064 	movw	r0, #14180	; 0x3764
 8002832:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002836:	f240 4142 	movw	r1, #1090	; 0x442
 800283a:	f643 52ac 	movw	r2, #15788	; 0x3dac
 800283e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002842:	f643 038c 	movw	r3, #14476	; 0x388c
 8002846:	f6c0 0301 	movt	r3, #2049	; 0x801
 800284a:	f00a ff69 	bl	800d720 <__assert_func>
  assert (nn >= dn);
 800284e:	9a03      	ldr	r2, [sp, #12]
 8002850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002852:	429a      	cmp	r2, r3
 8002854:	da0f      	bge.n	8002876 <mpn_div_qr+0x5e>
 8002856:	f243 7064 	movw	r0, #14180	; 0x3764
 800285a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800285e:	f240 4143 	movw	r1, #1091	; 0x443
 8002862:	f643 52ac 	movw	r2, #15788	; 0x3dac
 8002866:	f6c0 0201 	movt	r2, #2049	; 0x801
 800286a:	f643 03cc 	movw	r3, #14540	; 0x38cc
 800286e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002872:	f00a ff55 	bl	800d720 <__assert_func>

  mpn_div_qr_invert (&inv, dp, dn);
 8002876:	ab06      	add	r3, sp, #24
 8002878:	4618      	mov	r0, r3
 800287a:	9902      	ldr	r1, [sp, #8]
 800287c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800287e:	f7ff f989 	bl	8001b94 <mpn_div_qr_invert>
  if (dn > 2 && inv.shift > 0)
 8002882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002884:	2b02      	cmp	r3, #2
 8002886:	dd22      	ble.n	80028ce <mpn_div_qr+0xb6>
 8002888:	9b06      	ldr	r3, [sp, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01f      	beq.n	80028ce <mpn_div_qr+0xb6>
    {
      tp = gmp_xalloc_limbs (dn);
 800288e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002890:	f7fe f986 	bl	8000ba0 <gmp_xalloc_limbs>
 8002894:	900b      	str	r0, [sp, #44]	; 0x2c
      gmp_assert_nocarry (mpn_lshift (tp, dp, dn, inv.shift));
 8002896:	9b06      	ldr	r3, [sp, #24]
 8002898:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800289a:	9902      	ldr	r1, [sp, #8]
 800289c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800289e:	f7fe fe01 	bl	80014a4 <mpn_lshift>
 80028a2:	900a      	str	r0, [sp, #40]	; 0x28
 80028a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00f      	beq.n	80028ca <mpn_div_qr+0xb2>
 80028aa:	f243 7064 	movw	r0, #14180	; 0x3764
 80028ae:	f6c0 0001 	movt	r0, #2049	; 0x801
 80028b2:	f240 4149 	movw	r1, #1097	; 0x449
 80028b6:	f643 52ac 	movw	r2, #15788	; 0x3dac
 80028ba:	f6c0 0201 	movt	r2, #2049	; 0x801
 80028be:	f643 1344 	movw	r3, #14660	; 0x3944
 80028c2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80028c6:	f00a ff2b 	bl	800d720 <__assert_func>
      dp = tp;
 80028ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028cc:	9302      	str	r3, [sp, #8]
    }
  mpn_div_qr_preinv (qp, np, nn, dp, dn, &inv);
 80028ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	ab06      	add	r3, sp, #24
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	9805      	ldr	r0, [sp, #20]
 80028d8:	9904      	ldr	r1, [sp, #16]
 80028da:	9a03      	ldr	r2, [sp, #12]
 80028dc:	9b02      	ldr	r3, [sp, #8]
 80028de:	f7ff fecb 	bl	8002678 <mpn_div_qr_preinv>
  if (tp)
 80028e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <mpn_div_qr+0xe0>
    gmp_free (tp);
 80028e8:	f240 0314 	movw	r3, #20
 80028ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80028f4:	2100      	movs	r1, #0
 80028f6:	4798      	blx	r3
}
 80028f8:	b00d      	add	sp, #52	; 0x34
 80028fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fe:	bf00      	nop

08002900 <mpn_base_power_of_two_p>:


/* MPN base conversion. */
static unsigned
mpn_base_power_of_two_p (unsigned b)
{
 8002900:	b082      	sub	sp, #8
 8002902:	9001      	str	r0, [sp, #4]
  switch (b)
 8002904:	9b01      	ldr	r3, [sp, #4]
 8002906:	2b10      	cmp	r3, #16
 8002908:	d01b      	beq.n	8002942 <mpn_base_power_of_two_p+0x42>
 800290a:	2b10      	cmp	r3, #16
 800290c:	d806      	bhi.n	800291c <mpn_base_power_of_two_p+0x1c>
 800290e:	2b04      	cmp	r3, #4
 8002910:	d013      	beq.n	800293a <mpn_base_power_of_two_p+0x3a>
 8002912:	2b08      	cmp	r3, #8
 8002914:	d013      	beq.n	800293e <mpn_base_power_of_two_p+0x3e>
 8002916:	2b02      	cmp	r3, #2
 8002918:	d00d      	beq.n	8002936 <mpn_base_power_of_two_p+0x36>
 800291a:	e01c      	b.n	8002956 <mpn_base_power_of_two_p+0x56>
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d014      	beq.n	800294a <mpn_base_power_of_two_p+0x4a>
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d802      	bhi.n	800292a <mpn_base_power_of_two_p+0x2a>
 8002924:	2b20      	cmp	r3, #32
 8002926:	d00e      	beq.n	8002946 <mpn_base_power_of_two_p+0x46>
 8002928:	e015      	b.n	8002956 <mpn_base_power_of_two_p+0x56>
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d00f      	beq.n	800294e <mpn_base_power_of_two_p+0x4e>
 800292e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002932:	d00e      	beq.n	8002952 <mpn_base_power_of_two_p+0x52>
 8002934:	e00f      	b.n	8002956 <mpn_base_power_of_two_p+0x56>
    {
    case 2: return 1;
 8002936:	2301      	movs	r3, #1
 8002938:	e00e      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    case 4: return 2;
 800293a:	2302      	movs	r3, #2
 800293c:	e00c      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    case 8: return 3;
 800293e:	2303      	movs	r3, #3
 8002940:	e00a      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    case 16: return 4;
 8002942:	2304      	movs	r3, #4
 8002944:	e008      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    case 32: return 5;
 8002946:	2305      	movs	r3, #5
 8002948:	e006      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    case 64: return 6;
 800294a:	2306      	movs	r3, #6
 800294c:	e004      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    case 128: return 7;
 800294e:	2307      	movs	r3, #7
 8002950:	e002      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    case 256: return 8;
 8002952:	2308      	movs	r3, #8
 8002954:	e000      	b.n	8002958 <mpn_base_power_of_two_p+0x58>
    default: return 0;
 8002956:	2300      	movs	r3, #0
    }
}
 8002958:	4618      	mov	r0, r3
 800295a:	b002      	add	sp, #8
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <mpn_get_base_info>:
  mp_limb_t bb;
};

static void
mpn_get_base_info (struct mpn_base_info *info, mp_limb_t b)
{
 8002960:	b086      	sub	sp, #24
 8002962:	9001      	str	r0, [sp, #4]
 8002964:	9100      	str	r1, [sp, #0]
  mp_limb_t m;
  mp_limb_t p;
  unsigned exp;

  m = GMP_LIMB_MAX / b;
 8002966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800296a:	9b00      	ldr	r3, [sp, #0]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	9303      	str	r3, [sp, #12]
  for (exp = 1, p = b; p <= m; exp++)
 8002972:	2301      	movs	r3, #1
 8002974:	9304      	str	r3, [sp, #16]
 8002976:	9b00      	ldr	r3, [sp, #0]
 8002978:	9305      	str	r3, [sp, #20]
 800297a:	e007      	b.n	800298c <mpn_get_base_info+0x2c>
    p *= b;
 800297c:	9b05      	ldr	r3, [sp, #20]
 800297e:	9a00      	ldr	r2, [sp, #0]
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	9305      	str	r3, [sp, #20]
  mp_limb_t m;
  mp_limb_t p;
  unsigned exp;

  m = GMP_LIMB_MAX / b;
  for (exp = 1, p = b; p <= m; exp++)
 8002986:	9b04      	ldr	r3, [sp, #16]
 8002988:	3301      	adds	r3, #1
 800298a:	9304      	str	r3, [sp, #16]
 800298c:	9a05      	ldr	r2, [sp, #20]
 800298e:	9b03      	ldr	r3, [sp, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d9f3      	bls.n	800297c <mpn_get_base_info+0x1c>
    p *= b;

  info->exp = exp;
 8002994:	9b01      	ldr	r3, [sp, #4]
 8002996:	9a04      	ldr	r2, [sp, #16]
 8002998:	601a      	str	r2, [r3, #0]
  info->bb = p;
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	9a05      	ldr	r2, [sp, #20]
 800299e:	605a      	str	r2, [r3, #4]
}
 80029a0:	b006      	add	sp, #24
 80029a2:	4770      	bx	lr

080029a4 <mpn_limb_size_in_base_2>:

static mp_bitcnt_t
mpn_limb_size_in_base_2 (mp_limb_t u)
{
 80029a4:	b500      	push	{lr}
 80029a6:	b087      	sub	sp, #28
 80029a8:	9001      	str	r0, [sp, #4]
  unsigned shift;

  assert (u > 0);
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10f      	bne.n	80029d0 <mpn_limb_size_in_base_2+0x2c>
 80029b0:	f243 7064 	movw	r0, #14180	; 0x3764
 80029b4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80029b8:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80029bc:	f643 52b8 	movw	r2, #15800	; 0x3db8
 80029c0:	f6c0 0201 	movt	r2, #2049	; 0x801
 80029c4:	f643 1350 	movw	r3, #14672	; 0x3950
 80029c8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80029cc:	f00a fea8 	bl	800d720 <__assert_func>
  gmp_clz (shift, u);
 80029d0:	9b01      	ldr	r3, [sp, #4]
 80029d2:	9305      	str	r3, [sp, #20]
 80029d4:	2300      	movs	r3, #0
 80029d6:	9304      	str	r3, [sp, #16]
 80029d8:	e005      	b.n	80029e6 <mpn_limb_size_in_base_2+0x42>
 80029da:	9b05      	ldr	r3, [sp, #20]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	9305      	str	r3, [sp, #20]
 80029e0:	9b04      	ldr	r3, [sp, #16]
 80029e2:	3308      	adds	r3, #8
 80029e4:	9304      	str	r3, [sp, #16]
 80029e6:	9b05      	ldr	r3, [sp, #20]
 80029e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f4      	beq.n	80029da <mpn_limb_size_in_base_2+0x36>
 80029f0:	e005      	b.n	80029fe <mpn_limb_size_in_base_2+0x5a>
 80029f2:	9b05      	ldr	r3, [sp, #20]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	9305      	str	r3, [sp, #20]
 80029f8:	9b04      	ldr	r3, [sp, #16]
 80029fa:	3301      	adds	r3, #1
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	9b05      	ldr	r3, [sp, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	daf6      	bge.n	80029f2 <mpn_limb_size_in_base_2+0x4e>
 8002a04:	9b04      	ldr	r3, [sp, #16]
 8002a06:	9303      	str	r3, [sp, #12]
  return GMP_LIMB_BITS - shift;
 8002a08:	9b03      	ldr	r3, [sp, #12]
 8002a0a:	f1c3 0320 	rsb	r3, r3, #32
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	b007      	add	sp, #28
 8002a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a16:	bf00      	nop

08002a18 <mpn_get_str_bits>:

static size_t
mpn_get_str_bits (unsigned char *sp, unsigned bits, mp_srcptr up, mp_size_t un)
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	9003      	str	r0, [sp, #12]
 8002a1e:	9102      	str	r1, [sp, #8]
 8002a20:	9201      	str	r2, [sp, #4]
 8002a22:	9300      	str	r3, [sp, #0]
  unsigned char mask;
  size_t sn, j;
  mp_size_t i;
  int shift;

  sn = ((un - 1) * GMP_LIMB_BITS + mpn_limb_size_in_base_2 (up[un-1])
 8002a24:	9b00      	ldr	r3, [sp, #0]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	015c      	lsls	r4, r3, #5
 8002a2a:	9b00      	ldr	r3, [sp, #0]
 8002a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a30:	3b01      	subs	r3, #1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	9a01      	ldr	r2, [sp, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ffb2 	bl	80029a4 <mpn_limb_size_in_base_2>
 8002a40:	4603      	mov	r3, r0
 8002a42:	18e2      	adds	r2, r4, r3
	+ bits - 1) / bits;
 8002a44:	9b02      	ldr	r3, [sp, #8]
 8002a46:	4413      	add	r3, r2
 8002a48:	1e5a      	subs	r2, r3, #1
  unsigned char mask;
  size_t sn, j;
  mp_size_t i;
  int shift;

  sn = ((un - 1) * GMP_LIMB_BITS + mpn_limb_size_in_base_2 (up[un-1])
 8002a4a:	9b02      	ldr	r3, [sp, #8]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	9305      	str	r3, [sp, #20]
	+ bits - 1) / bits;

  mask = (1U << bits) - 1;
 8002a52:	9b02      	ldr	r3, [sp, #8]
 8002a54:	2201      	movs	r2, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	f88d 3013 	strb.w	r3, [sp, #19]

  for (i = 0, j = sn, shift = 0; j-- > 0;)
 8002a62:	2300      	movs	r3, #0
 8002a64:	9308      	str	r3, [sp, #32]
 8002a66:	9b05      	ldr	r3, [sp, #20]
 8002a68:	9309      	str	r3, [sp, #36]	; 0x24
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	9307      	str	r3, [sp, #28]
 8002a6e:	e034      	b.n	8002ada <mpn_get_str_bits+0xc2>
    {
      unsigned char digit = up[i] >> shift;
 8002a70:	9b08      	ldr	r3, [sp, #32]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	9a01      	ldr	r2, [sp, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	9b07      	ldr	r3, [sp, #28]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a80:	f88d 301b 	strb.w	r3, [sp, #27]

      shift += bits;
 8002a84:	9a07      	ldr	r2, [sp, #28]
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	4413      	add	r3, r2
 8002a8a:	9307      	str	r3, [sp, #28]

      if (shift >= GMP_LIMB_BITS && ++i < un)
 8002a8c:	9b07      	ldr	r3, [sp, #28]
 8002a8e:	2b1f      	cmp	r3, #31
 8002a90:	d919      	bls.n	8002ac6 <mpn_get_str_bits+0xae>
 8002a92:	9b08      	ldr	r3, [sp, #32]
 8002a94:	3301      	adds	r3, #1
 8002a96:	9308      	str	r3, [sp, #32]
 8002a98:	9a08      	ldr	r2, [sp, #32]
 8002a9a:	9b00      	ldr	r3, [sp, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	da12      	bge.n	8002ac6 <mpn_get_str_bits+0xae>
	{
	  shift -= GMP_LIMB_BITS;
 8002aa0:	9b07      	ldr	r3, [sp, #28]
 8002aa2:	3b20      	subs	r3, #32
 8002aa4:	9307      	str	r3, [sp, #28]
	  digit |= up[i] << (bits - shift);
 8002aa6:	9b08      	ldr	r3, [sp, #32]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	9a01      	ldr	r2, [sp, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	9b07      	ldr	r3, [sp, #28]
 8002ab2:	9902      	ldr	r1, [sp, #8]
 8002ab4:	1acb      	subs	r3, r1, r3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f88d 301b 	strb.w	r3, [sp, #27]
	}
      sp[j] = digit & mask;
 8002ac6:	9a03      	ldr	r2, [sp, #12]
 8002ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aca:	4413      	add	r3, r2
 8002acc:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8002ad0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	701a      	strb	r2, [r3, #0]
  sn = ((un - 1) * GMP_LIMB_BITS + mpn_limb_size_in_base_2 (up[un-1])
	+ bits - 1) / bits;

  mask = (1U << bits) - 1;

  for (i = 0, j = sn, shift = 0; j-- > 0;)
 8002ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	9209      	str	r2, [sp, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1c5      	bne.n	8002a70 <mpn_get_str_bits+0x58>
	  shift -= GMP_LIMB_BITS;
	  digit |= up[i] << (bits - shift);
	}
      sp[j] = digit & mask;
    }
  return sn;
 8002ae4:	9b05      	ldr	r3, [sp, #20]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	b00a      	add	sp, #40	; 0x28
 8002aea:	bd10      	pop	{r4, pc}

08002aec <mpn_limb_get_str>:
/* We generate digits from the least significant end, and reverse at
   the end. */
static size_t
mpn_limb_get_str (unsigned char *sp, mp_limb_t w,
		  const struct gmp_div_inverse *binv)
{
 8002aec:	b500      	push	{lr}
 8002aee:	b099      	sub	sp, #100	; 0x64
 8002af0:	9003      	str	r0, [sp, #12]
 8002af2:	9102      	str	r1, [sp, #8]
 8002af4:	9201      	str	r2, [sp, #4]
  mp_size_t i;
  for (i = 0; w > 0; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	9317      	str	r3, [sp, #92]	; 0x5c
 8002afa:	e0b6      	b.n	8002c6a <mpn_limb_get_str+0x17e>
    {
      mp_limb_t h, l, r;

      h = w >> (GMP_LIMB_BITS - binv->shift);
 8002afc:	9b01      	ldr	r3, [sp, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1c3 0320 	rsb	r3, r3, #32
 8002b04:	9a02      	ldr	r2, [sp, #8]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	9313      	str	r3, [sp, #76]	; 0x4c
      l = w << binv->shift;
 8002b0c:	9b01      	ldr	r3, [sp, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	9a02      	ldr	r2, [sp, #8]
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	9312      	str	r3, [sp, #72]	; 0x48

      gmp_udiv_qrnnd_preinv (w, r, h, l, binv->d1, binv->di);
 8002b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002b1a:	9311      	str	r3, [sp, #68]	; 0x44
 8002b1c:	9b01      	ldr	r3, [sp, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	9310      	str	r3, [sp, #64]	; 0x40
 8002b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8002b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	930d      	str	r3, [sp, #52]	; 0x34
 8002b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	930c      	str	r3, [sp, #48]	; 0x30
 8002b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	930a      	str	r3, [sp, #40]	; 0x28
 8002b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	9309      	str	r3, [sp, #36]	; 0x24
 8002b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	9314      	str	r3, [sp, #80]	; 0x50
 8002b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b68:	4413      	add	r3, r2
 8002b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b70:	4413      	add	r3, r2
 8002b72:	930a      	str	r3, [sp, #40]	; 0x28
 8002b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d203      	bcs.n	8002b84 <mpn_limb_get_str+0x98>
 8002b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b7e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002b82:	9314      	str	r3, [sp, #80]	; 0x50
 8002b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b86:	0c1a      	lsrs	r2, r3, #16
 8002b88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b8a:	4413      	add	r3, r2
 8002b8c:	9316      	str	r3, [sp, #88]	; 0x58
 8002b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	9308      	str	r3, [sp, #32]
 8002b9a:	9a08      	ldr	r2, [sp, #32]
 8002b9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002b9e:	4413      	add	r3, r2
 8002ba0:	9307      	str	r3, [sp, #28]
 8002ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002ba4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ba6:	441a      	add	r2, r3
 8002ba8:	9907      	ldr	r1, [sp, #28]
 8002baa:	9b08      	ldr	r3, [sp, #32]
 8002bac:	4299      	cmp	r1, r3
 8002bae:	bf2c      	ite	cs
 8002bb0:	2300      	movcs	r3, #0
 8002bb2:	2301      	movcc	r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3301      	adds	r3, #1
 8002bba:	9316      	str	r3, [sp, #88]	; 0x58
 8002bbc:	9b07      	ldr	r3, [sp, #28]
 8002bbe:	9308      	str	r3, [sp, #32]
 8002bc0:	9b01      	ldr	r3, [sp, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	9315      	str	r3, [sp, #84]	; 0x54
 8002bd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002bd2:	9b08      	ldr	r3, [sp, #32]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	bf94      	ite	ls
 8002bd8:	2300      	movls	r3, #0
 8002bda:	2301      	movhi	r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	425b      	negs	r3, r3
 8002be0:	9306      	str	r3, [sp, #24]
 8002be2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002be4:	9b06      	ldr	r3, [sp, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	9316      	str	r3, [sp, #88]	; 0x58
 8002bea:	9b01      	ldr	r3, [sp, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	9b06      	ldr	r3, [sp, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002bf4:	4413      	add	r3, r2
 8002bf6:	9315      	str	r3, [sp, #84]	; 0x54
 8002bf8:	9b01      	ldr	r3, [sp, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d807      	bhi.n	8002c12 <mpn_limb_get_str+0x126>
 8002c02:	9b01      	ldr	r3, [sp, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	9315      	str	r3, [sp, #84]	; 0x54
 8002c0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002c0e:	3301      	adds	r3, #1
 8002c10:	9316      	str	r3, [sp, #88]	; 0x58
 8002c12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002c14:	9305      	str	r3, [sp, #20]
 8002c16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002c18:	9302      	str	r3, [sp, #8]
      assert ( (r << (GMP_LIMB_BITS - binv->shift)) == 0);
 8002c1a:	9b01      	ldr	r3, [sp, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f1c3 0320 	rsb	r3, r3, #32
 8002c22:	9a05      	ldr	r2, [sp, #20]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <mpn_limb_get_str+0x160>
 8002c2c:	f243 7064 	movw	r0, #14180	; 0x3764
 8002c30:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002c34:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8002c38:	f643 52d0 	movw	r2, #15824	; 0x3dd0
 8002c3c:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002c40:	f643 1358 	movw	r3, #14680	; 0x3958
 8002c44:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002c48:	f00a fd6a 	bl	800d720 <__assert_func>
      r >>= binv->shift;
 8002c4c:	9b01      	ldr	r3, [sp, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	9a05      	ldr	r2, [sp, #20]
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	9305      	str	r3, [sp, #20]

      sp[i] = r;
 8002c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002c5a:	9a03      	ldr	r2, [sp, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	9a05      	ldr	r2, [sp, #20]
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
static size_t
mpn_limb_get_str (unsigned char *sp, mp_limb_t w,
		  const struct gmp_div_inverse *binv)
{
  mp_size_t i;
  for (i = 0; w > 0; i++)
 8002c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002c66:	3301      	adds	r3, #1
 8002c68:	9317      	str	r3, [sp, #92]	; 0x5c
 8002c6a:	9b02      	ldr	r3, [sp, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af45 	bne.w	8002afc <mpn_limb_get_str+0x10>
      assert ( (r << (GMP_LIMB_BITS - binv->shift)) == 0);
      r >>= binv->shift;

      sp[i] = r;
    }
  return i;
 8002c72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	b019      	add	sp, #100	; 0x64
 8002c78:	f85d fb04 	ldr.w	pc, [sp], #4

08002c7c <mpn_get_str_other>:

static size_t
mpn_get_str_other (unsigned char *sp,
		   int base, const struct mpn_base_info *info,
		   mp_ptr up, mp_size_t un)
{
 8002c7c:	b500      	push	{lr}
 8002c7e:	b093      	sub	sp, #76	; 0x4c
 8002c80:	9003      	str	r0, [sp, #12]
 8002c82:	9102      	str	r1, [sp, #8]
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	9300      	str	r3, [sp, #0]
  struct gmp_div_inverse binv;
  size_t sn;
  size_t i;

  mpn_div_qr_1_invert (&binv, base);
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	aa09      	add	r2, sp, #36	; 0x24
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f7fe fede 	bl	8001a50 <mpn_div_qr_1_invert>

  sn = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	9311      	str	r3, [sp, #68]	; 0x44

  if (un > 1)
 8002c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	dd3e      	ble.n	8002d1c <mpn_get_str_other+0xa0>
    {
      struct gmp_div_inverse bbinv;
      mpn_div_qr_1_invert (&bbinv, info->bb);
 8002c9e:	9b01      	ldr	r3, [sp, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	aa05      	add	r2, sp, #20
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7fe fed2 	bl	8001a50 <mpn_div_qr_1_invert>

      do
	{
	  mp_limb_t w;
	  size_t done;
	  w = mpn_div_qr_1_preinv (up, up, un, &bbinv);
 8002cac:	ab05      	add	r3, sp, #20
 8002cae:	9800      	ldr	r0, [sp, #0]
 8002cb0:	9900      	ldr	r1, [sp, #0]
 8002cb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002cb4:	f7ff f812 	bl	8001cdc <mpn_div_qr_1_preinv>
 8002cb8:	900e      	str	r0, [sp, #56]	; 0x38
	  un -= (up[un-1] == 0);
 8002cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	9a00      	ldr	r2, [sp, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2300      	movne	r3, #0
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	9314      	str	r3, [sp, #80]	; 0x50
	  done = mpn_limb_get_str (sp + sn, w, &binv);
 8002cda:	9a03      	ldr	r2, [sp, #12]
 8002cdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002cde:	441a      	add	r2, r3
 8002ce0:	ab09      	add	r3, sp, #36	; 0x24
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7ff ff00 	bl	8002aec <mpn_limb_get_str>
 8002cec:	900f      	str	r0, [sp, #60]	; 0x3c

	  for (sn += done; done < info->exp; done++)
 8002cee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002cf2:	4413      	add	r3, r2
 8002cf4:	9311      	str	r3, [sp, #68]	; 0x44
 8002cf6:	e009      	b.n	8002d0c <mpn_get_str_other+0x90>
	    sp[sn++] = 0;
 8002cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	9211      	str	r2, [sp, #68]	; 0x44
 8002cfe:	9a03      	ldr	r2, [sp, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
	  size_t done;
	  w = mpn_div_qr_1_preinv (up, up, un, &bbinv);
	  un -= (up[un-1] == 0);
	  done = mpn_limb_get_str (sp + sn, w, &binv);

	  for (sn += done; done < info->exp; done++)
 8002d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d08:	3301      	adds	r3, #1
 8002d0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d0c:	9b01      	ldr	r3, [sp, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d8f0      	bhi.n	8002cf8 <mpn_get_str_other+0x7c>
	    sp[sn++] = 0;
	}
      while (un > 1);
 8002d16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	dcc7      	bgt.n	8002cac <mpn_get_str_other+0x30>
    }
  sn += mpn_limb_get_str (sp + sn, up[0], &binv);
 8002d1c:	9a03      	ldr	r2, [sp, #12]
 8002d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d20:	18d1      	adds	r1, r2, r3
 8002d22:	9b00      	ldr	r3, [sp, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	ab09      	add	r3, sp, #36	; 0x24
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f7ff fedd 	bl	8002aec <mpn_limb_get_str>
 8002d32:	4603      	mov	r3, r0
 8002d34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d36:	4413      	add	r3, r2
 8002d38:	9311      	str	r3, [sp, #68]	; 0x44

  /* Reverse order */
  for (i = 0; 2*i + 1 < sn; i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9310      	str	r3, [sp, #64]	; 0x40
 8002d3e:	e01c      	b.n	8002d7a <mpn_get_str_other+0xfe>
    {
      unsigned char t = sp[i];
 8002d40:	9a03      	ldr	r2, [sp, #12]
 8002d42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d44:	4413      	add	r3, r2
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      sp[i] = sp[sn - i - 1];
 8002d4c:	9a03      	ldr	r2, [sp, #12]
 8002d4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d50:	4413      	add	r3, r2
 8002d52:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002d56:	1a8a      	subs	r2, r1, r2
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	9903      	ldr	r1, [sp, #12]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	7812      	ldrb	r2, [r2, #0]
 8002d60:	701a      	strb	r2, [r3, #0]
      sp[sn - i - 1] = t;
 8002d62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	9a03      	ldr	r2, [sp, #12]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8002d72:	701a      	strb	r2, [r3, #0]
      while (un > 1);
    }
  sn += mpn_limb_get_str (sp + sn, up[0], &binv);

  /* Reverse order */
  for (i = 0; 2*i + 1 < sn; i++)
 8002d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d76:	3301      	adds	r3, #1
 8002d78:	9310      	str	r3, [sp, #64]	; 0x40
 8002d7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3dc      	bcc.n	8002d40 <mpn_get_str_other+0xc4>
      unsigned char t = sp[i];
      sp[i] = sp[sn - i - 1];
      sp[sn - i - 1] = t;
    }

  return sn;
 8002d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	b013      	add	sp, #76	; 0x4c
 8002d8c:	f85d fb04 	ldr.w	pc, [sp], #4

08002d90 <mpn_get_str>:

size_t
mpn_get_str (unsigned char *sp, int base, mp_ptr up, mp_size_t un)
{
 8002d90:	b500      	push	{lr}
 8002d92:	b08b      	sub	sp, #44	; 0x2c
 8002d94:	9005      	str	r0, [sp, #20]
 8002d96:	9104      	str	r1, [sp, #16]
 8002d98:	9203      	str	r2, [sp, #12]
 8002d9a:	9302      	str	r3, [sp, #8]
  unsigned bits;

  assert (un > 0);
 8002d9c:	9b02      	ldr	r3, [sp, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	dc0f      	bgt.n	8002dc2 <mpn_get_str+0x32>
 8002da2:	f243 7064 	movw	r0, #14180	; 0x3764
 8002da6:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002daa:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8002dae:	f643 52e4 	movw	r2, #15844	; 0x3de4
 8002db2:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002db6:	f643 1384 	movw	r3, #14724	; 0x3984
 8002dba:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002dbe:	f00a fcaf 	bl	800d720 <__assert_func>
  assert (up[un-1] > 0);
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	9a03      	ldr	r2, [sp, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <mpn_get_str+0x66>
 8002dd6:	f243 7064 	movw	r0, #14180	; 0x3764
 8002dda:	f6c0 0001 	movt	r0, #2049	; 0x801
 8002dde:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8002de2:	f643 52e4 	movw	r2, #15844	; 0x3de4
 8002de6:	f6c0 0201 	movt	r2, #2049	; 0x801
 8002dea:	f643 138c 	movw	r3, #14732	; 0x398c
 8002dee:	f6c0 0301 	movt	r3, #2049	; 0x801
 8002df2:	f00a fc95 	bl	800d720 <__assert_func>

  bits = mpn_base_power_of_two_p (base);
 8002df6:	9b04      	ldr	r3, [sp, #16]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fd81 	bl	8002900 <mpn_base_power_of_two_p>
 8002dfe:	9009      	str	r0, [sp, #36]	; 0x24
  if (bits)
 8002e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <mpn_get_str+0x86>
    return mpn_get_str_bits (sp, bits, up, un);
 8002e06:	9805      	ldr	r0, [sp, #20]
 8002e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e0a:	9a03      	ldr	r2, [sp, #12]
 8002e0c:	9b02      	ldr	r3, [sp, #8]
 8002e0e:	f7ff fe03 	bl	8002a18 <mpn_get_str_bits>
 8002e12:	4603      	mov	r3, r0
 8002e14:	e00f      	b.n	8002e36 <mpn_get_str+0xa6>
  else
    {
      struct mpn_base_info info;

      mpn_get_base_info (&info, base);
 8002e16:	9b04      	ldr	r3, [sp, #16]
 8002e18:	aa07      	add	r2, sp, #28
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f7ff fd9f 	bl	8002960 <mpn_get_base_info>
      return mpn_get_str_other (sp, base, &info, up, un);
 8002e22:	ab07      	add	r3, sp, #28
 8002e24:	9a02      	ldr	r2, [sp, #8]
 8002e26:	9200      	str	r2, [sp, #0]
 8002e28:	9805      	ldr	r0, [sp, #20]
 8002e2a:	9904      	ldr	r1, [sp, #16]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	f7ff ff24 	bl	8002c7c <mpn_get_str_other>
 8002e34:	4603      	mov	r3, r0
    }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	b00b      	add	sp, #44	; 0x2c
 8002e3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e3e:	bf00      	nop

08002e40 <mpn_set_str_bits>:

static mp_size_t
mpn_set_str_bits (mp_ptr rp, const unsigned char *sp, size_t sn,
		  unsigned bits)
{
 8002e40:	b500      	push	{lr}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	9003      	str	r0, [sp, #12]
 8002e46:	9102      	str	r1, [sp, #8]
 8002e48:	9201      	str	r2, [sp, #4]
 8002e4a:	9300      	str	r3, [sp, #0]
  mp_size_t rn;
  size_t j;
  unsigned shift;

  for (j = sn, rn = 0, shift = 0; j-- > 0; )
 8002e4c:	9b01      	ldr	r3, [sp, #4]
 8002e4e:	9306      	str	r3, [sp, #24]
 8002e50:	2300      	movs	r3, #0
 8002e52:	9307      	str	r3, [sp, #28]
 8002e54:	2300      	movs	r3, #0
 8002e56:	9305      	str	r3, [sp, #20]
 8002e58:	e049      	b.n	8002eee <mpn_set_str_bits+0xae>
    {
      if (shift == 0)
 8002e5a:	9b05      	ldr	r3, [sp, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10f      	bne.n	8002e80 <mpn_set_str_bits+0x40>
	{
	  rp[rn++] = sp[j];
 8002e60:	9b07      	ldr	r3, [sp, #28]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	9207      	str	r2, [sp, #28]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	9a03      	ldr	r2, [sp, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	9902      	ldr	r1, [sp, #8]
 8002e6e:	9a06      	ldr	r2, [sp, #24]
 8002e70:	440a      	add	r2, r1
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	601a      	str	r2, [r3, #0]
	  shift += bits;
 8002e76:	9a05      	ldr	r2, [sp, #20]
 8002e78:	9b00      	ldr	r3, [sp, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	9305      	str	r3, [sp, #20]
 8002e7e:	e036      	b.n	8002eee <mpn_set_str_bits+0xae>
	}
      else
	{
	  rp[rn-1] |= (mp_limb_t) sp[j] << shift;
 8002e80:	9b07      	ldr	r3, [sp, #28]
 8002e82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e86:	3b01      	subs	r3, #1
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	9a03      	ldr	r2, [sp, #12]
 8002e8c:	441a      	add	r2, r3
 8002e8e:	9b07      	ldr	r3, [sp, #28]
 8002e90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e94:	3b01      	subs	r3, #1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	9903      	ldr	r1, [sp, #12]
 8002e9a:	440b      	add	r3, r1
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	9802      	ldr	r0, [sp, #8]
 8002ea0:	9b06      	ldr	r3, [sp, #24]
 8002ea2:	4403      	add	r3, r0
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	9b05      	ldr	r3, [sp, #20]
 8002eaa:	fa00 f303 	lsl.w	r3, r0, r3
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6013      	str	r3, [r2, #0]
	  shift += bits;
 8002eb2:	9a05      	ldr	r2, [sp, #20]
 8002eb4:	9b00      	ldr	r3, [sp, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	9305      	str	r3, [sp, #20]
	  if (shift >= GMP_LIMB_BITS)
 8002eba:	9b05      	ldr	r3, [sp, #20]
 8002ebc:	2b1f      	cmp	r3, #31
 8002ebe:	d916      	bls.n	8002eee <mpn_set_str_bits+0xae>
	    {
	      shift -= GMP_LIMB_BITS;
 8002ec0:	9b05      	ldr	r3, [sp, #20]
 8002ec2:	3b20      	subs	r3, #32
 8002ec4:	9305      	str	r3, [sp, #20]
	      if (shift > 0)
 8002ec6:	9b05      	ldr	r3, [sp, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <mpn_set_str_bits+0xae>
		rp[rn++] = (mp_limb_t) sp[j] >> (bits - shift);
 8002ecc:	9b07      	ldr	r3, [sp, #28]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	9207      	str	r2, [sp, #28]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	9a03      	ldr	r2, [sp, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	9902      	ldr	r1, [sp, #8]
 8002eda:	9a06      	ldr	r2, [sp, #24]
 8002edc:	440a      	add	r2, r1
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	9800      	ldr	r0, [sp, #0]
 8002ee4:	9a05      	ldr	r2, [sp, #20]
 8002ee6:	1a82      	subs	r2, r0, r2
 8002ee8:	fa21 f202 	lsr.w	r2, r1, r2
 8002eec:	601a      	str	r2, [r3, #0]
{
  mp_size_t rn;
  size_t j;
  unsigned shift;

  for (j = sn, rn = 0, shift = 0; j-- > 0; )
 8002eee:	9b06      	ldr	r3, [sp, #24]
 8002ef0:	1e5a      	subs	r2, r3, #1
 8002ef2:	9206      	str	r2, [sp, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1b0      	bne.n	8002e5a <mpn_set_str_bits+0x1a>
	      if (shift > 0)
		rp[rn++] = (mp_limb_t) sp[j] >> (bits - shift);
	    }
	}
    }
  rn = mpn_normalized_size (rp, rn);
 8002ef8:	9803      	ldr	r0, [sp, #12]
 8002efa:	9907      	ldr	r1, [sp, #28]
 8002efc:	f7fd ff02 	bl	8000d04 <mpn_normalized_size>
 8002f00:	9007      	str	r0, [sp, #28]
  return rn;
 8002f02:	9b07      	ldr	r3, [sp, #28]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	b009      	add	sp, #36	; 0x24
 8002f08:	f85d fb04 	ldr.w	pc, [sp], #4

08002f0c <mpn_set_str_other>:

static mp_size_t
mpn_set_str_other (mp_ptr rp, const unsigned char *sp, size_t sn,
		   mp_limb_t b, const struct mpn_base_info *info)
{
 8002f0c:	b500      	push	{lr}
 8002f0e:	b08b      	sub	sp, #44	; 0x2c
 8002f10:	9003      	str	r0, [sp, #12]
 8002f12:	9102      	str	r1, [sp, #8]
 8002f14:	9201      	str	r2, [sp, #4]
 8002f16:	9300      	str	r3, [sp, #0]
  mp_size_t rn;
  mp_limb_t w;
  unsigned k;
  size_t j;

  k = 1 + (sn - 1) % info->exp;
 8002f18:	9b01      	ldr	r3, [sp, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f24:	fb02 f201 	mul.w	r2, r2, r1
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	9307      	str	r3, [sp, #28]

  j = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9306      	str	r3, [sp, #24]
  w = sp[j++];
 8002f32:	9b06      	ldr	r3, [sp, #24]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	9206      	str	r2, [sp, #24]
 8002f38:	9a02      	ldr	r2, [sp, #8]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	9308      	str	r3, [sp, #32]
  for (; --k > 0; )
 8002f40:	e00b      	b.n	8002f5a <mpn_set_str_other+0x4e>
    w = w * b + sp[j++];
 8002f42:	9b08      	ldr	r3, [sp, #32]
 8002f44:	9a00      	ldr	r2, [sp, #0]
 8002f46:	fb02 f203 	mul.w	r2, r2, r3
 8002f4a:	9b06      	ldr	r3, [sp, #24]
 8002f4c:	1c59      	adds	r1, r3, #1
 8002f4e:	9106      	str	r1, [sp, #24]
 8002f50:	9902      	ldr	r1, [sp, #8]
 8002f52:	440b      	add	r3, r1
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	9308      	str	r3, [sp, #32]

  k = 1 + (sn - 1) % info->exp;

  j = 0;
  w = sp[j++];
  for (; --k > 0; )
 8002f5a:	9b07      	ldr	r3, [sp, #28]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	9307      	str	r3, [sp, #28]
 8002f60:	9b07      	ldr	r3, [sp, #28]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ed      	bne.n	8002f42 <mpn_set_str_other+0x36>
    w = w * b + sp[j++];

  rp[0] = w;
 8002f66:	9b03      	ldr	r3, [sp, #12]
 8002f68:	9a08      	ldr	r2, [sp, #32]
 8002f6a:	601a      	str	r2, [r3, #0]

  for (rn = (w > 0); j < sn;)
 8002f6c:	9b08      	ldr	r3, [sp, #32]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf0c      	ite	eq
 8002f72:	2300      	moveq	r3, #0
 8002f74:	2301      	movne	r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	9309      	str	r3, [sp, #36]	; 0x24
 8002f7a:	e03a      	b.n	8002ff2 <mpn_set_str_other+0xe6>
    {
      mp_limb_t cy;

      w = sp[j++];
 8002f7c:	9b06      	ldr	r3, [sp, #24]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	9206      	str	r2, [sp, #24]
 8002f82:	9a02      	ldr	r2, [sp, #8]
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	9308      	str	r3, [sp, #32]
      for (k = 1; k < info->exp; k++)
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	9307      	str	r3, [sp, #28]
 8002f8e:	e00e      	b.n	8002fae <mpn_set_str_other+0xa2>
	w = w * b + sp[j++];
 8002f90:	9b08      	ldr	r3, [sp, #32]
 8002f92:	9a00      	ldr	r2, [sp, #0]
 8002f94:	fb02 f203 	mul.w	r2, r2, r3
 8002f98:	9b06      	ldr	r3, [sp, #24]
 8002f9a:	1c59      	adds	r1, r3, #1
 8002f9c:	9106      	str	r1, [sp, #24]
 8002f9e:	9902      	ldr	r1, [sp, #8]
 8002fa0:	440b      	add	r3, r1
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	9308      	str	r3, [sp, #32]
  for (rn = (w > 0); j < sn;)
    {
      mp_limb_t cy;

      w = sp[j++];
      for (k = 1; k < info->exp; k++)
 8002fa8:	9b07      	ldr	r3, [sp, #28]
 8002faa:	3301      	adds	r3, #1
 8002fac:	9307      	str	r3, [sp, #28]
 8002fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	9b07      	ldr	r3, [sp, #28]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d8eb      	bhi.n	8002f90 <mpn_set_str_other+0x84>
	w = w * b + sp[j++];

      cy = mpn_mul_1 (rp, rp, rn, info->bb);
 8002fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	9803      	ldr	r0, [sp, #12]
 8002fbe:	9903      	ldr	r1, [sp, #12]
 8002fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fc2:	f7fe f845 	bl	8001050 <mpn_mul_1>
 8002fc6:	9005      	str	r0, [sp, #20]
      cy += mpn_add_1 (rp, rp, rn, w);
 8002fc8:	9803      	ldr	r0, [sp, #12]
 8002fca:	9903      	ldr	r1, [sp, #12]
 8002fcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fce:	9b08      	ldr	r3, [sp, #32]
 8002fd0:	f7fd fec6 	bl	8000d60 <mpn_add_1>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	9a05      	ldr	r2, [sp, #20]
 8002fd8:	4413      	add	r3, r2
 8002fda:	9305      	str	r3, [sp, #20]
      if (cy > 0)
 8002fdc:	9b05      	ldr	r3, [sp, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <mpn_set_str_other+0xe6>
	rp[rn++] = cy;
 8002fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	9a03      	ldr	r2, [sp, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	9a05      	ldr	r2, [sp, #20]
 8002ff0:	601a      	str	r2, [r3, #0]
  for (; --k > 0; )
    w = w * b + sp[j++];

  rp[0] = w;

  for (rn = (w > 0); j < sn;)
 8002ff2:	9a06      	ldr	r2, [sp, #24]
 8002ff4:	9b01      	ldr	r3, [sp, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d3c0      	bcc.n	8002f7c <mpn_set_str_other+0x70>
      cy = mpn_mul_1 (rp, rp, rn, info->bb);
      cy += mpn_add_1 (rp, rp, rn, w);
      if (cy > 0)
	rp[rn++] = cy;
    }
  assert (j == sn);
 8002ffa:	9a06      	ldr	r2, [sp, #24]
 8002ffc:	9b01      	ldr	r3, [sp, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d00f      	beq.n	8003022 <mpn_set_str_other+0x116>
 8003002:	f243 7064 	movw	r0, #14180	; 0x3764
 8003006:	f6c0 0001 	movt	r0, #2049	; 0x801
 800300a:	f240 5137 	movw	r1, #1335	; 0x537
 800300e:	f643 52f0 	movw	r2, #15856	; 0x3df0
 8003012:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003016:	f643 139c 	movw	r3, #14748	; 0x399c
 800301a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800301e:	f00a fb7f 	bl	800d720 <__assert_func>

  return rn;
 8003022:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 8003024:	4618      	mov	r0, r3
 8003026:	b00b      	add	sp, #44	; 0x2c
 8003028:	f85d fb04 	ldr.w	pc, [sp], #4

0800302c <mpn_set_str>:

mp_size_t
mpn_set_str (mp_ptr rp, const unsigned char *sp, size_t sn, int base)
{
 800302c:	b500      	push	{lr}
 800302e:	b08b      	sub	sp, #44	; 0x2c
 8003030:	9005      	str	r0, [sp, #20]
 8003032:	9104      	str	r1, [sp, #16]
 8003034:	9203      	str	r2, [sp, #12]
 8003036:	9302      	str	r3, [sp, #8]
  unsigned bits;

  if (sn == 0)
 8003038:	9b03      	ldr	r3, [sp, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <mpn_set_str+0x16>
    return 0;
 800303e:	2300      	movs	r3, #0
 8003040:	e01e      	b.n	8003080 <mpn_set_str+0x54>

  bits = mpn_base_power_of_two_p (base);
 8003042:	9b02      	ldr	r3, [sp, #8]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fc5b 	bl	8002900 <mpn_base_power_of_two_p>
 800304a:	9009      	str	r0, [sp, #36]	; 0x24
  if (bits)
 800304c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <mpn_set_str+0x36>
    return mpn_set_str_bits (rp, sp, sn, bits);
 8003052:	9805      	ldr	r0, [sp, #20]
 8003054:	9904      	ldr	r1, [sp, #16]
 8003056:	9a03      	ldr	r2, [sp, #12]
 8003058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800305a:	f7ff fef1 	bl	8002e40 <mpn_set_str_bits>
 800305e:	4603      	mov	r3, r0
 8003060:	e00e      	b.n	8003080 <mpn_set_str+0x54>
  else
    {
      struct mpn_base_info info;

      mpn_get_base_info (&info, base);
 8003062:	9b02      	ldr	r3, [sp, #8]
 8003064:	aa07      	add	r2, sp, #28
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7ff fc79 	bl	8002960 <mpn_get_base_info>
      return mpn_set_str_other (rp, sp, sn, base, &info);
 800306e:	9b02      	ldr	r3, [sp, #8]
 8003070:	aa07      	add	r2, sp, #28
 8003072:	9200      	str	r2, [sp, #0]
 8003074:	9805      	ldr	r0, [sp, #20]
 8003076:	9904      	ldr	r1, [sp, #16]
 8003078:	9a03      	ldr	r2, [sp, #12]
 800307a:	f7ff ff47 	bl	8002f0c <mpn_set_str_other>
 800307e:	4603      	mov	r3, r0
    }
}
 8003080:	4618      	mov	r0, r3
 8003082:	b00b      	add	sp, #44	; 0x2c
 8003084:	f85d fb04 	ldr.w	pc, [sp], #4

08003088 <mpz_init>:


/* MPZ interface */
void
mpz_init (mpz_t r)
{
 8003088:	b500      	push	{lr}
 800308a:	b083      	sub	sp, #12
 800308c:	9001      	str	r0, [sp, #4]
  r->_mp_alloc = 1;
 800308e:	9b01      	ldr	r3, [sp, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  r->_mp_size = 0;
 8003094:	9b01      	ldr	r3, [sp, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	605a      	str	r2, [r3, #4]
  r->_mp_d = gmp_xalloc_limbs (1);
 800309a:	2001      	movs	r0, #1
 800309c:	f7fd fd80 	bl	8000ba0 <gmp_xalloc_limbs>
 80030a0:	4602      	mov	r2, r0
 80030a2:	9b01      	ldr	r3, [sp, #4]
 80030a4:	609a      	str	r2, [r3, #8]
}
 80030a6:	b003      	add	sp, #12
 80030a8:	f85d fb04 	ldr.w	pc, [sp], #4

080030ac <mpz_init2>:

/* The utility of this function is a bit limited, since many functions
   assigns the result variable using mpz_swap. */
void
mpz_init2 (mpz_t r, mp_bitcnt_t bits)
{
 80030ac:	b500      	push	{lr}
 80030ae:	b085      	sub	sp, #20
 80030b0:	9001      	str	r0, [sp, #4]
 80030b2:	9100      	str	r1, [sp, #0]
  mp_size_t rn;

  bits -= (bits != 0);		/* Round down, except if 0 */
 80030b4:	9b00      	ldr	r3, [sp, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf0c      	ite	eq
 80030ba:	2300      	moveq	r3, #0
 80030bc:	2301      	movne	r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	9a00      	ldr	r2, [sp, #0]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	9300      	str	r3, [sp, #0]
  rn = 1 + bits / GMP_LIMB_BITS;
 80030c6:	9b00      	ldr	r3, [sp, #0]
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	3301      	adds	r3, #1
 80030cc:	9303      	str	r3, [sp, #12]

  r->_mp_alloc = rn;
 80030ce:	9b01      	ldr	r3, [sp, #4]
 80030d0:	9a03      	ldr	r2, [sp, #12]
 80030d2:	601a      	str	r2, [r3, #0]
  r->_mp_size = 0;
 80030d4:	9b01      	ldr	r3, [sp, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	605a      	str	r2, [r3, #4]
  r->_mp_d = gmp_xalloc_limbs (rn);
 80030da:	9803      	ldr	r0, [sp, #12]
 80030dc:	f7fd fd60 	bl	8000ba0 <gmp_xalloc_limbs>
 80030e0:	4602      	mov	r2, r0
 80030e2:	9b01      	ldr	r3, [sp, #4]
 80030e4:	609a      	str	r2, [r3, #8]
}
 80030e6:	b005      	add	sp, #20
 80030e8:	f85d fb04 	ldr.w	pc, [sp], #4

080030ec <mpz_clear>:

void
mpz_clear (mpz_t r)
{
 80030ec:	b500      	push	{lr}
 80030ee:	b083      	sub	sp, #12
 80030f0:	9001      	str	r0, [sp, #4]
  gmp_free (r->_mp_d);
 80030f2:	f240 0314 	movw	r3, #20
 80030f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	9a01      	ldr	r2, [sp, #4]
 80030fe:	6892      	ldr	r2, [r2, #8]
 8003100:	4610      	mov	r0, r2
 8003102:	2100      	movs	r1, #0
 8003104:	4798      	blx	r3
}
 8003106:	b003      	add	sp, #12
 8003108:	f85d fb04 	ldr.w	pc, [sp], #4

0800310c <mpz_realloc>:

static void *
mpz_realloc (mpz_t r, mp_size_t size)
{
 800310c:	b500      	push	{lr}
 800310e:	b083      	sub	sp, #12
 8003110:	9001      	str	r0, [sp, #4]
 8003112:	9100      	str	r1, [sp, #0]
  size = GMP_MAX (size, 1);
 8003114:	9b00      	ldr	r3, [sp, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	bfb8      	it	lt
 800311a:	2301      	movlt	r3, #1
 800311c:	9300      	str	r3, [sp, #0]

  r->_mp_d = gmp_xrealloc_limbs (r->_mp_d, size);
 800311e:	9b01      	ldr	r3, [sp, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	9900      	ldr	r1, [sp, #0]
 8003126:	f7fd fd4d 	bl	8000bc4 <gmp_xrealloc_limbs>
 800312a:	4602      	mov	r2, r0
 800312c:	9b01      	ldr	r3, [sp, #4]
 800312e:	609a      	str	r2, [r3, #8]
  r->_mp_alloc = size;
 8003130:	9b01      	ldr	r3, [sp, #4]
 8003132:	9a00      	ldr	r2, [sp, #0]
 8003134:	601a      	str	r2, [r3, #0]

  if (GMP_ABS (r->_mp_size) > size)
 8003136:	9b01      	ldr	r3, [sp, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800313e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003142:	9b00      	ldr	r3, [sp, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	dd02      	ble.n	800314e <mpz_realloc+0x42>
    r->_mp_size = 0;
 8003148:	9b01      	ldr	r3, [sp, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]

  return r->_mp_d;
 800314e:	9b01      	ldr	r3, [sp, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
}
 8003152:	4618      	mov	r0, r3
 8003154:	b003      	add	sp, #12
 8003156:	f85d fb04 	ldr.w	pc, [sp], #4
 800315a:	bf00      	nop

0800315c <mpz_set_si>:
			  : (z)->_mp_d)

/* MPZ assignment and basic conversions. */
void
mpz_set_si (mpz_t r, signed long int x)
{
 800315c:	b500      	push	{lr}
 800315e:	b083      	sub	sp, #12
 8003160:	9001      	str	r0, [sp, #4]
 8003162:	9100      	str	r1, [sp, #0]
  if (x >= 0)
 8003164:	9b00      	ldr	r3, [sp, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db05      	blt.n	8003176 <mpz_set_si+0x1a>
    mpz_set_ui (r, x);
 800316a:	9b00      	ldr	r3, [sp, #0]
 800316c:	9801      	ldr	r0, [sp, #4]
 800316e:	4619      	mov	r1, r3
 8003170:	f000 f80e 	bl	8003190 <mpz_set_ui>
 8003174:	e008      	b.n	8003188 <mpz_set_si+0x2c>
  else /* (x < 0) */
    {
      r->_mp_size = -1;
 8003176:	9b01      	ldr	r3, [sp, #4]
 8003178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317c:	605a      	str	r2, [r3, #4]
      r->_mp_d[0] = GMP_NEG_CAST (unsigned long int, x);
 800317e:	9b01      	ldr	r3, [sp, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	9a00      	ldr	r2, [sp, #0]
 8003184:	4252      	negs	r2, r2
 8003186:	601a      	str	r2, [r3, #0]
    }
}
 8003188:	b003      	add	sp, #12
 800318a:	f85d fb04 	ldr.w	pc, [sp], #4
 800318e:	bf00      	nop

08003190 <mpz_set_ui>:

void
mpz_set_ui (mpz_t r, unsigned long int x)
{
 8003190:	b082      	sub	sp, #8
 8003192:	9001      	str	r0, [sp, #4]
 8003194:	9100      	str	r1, [sp, #0]
  if (x > 0)
 8003196:	9b00      	ldr	r3, [sp, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <mpz_set_ui+0x1c>
    {
      r->_mp_size = 1;
 800319c:	9b01      	ldr	r3, [sp, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	605a      	str	r2, [r3, #4]
      r->_mp_d[0] = x;
 80031a2:	9b01      	ldr	r3, [sp, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	9a00      	ldr	r2, [sp, #0]
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e002      	b.n	80031b2 <mpz_set_ui+0x22>
    }
  else
    r->_mp_size = 0;
 80031ac:	9b01      	ldr	r3, [sp, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	605a      	str	r2, [r3, #4]
}
 80031b2:	b002      	add	sp, #8
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop

080031b8 <mpz_set>:

void
mpz_set (mpz_t r, const mpz_t x)
{
 80031b8:	b500      	push	{lr}
 80031ba:	b085      	sub	sp, #20
 80031bc:	9001      	str	r0, [sp, #4]
 80031be:	9100      	str	r1, [sp, #0]
  /* Allow the NOP r == x */
  if (r != x)
 80031c0:	9a01      	ldr	r2, [sp, #4]
 80031c2:	9b00      	ldr	r3, [sp, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d01e      	beq.n	8003206 <mpz_set+0x4e>
    {
      mp_size_t n;
      mp_ptr rp;

      n = GMP_ABS (x->_mp_size);
 80031c8:	9b00      	ldr	r3, [sp, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bfb8      	it	lt
 80031d0:	425b      	neglt	r3, r3
 80031d2:	9303      	str	r3, [sp, #12]
      rp = MPZ_REALLOC (r, n);
 80031d4:	9b01      	ldr	r3, [sp, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	9b03      	ldr	r3, [sp, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	da05      	bge.n	80031ea <mpz_set+0x32>
 80031de:	9801      	ldr	r0, [sp, #4]
 80031e0:	9903      	ldr	r1, [sp, #12]
 80031e2:	f7ff ff93 	bl	800310c <mpz_realloc>
 80031e6:	4603      	mov	r3, r0
 80031e8:	e001      	b.n	80031ee <mpz_set+0x36>
 80031ea:	9b01      	ldr	r3, [sp, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	9302      	str	r3, [sp, #8]

      mpn_copyi (rp, x->_mp_d, n);
 80031f0:	9b00      	ldr	r3, [sp, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	9802      	ldr	r0, [sp, #8]
 80031f6:	4619      	mov	r1, r3
 80031f8:	9a03      	ldr	r2, [sp, #12]
 80031fa:	f7fd fd09 	bl	8000c10 <mpn_copyi>
      r->_mp_size = x->_mp_size;
 80031fe:	9b00      	ldr	r3, [sp, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	9b01      	ldr	r3, [sp, #4]
 8003204:	605a      	str	r2, [r3, #4]
    }
}
 8003206:	b005      	add	sp, #20
 8003208:	f85d fb04 	ldr.w	pc, [sp], #4

0800320c <mpz_init_set_si>:

void
mpz_init_set_si (mpz_t r, signed long int x)
{
 800320c:	b500      	push	{lr}
 800320e:	b083      	sub	sp, #12
 8003210:	9001      	str	r0, [sp, #4]
 8003212:	9100      	str	r1, [sp, #0]
  mpz_init (r);
 8003214:	9801      	ldr	r0, [sp, #4]
 8003216:	f7ff ff37 	bl	8003088 <mpz_init>
  mpz_set_si (r, x);
 800321a:	9801      	ldr	r0, [sp, #4]
 800321c:	9900      	ldr	r1, [sp, #0]
 800321e:	f7ff ff9d 	bl	800315c <mpz_set_si>
}
 8003222:	b003      	add	sp, #12
 8003224:	f85d fb04 	ldr.w	pc, [sp], #4

08003228 <mpz_init_set_ui>:

void
mpz_init_set_ui (mpz_t r, unsigned long int x)
{
 8003228:	b500      	push	{lr}
 800322a:	b083      	sub	sp, #12
 800322c:	9001      	str	r0, [sp, #4]
 800322e:	9100      	str	r1, [sp, #0]
  mpz_init (r);
 8003230:	9801      	ldr	r0, [sp, #4]
 8003232:	f7ff ff29 	bl	8003088 <mpz_init>
  mpz_set_ui (r, x);
 8003236:	9801      	ldr	r0, [sp, #4]
 8003238:	9900      	ldr	r1, [sp, #0]
 800323a:	f7ff ffa9 	bl	8003190 <mpz_set_ui>
}
 800323e:	b003      	add	sp, #12
 8003240:	f85d fb04 	ldr.w	pc, [sp], #4

08003244 <mpz_init_set>:

void
mpz_init_set (mpz_t r, const mpz_t x)
{
 8003244:	b500      	push	{lr}
 8003246:	b083      	sub	sp, #12
 8003248:	9001      	str	r0, [sp, #4]
 800324a:	9100      	str	r1, [sp, #0]
  mpz_init (r);
 800324c:	9801      	ldr	r0, [sp, #4]
 800324e:	f7ff ff1b 	bl	8003088 <mpz_init>
  mpz_set (r, x);
 8003252:	9801      	ldr	r0, [sp, #4]
 8003254:	9900      	ldr	r1, [sp, #0]
 8003256:	f7ff ffaf 	bl	80031b8 <mpz_set>
}
 800325a:	b003      	add	sp, #12
 800325c:	f85d fb04 	ldr.w	pc, [sp], #4

08003260 <mpz_fits_slong_p>:

int
mpz_fits_slong_p (const mpz_t u)
{
 8003260:	b084      	sub	sp, #16
 8003262:	9001      	str	r0, [sp, #4]
  mp_size_t us = u->_mp_size;
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	9303      	str	r3, [sp, #12]

  if (us == 0)
 800326a:	9b03      	ldr	r3, [sp, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <mpz_fits_slong_p+0x14>
    return 1;
 8003270:	2301      	movs	r3, #1
 8003272:	e018      	b.n	80032a6 <mpz_fits_slong_p+0x46>
  else if (us == 1)
 8003274:	9b03      	ldr	r3, [sp, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d106      	bne.n	8003288 <mpz_fits_slong_p+0x28>
    return u->_mp_d[0] < GMP_LIMB_HIGHBIT;
 800327a:	9b01      	ldr	r3, [sp, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	43db      	mvns	r3, r3
 8003282:	0fdb      	lsrs	r3, r3, #31
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e00e      	b.n	80032a6 <mpz_fits_slong_p+0x46>
  else if (us == -1)
 8003288:	9b03      	ldr	r3, [sp, #12]
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328e:	d109      	bne.n	80032a4 <mpz_fits_slong_p+0x44>
    return u->_mp_d[0] <= GMP_LIMB_HIGHBIT;
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329a:	bf8c      	ite	hi
 800329c:	2300      	movhi	r3, #0
 800329e:	2301      	movls	r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e000      	b.n	80032a6 <mpz_fits_slong_p+0x46>
  else
    return 0;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	b004      	add	sp, #16
 80032aa:	4770      	bx	lr

080032ac <mpz_fits_ulong_p>:

int
mpz_fits_ulong_p (const mpz_t u)
{
 80032ac:	b084      	sub	sp, #16
 80032ae:	9001      	str	r0, [sp, #4]
  mp_size_t us = u->_mp_size;
 80032b0:	9b01      	ldr	r3, [sp, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	9303      	str	r3, [sp, #12]

  return (us == (us > 0));
 80032b6:	9b03      	ldr	r3, [sp, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bfd4      	ite	le
 80032bc:	2300      	movle	r3, #0
 80032be:	2301      	movgt	r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	bf14      	ite	ne
 80032ca:	2300      	movne	r3, #0
 80032cc:	2301      	moveq	r3, #1
 80032ce:	b2db      	uxtb	r3, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	b004      	add	sp, #16
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <mpz_get_si>:

long int
mpz_get_si (const mpz_t u)
{
 80032d8:	b084      	sub	sp, #16
 80032da:	9001      	str	r0, [sp, #4]
  mp_size_t us = u->_mp_size;
 80032dc:	9b01      	ldr	r3, [sp, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	9303      	str	r3, [sp, #12]

  if (us > 0)
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	dd05      	ble.n	80032f4 <mpz_get_si+0x1c>
    return (long) (u->_mp_d[0] & ~GMP_LIMB_HIGHBIT);
 80032e8:	9b01      	ldr	r3, [sp, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f2:	e00a      	b.n	800330a <mpz_get_si+0x32>
  else if (us < 0)
 80032f4:	9b03      	ldr	r3, [sp, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da06      	bge.n	8003308 <mpz_get_si+0x30>
    return (long) (- u->_mp_d[0] | GMP_LIMB_HIGHBIT);
 80032fa:	9b01      	ldr	r3, [sp, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	425b      	negs	r3, r3
 8003302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003306:	e000      	b.n	800330a <mpz_get_si+0x32>
  else
    return 0;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	b004      	add	sp, #16
 800330e:	4770      	bx	lr

08003310 <mpz_get_ui>:

unsigned long int
mpz_get_ui (const mpz_t u)
{
 8003310:	b082      	sub	sp, #8
 8003312:	9001      	str	r0, [sp, #4]
  return u->_mp_size == 0 ? 0 : u->_mp_d[0];
 8003314:	9b01      	ldr	r3, [sp, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <mpz_get_ui+0x14>
 800331c:	9b01      	ldr	r3, [sp, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	e000      	b.n	8003326 <mpz_get_ui+0x16>
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	b002      	add	sp, #8
 800332a:	4770      	bx	lr

0800332c <mpz_size>:

size_t
mpz_size (const mpz_t u)
{
 800332c:	b082      	sub	sp, #8
 800332e:	9001      	str	r0, [sp, #4]
  return GMP_ABS (u->_mp_size);
 8003330:	9b01      	ldr	r3, [sp, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	bfb8      	it	lt
 8003338:	425b      	neglt	r3, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	b002      	add	sp, #8
 800333e:	4770      	bx	lr

08003340 <mpz_getlimbn>:

mp_limb_t
mpz_getlimbn (const mpz_t u, mp_size_t n)
{
 8003340:	b082      	sub	sp, #8
 8003342:	9001      	str	r0, [sp, #4]
 8003344:	9100      	str	r1, [sp, #0]
  if (n >= 0 && n < GMP_ABS (u->_mp_size))
 8003346:	9b00      	ldr	r3, [sp, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0f      	blt.n	800336c <mpz_getlimbn+0x2c>
 800334c:	9b01      	ldr	r3, [sp, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003354:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003358:	9b00      	ldr	r3, [sp, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	dd06      	ble.n	800336c <mpz_getlimbn+0x2c>
    return u->_mp_d[n];
 800335e:	9b01      	ldr	r3, [sp, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	9b00      	ldr	r3, [sp, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	e000      	b.n	800336e <mpz_getlimbn+0x2e>
  else
    return 0;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	b002      	add	sp, #8
 8003372:	4770      	bx	lr

08003374 <mpz_realloc2>:

void
mpz_realloc2 (mpz_t x, mp_bitcnt_t n)
{
 8003374:	b500      	push	{lr}
 8003376:	b083      	sub	sp, #12
 8003378:	9001      	str	r0, [sp, #4]
 800337a:	9100      	str	r1, [sp, #0]
  mpz_realloc (x, 1 + (n - (n != 0)) / GMP_LIMB_BITS);
 800337c:	9b00      	ldr	r3, [sp, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf0c      	ite	eq
 8003382:	2300      	moveq	r3, #0
 8003384:	2301      	movne	r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	9a00      	ldr	r2, [sp, #0]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	3301      	adds	r3, #1
 8003390:	9801      	ldr	r0, [sp, #4]
 8003392:	4619      	mov	r1, r3
 8003394:	f7ff feba 	bl	800310c <mpz_realloc>
}
 8003398:	b003      	add	sp, #12
 800339a:	f85d fb04 	ldr.w	pc, [sp], #4
 800339e:	bf00      	nop

080033a0 <mpz_limbs_read>:

mp_srcptr
mpz_limbs_read (mpz_srcptr x)
{
 80033a0:	b082      	sub	sp, #8
 80033a2:	9001      	str	r0, [sp, #4]
  return x->_mp_d;;
 80033a4:	9b01      	ldr	r3, [sp, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	b002      	add	sp, #8
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <mpz_limbs_modify>:

mp_ptr
mpz_limbs_modify (mpz_t x, mp_size_t n)
{
 80033b0:	b500      	push	{lr}
 80033b2:	b083      	sub	sp, #12
 80033b4:	9001      	str	r0, [sp, #4]
 80033b6:	9100      	str	r1, [sp, #0]
  assert (n > 0);
 80033b8:	9b00      	ldr	r3, [sp, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	dc0f      	bgt.n	80033de <mpz_limbs_modify+0x2e>
 80033be:	f243 7064 	movw	r0, #14180	; 0x3764
 80033c2:	f6c0 0001 	movt	r0, #2049	; 0x801
 80033c6:	f240 6109 	movw	r1, #1545	; 0x609
 80033ca:	f643 6204 	movw	r2, #15876	; 0x3e04
 80033ce:	f6c0 0201 	movt	r2, #2049	; 0x801
 80033d2:	f243 73e0 	movw	r3, #14304	; 0x37e0
 80033d6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80033da:	f00a f9a1 	bl	800d720 <__assert_func>
  return MPZ_REALLOC (x, n);
 80033de:	9b01      	ldr	r3, [sp, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	9b00      	ldr	r3, [sp, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	da05      	bge.n	80033f4 <mpz_limbs_modify+0x44>
 80033e8:	9801      	ldr	r0, [sp, #4]
 80033ea:	9900      	ldr	r1, [sp, #0]
 80033ec:	f7ff fe8e 	bl	800310c <mpz_realloc>
 80033f0:	4603      	mov	r3, r0
 80033f2:	e001      	b.n	80033f8 <mpz_limbs_modify+0x48>
 80033f4:	9b01      	ldr	r3, [sp, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	b003      	add	sp, #12
 80033fc:	f85d fb04 	ldr.w	pc, [sp], #4

08003400 <mpz_limbs_write>:

mp_ptr
mpz_limbs_write (mpz_t x, mp_size_t n)
{
 8003400:	b500      	push	{lr}
 8003402:	b083      	sub	sp, #12
 8003404:	9001      	str	r0, [sp, #4]
 8003406:	9100      	str	r1, [sp, #0]
  return mpz_limbs_modify (x, n);
 8003408:	9801      	ldr	r0, [sp, #4]
 800340a:	9900      	ldr	r1, [sp, #0]
 800340c:	f7ff ffd0 	bl	80033b0 <mpz_limbs_modify>
 8003410:	4603      	mov	r3, r0
}
 8003412:	4618      	mov	r0, r3
 8003414:	b003      	add	sp, #12
 8003416:	f85d fb04 	ldr.w	pc, [sp], #4
 800341a:	bf00      	nop

0800341c <mpz_limbs_finish>:

void
mpz_limbs_finish (mpz_t x, mp_size_t xs)
{
 800341c:	b500      	push	{lr}
 800341e:	b085      	sub	sp, #20
 8003420:	9001      	str	r0, [sp, #4]
 8003422:	9100      	str	r1, [sp, #0]
  mp_size_t xn;
  xn = mpn_normalized_size (x->_mp_d, GMP_ABS (xs));
 8003424:	9b01      	ldr	r3, [sp, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	9b00      	ldr	r3, [sp, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	bfb8      	it	lt
 800342e:	425b      	neglt	r3, r3
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fc66 	bl	8000d04 <mpn_normalized_size>
 8003438:	9003      	str	r0, [sp, #12]
  x->_mp_size = xs < 0 ? -xn : xn;
 800343a:	9b00      	ldr	r3, [sp, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da02      	bge.n	8003446 <mpz_limbs_finish+0x2a>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	425b      	negs	r3, r3
 8003444:	e000      	b.n	8003448 <mpz_limbs_finish+0x2c>
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	9a01      	ldr	r2, [sp, #4]
 800344a:	6053      	str	r3, [r2, #4]
}
 800344c:	b005      	add	sp, #20
 800344e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003452:	bf00      	nop

08003454 <mpz_roinit_n>:

mpz_srcptr
mpz_roinit_n (mpz_t x, mp_srcptr xp, mp_size_t xs)
{
 8003454:	b500      	push	{lr}
 8003456:	b085      	sub	sp, #20
 8003458:	9003      	str	r0, [sp, #12]
 800345a:	9102      	str	r1, [sp, #8]
 800345c:	9201      	str	r2, [sp, #4]
  x->_mp_alloc = 0;
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
  x->_mp_d = (mp_ptr) xp;
 8003464:	9b03      	ldr	r3, [sp, #12]
 8003466:	9a02      	ldr	r2, [sp, #8]
 8003468:	609a      	str	r2, [r3, #8]
  mpz_limbs_finish (x, xs);
 800346a:	9803      	ldr	r0, [sp, #12]
 800346c:	9901      	ldr	r1, [sp, #4]
 800346e:	f7ff ffd5 	bl	800341c <mpz_limbs_finish>
  return x;
 8003472:	9b03      	ldr	r3, [sp, #12]
}
 8003474:	4618      	mov	r0, r3
 8003476:	b005      	add	sp, #20
 8003478:	f85d fb04 	ldr.w	pc, [sp], #4

0800347c <mpz_set_d>:


/* Conversions and comparison to double. */
void
mpz_set_d (mpz_t r, double x)
{
 800347c:	b510      	push	{r4, lr}
 800347e:	b08e      	sub	sp, #56	; 0x38
 8003480:	9003      	str	r0, [sp, #12]
 8003482:	ed8d 0b00 	vstr	d0, [sp]
  double Bi;
  mp_limb_t f;

  /* x != x is true when x is a NaN, and x == x * 0.5 is true when x is
     zero or infinity. */
  if (x != x || x == x * 0.5)
 8003486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800348a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800348e:	f009 fc1b 	bl	800ccc8 <__aeabi_dcmpeq>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d014      	beq.n	80034c2 <mpz_set_d+0x46>
 8003498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80034a8:	f009 f9a6 	bl	800c7f8 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034b8:	f009 fc06 	bl	800ccc8 <__aeabi_dcmpeq>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <mpz_set_d+0x4e>
    {
      r->_mp_size = 0;
 80034c2:	9b03      	ldr	r3, [sp, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	605a      	str	r2, [r3, #4]
      return;
 80034c8:	e0f0      	b.n	80036ac <mpz_set_d+0x230>
    }

  sign = x < 0.0 ;
 80034ca:	2301      	movs	r3, #1
 80034cc:	461c      	mov	r4, r3
 80034ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	f009 fbff 	bl	800ccdc <__aeabi_dcmplt>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <mpz_set_d+0x6c>
 80034e4:	2300      	movs	r3, #0
 80034e6:	461c      	mov	r4, r3
 80034e8:	b2e3      	uxtb	r3, r4
 80034ea:	930b      	str	r3, [sp, #44]	; 0x2c
  if (sign)
 80034ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <mpz_set_d+0x82>
    x = - x;
 80034f2:	9b00      	ldr	r3, [sp, #0]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	9b01      	ldr	r3, [sp, #4]
 80034f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80034fc:	9301      	str	r3, [sp, #4]

  if (x < 1.0)
 80034fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 800350e:	f009 fbe5 	bl	800ccdc <__aeabi_dcmplt>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <mpz_set_d+0xa4>
    {
      r->_mp_size = 0;
 8003518:	9b03      	ldr	r3, [sp, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	605a      	str	r2, [r3, #4]
      return;
 800351e:	e0c5      	b.n	80036ac <mpz_set_d+0x230>
    }
  B = 2.0 * (double) GMP_LIMB_HIGHBIT;
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f2c4 13f0 	movt	r3, #16880	; 0x41f0
 800352c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Bi = 1.0 / B;
 8003530:	f04f 0000 	mov.w	r0, #0
 8003534:	f04f 0100 	mov.w	r1, #0
 8003538:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800353c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003540:	f009 fa84 	bl	800ca4c <__aeabi_ddiv>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	e9cd 2306 	strd	r2, r3, [sp, #24]
  for (rn = 1; x >= B; rn++)
 800354c:	2301      	movs	r3, #1
 800354e:	930d      	str	r3, [sp, #52]	; 0x34
 8003550:	e00c      	b.n	800356c <mpz_set_d+0xf0>
    x *= Bi;
 8003552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800355a:	f009 f94d 	bl	800c7f8 <__aeabi_dmul>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	e9cd 2300 	strd	r2, r3, [sp]
      r->_mp_size = 0;
      return;
    }
  B = 2.0 * (double) GMP_LIMB_HIGHBIT;
  Bi = 1.0 / B;
  for (rn = 1; x >= B; rn++)
 8003566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003568:	3301      	adds	r3, #1
 800356a:	930d      	str	r3, [sp, #52]	; 0x34
 800356c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003570:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003574:	f009 fbc6 	bl	800cd04 <__aeabi_dcmpge>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e9      	bne.n	8003552 <mpz_set_d+0xd6>
    x *= Bi;

  rp = MPZ_REALLOC (r, rn);
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003584:	429a      	cmp	r2, r3
 8003586:	da05      	bge.n	8003594 <mpz_set_d+0x118>
 8003588:	9803      	ldr	r0, [sp, #12]
 800358a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800358c:	f7ff fdbe 	bl	800310c <mpz_realloc>
 8003590:	4603      	mov	r3, r0
 8003592:	e001      	b.n	8003598 <mpz_set_d+0x11c>
 8003594:	9b03      	ldr	r3, [sp, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	9305      	str	r3, [sp, #20]

  f = (mp_limb_t) x;
 800359a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800359e:	f009 fbc5 	bl	800cd2c <__aeabi_d2uiz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	9304      	str	r3, [sp, #16]
  x -= f;
 80035a6:	9804      	ldr	r0, [sp, #16]
 80035a8:	f009 f8b0 	bl	800c70c <__aeabi_ui2d>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035b4:	f008 ff6c 	bl	800c490 <__aeabi_dsub>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	e9cd 2300 	strd	r2, r3, [sp]
  assert (x < 1.0);
 80035c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80035d0:	f009 fb84 	bl	800ccdc <__aeabi_dcmplt>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <mpz_set_d+0x17e>
 80035da:	f243 7064 	movw	r0, #14180	; 0x3764
 80035de:	f6c0 0001 	movt	r0, #2049	; 0x801
 80035e2:	f240 614a 	movw	r1, #1610	; 0x64a
 80035e6:	f643 6218 	movw	r2, #15896	; 0x3e18
 80035ea:	f6c0 0201 	movt	r2, #2049	; 0x801
 80035ee:	f643 13a4 	movw	r3, #14756	; 0x39a4
 80035f2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80035f6:	f00a f893 	bl	800d720 <__assert_func>
  i = rn-1;
 80035fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035fc:	3b01      	subs	r3, #1
 80035fe:	930c      	str	r3, [sp, #48]	; 0x30
  rp[i] = f;
 8003600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	9a05      	ldr	r2, [sp, #20]
 8003606:	4413      	add	r3, r2
 8003608:	9a04      	ldr	r2, [sp, #16]
 800360a:	601a      	str	r2, [r3, #0]
  while (--i >= 0)
 800360c:	e03f      	b.n	800368e <mpz_set_d+0x212>
    {
      x = B * x;
 800360e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003612:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003616:	f009 f8ef 	bl	800c7f8 <__aeabi_dmul>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	e9cd 2300 	strd	r2, r3, [sp]
      f = (mp_limb_t) x;
 8003622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003626:	f009 fb81 	bl	800cd2c <__aeabi_d2uiz>
 800362a:	4603      	mov	r3, r0
 800362c:	9304      	str	r3, [sp, #16]
      x -= f;
 800362e:	9804      	ldr	r0, [sp, #16]
 8003630:	f009 f86c 	bl	800c70c <__aeabi_ui2d>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	e9dd 0100 	ldrd	r0, r1, [sp]
 800363c:	f008 ff28 	bl	800c490 <__aeabi_dsub>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	e9cd 2300 	strd	r2, r3, [sp]
      assert (x < 1.0);
 8003648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8003658:	f009 fb40 	bl	800ccdc <__aeabi_dcmplt>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <mpz_set_d+0x206>
 8003662:	f243 7064 	movw	r0, #14180	; 0x3764
 8003666:	f6c0 0001 	movt	r0, #2049	; 0x801
 800366a:	f240 6152 	movw	r1, #1618	; 0x652
 800366e:	f643 6218 	movw	r2, #15896	; 0x3e18
 8003672:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003676:	f643 13a4 	movw	r3, #14756	; 0x39a4
 800367a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800367e:	f00a f84f 	bl	800d720 <__assert_func>
      rp[i] = f;
 8003682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	9a05      	ldr	r2, [sp, #20]
 8003688:	4413      	add	r3, r2
 800368a:	9a04      	ldr	r2, [sp, #16]
 800368c:	601a      	str	r2, [r3, #0]
  f = (mp_limb_t) x;
  x -= f;
  assert (x < 1.0);
  i = rn-1;
  rp[i] = f;
  while (--i >= 0)
 800368e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003690:	3b01      	subs	r3, #1
 8003692:	930c      	str	r3, [sp, #48]	; 0x30
 8003694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003696:	2b00      	cmp	r3, #0
 8003698:	dab9      	bge.n	800360e <mpz_set_d+0x192>
      x -= f;
      assert (x < 1.0);
      rp[i] = f;
    }

  r->_mp_size = sign ? - rn : rn;
 800369a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <mpz_set_d+0x22a>
 80036a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036a2:	425b      	negs	r3, r3
 80036a4:	e000      	b.n	80036a8 <mpz_set_d+0x22c>
 80036a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036a8:	9a03      	ldr	r2, [sp, #12]
 80036aa:	6053      	str	r3, [r2, #4]
}
 80036ac:	b00e      	add	sp, #56	; 0x38
 80036ae:	bd10      	pop	{r4, pc}

080036b0 <mpz_init_set_d>:

void
mpz_init_set_d (mpz_t r, double x)
{
 80036b0:	b500      	push	{lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	9003      	str	r0, [sp, #12]
 80036b6:	ed8d 0b00 	vstr	d0, [sp]
  mpz_init (r);
 80036ba:	9803      	ldr	r0, [sp, #12]
 80036bc:	f7ff fce4 	bl	8003088 <mpz_init>
  mpz_set_d (r, x);
 80036c0:	9803      	ldr	r0, [sp, #12]
 80036c2:	ed9d 0b00 	vldr	d0, [sp]
 80036c6:	f7ff fed9 	bl	800347c <mpz_set_d>
}
 80036ca:	b005      	add	sp, #20
 80036cc:	f85d fb04 	ldr.w	pc, [sp], #4

080036d0 <mpz_get_d>:

double
mpz_get_d (const mpz_t u)
{
 80036d0:	b530      	push	{r4, r5, lr}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	9001      	str	r0, [sp, #4]
  mp_size_t un;
  double x;
  double B = 2.0 * (double) GMP_LIMB_HIGHBIT;
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	f2c4 13f0 	movt	r3, #16880	; 0x41f0
 80036e2:	e9cd 2302 	strd	r2, r3, [sp, #8]

  un = GMP_ABS (u->_mp_size);
 80036e6:	9b01      	ldr	r3, [sp, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfb8      	it	lt
 80036ee:	425b      	neglt	r3, r3
 80036f0:	9307      	str	r3, [sp, #28]

  if (un == 0)
 80036f2:	9b07      	ldr	r3, [sp, #28]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <mpz_get_d+0x32>
    return 0.0;
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e03f      	b.n	8003782 <mpz_get_d+0xb2>

  x = u->_mp_d[--un];
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	9b07      	ldr	r3, [sp, #28]
 8003708:	3b01      	subs	r3, #1
 800370a:	9307      	str	r3, [sp, #28]
 800370c:	9b07      	ldr	r3, [sp, #28]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f008 fff9 	bl	800c70c <__aeabi_ui2d>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  while (un > 0)
 8003722:	e01f      	b.n	8003764 <mpz_get_d+0x94>
    x = B*x + u->_mp_d[--un];
 8003724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800372c:	f009 f864 	bl	800c7f8 <__aeabi_dmul>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4614      	mov	r4, r2
 8003736:	461d      	mov	r5, r3
 8003738:	9b01      	ldr	r3, [sp, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	9b07      	ldr	r3, [sp, #28]
 800373e:	3b01      	subs	r3, #1
 8003740:	9307      	str	r3, [sp, #28]
 8003742:	9b07      	ldr	r3, [sp, #28]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f008 ffde 	bl	800c70c <__aeabi_ui2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4620      	mov	r0, r4
 8003756:	4629      	mov	r1, r5
 8003758:	f008 fe9c 	bl	800c494 <__adddf3>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	e9cd 2304 	strd	r2, r3, [sp, #16]

  if (un == 0)
    return 0.0;

  x = u->_mp_d[--un];
  while (un > 0)
 8003764:	9b07      	ldr	r3, [sp, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dcdc      	bgt.n	8003724 <mpz_get_d+0x54>
    x = B*x + u->_mp_d[--un];

  if (u->_mp_size < 0)
 800376a:	9b01      	ldr	r3, [sp, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da05      	bge.n	800377e <mpz_get_d+0xae>
    x = -x;
 8003772:	9b04      	ldr	r3, [sp, #16]
 8003774:	9304      	str	r3, [sp, #16]
 8003776:	9b05      	ldr	r3, [sp, #20]
 8003778:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800377c:	9305      	str	r3, [sp, #20]

  return x;
 800377e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003782:	ec43 2b17 	vmov	d7, r2, r3
}
 8003786:	eeb0 0a47 	vmov.f32	s0, s14
 800378a:	eef0 0a67 	vmov.f32	s1, s15
 800378e:	b009      	add	sp, #36	; 0x24
 8003790:	bd30      	pop	{r4, r5, pc}
 8003792:	bf00      	nop

08003794 <mpz_cmpabs_d>:

int
mpz_cmpabs_d (const mpz_t x, double d)
{
 8003794:	b530      	push	{r4, r5, lr}
 8003796:	b08d      	sub	sp, #52	; 0x34
 8003798:	9003      	str	r0, [sp, #12]
 800379a:	ed8d 0b00 	vstr	d0, [sp]
  mp_size_t xn;
  double B, Bi;
  mp_size_t i;

  xn = x->_mp_size;
 800379e:	9b03      	ldr	r3, [sp, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	930a      	str	r3, [sp, #40]	; 0x28
  d = GMP_ABS (d);
 80037a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	f009 faa8 	bl	800cd04 <__aeabi_dcmpge>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <mpz_cmpabs_d+0x2c>
 80037ba:	e9dd 4500 	ldrd	r4, r5, [sp]
 80037be:	e003      	b.n	80037c8 <mpz_cmpabs_d+0x34>
 80037c0:	9c00      	ldr	r4, [sp, #0]
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80037c8:	e9cd 4500 	strd	r4, r5, [sp]

  if (xn != 0)
 80037cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d071      	beq.n	80038b6 <mpz_cmpabs_d+0x122>
    {
      xn = GMP_ABS (xn);
 80037d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bfb8      	it	lt
 80037d8:	425b      	neglt	r3, r3
 80037da:	930a      	str	r3, [sp, #40]	; 0x28

      B = 2.0 * (double) GMP_LIMB_HIGHBIT;
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	f2c4 13f0 	movt	r3, #16880	; 0x41f0
 80037e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
      Bi = 1.0 / B;
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80037f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037fc:	f009 f926 	bl	800ca4c <__aeabi_ddiv>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	e9cd 2306 	strd	r2, r3, [sp, #24]

      /* Scale d so it can be compared with the top limb. */
      for (i = 1; i < xn; i++)
 8003808:	2301      	movs	r3, #1
 800380a:	930b      	str	r3, [sp, #44]	; 0x2c
 800380c:	e00c      	b.n	8003828 <mpz_cmpabs_d+0x94>
	d *= Bi;
 800380e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003816:	f008 ffef 	bl	800c7f8 <__aeabi_dmul>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	e9cd 2300 	strd	r2, r3, [sp]

      B = 2.0 * (double) GMP_LIMB_HIGHBIT;
      Bi = 1.0 / B;

      /* Scale d so it can be compared with the top limb. */
      for (i = 1; i < xn; i++)
 8003822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003824:	3301      	adds	r3, #1
 8003826:	930b      	str	r3, [sp, #44]	; 0x2c
 8003828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800382a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800382c:	429a      	cmp	r2, r3
 800382e:	dbee      	blt.n	800380e <mpz_cmpabs_d+0x7a>
	d *= Bi;

      if (d >= B)
 8003830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003834:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003838:	f009 fa64 	bl	800cd04 <__aeabi_dcmpge>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <mpz_cmpabs_d+0xb4>
	return -1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003846:	e047      	b.n	80038d8 <mpz_cmpabs_d+0x144>

      /* Compare floor(d) to top limb, subtract and cancel when equal. */
      for (i = xn; i-- > 0;)
 8003848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800384a:	930b      	str	r3, [sp, #44]	; 0x2c
 800384c:	e02e      	b.n	80038ac <mpz_cmpabs_d+0x118>
	{
	  mp_limb_t f, xl;

	  f = (mp_limb_t) d;
 800384e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003852:	f009 fa6b 	bl	800cd2c <__aeabi_d2uiz>
 8003856:	4603      	mov	r3, r0
 8003858:	9305      	str	r3, [sp, #20]
	  xl = x->_mp_d[i];
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	9304      	str	r3, [sp, #16]
	  if (xl > f)
 8003868:	9a04      	ldr	r2, [sp, #16]
 800386a:	9b05      	ldr	r3, [sp, #20]
 800386c:	429a      	cmp	r2, r3
 800386e:	d901      	bls.n	8003874 <mpz_cmpabs_d+0xe0>
	    return 1;
 8003870:	2301      	movs	r3, #1
 8003872:	e031      	b.n	80038d8 <mpz_cmpabs_d+0x144>
	  else if (xl < f)
 8003874:	9a04      	ldr	r2, [sp, #16]
 8003876:	9b05      	ldr	r3, [sp, #20]
 8003878:	429a      	cmp	r2, r3
 800387a:	d202      	bcs.n	8003882 <mpz_cmpabs_d+0xee>
	    return -1;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003880:	e02a      	b.n	80038d8 <mpz_cmpabs_d+0x144>
	  d = B * (d - f);
 8003882:	9805      	ldr	r0, [sp, #20]
 8003884:	f008 ff42 	bl	800c70c <__aeabi_ui2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003890:	f008 fdfe 	bl	800c490 <__aeabi_dsub>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80038a0:	f008 ffaa 	bl	800c7f8 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	e9cd 2300 	strd	r2, r3, [sp]

      if (d >= B)
	return -1;

      /* Compare floor(d) to top limb, subtract and cancel when equal. */
      for (i = xn; i-- > 0;)
 80038ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038ae:	1e5a      	subs	r2, r3, #1
 80038b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	dccb      	bgt.n	800384e <mpz_cmpabs_d+0xba>
	  else if (xl < f)
	    return -1;
	  d = B * (d - f);
	}
    }
  return - (d > 0.0);
 80038b6:	2301      	movs	r3, #1
 80038b8:	461c      	mov	r4, r3
 80038ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f009 fa27 	bl	800cd18 <__aeabi_dcmpgt>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <mpz_cmpabs_d+0x140>
 80038d0:	2300      	movs	r3, #0
 80038d2:	461c      	mov	r4, r3
 80038d4:	b2e3      	uxtb	r3, r4
 80038d6:	425b      	negs	r3, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	b00d      	add	sp, #52	; 0x34
 80038dc:	bd30      	pop	{r4, r5, pc}
 80038de:	bf00      	nop

080038e0 <mpz_cmp_d>:

int
mpz_cmp_d (const mpz_t x, double d)
{
 80038e0:	b500      	push	{lr}
 80038e2:	b085      	sub	sp, #20
 80038e4:	9003      	str	r0, [sp, #12]
 80038e6:	ed8d 0b00 	vstr	d0, [sp]
  if (x->_mp_size < 0)
 80038ea:	9b03      	ldr	r3, [sp, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	da15      	bge.n	800391e <mpz_cmp_d+0x3e>
    {
      if (d >= 0.0)
 80038f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	f009 fa01 	bl	800cd04 <__aeabi_dcmpge>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <mpz_cmp_d+0x2e>
	return -1;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390c:	e01a      	b.n	8003944 <mpz_cmp_d+0x64>
      else
	return -mpz_cmpabs_d (x, d);
 800390e:	9803      	ldr	r0, [sp, #12]
 8003910:	ed9d 0b00 	vldr	d0, [sp]
 8003914:	f7ff ff3e 	bl	8003794 <mpz_cmpabs_d>
 8003918:	4603      	mov	r3, r0
 800391a:	425b      	negs	r3, r3
 800391c:	e012      	b.n	8003944 <mpz_cmp_d+0x64>
    }
  else
    {
      if (d < 0.0)
 800391e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	f009 f9d7 	bl	800ccdc <__aeabi_dcmplt>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <mpz_cmp_d+0x58>
	return 1;
 8003934:	2301      	movs	r3, #1
 8003936:	e005      	b.n	8003944 <mpz_cmp_d+0x64>
      else
	return mpz_cmpabs_d (x, d);
 8003938:	9803      	ldr	r0, [sp, #12]
 800393a:	ed9d 0b00 	vldr	d0, [sp]
 800393e:	f7ff ff29 	bl	8003794 <mpz_cmpabs_d>
 8003942:	4603      	mov	r3, r0
    }
}
 8003944:	4618      	mov	r0, r3
 8003946:	b005      	add	sp, #20
 8003948:	f85d fb04 	ldr.w	pc, [sp], #4

0800394c <mpz_sgn>:


/* MPZ comparisons and the like. */
int
mpz_sgn (const mpz_t u)
{
 800394c:	b084      	sub	sp, #16
 800394e:	9001      	str	r0, [sp, #4]
  mp_size_t usize = u->_mp_size;
 8003950:	9b01      	ldr	r3, [sp, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	9303      	str	r3, [sp, #12]

  return (usize > 0) - (usize < 0);
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfd4      	ite	le
 800395c:	2300      	movle	r3, #0
 800395e:	2301      	movgt	r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	0fdb      	lsrs	r3, r3, #31
 8003968:	b2db      	uxtb	r3, r3
 800396a:	1ad3      	subs	r3, r2, r3
}
 800396c:	4618      	mov	r0, r3
 800396e:	b004      	add	sp, #16
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop

08003974 <mpz_cmp_si>:

int
mpz_cmp_si (const mpz_t u, long v)
{
 8003974:	b500      	push	{lr}
 8003976:	b085      	sub	sp, #20
 8003978:	9001      	str	r0, [sp, #4]
 800397a:	9100      	str	r1, [sp, #0]
  mp_size_t usize = u->_mp_size;
 800397c:	9b01      	ldr	r3, [sp, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	9303      	str	r3, [sp, #12]

  if (usize < -1)
 8003982:	9b03      	ldr	r3, [sp, #12]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003988:	da02      	bge.n	8003990 <mpz_cmp_si+0x1c>
    return -1;
 800398a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800398e:	e022      	b.n	80039d6 <mpz_cmp_si+0x62>
  else if (v >= 0)
 8003990:	9b00      	ldr	r3, [sp, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	db06      	blt.n	80039a4 <mpz_cmp_si+0x30>
    return mpz_cmp_ui (u, v);
 8003996:	9b00      	ldr	r3, [sp, #0]
 8003998:	9801      	ldr	r0, [sp, #4]
 800399a:	4619      	mov	r1, r3
 800399c:	f000 f820 	bl	80039e0 <mpz_cmp_ui>
 80039a0:	4603      	mov	r3, r0
 80039a2:	e018      	b.n	80039d6 <mpz_cmp_si+0x62>
  else if (usize >= 0)
 80039a4:	9b03      	ldr	r3, [sp, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db01      	blt.n	80039ae <mpz_cmp_si+0x3a>
    return 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e013      	b.n	80039d6 <mpz_cmp_si+0x62>
  else /* usize == -1 */
    {
      mp_limb_t ul = u->_mp_d[0];
 80039ae:	9b01      	ldr	r3, [sp, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	9302      	str	r3, [sp, #8]
      if ((mp_limb_t)GMP_NEG_CAST (unsigned long int, v) < ul)
 80039b6:	9b00      	ldr	r3, [sp, #0]
 80039b8:	425a      	negs	r2, r3
 80039ba:	9b02      	ldr	r3, [sp, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d202      	bcs.n	80039c6 <mpz_cmp_si+0x52>
	return -1;
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c4:	e007      	b.n	80039d6 <mpz_cmp_si+0x62>
      else
	return (mp_limb_t)GMP_NEG_CAST (unsigned long int, v) > ul;
 80039c6:	9b00      	ldr	r3, [sp, #0]
 80039c8:	425a      	negs	r2, r3
 80039ca:	9b02      	ldr	r3, [sp, #8]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	bf94      	ite	ls
 80039d0:	2300      	movls	r3, #0
 80039d2:	2301      	movhi	r3, #1
 80039d4:	b2db      	uxtb	r3, r3
    }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	b005      	add	sp, #20
 80039da:	f85d fb04 	ldr.w	pc, [sp], #4
 80039de:	bf00      	nop

080039e0 <mpz_cmp_ui>:

int
mpz_cmp_ui (const mpz_t u, unsigned long v)
{
 80039e0:	b084      	sub	sp, #16
 80039e2:	9001      	str	r0, [sp, #4]
 80039e4:	9100      	str	r1, [sp, #0]
  mp_size_t usize = u->_mp_size;
 80039e6:	9b01      	ldr	r3, [sp, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	9303      	str	r3, [sp, #12]

  if (usize > 1)
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	dd01      	ble.n	80039f6 <mpz_cmp_ui+0x16>
    return 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e01e      	b.n	8003a34 <mpz_cmp_ui+0x54>
  else if (usize < 0)
 80039f6:	9b03      	ldr	r3, [sp, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da02      	bge.n	8003a02 <mpz_cmp_ui+0x22>
    return -1;
 80039fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a00:	e018      	b.n	8003a34 <mpz_cmp_ui+0x54>
  else
    {
      mp_limb_t ul = (usize > 0) ? u->_mp_d[0] : 0;
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	dd03      	ble.n	8003a10 <mpz_cmp_ui+0x30>
 8003a08:	9b01      	ldr	r3, [sp, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	e000      	b.n	8003a12 <mpz_cmp_ui+0x32>
 8003a10:	2300      	movs	r3, #0
 8003a12:	9302      	str	r3, [sp, #8]
      return (ul > v) - (ul < v);
 8003a14:	9a02      	ldr	r2, [sp, #8]
 8003a16:	9b00      	ldr	r3, [sp, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	bf94      	ite	ls
 8003a1c:	2300      	movls	r3, #0
 8003a1e:	2301      	movhi	r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	9902      	ldr	r1, [sp, #8]
 8003a26:	9b00      	ldr	r3, [sp, #0]
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	bf2c      	ite	cs
 8003a2c:	2300      	movcs	r3, #0
 8003a2e:	2301      	movcc	r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	1ad3      	subs	r3, r2, r3
    }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	b004      	add	sp, #16
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <mpz_cmp>:

int
mpz_cmp (const mpz_t a, const mpz_t b)
{
 8003a3c:	b500      	push	{lr}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	9001      	str	r0, [sp, #4]
 8003a42:	9100      	str	r1, [sp, #0]
  mp_size_t asize = a->_mp_size;
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	9303      	str	r3, [sp, #12]
  mp_size_t bsize = b->_mp_size;
 8003a4a:	9b00      	ldr	r3, [sp, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	9302      	str	r3, [sp, #8]

  if (asize != bsize)
 8003a50:	9a03      	ldr	r2, [sp, #12]
 8003a52:	9b02      	ldr	r3, [sp, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d008      	beq.n	8003a6a <mpz_cmp+0x2e>
    return (asize < bsize) ? -1 : 1;
 8003a58:	9a03      	ldr	r2, [sp, #12]
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	da02      	bge.n	8003a66 <mpz_cmp+0x2a>
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a64:	e000      	b.n	8003a68 <mpz_cmp+0x2c>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e019      	b.n	8003a9e <mpz_cmp+0x62>
  else if (asize >= 0)
 8003a6a:	9b03      	ldr	r3, [sp, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db0a      	blt.n	8003a86 <mpz_cmp+0x4a>
    return mpn_cmp (a->_mp_d, b->_mp_d, asize);
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	9b00      	ldr	r3, [sp, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	9a03      	ldr	r2, [sp, #12]
 8003a7e:	f7fd f8f7 	bl	8000c70 <mpn_cmp>
 8003a82:	4603      	mov	r3, r0
 8003a84:	e00b      	b.n	8003a9e <mpz_cmp+0x62>
  else
    return mpn_cmp (b->_mp_d, a->_mp_d, -asize);
 8003a86:	9b00      	ldr	r3, [sp, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	9b01      	ldr	r3, [sp, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	425b      	negs	r3, r3
 8003a92:	4608      	mov	r0, r1
 8003a94:	4611      	mov	r1, r2
 8003a96:	461a      	mov	r2, r3
 8003a98:	f7fd f8ea 	bl	8000c70 <mpn_cmp>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	b005      	add	sp, #20
 8003aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa6:	bf00      	nop

08003aa8 <mpz_cmpabs_ui>:

int
mpz_cmpabs_ui (const mpz_t u, unsigned long v)
{
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	9001      	str	r0, [sp, #4]
 8003aac:	9100      	str	r1, [sp, #0]
  mp_size_t un = GMP_ABS (u->_mp_size);
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bfb8      	it	lt
 8003ab6:	425b      	neglt	r3, r3
 8003ab8:	9303      	str	r3, [sp, #12]
  mp_limb_t ul;

  if (un > 1)
 8003aba:	9b03      	ldr	r3, [sp, #12]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	dd01      	ble.n	8003ac4 <mpz_cmpabs_ui+0x1c>
    return 1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e018      	b.n	8003af6 <mpz_cmpabs_ui+0x4e>

  ul = (un == 1) ? u->_mp_d[0] : 0;
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d103      	bne.n	8003ad2 <mpz_cmpabs_ui+0x2a>
 8003aca:	9b01      	ldr	r3, [sp, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	e000      	b.n	8003ad4 <mpz_cmpabs_ui+0x2c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9302      	str	r3, [sp, #8]

  return (ul > v) - (ul < v);
 8003ad6:	9a02      	ldr	r2, [sp, #8]
 8003ad8:	9b00      	ldr	r3, [sp, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf94      	ite	ls
 8003ade:	2300      	movls	r3, #0
 8003ae0:	2301      	movhi	r3, #1
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	9902      	ldr	r1, [sp, #8]
 8003ae8:	9b00      	ldr	r3, [sp, #0]
 8003aea:	4299      	cmp	r1, r3
 8003aec:	bf2c      	ite	cs
 8003aee:	2300      	movcs	r3, #0
 8003af0:	2301      	movcc	r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	1ad3      	subs	r3, r2, r3
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	b004      	add	sp, #16
 8003afa:	4770      	bx	lr

08003afc <mpz_cmpabs>:

int
mpz_cmpabs (const mpz_t u, const mpz_t v)
{
 8003afc:	b500      	push	{lr}
 8003afe:	b083      	sub	sp, #12
 8003b00:	9001      	str	r0, [sp, #4]
 8003b02:	9100      	str	r1, [sp, #0]
  return mpn_cmp4 (u->_mp_d, GMP_ABS (u->_mp_size),
 8003b04:	9b01      	ldr	r3, [sp, #4]
 8003b06:	6898      	ldr	r0, [r3, #8]
 8003b08:	9b01      	ldr	r3, [sp, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003b10:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		   v->_mp_d, GMP_ABS (v->_mp_size));
 8003b14:	9b00      	ldr	r3, [sp, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	9b00      	ldr	r3, [sp, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bfb8      	it	lt
 8003b20:	425b      	neglt	r3, r3
}

int
mpz_cmpabs (const mpz_t u, const mpz_t v)
{
  return mpn_cmp4 (u->_mp_d, GMP_ABS (u->_mp_size),
 8003b22:	f7fd f8d1 	bl	8000cc8 <mpn_cmp4>
 8003b26:	4603      	mov	r3, r0
		   v->_mp_d, GMP_ABS (v->_mp_size));
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	b003      	add	sp, #12
 8003b2c:	f85d fb04 	ldr.w	pc, [sp], #4

08003b30 <mpz_abs>:

void
mpz_abs (mpz_t r, const mpz_t u)
{
 8003b30:	b500      	push	{lr}
 8003b32:	b083      	sub	sp, #12
 8003b34:	9001      	str	r0, [sp, #4]
 8003b36:	9100      	str	r1, [sp, #0]
  if (r != u)
 8003b38:	9a01      	ldr	r2, [sp, #4]
 8003b3a:	9b00      	ldr	r3, [sp, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d003      	beq.n	8003b48 <mpz_abs+0x18>
    mpz_set (r, u);
 8003b40:	9801      	ldr	r0, [sp, #4]
 8003b42:	9900      	ldr	r1, [sp, #0]
 8003b44:	f7ff fb38 	bl	80031b8 <mpz_set>

  r->_mp_size = GMP_ABS (r->_mp_size);
 8003b48:	9b01      	ldr	r3, [sp, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003b50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003b54:	9b01      	ldr	r3, [sp, #4]
 8003b56:	605a      	str	r2, [r3, #4]
}
 8003b58:	b003      	add	sp, #12
 8003b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b5e:	bf00      	nop

08003b60 <mpz_neg>:

void
mpz_neg (mpz_t r, const mpz_t u)
{
 8003b60:	b500      	push	{lr}
 8003b62:	b083      	sub	sp, #12
 8003b64:	9001      	str	r0, [sp, #4]
 8003b66:	9100      	str	r1, [sp, #0]
  if (r != u)
 8003b68:	9a01      	ldr	r2, [sp, #4]
 8003b6a:	9b00      	ldr	r3, [sp, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d003      	beq.n	8003b78 <mpz_neg+0x18>
    mpz_set (r, u);
 8003b70:	9801      	ldr	r0, [sp, #4]
 8003b72:	9900      	ldr	r1, [sp, #0]
 8003b74:	f7ff fb20 	bl	80031b8 <mpz_set>

  r->_mp_size = -r->_mp_size;
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	425a      	negs	r2, r3
 8003b7e:	9b01      	ldr	r3, [sp, #4]
 8003b80:	605a      	str	r2, [r3, #4]
}
 8003b82:	b003      	add	sp, #12
 8003b84:	f85d fb04 	ldr.w	pc, [sp], #4

08003b88 <mpz_swap>:

void
mpz_swap (mpz_t u, mpz_t v)
{
 8003b88:	b086      	sub	sp, #24
 8003b8a:	9001      	str	r0, [sp, #4]
 8003b8c:	9100      	str	r1, [sp, #0]
  MP_SIZE_T_SWAP (u->_mp_size, v->_mp_size);
 8003b8e:	9b01      	ldr	r3, [sp, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	9305      	str	r3, [sp, #20]
 8003b94:	9b00      	ldr	r3, [sp, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	9b00      	ldr	r3, [sp, #0]
 8003b9e:	9a05      	ldr	r2, [sp, #20]
 8003ba0:	605a      	str	r2, [r3, #4]
  MP_SIZE_T_SWAP (u->_mp_alloc, v->_mp_alloc);
 8003ba2:	9b01      	ldr	r3, [sp, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	9b00      	ldr	r3, [sp, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	9b01      	ldr	r3, [sp, #4]
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	9b00      	ldr	r3, [sp, #0]
 8003bb2:	9a04      	ldr	r2, [sp, #16]
 8003bb4:	601a      	str	r2, [r3, #0]
  MP_PTR_SWAP (u->_mp_d, v->_mp_d);
 8003bb6:	9b01      	ldr	r3, [sp, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	9303      	str	r3, [sp, #12]
 8003bbc:	9b00      	ldr	r3, [sp, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	9b00      	ldr	r3, [sp, #0]
 8003bc6:	9a03      	ldr	r2, [sp, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
}
 8003bca:	b006      	add	sp, #24
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop

08003bd0 <mpz_abs_add_ui>:
/* MPZ addition and subtraction */

/* Adds to the absolute value. Returns new size, but doesn't store it. */
static mp_size_t
mpz_abs_add_ui (mpz_t r, const mpz_t a, unsigned long b)
{
 8003bd0:	b500      	push	{lr}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	9003      	str	r0, [sp, #12]
 8003bd6:	9102      	str	r1, [sp, #8]
 8003bd8:	9201      	str	r2, [sp, #4]
  mp_size_t an;
  mp_ptr rp;
  mp_limb_t cy;

  an = GMP_ABS (a->_mp_size);
 8003bda:	9b02      	ldr	r3, [sp, #8]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bfb8      	it	lt
 8003be2:	425b      	neglt	r3, r3
 8003be4:	9307      	str	r3, [sp, #28]
  if (an == 0)
 8003be6:	9b07      	ldr	r3, [sp, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <mpz_abs_add_ui+0x32>
    {
      r->_mp_d[0] = b;
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	9a01      	ldr	r2, [sp, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
      return b > 0;
 8003bf4:	9b01      	ldr	r3, [sp, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2300      	moveq	r3, #0
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	e024      	b.n	8003c4c <mpz_abs_add_ui+0x7c>
    }

  rp = MPZ_REALLOC (r, an + 1);
 8003c02:	9b07      	ldr	r3, [sp, #28]
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	9b03      	ldr	r3, [sp, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	dd07      	ble.n	8003c1e <mpz_abs_add_ui+0x4e>
 8003c0e:	9b07      	ldr	r3, [sp, #28]
 8003c10:	3301      	adds	r3, #1
 8003c12:	9803      	ldr	r0, [sp, #12]
 8003c14:	4619      	mov	r1, r3
 8003c16:	f7ff fa79 	bl	800310c <mpz_realloc>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	e001      	b.n	8003c22 <mpz_abs_add_ui+0x52>
 8003c1e:	9b03      	ldr	r3, [sp, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	9306      	str	r3, [sp, #24]

  cy = mpn_add_1 (rp, a->_mp_d, an, b);
 8003c24:	9b02      	ldr	r3, [sp, #8]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	9806      	ldr	r0, [sp, #24]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	9a07      	ldr	r2, [sp, #28]
 8003c2e:	9b01      	ldr	r3, [sp, #4]
 8003c30:	f7fd f896 	bl	8000d60 <mpn_add_1>
 8003c34:	9005      	str	r0, [sp, #20]
  rp[an] = cy;
 8003c36:	9b07      	ldr	r3, [sp, #28]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	9a06      	ldr	r2, [sp, #24]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	9a05      	ldr	r2, [sp, #20]
 8003c40:	601a      	str	r2, [r3, #0]
  an += cy;
 8003c42:	9a07      	ldr	r2, [sp, #28]
 8003c44:	9b05      	ldr	r3, [sp, #20]
 8003c46:	4413      	add	r3, r2
 8003c48:	9307      	str	r3, [sp, #28]

  return an;
 8003c4a:	9b07      	ldr	r3, [sp, #28]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	b009      	add	sp, #36	; 0x24
 8003c50:	f85d fb04 	ldr.w	pc, [sp], #4

08003c54 <mpz_abs_sub_ui>:

/* Subtract from the absolute value. Returns new size, (or -1 on underflow),
   but doesn't store it. */
static mp_size_t
mpz_abs_sub_ui (mpz_t r, const mpz_t a, unsigned long b)
{
 8003c54:	b500      	push	{lr}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	9003      	str	r0, [sp, #12]
 8003c5a:	9102      	str	r1, [sp, #8]
 8003c5c:	9201      	str	r2, [sp, #4]
  mp_size_t an = GMP_ABS (a->_mp_size);
 8003c5e:	9b02      	ldr	r3, [sp, #8]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bfb8      	it	lt
 8003c66:	425b      	neglt	r3, r3
 8003c68:	9307      	str	r3, [sp, #28]
  mp_ptr rp = MPZ_REALLOC (r, an);
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	9b07      	ldr	r3, [sp, #28]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	da05      	bge.n	8003c80 <mpz_abs_sub_ui+0x2c>
 8003c74:	9803      	ldr	r0, [sp, #12]
 8003c76:	9907      	ldr	r1, [sp, #28]
 8003c78:	f7ff fa48 	bl	800310c <mpz_realloc>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	e001      	b.n	8003c84 <mpz_abs_sub_ui+0x30>
 8003c80:	9b03      	ldr	r3, [sp, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	9306      	str	r3, [sp, #24]

  if (an == 0)
 8003c86:	9b07      	ldr	r3, [sp, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <mpz_abs_sub_ui+0x4e>
    {
      rp[0] = b;
 8003c8c:	9b06      	ldr	r3, [sp, #24]
 8003c8e:	9a01      	ldr	r2, [sp, #4]
 8003c90:	601a      	str	r2, [r3, #0]
      return -(b > 0);
 8003c92:	9b01      	ldr	r3, [sp, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2300      	moveq	r3, #0
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	425b      	negs	r3, r3
 8003ca0:	e033      	b.n	8003d0a <mpz_abs_sub_ui+0xb6>
    }
  else if (an == 1 && a->_mp_d[0] < b)
 8003ca2:	9b07      	ldr	r3, [sp, #28]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d10f      	bne.n	8003cc8 <mpz_abs_sub_ui+0x74>
 8003ca8:	9b02      	ldr	r3, [sp, #8]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	9b01      	ldr	r3, [sp, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d209      	bcs.n	8003cc8 <mpz_abs_sub_ui+0x74>
    {
      rp[0] = b - a->_mp_d[0];
 8003cb4:	9b02      	ldr	r3, [sp, #8]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	9a01      	ldr	r2, [sp, #4]
 8003cbc:	1ad2      	subs	r2, r2, r3
 8003cbe:	9b06      	ldr	r3, [sp, #24]
 8003cc0:	601a      	str	r2, [r3, #0]
      return -1;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc6:	e020      	b.n	8003d0a <mpz_abs_sub_ui+0xb6>
    }
  else
    {
      gmp_assert_nocarry (mpn_sub_1 (rp, a->_mp_d, an, b));
 8003cc8:	9b02      	ldr	r3, [sp, #8]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	9806      	ldr	r0, [sp, #24]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	9a07      	ldr	r2, [sp, #28]
 8003cd2:	9b01      	ldr	r3, [sp, #4]
 8003cd4:	f7fd f900 	bl	8000ed8 <mpn_sub_1>
 8003cd8:	9005      	str	r0, [sp, #20]
 8003cda:	9b05      	ldr	r3, [sp, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00f      	beq.n	8003d00 <mpz_abs_sub_ui+0xac>
 8003ce0:	f243 7064 	movw	r0, #14180	; 0x3764
 8003ce4:	f6c0 0001 	movt	r0, #2049	; 0x801
 8003ce8:	f240 714d 	movw	r1, #1869	; 0x74d
 8003cec:	f643 6224 	movw	r2, #15908	; 0x3e24
 8003cf0:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003cf4:	f643 1344 	movw	r3, #14660	; 0x3944
 8003cf8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8003cfc:	f009 fd10 	bl	800d720 <__assert_func>
      return mpn_normalized_size (rp, an);
 8003d00:	9806      	ldr	r0, [sp, #24]
 8003d02:	9907      	ldr	r1, [sp, #28]
 8003d04:	f7fc fffe 	bl	8000d04 <mpn_normalized_size>
 8003d08:	4603      	mov	r3, r0
    }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	b009      	add	sp, #36	; 0x24
 8003d0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d12:	bf00      	nop

08003d14 <mpz_add_ui>:

void
mpz_add_ui (mpz_t r, const mpz_t a, unsigned long b)
{
 8003d14:	b500      	push	{lr}
 8003d16:	b085      	sub	sp, #20
 8003d18:	9003      	str	r0, [sp, #12]
 8003d1a:	9102      	str	r1, [sp, #8]
 8003d1c:	9201      	str	r2, [sp, #4]
  if (a->_mp_size >= 0)
 8003d1e:	9b02      	ldr	r3, [sp, #8]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	db08      	blt.n	8003d38 <mpz_add_ui+0x24>
    r->_mp_size = mpz_abs_add_ui (r, a, b);
 8003d26:	9803      	ldr	r0, [sp, #12]
 8003d28:	9902      	ldr	r1, [sp, #8]
 8003d2a:	9a01      	ldr	r2, [sp, #4]
 8003d2c:	f7ff ff50 	bl	8003bd0 <mpz_abs_add_ui>
 8003d30:	4602      	mov	r2, r0
 8003d32:	9b03      	ldr	r3, [sp, #12]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	e008      	b.n	8003d4a <mpz_add_ui+0x36>
  else
    r->_mp_size = -mpz_abs_sub_ui (r, a, b);
 8003d38:	9803      	ldr	r0, [sp, #12]
 8003d3a:	9902      	ldr	r1, [sp, #8]
 8003d3c:	9a01      	ldr	r2, [sp, #4]
 8003d3e:	f7ff ff89 	bl	8003c54 <mpz_abs_sub_ui>
 8003d42:	4603      	mov	r3, r0
 8003d44:	425a      	negs	r2, r3
 8003d46:	9b03      	ldr	r3, [sp, #12]
 8003d48:	605a      	str	r2, [r3, #4]
}
 8003d4a:	b005      	add	sp, #20
 8003d4c:	f85d fb04 	ldr.w	pc, [sp], #4

08003d50 <mpz_sub_ui>:

void
mpz_sub_ui (mpz_t r, const mpz_t a, unsigned long b)
{
 8003d50:	b500      	push	{lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	9003      	str	r0, [sp, #12]
 8003d56:	9102      	str	r1, [sp, #8]
 8003d58:	9201      	str	r2, [sp, #4]
  if (a->_mp_size < 0)
 8003d5a:	9b02      	ldr	r3, [sp, #8]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da09      	bge.n	8003d76 <mpz_sub_ui+0x26>
    r->_mp_size = -mpz_abs_add_ui (r, a, b);
 8003d62:	9803      	ldr	r0, [sp, #12]
 8003d64:	9902      	ldr	r1, [sp, #8]
 8003d66:	9a01      	ldr	r2, [sp, #4]
 8003d68:	f7ff ff32 	bl	8003bd0 <mpz_abs_add_ui>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	425a      	negs	r2, r3
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	e007      	b.n	8003d86 <mpz_sub_ui+0x36>
  else
    r->_mp_size = mpz_abs_sub_ui (r, a, b);
 8003d76:	9803      	ldr	r0, [sp, #12]
 8003d78:	9902      	ldr	r1, [sp, #8]
 8003d7a:	9a01      	ldr	r2, [sp, #4]
 8003d7c:	f7ff ff6a 	bl	8003c54 <mpz_abs_sub_ui>
 8003d80:	4602      	mov	r2, r0
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	605a      	str	r2, [r3, #4]
}
 8003d86:	b005      	add	sp, #20
 8003d88:	f85d fb04 	ldr.w	pc, [sp], #4

08003d8c <mpz_ui_sub>:

void
mpz_ui_sub (mpz_t r, unsigned long a, const mpz_t b)
{
 8003d8c:	b500      	push	{lr}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	9003      	str	r0, [sp, #12]
 8003d92:	9102      	str	r1, [sp, #8]
 8003d94:	9201      	str	r2, [sp, #4]
  if (b->_mp_size < 0)
 8003d96:	9b01      	ldr	r3, [sp, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da08      	bge.n	8003db0 <mpz_ui_sub+0x24>
    r->_mp_size = mpz_abs_add_ui (r, b, a);
 8003d9e:	9803      	ldr	r0, [sp, #12]
 8003da0:	9901      	ldr	r1, [sp, #4]
 8003da2:	9a02      	ldr	r2, [sp, #8]
 8003da4:	f7ff ff14 	bl	8003bd0 <mpz_abs_add_ui>
 8003da8:	4602      	mov	r2, r0
 8003daa:	9b03      	ldr	r3, [sp, #12]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	e008      	b.n	8003dc2 <mpz_ui_sub+0x36>
  else
    r->_mp_size = -mpz_abs_sub_ui (r, b, a);
 8003db0:	9803      	ldr	r0, [sp, #12]
 8003db2:	9901      	ldr	r1, [sp, #4]
 8003db4:	9a02      	ldr	r2, [sp, #8]
 8003db6:	f7ff ff4d 	bl	8003c54 <mpz_abs_sub_ui>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	425a      	negs	r2, r3
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	605a      	str	r2, [r3, #4]
}
 8003dc2:	b005      	add	sp, #20
 8003dc4:	f85d fb04 	ldr.w	pc, [sp], #4

08003dc8 <mpz_abs_add>:

static mp_size_t
mpz_abs_add (mpz_t r, const mpz_t a, const mpz_t b)
{
 8003dc8:	b500      	push	{lr}
 8003dca:	b08d      	sub	sp, #52	; 0x34
 8003dcc:	9005      	str	r0, [sp, #20]
 8003dce:	9104      	str	r1, [sp, #16]
 8003dd0:	9203      	str	r2, [sp, #12]
  mp_size_t an = GMP_ABS (a->_mp_size);
 8003dd2:	9b04      	ldr	r3, [sp, #16]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bfb8      	it	lt
 8003dda:	425b      	neglt	r3, r3
 8003ddc:	930b      	str	r3, [sp, #44]	; 0x2c
  mp_size_t bn = GMP_ABS (b->_mp_size);
 8003dde:	9b03      	ldr	r3, [sp, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfb8      	it	lt
 8003de6:	425b      	neglt	r3, r3
 8003de8:	930a      	str	r3, [sp, #40]	; 0x28
  mp_ptr rp;
  mp_limb_t cy;

  if (an < bn)
 8003dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dee:	429a      	cmp	r2, r3
 8003df0:	da0b      	bge.n	8003e0a <mpz_abs_add+0x42>
    {
      MPZ_SRCPTR_SWAP (a, b);
 8003df2:	9b04      	ldr	r3, [sp, #16]
 8003df4:	9309      	str	r3, [sp, #36]	; 0x24
 8003df6:	9b03      	ldr	r3, [sp, #12]
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfc:	9303      	str	r3, [sp, #12]
      MP_SIZE_T_SWAP (an, bn);
 8003dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e00:	9308      	str	r3, [sp, #32]
 8003e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e06:	9b08      	ldr	r3, [sp, #32]
 8003e08:	930a      	str	r3, [sp, #40]	; 0x28
    }

  rp = MPZ_REALLOC (r, an + 1);
 8003e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	9b05      	ldr	r3, [sp, #20]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	dd07      	ble.n	8003e26 <mpz_abs_add+0x5e>
 8003e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e18:	3301      	adds	r3, #1
 8003e1a:	9805      	ldr	r0, [sp, #20]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f7ff f975 	bl	800310c <mpz_realloc>
 8003e22:	4603      	mov	r3, r0
 8003e24:	e001      	b.n	8003e2a <mpz_abs_add+0x62>
 8003e26:	9b05      	ldr	r3, [sp, #20]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	9307      	str	r3, [sp, #28]
  cy = mpn_add (rp, a->_mp_d, an, b->_mp_d, bn);
 8003e2c:	9b04      	ldr	r3, [sp, #16]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e36:	9100      	str	r1, [sp, #0]
 8003e38:	9807      	ldr	r0, [sp, #28]
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e3e:	f7fd f80f 	bl	8000e60 <mpn_add>
 8003e42:	9006      	str	r0, [sp, #24]

  rp[an] = cy;
 8003e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	9a07      	ldr	r2, [sp, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	9a06      	ldr	r2, [sp, #24]
 8003e4e:	601a      	str	r2, [r3, #0]

  return an + cy;
 8003e50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e52:	9b06      	ldr	r3, [sp, #24]
 8003e54:	4413      	add	r3, r2
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	b00d      	add	sp, #52	; 0x34
 8003e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e5e:	bf00      	nop

08003e60 <mpz_abs_sub>:

static mp_size_t
mpz_abs_sub (mpz_t r, const mpz_t a, const mpz_t b)
{
 8003e60:	b500      	push	{lr}
 8003e62:	b08d      	sub	sp, #52	; 0x34
 8003e64:	9005      	str	r0, [sp, #20]
 8003e66:	9104      	str	r1, [sp, #16]
 8003e68:	9203      	str	r2, [sp, #12]
  mp_size_t an = GMP_ABS (a->_mp_size);
 8003e6a:	9b04      	ldr	r3, [sp, #16]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bfb8      	it	lt
 8003e72:	425b      	neglt	r3, r3
 8003e74:	930b      	str	r3, [sp, #44]	; 0x2c
  mp_size_t bn = GMP_ABS (b->_mp_size);
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bfb8      	it	lt
 8003e7e:	425b      	neglt	r3, r3
 8003e80:	930a      	str	r3, [sp, #40]	; 0x28
  int cmp;
  mp_ptr rp;

  cmp = mpn_cmp4 (a->_mp_d, an, b->_mp_d, bn);
 8003e82:	9b04      	ldr	r3, [sp, #16]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e8e:	461a      	mov	r2, r3
 8003e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e92:	f7fc ff19 	bl	8000cc8 <mpn_cmp4>
 8003e96:	9009      	str	r0, [sp, #36]	; 0x24
  if (cmp > 0)
 8003e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dd32      	ble.n	8003f04 <mpz_abs_sub+0xa4>
    {
      rp = MPZ_REALLOC (r, an);
 8003e9e:	9b05      	ldr	r3, [sp, #20]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	da05      	bge.n	8003eb4 <mpz_abs_sub+0x54>
 8003ea8:	9805      	ldr	r0, [sp, #20]
 8003eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003eac:	f7ff f92e 	bl	800310c <mpz_realloc>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	e001      	b.n	8003eb8 <mpz_abs_sub+0x58>
 8003eb4:	9b05      	ldr	r3, [sp, #20]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	9308      	str	r3, [sp, #32]
      gmp_assert_nocarry (mpn_sub (rp, a->_mp_d, an, b->_mp_d, bn));
 8003eba:	9b04      	ldr	r3, [sp, #16]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ec4:	9100      	str	r1, [sp, #0]
 8003ec6:	9808      	ldr	r0, [sp, #32]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ecc:	f7fd f884 	bl	8000fd8 <mpn_sub>
 8003ed0:	9007      	str	r0, [sp, #28]
 8003ed2:	9b07      	ldr	r3, [sp, #28]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00f      	beq.n	8003ef8 <mpz_abs_sub+0x98>
 8003ed8:	f243 7064 	movw	r0, #14180	; 0x3764
 8003edc:	f6c0 0001 	movt	r0, #2049	; 0x801
 8003ee0:	f240 718f 	movw	r1, #1935	; 0x78f
 8003ee4:	f643 6234 	movw	r2, #15924	; 0x3e34
 8003ee8:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003eec:	f643 1344 	movw	r3, #14660	; 0x3944
 8003ef0:	f6c0 0301 	movt	r3, #2049	; 0x801
 8003ef4:	f009 fc14 	bl	800d720 <__assert_func>
      return mpn_normalized_size (rp, an);
 8003ef8:	9808      	ldr	r0, [sp, #32]
 8003efa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003efc:	f7fc ff02 	bl	8000d04 <mpn_normalized_size>
 8003f00:	4603      	mov	r3, r0
 8003f02:	e037      	b.n	8003f74 <mpz_abs_sub+0x114>
    }
  else if (cmp < 0)
 8003f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da33      	bge.n	8003f72 <mpz_abs_sub+0x112>
    {
      rp = MPZ_REALLOC (r, bn);
 8003f0a:	9b05      	ldr	r3, [sp, #20]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f10:	429a      	cmp	r2, r3
 8003f12:	da05      	bge.n	8003f20 <mpz_abs_sub+0xc0>
 8003f14:	9805      	ldr	r0, [sp, #20]
 8003f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f18:	f7ff f8f8 	bl	800310c <mpz_realloc>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e001      	b.n	8003f24 <mpz_abs_sub+0xc4>
 8003f20:	9b05      	ldr	r3, [sp, #20]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	9308      	str	r3, [sp, #32]
      gmp_assert_nocarry (mpn_sub (rp, b->_mp_d, bn, a->_mp_d, an));
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	9b04      	ldr	r3, [sp, #16]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f30:	9100      	str	r1, [sp, #0]
 8003f32:	9808      	ldr	r0, [sp, #32]
 8003f34:	4611      	mov	r1, r2
 8003f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f38:	f7fd f84e 	bl	8000fd8 <mpn_sub>
 8003f3c:	9006      	str	r0, [sp, #24]
 8003f3e:	9b06      	ldr	r3, [sp, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00f      	beq.n	8003f64 <mpz_abs_sub+0x104>
 8003f44:	f243 7064 	movw	r0, #14180	; 0x3764
 8003f48:	f6c0 0001 	movt	r0, #2049	; 0x801
 8003f4c:	f240 7195 	movw	r1, #1941	; 0x795
 8003f50:	f643 6234 	movw	r2, #15924	; 0x3e34
 8003f54:	f6c0 0201 	movt	r2, #2049	; 0x801
 8003f58:	f643 1344 	movw	r3, #14660	; 0x3944
 8003f5c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8003f60:	f009 fbde 	bl	800d720 <__assert_func>
      return -mpn_normalized_size (rp, bn);
 8003f64:	9808      	ldr	r0, [sp, #32]
 8003f66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f68:	f7fc fecc 	bl	8000d04 <mpn_normalized_size>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	425b      	negs	r3, r3
 8003f70:	e000      	b.n	8003f74 <mpz_abs_sub+0x114>
    }
  else
    return 0;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	b00d      	add	sp, #52	; 0x34
 8003f78:	f85d fb04 	ldr.w	pc, [sp], #4

08003f7c <mpz_add>:

void
mpz_add (mpz_t r, const mpz_t a, const mpz_t b)
{
 8003f7c:	b500      	push	{lr}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	9003      	str	r0, [sp, #12]
 8003f82:	9102      	str	r1, [sp, #8]
 8003f84:	9201      	str	r2, [sp, #4]
  mp_size_t rn;

  if ( (a->_mp_size ^ b->_mp_size) >= 0)
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	9b01      	ldr	r3, [sp, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4053      	eors	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	db06      	blt.n	8003fa2 <mpz_add+0x26>
    rn = mpz_abs_add (r, a, b);
 8003f94:	9803      	ldr	r0, [sp, #12]
 8003f96:	9902      	ldr	r1, [sp, #8]
 8003f98:	9a01      	ldr	r2, [sp, #4]
 8003f9a:	f7ff ff15 	bl	8003dc8 <mpz_abs_add>
 8003f9e:	9005      	str	r0, [sp, #20]
 8003fa0:	e005      	b.n	8003fae <mpz_add+0x32>
  else
    rn = mpz_abs_sub (r, a, b);
 8003fa2:	9803      	ldr	r0, [sp, #12]
 8003fa4:	9902      	ldr	r1, [sp, #8]
 8003fa6:	9a01      	ldr	r2, [sp, #4]
 8003fa8:	f7ff ff5a 	bl	8003e60 <mpz_abs_sub>
 8003fac:	9005      	str	r0, [sp, #20]

  r->_mp_size = a->_mp_size >= 0 ? rn : - rn;
 8003fae:	9b02      	ldr	r3, [sp, #8]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da02      	bge.n	8003fbc <mpz_add+0x40>
 8003fb6:	9b05      	ldr	r3, [sp, #20]
 8003fb8:	425b      	negs	r3, r3
 8003fba:	e000      	b.n	8003fbe <mpz_add+0x42>
 8003fbc:	9b05      	ldr	r3, [sp, #20]
 8003fbe:	9a03      	ldr	r2, [sp, #12]
 8003fc0:	6053      	str	r3, [r2, #4]
}
 8003fc2:	b007      	add	sp, #28
 8003fc4:	f85d fb04 	ldr.w	pc, [sp], #4

08003fc8 <mpz_sub>:

void
mpz_sub (mpz_t r, const mpz_t a, const mpz_t b)
{
 8003fc8:	b500      	push	{lr}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	9003      	str	r0, [sp, #12]
 8003fce:	9102      	str	r1, [sp, #8]
 8003fd0:	9201      	str	r2, [sp, #4]
  mp_size_t rn;

  if ( (a->_mp_size ^ b->_mp_size) >= 0)
 8003fd2:	9b02      	ldr	r3, [sp, #8]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	9b01      	ldr	r3, [sp, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4053      	eors	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db06      	blt.n	8003fee <mpz_sub+0x26>
    rn = mpz_abs_sub (r, a, b);
 8003fe0:	9803      	ldr	r0, [sp, #12]
 8003fe2:	9902      	ldr	r1, [sp, #8]
 8003fe4:	9a01      	ldr	r2, [sp, #4]
 8003fe6:	f7ff ff3b 	bl	8003e60 <mpz_abs_sub>
 8003fea:	9005      	str	r0, [sp, #20]
 8003fec:	e005      	b.n	8003ffa <mpz_sub+0x32>
  else
    rn = mpz_abs_add (r, a, b);
 8003fee:	9803      	ldr	r0, [sp, #12]
 8003ff0:	9902      	ldr	r1, [sp, #8]
 8003ff2:	9a01      	ldr	r2, [sp, #4]
 8003ff4:	f7ff fee8 	bl	8003dc8 <mpz_abs_add>
 8003ff8:	9005      	str	r0, [sp, #20]

  r->_mp_size = a->_mp_size >= 0 ? rn : - rn;
 8003ffa:	9b02      	ldr	r3, [sp, #8]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da02      	bge.n	8004008 <mpz_sub+0x40>
 8004002:	9b05      	ldr	r3, [sp, #20]
 8004004:	425b      	negs	r3, r3
 8004006:	e000      	b.n	800400a <mpz_sub+0x42>
 8004008:	9b05      	ldr	r3, [sp, #20]
 800400a:	9a03      	ldr	r2, [sp, #12]
 800400c:	6053      	str	r3, [r2, #4]
}
 800400e:	b007      	add	sp, #28
 8004010:	f85d fb04 	ldr.w	pc, [sp], #4

08004014 <mpz_mul_si>:


/* MPZ multiplication */
void
mpz_mul_si (mpz_t r, const mpz_t u, long int v)
{
 8004014:	b500      	push	{lr}
 8004016:	b085      	sub	sp, #20
 8004018:	9003      	str	r0, [sp, #12]
 800401a:	9102      	str	r1, [sp, #8]
 800401c:	9201      	str	r2, [sp, #4]
  if (v < 0)
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	da0b      	bge.n	800403c <mpz_mul_si+0x28>
    {
      mpz_mul_ui (r, u, GMP_NEG_CAST (unsigned long int, v));
 8004024:	9b01      	ldr	r3, [sp, #4]
 8004026:	425b      	negs	r3, r3
 8004028:	9803      	ldr	r0, [sp, #12]
 800402a:	9902      	ldr	r1, [sp, #8]
 800402c:	461a      	mov	r2, r3
 800402e:	f000 f80f 	bl	8004050 <mpz_mul_ui>
      mpz_neg (r, r);
 8004032:	9803      	ldr	r0, [sp, #12]
 8004034:	9903      	ldr	r1, [sp, #12]
 8004036:	f7ff fd93 	bl	8003b60 <mpz_neg>
 800403a:	e005      	b.n	8004048 <mpz_mul_si+0x34>
    }
  else
    mpz_mul_ui (r, u, (unsigned long int) v);
 800403c:	9b01      	ldr	r3, [sp, #4]
 800403e:	9803      	ldr	r0, [sp, #12]
 8004040:	9902      	ldr	r1, [sp, #8]
 8004042:	461a      	mov	r2, r3
 8004044:	f000 f804 	bl	8004050 <mpz_mul_ui>
}
 8004048:	b005      	add	sp, #20
 800404a:	f85d fb04 	ldr.w	pc, [sp], #4
 800404e:	bf00      	nop

08004050 <mpz_mul_ui>:

void
mpz_mul_ui (mpz_t r, const mpz_t u, unsigned long int v)
{
 8004050:	b500      	push	{lr}
 8004052:	b089      	sub	sp, #36	; 0x24
 8004054:	9003      	str	r0, [sp, #12]
 8004056:	9102      	str	r1, [sp, #8]
 8004058:	9201      	str	r2, [sp, #4]
  mp_size_t un, us;
  mp_ptr tp;
  mp_limb_t cy;

  us = u->_mp_size;
 800405a:	9b02      	ldr	r3, [sp, #8]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	9307      	str	r3, [sp, #28]

  if (us == 0 || v == 0)
 8004060:	9b07      	ldr	r3, [sp, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <mpz_mul_ui+0x1c>
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <mpz_mul_ui+0x24>
    {
      r->_mp_size = 0;
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	605a      	str	r2, [r3, #4]
      return;
 8004072:	e036      	b.n	80040e2 <mpz_mul_ui+0x92>
    }

  un = GMP_ABS (us);
 8004074:	9b07      	ldr	r3, [sp, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	bfb8      	it	lt
 800407a:	425b      	neglt	r3, r3
 800407c:	9306      	str	r3, [sp, #24]

  tp = MPZ_REALLOC (r, un + 1);
 800407e:	9b06      	ldr	r3, [sp, #24]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	9b03      	ldr	r3, [sp, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	dd07      	ble.n	800409a <mpz_mul_ui+0x4a>
 800408a:	9b06      	ldr	r3, [sp, #24]
 800408c:	3301      	adds	r3, #1
 800408e:	9803      	ldr	r0, [sp, #12]
 8004090:	4619      	mov	r1, r3
 8004092:	f7ff f83b 	bl	800310c <mpz_realloc>
 8004096:	4603      	mov	r3, r0
 8004098:	e001      	b.n	800409e <mpz_mul_ui+0x4e>
 800409a:	9b03      	ldr	r3, [sp, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	9305      	str	r3, [sp, #20]
  cy = mpn_mul_1 (tp, u->_mp_d, un, v);
 80040a0:	9b02      	ldr	r3, [sp, #8]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	9805      	ldr	r0, [sp, #20]
 80040a6:	4619      	mov	r1, r3
 80040a8:	9a06      	ldr	r2, [sp, #24]
 80040aa:	9b01      	ldr	r3, [sp, #4]
 80040ac:	f7fc ffd0 	bl	8001050 <mpn_mul_1>
 80040b0:	9004      	str	r0, [sp, #16]
  tp[un] = cy;
 80040b2:	9b06      	ldr	r3, [sp, #24]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	9a05      	ldr	r2, [sp, #20]
 80040b8:	4413      	add	r3, r2
 80040ba:	9a04      	ldr	r2, [sp, #16]
 80040bc:	601a      	str	r2, [r3, #0]

  un += (cy > 0);
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf0c      	ite	eq
 80040c4:	2300      	moveq	r3, #0
 80040c6:	2301      	movne	r3, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	9a06      	ldr	r2, [sp, #24]
 80040cc:	4413      	add	r3, r2
 80040ce:	9306      	str	r3, [sp, #24]
  r->_mp_size = (us < 0) ? - un : un;
 80040d0:	9b07      	ldr	r3, [sp, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da02      	bge.n	80040dc <mpz_mul_ui+0x8c>
 80040d6:	9b06      	ldr	r3, [sp, #24]
 80040d8:	425b      	negs	r3, r3
 80040da:	e000      	b.n	80040de <mpz_mul_ui+0x8e>
 80040dc:	9b06      	ldr	r3, [sp, #24]
 80040de:	9a03      	ldr	r2, [sp, #12]
 80040e0:	6053      	str	r3, [r2, #4]
}
 80040e2:	b009      	add	sp, #36	; 0x24
 80040e4:	f85d fb04 	ldr.w	pc, [sp], #4

080040e8 <mpz_mul>:

void
mpz_mul (mpz_t r, const mpz_t u, const mpz_t v)
{
 80040e8:	b500      	push	{lr}
 80040ea:	b08f      	sub	sp, #60	; 0x3c
 80040ec:	9005      	str	r0, [sp, #20]
 80040ee:	9104      	str	r1, [sp, #16]
 80040f0:	9203      	str	r2, [sp, #12]
  int sign;
  mp_size_t un, vn, rn;
  mpz_t t;
  mp_ptr tp;

  un = u->_mp_size;
 80040f2:	9b04      	ldr	r3, [sp, #16]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	930d      	str	r3, [sp, #52]	; 0x34
  vn = v->_mp_size;
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	930c      	str	r3, [sp, #48]	; 0x30

  if (un == 0 || vn == 0)
 80040fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <mpz_mul+0x22>
 8004104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <mpz_mul+0x2a>
    {
      r->_mp_size = 0;
 800410a:	9b05      	ldr	r3, [sp, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	e05a      	b.n	80041c8 <mpz_mul+0xe0>
      return;
    }

  sign = (un ^ vn) < 0;
 8004112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004116:	4053      	eors	r3, r2
 8004118:	0fdb      	lsrs	r3, r3, #31
 800411a:	b2db      	uxtb	r3, r3
 800411c:	930b      	str	r3, [sp, #44]	; 0x2c

  un = GMP_ABS (un);
 800411e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	bfb8      	it	lt
 8004124:	425b      	neglt	r3, r3
 8004126:	930d      	str	r3, [sp, #52]	; 0x34
  vn = GMP_ABS (vn);
 8004128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfb8      	it	lt
 800412e:	425b      	neglt	r3, r3
 8004130:	930c      	str	r3, [sp, #48]	; 0x30

  mpz_init2 (t, (un + vn) * GMP_LIMB_BITS);
 8004132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004136:	4413      	add	r3, r2
 8004138:	015b      	lsls	r3, r3, #5
 800413a:	aa06      	add	r2, sp, #24
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	f7fe ffb4 	bl	80030ac <mpz_init2>

  tp = t->_mp_d;
 8004144:	9b08      	ldr	r3, [sp, #32]
 8004146:	930a      	str	r3, [sp, #40]	; 0x28
  if (un >= vn)
 8004148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800414a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800414c:	429a      	cmp	r2, r3
 800414e:	db0b      	blt.n	8004168 <mpz_mul+0x80>
    mpn_mul (tp, u->_mp_d, un, v->_mp_d, vn);
 8004150:	9b04      	ldr	r3, [sp, #16]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	990c      	ldr	r1, [sp, #48]	; 0x30
 800415a:	9100      	str	r1, [sp, #0]
 800415c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800415e:	4611      	mov	r1, r2
 8004160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004162:	f7fd f915 	bl	8001390 <mpn_mul>
 8004166:	e00a      	b.n	800417e <mpz_mul+0x96>
  else
    mpn_mul (tp, v->_mp_d, vn, u->_mp_d, un);
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	9b04      	ldr	r3, [sp, #16]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004172:	9100      	str	r1, [sp, #0]
 8004174:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004176:	4611      	mov	r1, r2
 8004178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800417a:	f7fd f909 	bl	8001390 <mpn_mul>

  rn = un + vn;
 800417e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004182:	4413      	add	r3, r2
 8004184:	9309      	str	r3, [sp, #36]	; 0x24
  rn -= tp[rn-1] == 0;
 8004186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800418c:	3b01      	subs	r3, #1
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004192:	4413      	add	r3, r2
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2300      	movne	r3, #0
 800419c:	2301      	moveq	r3, #1
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	9309      	str	r3, [sp, #36]	; 0x24

  t->_mp_size = sign ? - rn : rn;
 80041a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <mpz_mul+0xca>
 80041ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ae:	425b      	negs	r3, r3
 80041b0:	e000      	b.n	80041b4 <mpz_mul+0xcc>
 80041b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b4:	9307      	str	r3, [sp, #28]
  mpz_swap (r, t);
 80041b6:	ab06      	add	r3, sp, #24
 80041b8:	9805      	ldr	r0, [sp, #20]
 80041ba:	4619      	mov	r1, r3
 80041bc:	f7ff fce4 	bl	8003b88 <mpz_swap>
  mpz_clear (t);
 80041c0:	ab06      	add	r3, sp, #24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe ff92 	bl	80030ec <mpz_clear>
}
 80041c8:	b00f      	add	sp, #60	; 0x3c
 80041ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ce:	bf00      	nop

080041d0 <mpz_mul_2exp>:

void
mpz_mul_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t bits)
{
 80041d0:	b500      	push	{lr}
 80041d2:	b08b      	sub	sp, #44	; 0x2c
 80041d4:	9003      	str	r0, [sp, #12]
 80041d6:	9102      	str	r1, [sp, #8]
 80041d8:	9201      	str	r2, [sp, #4]
  mp_size_t un, rn;
  mp_size_t limbs;
  unsigned shift;
  mp_ptr rp;

  un = GMP_ABS (u->_mp_size);
 80041da:	9b02      	ldr	r3, [sp, #8]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bfb8      	it	lt
 80041e2:	425b      	neglt	r3, r3
 80041e4:	9307      	str	r3, [sp, #28]
  if (un == 0)
 80041e6:	9b07      	ldr	r3, [sp, #28]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <mpz_mul_2exp+0x24>
    {
      r->_mp_size = 0;
 80041ec:	9b03      	ldr	r3, [sp, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
      return;
 80041f2:	e064      	b.n	80042be <mpz_mul_2exp+0xee>
    }

  limbs = bits / GMP_LIMB_BITS;
 80041f4:	9b01      	ldr	r3, [sp, #4]
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	9308      	str	r3, [sp, #32]
  shift = bits % GMP_LIMB_BITS;
 80041fa:	9b01      	ldr	r3, [sp, #4]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	9306      	str	r3, [sp, #24]

  rn = un + limbs + (shift > 0);
 8004202:	9a07      	ldr	r2, [sp, #28]
 8004204:	9b08      	ldr	r3, [sp, #32]
 8004206:	441a      	add	r2, r3
 8004208:	9b06      	ldr	r3, [sp, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf0c      	ite	eq
 800420e:	2300      	moveq	r3, #0
 8004210:	2301      	movne	r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4413      	add	r3, r2
 8004216:	9309      	str	r3, [sp, #36]	; 0x24
  rp = MPZ_REALLOC (r, rn);
 8004218:	9b03      	ldr	r3, [sp, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421e:	429a      	cmp	r2, r3
 8004220:	da05      	bge.n	800422e <mpz_mul_2exp+0x5e>
 8004222:	9803      	ldr	r0, [sp, #12]
 8004224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004226:	f7fe ff71 	bl	800310c <mpz_realloc>
 800422a:	4603      	mov	r3, r0
 800422c:	e001      	b.n	8004232 <mpz_mul_2exp+0x62>
 800422e:	9b03      	ldr	r3, [sp, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	9305      	str	r3, [sp, #20]
  if (shift > 0)
 8004234:	9b06      	ldr	r3, [sp, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01f      	beq.n	800427a <mpz_mul_2exp+0xaa>
    {
      mp_limb_t cy = mpn_lshift (rp + limbs, u->_mp_d, un, shift);
 800423a:	9b08      	ldr	r3, [sp, #32]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	9a05      	ldr	r2, [sp, #20]
 8004240:	441a      	add	r2, r3
 8004242:	9b02      	ldr	r3, [sp, #8]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	9a07      	ldr	r2, [sp, #28]
 800424c:	9b06      	ldr	r3, [sp, #24]
 800424e:	f7fd f929 	bl	80014a4 <mpn_lshift>
 8004252:	9004      	str	r0, [sp, #16]
      rp[rn-1] = cy;
 8004254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004256:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800425a:	3b01      	subs	r3, #1
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	9a05      	ldr	r2, [sp, #20]
 8004260:	4413      	add	r3, r2
 8004262:	9a04      	ldr	r2, [sp, #16]
 8004264:	601a      	str	r2, [r3, #0]
      rn -= (cy == 0);
 8004266:	9b04      	ldr	r3, [sp, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf14      	ite	ne
 800426c:	2300      	movne	r3, #0
 800426e:	2301      	moveq	r3, #1
 8004270:	b2db      	uxtb	r3, r3
 8004272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	9309      	str	r3, [sp, #36]	; 0x24
    }
  else
    mpn_copyd (rp + limbs, u->_mp_d, un);

  while (limbs > 0)
 8004278:	e014      	b.n	80042a4 <mpz_mul_2exp+0xd4>
      mp_limb_t cy = mpn_lshift (rp + limbs, u->_mp_d, un, shift);
      rp[rn-1] = cy;
      rn -= (cy == 0);
    }
  else
    mpn_copyd (rp + limbs, u->_mp_d, un);
 800427a:	9b08      	ldr	r3, [sp, #32]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	9a05      	ldr	r2, [sp, #20]
 8004280:	441a      	add	r2, r3
 8004282:	9b02      	ldr	r3, [sp, #8]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	9a07      	ldr	r2, [sp, #28]
 800428c:	f7fc fcda 	bl	8000c44 <mpn_copyd>

  while (limbs > 0)
 8004290:	e008      	b.n	80042a4 <mpz_mul_2exp+0xd4>
    rp[--limbs] = 0;
 8004292:	9b08      	ldr	r3, [sp, #32]
 8004294:	3b01      	subs	r3, #1
 8004296:	9308      	str	r3, [sp, #32]
 8004298:	9b08      	ldr	r3, [sp, #32]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	9a05      	ldr	r2, [sp, #20]
 800429e:	4413      	add	r3, r2
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
      rn -= (cy == 0);
    }
  else
    mpn_copyd (rp + limbs, u->_mp_d, un);

  while (limbs > 0)
 80042a4:	9b08      	ldr	r3, [sp, #32]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	dcf3      	bgt.n	8004292 <mpz_mul_2exp+0xc2>
    rp[--limbs] = 0;

  r->_mp_size = (u->_mp_size < 0) ? - rn : rn;
 80042aa:	9b02      	ldr	r3, [sp, #8]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da02      	bge.n	80042b8 <mpz_mul_2exp+0xe8>
 80042b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b4:	425b      	negs	r3, r3
 80042b6:	e000      	b.n	80042ba <mpz_mul_2exp+0xea>
 80042b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ba:	9a03      	ldr	r2, [sp, #12]
 80042bc:	6053      	str	r3, [r2, #4]
}
 80042be:	b00b      	add	sp, #44	; 0x2c
 80042c0:	f85d fb04 	ldr.w	pc, [sp], #4

080042c4 <mpz_addmul_ui>:

void
mpz_addmul_ui (mpz_t r, const mpz_t u, unsigned long int v)
{
 80042c4:	b500      	push	{lr}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	9003      	str	r0, [sp, #12]
 80042ca:	9102      	str	r1, [sp, #8]
 80042cc:	9201      	str	r2, [sp, #4]
  mpz_t t;
  mpz_init (t);
 80042ce:	ab05      	add	r3, sp, #20
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fed9 	bl	8003088 <mpz_init>
  mpz_mul_ui (t, u, v);
 80042d6:	ab05      	add	r3, sp, #20
 80042d8:	4618      	mov	r0, r3
 80042da:	9902      	ldr	r1, [sp, #8]
 80042dc:	9a01      	ldr	r2, [sp, #4]
 80042de:	f7ff feb7 	bl	8004050 <mpz_mul_ui>
  mpz_add (r, r, t);
 80042e2:	ab05      	add	r3, sp, #20
 80042e4:	9803      	ldr	r0, [sp, #12]
 80042e6:	9903      	ldr	r1, [sp, #12]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f7ff fe47 	bl	8003f7c <mpz_add>
  mpz_clear (t);
 80042ee:	ab05      	add	r3, sp, #20
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fefb 	bl	80030ec <mpz_clear>
}
 80042f6:	b009      	add	sp, #36	; 0x24
 80042f8:	f85d fb04 	ldr.w	pc, [sp], #4

080042fc <mpz_submul_ui>:

void
mpz_submul_ui (mpz_t r, const mpz_t u, unsigned long int v)
{
 80042fc:	b500      	push	{lr}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	9003      	str	r0, [sp, #12]
 8004302:	9102      	str	r1, [sp, #8]
 8004304:	9201      	str	r2, [sp, #4]
  mpz_t t;
  mpz_init (t);
 8004306:	ab05      	add	r3, sp, #20
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe febd 	bl	8003088 <mpz_init>
  mpz_mul_ui (t, u, v);
 800430e:	ab05      	add	r3, sp, #20
 8004310:	4618      	mov	r0, r3
 8004312:	9902      	ldr	r1, [sp, #8]
 8004314:	9a01      	ldr	r2, [sp, #4]
 8004316:	f7ff fe9b 	bl	8004050 <mpz_mul_ui>
  mpz_sub (r, r, t);
 800431a:	ab05      	add	r3, sp, #20
 800431c:	9803      	ldr	r0, [sp, #12]
 800431e:	9903      	ldr	r1, [sp, #12]
 8004320:	461a      	mov	r2, r3
 8004322:	f7ff fe51 	bl	8003fc8 <mpz_sub>
  mpz_clear (t);
 8004326:	ab05      	add	r3, sp, #20
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe fedf 	bl	80030ec <mpz_clear>
}
 800432e:	b009      	add	sp, #36	; 0x24
 8004330:	f85d fb04 	ldr.w	pc, [sp], #4

08004334 <mpz_addmul>:

void
mpz_addmul (mpz_t r, const mpz_t u, const mpz_t v)
{
 8004334:	b500      	push	{lr}
 8004336:	b089      	sub	sp, #36	; 0x24
 8004338:	9003      	str	r0, [sp, #12]
 800433a:	9102      	str	r1, [sp, #8]
 800433c:	9201      	str	r2, [sp, #4]
  mpz_t t;
  mpz_init (t);
 800433e:	ab05      	add	r3, sp, #20
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe fea1 	bl	8003088 <mpz_init>
  mpz_mul (t, u, v);
 8004346:	ab05      	add	r3, sp, #20
 8004348:	4618      	mov	r0, r3
 800434a:	9902      	ldr	r1, [sp, #8]
 800434c:	9a01      	ldr	r2, [sp, #4]
 800434e:	f7ff fecb 	bl	80040e8 <mpz_mul>
  mpz_add (r, r, t);
 8004352:	ab05      	add	r3, sp, #20
 8004354:	9803      	ldr	r0, [sp, #12]
 8004356:	9903      	ldr	r1, [sp, #12]
 8004358:	461a      	mov	r2, r3
 800435a:	f7ff fe0f 	bl	8003f7c <mpz_add>
  mpz_clear (t);
 800435e:	ab05      	add	r3, sp, #20
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fec3 	bl	80030ec <mpz_clear>
}
 8004366:	b009      	add	sp, #36	; 0x24
 8004368:	f85d fb04 	ldr.w	pc, [sp], #4

0800436c <mpz_submul>:

void
mpz_submul (mpz_t r, const mpz_t u, const mpz_t v)
{
 800436c:	b500      	push	{lr}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	9003      	str	r0, [sp, #12]
 8004372:	9102      	str	r1, [sp, #8]
 8004374:	9201      	str	r2, [sp, #4]
  mpz_t t;
  mpz_init (t);
 8004376:	ab05      	add	r3, sp, #20
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe fe85 	bl	8003088 <mpz_init>
  mpz_mul (t, u, v);
 800437e:	ab05      	add	r3, sp, #20
 8004380:	4618      	mov	r0, r3
 8004382:	9902      	ldr	r1, [sp, #8]
 8004384:	9a01      	ldr	r2, [sp, #4]
 8004386:	f7ff feaf 	bl	80040e8 <mpz_mul>
  mpz_sub (r, r, t);
 800438a:	ab05      	add	r3, sp, #20
 800438c:	9803      	ldr	r0, [sp, #12]
 800438e:	9903      	ldr	r1, [sp, #12]
 8004390:	461a      	mov	r2, r3
 8004392:	f7ff fe19 	bl	8003fc8 <mpz_sub>
  mpz_clear (t);
 8004396:	ab05      	add	r3, sp, #20
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fea7 	bl	80030ec <mpz_clear>
}
 800439e:	b009      	add	sp, #36	; 0x24
 80043a0:	f85d fb04 	ldr.w	pc, [sp], #4

080043a4 <mpz_div_qr>:

/* Allows q or r to be zero. Returns 1 iff remainder is non-zero. */
static int
mpz_div_qr (mpz_t q, mpz_t r,
	    const mpz_t n, const mpz_t d, enum mpz_div_round_mode mode)
{
 80043a4:	b500      	push	{lr}
 80043a6:	b097      	sub	sp, #92	; 0x5c
 80043a8:	9005      	str	r0, [sp, #20]
 80043aa:	9104      	str	r1, [sp, #16]
 80043ac:	9203      	str	r2, [sp, #12]
 80043ae:	9302      	str	r3, [sp, #8]
  mp_size_t ns, ds, nn, dn, qs;
  ns = n->_mp_size;
 80043b0:	9b03      	ldr	r3, [sp, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	9314      	str	r3, [sp, #80]	; 0x50
  ds = d->_mp_size;
 80043b6:	9b02      	ldr	r3, [sp, #8]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	9313      	str	r3, [sp, #76]	; 0x4c

  if (ds == 0)
 80043bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <mpz_div_qr+0x2a>
    gmp_die("mpz_div_qr: Divide by zero.");
 80043c2:	f643 10ac 	movw	r0, #14764	; 0x39ac
 80043c6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80043ca:	f7fc fb37 	bl	8000a3c <gmp_die>

  if (ns == 0)
 80043ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <mpz_div_qr+0x4c>
    {
      if (q)
 80043d4:	9b05      	ldr	r3, [sp, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <mpz_div_qr+0x3c>
	q->_mp_size = 0;
 80043da:	9b05      	ldr	r3, [sp, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
      if (r)
 80043e0:	9b04      	ldr	r3, [sp, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <mpz_div_qr+0x48>
	r->_mp_size = 0;
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	2200      	movs	r2, #0
 80043ea:	605a      	str	r2, [r3, #4]
      return 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e0f9      	b.n	80045e4 <mpz_div_qr+0x240>
    }

  nn = GMP_ABS (ns);
 80043f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bfb8      	it	lt
 80043f6:	425b      	neglt	r3, r3
 80043f8:	9312      	str	r3, [sp, #72]	; 0x48
  dn = GMP_ABS (ds);
 80043fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfb8      	it	lt
 8004400:	425b      	neglt	r3, r3
 8004402:	9311      	str	r3, [sp, #68]	; 0x44

  qs = ds ^ ns;
 8004404:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004408:	4053      	eors	r3, r2
 800440a:	9310      	str	r3, [sp, #64]	; 0x40

  if (nn < dn)
 800440c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800440e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004410:	429a      	cmp	r2, r3
 8004412:	da3f      	bge.n	8004494 <mpz_div_qr+0xf0>
    {
      if (mode == GMP_DIV_CEIL && qs >= 0)
 8004414:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004418:	2b01      	cmp	r3, #1
 800441a:	d113      	bne.n	8004444 <mpz_div_qr+0xa0>
 800441c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	db10      	blt.n	8004444 <mpz_div_qr+0xa0>
	{
	  /* q = 1, r = n - d */
	  if (r)
 8004422:	9b04      	ldr	r3, [sp, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <mpz_div_qr+0x8e>
	    mpz_sub (r, n, d);
 8004428:	9804      	ldr	r0, [sp, #16]
 800442a:	9903      	ldr	r1, [sp, #12]
 800442c:	9a02      	ldr	r2, [sp, #8]
 800442e:	f7ff fdcb 	bl	8003fc8 <mpz_sub>
	  if (q)
 8004432:	9b05      	ldr	r3, [sp, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <mpz_div_qr+0x9e>
	    mpz_set_ui (q, 1);
 8004438:	9805      	ldr	r0, [sp, #20]
 800443a:	2101      	movs	r1, #1
 800443c:	f7fe fea8 	bl	8003190 <mpz_set_ui>
      if (mode == GMP_DIV_CEIL && qs >= 0)
	{
	  /* q = 1, r = n - d */
	  if (r)
	    mpz_sub (r, n, d);
	  if (q)
 8004440:	e026      	b.n	8004490 <mpz_div_qr+0xec>
 8004442:	e025      	b.n	8004490 <mpz_div_qr+0xec>
	    mpz_set_ui (q, 1);
	}
      else if (mode == GMP_DIV_FLOOR && qs < 0)
 8004444:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004448:	2b00      	cmp	r3, #0
 800444a:	d114      	bne.n	8004476 <mpz_div_qr+0xd2>
 800444c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	da11      	bge.n	8004476 <mpz_div_qr+0xd2>
	{
	  /* q = -1, r = n + d */
	  if (r)
 8004452:	9b04      	ldr	r3, [sp, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <mpz_div_qr+0xbe>
	    mpz_add (r, n, d);
 8004458:	9804      	ldr	r0, [sp, #16]
 800445a:	9903      	ldr	r1, [sp, #12]
 800445c:	9a02      	ldr	r2, [sp, #8]
 800445e:	f7ff fd8d 	bl	8003f7c <mpz_add>
	  if (q)
 8004462:	9b05      	ldr	r3, [sp, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <mpz_div_qr+0xd0>
	    mpz_set_si (q, -1);
 8004468:	9805      	ldr	r0, [sp, #20]
 800446a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800446e:	f7fe fe75 	bl	800315c <mpz_set_si>
      else if (mode == GMP_DIV_FLOOR && qs < 0)
	{
	  /* q = -1, r = n + d */
	  if (r)
	    mpz_add (r, n, d);
	  if (q)
 8004472:	e00d      	b.n	8004490 <mpz_div_qr+0xec>
 8004474:	e00c      	b.n	8004490 <mpz_div_qr+0xec>
	    mpz_set_si (q, -1);
	}
      else
	{
	  /* q = 0, r = d */
	  if (r)
 8004476:	9b04      	ldr	r3, [sp, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <mpz_div_qr+0xe0>
	    mpz_set (r, n);
 800447c:	9804      	ldr	r0, [sp, #16]
 800447e:	9903      	ldr	r1, [sp, #12]
 8004480:	f7fe fe9a 	bl	80031b8 <mpz_set>
	  if (q)
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <mpz_div_qr+0xec>
	    q->_mp_size = 0;
 800448a:	9b05      	ldr	r3, [sp, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	605a      	str	r2, [r3, #4]
	}
      return 1;
 8004490:	2301      	movs	r3, #1
 8004492:	e0a7      	b.n	80045e4 <mpz_div_qr+0x240>
    {
      mp_ptr np, qp;
      mp_size_t qn, rn;
      mpz_t tq, tr;

      mpz_init_set (tr, n);
 8004494:	ab07      	add	r3, sp, #28
 8004496:	4618      	mov	r0, r3
 8004498:	9903      	ldr	r1, [sp, #12]
 800449a:	f7fe fed3 	bl	8003244 <mpz_init_set>
      np = tr->_mp_d;
 800449e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a0:	930f      	str	r3, [sp, #60]	; 0x3c

      qn = nn - dn + 1;
 80044a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	3301      	adds	r3, #1
 80044aa:	930e      	str	r3, [sp, #56]	; 0x38

      if (q)
 80044ac:	9b05      	ldr	r3, [sp, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <mpz_div_qr+0x122>
	{
	  mpz_init2 (tq, qn * GMP_LIMB_BITS);
 80044b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044b4:	015b      	lsls	r3, r3, #5
 80044b6:	aa0a      	add	r2, sp, #40	; 0x28
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	f7fe fdf6 	bl	80030ac <mpz_init2>
	  qp = tq->_mp_d;
 80044c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044c2:	9315      	str	r3, [sp, #84]	; 0x54
 80044c4:	e001      	b.n	80044ca <mpz_div_qr+0x126>
	}
      else
	qp = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	9315      	str	r3, [sp, #84]	; 0x54

      mpn_div_qr (qp, np, nn, d->_mp_d, dn);
 80044ca:	9b02      	ldr	r3, [sp, #8]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80044d0:	9200      	str	r2, [sp, #0]
 80044d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80044d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80044d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044d8:	f7fe f99e 	bl	8002818 <mpn_div_qr>

      if (qp)
 80044dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d017      	beq.n	8004512 <mpz_div_qr+0x16e>
	{
	  qn -= (qp[qn-1] == 0);
 80044e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044e8:	3b01      	subs	r3, #1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044ee:	4413      	add	r3, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf14      	ite	ne
 80044f6:	2300      	movne	r3, #0
 80044f8:	2301      	moveq	r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	930e      	str	r3, [sp, #56]	; 0x38

	  tq->_mp_size = qs < 0 ? -qn : qn;
 8004502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	da02      	bge.n	800450e <mpz_div_qr+0x16a>
 8004508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800450a:	425b      	negs	r3, r3
 800450c:	e000      	b.n	8004510 <mpz_div_qr+0x16c>
 800450e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004510:	930b      	str	r3, [sp, #44]	; 0x2c
	}
      rn = mpn_normalized_size (np, dn);
 8004512:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004514:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004516:	f7fc fbf5 	bl	8000d04 <mpn_normalized_size>
 800451a:	900d      	str	r0, [sp, #52]	; 0x34
      tr->_mp_size = ns < 0 ? - rn : rn;
 800451c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	da02      	bge.n	8004528 <mpz_div_qr+0x184>
 8004522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004524:	425b      	negs	r3, r3
 8004526:	e000      	b.n	800452a <mpz_div_qr+0x186>
 8004528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800452a:	9308      	str	r3, [sp, #32]

      if (mode == GMP_DIV_FLOOR && qs < 0 && rn != 0)
 800452c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11b      	bne.n	800456c <mpz_div_qr+0x1c8>
 8004534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	da18      	bge.n	800456c <mpz_div_qr+0x1c8>
 800453a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <mpz_div_qr+0x1c8>
	{
	  if (q)
 8004540:	9b05      	ldr	r3, [sp, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <mpz_div_qr+0x1b0>
	    mpz_sub_ui (tq, tq, 1);
 8004546:	aa0a      	add	r2, sp, #40	; 0x28
 8004548:	ab0a      	add	r3, sp, #40	; 0x28
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	2201      	movs	r2, #1
 8004550:	f7ff fbfe 	bl	8003d50 <mpz_sub_ui>
	  if (r)
 8004554:	9b04      	ldr	r3, [sp, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <mpz_div_qr+0x1c6>
	    mpz_add (tr, tr, d);
 800455a:	aa07      	add	r2, sp, #28
 800455c:	ab07      	add	r3, sp, #28
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	9a02      	ldr	r2, [sp, #8]
 8004564:	f7ff fd0a 	bl	8003f7c <mpz_add>

      if (mode == GMP_DIV_FLOOR && qs < 0 && rn != 0)
	{
	  if (q)
	    mpz_sub_ui (tq, tq, 1);
	  if (r)
 8004568:	e01e      	b.n	80045a8 <mpz_div_qr+0x204>
 800456a:	e01d      	b.n	80045a8 <mpz_div_qr+0x204>
	    mpz_add (tr, tr, d);
	}
      else if (mode == GMP_DIV_CEIL && qs >= 0 && rn != 0)
 800456c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8004570:	2b01      	cmp	r3, #1
 8004572:	d119      	bne.n	80045a8 <mpz_div_qr+0x204>
 8004574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	db16      	blt.n	80045a8 <mpz_div_qr+0x204>
 800457a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <mpz_div_qr+0x204>
	{
	  if (q)
 8004580:	9b05      	ldr	r3, [sp, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <mpz_div_qr+0x1f0>
	    mpz_add_ui (tq, tq, 1);
 8004586:	aa0a      	add	r2, sp, #40	; 0x28
 8004588:	ab0a      	add	r3, sp, #40	; 0x28
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	2201      	movs	r2, #1
 8004590:	f7ff fbc0 	bl	8003d14 <mpz_add_ui>
	  if (r)
 8004594:	9b04      	ldr	r3, [sp, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <mpz_div_qr+0x204>
	    mpz_sub (tr, tr, d);
 800459a:	aa07      	add	r2, sp, #28
 800459c:	ab07      	add	r3, sp, #28
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	9a02      	ldr	r2, [sp, #8]
 80045a4:	f7ff fd10 	bl	8003fc8 <mpz_sub>
	}

      if (q)
 80045a8:	9b05      	ldr	r3, [sp, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <mpz_div_qr+0x21c>
	{
	  mpz_swap (tq, q);
 80045ae:	ab0a      	add	r3, sp, #40	; 0x28
 80045b0:	4618      	mov	r0, r3
 80045b2:	9905      	ldr	r1, [sp, #20]
 80045b4:	f7ff fae8 	bl	8003b88 <mpz_swap>
	  mpz_clear (tq);
 80045b8:	ab0a      	add	r3, sp, #40	; 0x28
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fd96 	bl	80030ec <mpz_clear>
	}
      if (r)
 80045c0:	9b04      	ldr	r3, [sp, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <mpz_div_qr+0x22c>
	mpz_swap (tr, r);
 80045c6:	ab07      	add	r3, sp, #28
 80045c8:	4618      	mov	r0, r3
 80045ca:	9904      	ldr	r1, [sp, #16]
 80045cc:	f7ff fadc 	bl	8003b88 <mpz_swap>

      mpz_clear (tr);
 80045d0:	ab07      	add	r3, sp, #28
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fd8a 	bl	80030ec <mpz_clear>

      return rn != 0;
 80045d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf0c      	ite	eq
 80045de:	2300      	moveq	r3, #0
 80045e0:	2301      	movne	r3, #1
 80045e2:	b2db      	uxtb	r3, r3
    }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	b017      	add	sp, #92	; 0x5c
 80045e8:	f85d fb04 	ldr.w	pc, [sp], #4

080045ec <mpz_cdiv_qr>:

void
mpz_cdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)
{
 80045ec:	b500      	push	{lr}
 80045ee:	b087      	sub	sp, #28
 80045f0:	9005      	str	r0, [sp, #20]
 80045f2:	9104      	str	r1, [sp, #16]
 80045f4:	9203      	str	r2, [sp, #12]
 80045f6:	9302      	str	r3, [sp, #8]
  mpz_div_qr (q, r, n, d, GMP_DIV_CEIL);
 80045f8:	2301      	movs	r3, #1
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	9805      	ldr	r0, [sp, #20]
 80045fe:	9904      	ldr	r1, [sp, #16]
 8004600:	9a03      	ldr	r2, [sp, #12]
 8004602:	9b02      	ldr	r3, [sp, #8]
 8004604:	f7ff fece 	bl	80043a4 <mpz_div_qr>
}
 8004608:	b007      	add	sp, #28
 800460a:	f85d fb04 	ldr.w	pc, [sp], #4
 800460e:	bf00      	nop

08004610 <mpz_fdiv_qr>:

void
mpz_fdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)
{
 8004610:	b500      	push	{lr}
 8004612:	b087      	sub	sp, #28
 8004614:	9005      	str	r0, [sp, #20]
 8004616:	9104      	str	r1, [sp, #16]
 8004618:	9203      	str	r2, [sp, #12]
 800461a:	9302      	str	r3, [sp, #8]
  mpz_div_qr (q, r, n, d, GMP_DIV_FLOOR);
 800461c:	2300      	movs	r3, #0
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	9805      	ldr	r0, [sp, #20]
 8004622:	9904      	ldr	r1, [sp, #16]
 8004624:	9a03      	ldr	r2, [sp, #12]
 8004626:	9b02      	ldr	r3, [sp, #8]
 8004628:	f7ff febc 	bl	80043a4 <mpz_div_qr>
}
 800462c:	b007      	add	sp, #28
 800462e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004632:	bf00      	nop

08004634 <mpz_tdiv_qr>:

void
mpz_tdiv_qr (mpz_t q, mpz_t r, const mpz_t n, const mpz_t d)
{
 8004634:	b500      	push	{lr}
 8004636:	b087      	sub	sp, #28
 8004638:	9005      	str	r0, [sp, #20]
 800463a:	9104      	str	r1, [sp, #16]
 800463c:	9203      	str	r2, [sp, #12]
 800463e:	9302      	str	r3, [sp, #8]
  mpz_div_qr (q, r, n, d, GMP_DIV_TRUNC);
 8004640:	2302      	movs	r3, #2
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	9805      	ldr	r0, [sp, #20]
 8004646:	9904      	ldr	r1, [sp, #16]
 8004648:	9a03      	ldr	r2, [sp, #12]
 800464a:	9b02      	ldr	r3, [sp, #8]
 800464c:	f7ff feaa 	bl	80043a4 <mpz_div_qr>
}
 8004650:	b007      	add	sp, #28
 8004652:	f85d fb04 	ldr.w	pc, [sp], #4
 8004656:	bf00      	nop

08004658 <mpz_cdiv_q>:

void
mpz_cdiv_q (mpz_t q, const mpz_t n, const mpz_t d)
{
 8004658:	b500      	push	{lr}
 800465a:	b087      	sub	sp, #28
 800465c:	9005      	str	r0, [sp, #20]
 800465e:	9104      	str	r1, [sp, #16]
 8004660:	9203      	str	r2, [sp, #12]
  mpz_div_qr (q, NULL, n, d, GMP_DIV_CEIL);
 8004662:	2301      	movs	r3, #1
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	9805      	ldr	r0, [sp, #20]
 8004668:	2100      	movs	r1, #0
 800466a:	9a04      	ldr	r2, [sp, #16]
 800466c:	9b03      	ldr	r3, [sp, #12]
 800466e:	f7ff fe99 	bl	80043a4 <mpz_div_qr>
}
 8004672:	b007      	add	sp, #28
 8004674:	f85d fb04 	ldr.w	pc, [sp], #4

08004678 <mpz_fdiv_q>:

void
mpz_fdiv_q (mpz_t q, const mpz_t n, const mpz_t d)
{
 8004678:	b500      	push	{lr}
 800467a:	b087      	sub	sp, #28
 800467c:	9005      	str	r0, [sp, #20]
 800467e:	9104      	str	r1, [sp, #16]
 8004680:	9203      	str	r2, [sp, #12]
  mpz_div_qr (q, NULL, n, d, GMP_DIV_FLOOR);
 8004682:	2300      	movs	r3, #0
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	9805      	ldr	r0, [sp, #20]
 8004688:	2100      	movs	r1, #0
 800468a:	9a04      	ldr	r2, [sp, #16]
 800468c:	9b03      	ldr	r3, [sp, #12]
 800468e:	f7ff fe89 	bl	80043a4 <mpz_div_qr>
}
 8004692:	b007      	add	sp, #28
 8004694:	f85d fb04 	ldr.w	pc, [sp], #4

08004698 <mpz_tdiv_q>:

void
mpz_tdiv_q (mpz_t q, const mpz_t n, const mpz_t d)
{
 8004698:	b500      	push	{lr}
 800469a:	b087      	sub	sp, #28
 800469c:	9005      	str	r0, [sp, #20]
 800469e:	9104      	str	r1, [sp, #16]
 80046a0:	9203      	str	r2, [sp, #12]
  mpz_div_qr (q, NULL, n, d, GMP_DIV_TRUNC);
 80046a2:	2302      	movs	r3, #2
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	9805      	ldr	r0, [sp, #20]
 80046a8:	2100      	movs	r1, #0
 80046aa:	9a04      	ldr	r2, [sp, #16]
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	f7ff fe79 	bl	80043a4 <mpz_div_qr>
}
 80046b2:	b007      	add	sp, #28
 80046b4:	f85d fb04 	ldr.w	pc, [sp], #4

080046b8 <mpz_cdiv_r>:

void
mpz_cdiv_r (mpz_t r, const mpz_t n, const mpz_t d)
{
 80046b8:	b500      	push	{lr}
 80046ba:	b087      	sub	sp, #28
 80046bc:	9005      	str	r0, [sp, #20]
 80046be:	9104      	str	r1, [sp, #16]
 80046c0:	9203      	str	r2, [sp, #12]
  mpz_div_qr (NULL, r, n, d, GMP_DIV_CEIL);
 80046c2:	2301      	movs	r3, #1
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2000      	movs	r0, #0
 80046c8:	9905      	ldr	r1, [sp, #20]
 80046ca:	9a04      	ldr	r2, [sp, #16]
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	f7ff fe69 	bl	80043a4 <mpz_div_qr>
}
 80046d2:	b007      	add	sp, #28
 80046d4:	f85d fb04 	ldr.w	pc, [sp], #4

080046d8 <mpz_fdiv_r>:

void
mpz_fdiv_r (mpz_t r, const mpz_t n, const mpz_t d)
{
 80046d8:	b500      	push	{lr}
 80046da:	b087      	sub	sp, #28
 80046dc:	9005      	str	r0, [sp, #20]
 80046de:	9104      	str	r1, [sp, #16]
 80046e0:	9203      	str	r2, [sp, #12]
  mpz_div_qr (NULL, r, n, d, GMP_DIV_FLOOR);
 80046e2:	2300      	movs	r3, #0
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	2000      	movs	r0, #0
 80046e8:	9905      	ldr	r1, [sp, #20]
 80046ea:	9a04      	ldr	r2, [sp, #16]
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	f7ff fe59 	bl	80043a4 <mpz_div_qr>
}
 80046f2:	b007      	add	sp, #28
 80046f4:	f85d fb04 	ldr.w	pc, [sp], #4

080046f8 <mpz_tdiv_r>:

void
mpz_tdiv_r (mpz_t r, const mpz_t n, const mpz_t d)
{
 80046f8:	b500      	push	{lr}
 80046fa:	b087      	sub	sp, #28
 80046fc:	9005      	str	r0, [sp, #20]
 80046fe:	9104      	str	r1, [sp, #16]
 8004700:	9203      	str	r2, [sp, #12]
  mpz_div_qr (NULL, r, n, d, GMP_DIV_TRUNC);
 8004702:	2302      	movs	r3, #2
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2000      	movs	r0, #0
 8004708:	9905      	ldr	r1, [sp, #20]
 800470a:	9a04      	ldr	r2, [sp, #16]
 800470c:	9b03      	ldr	r3, [sp, #12]
 800470e:	f7ff fe49 	bl	80043a4 <mpz_div_qr>
}
 8004712:	b007      	add	sp, #28
 8004714:	f85d fb04 	ldr.w	pc, [sp], #4

08004718 <mpz_mod>:

void
mpz_mod (mpz_t r, const mpz_t n, const mpz_t d)
{
 8004718:	b500      	push	{lr}
 800471a:	b087      	sub	sp, #28
 800471c:	9005      	str	r0, [sp, #20]
 800471e:	9104      	str	r1, [sp, #16]
 8004720:	9203      	str	r2, [sp, #12]
  mpz_div_qr (NULL, r, n, d, d->_mp_size >= 0 ? GMP_DIV_FLOOR : GMP_DIV_CEIL);
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	0fdb      	lsrs	r3, r3, #31
 8004728:	b2db      	uxtb	r3, r3
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	2000      	movs	r0, #0
 800472e:	9905      	ldr	r1, [sp, #20]
 8004730:	9a04      	ldr	r2, [sp, #16]
 8004732:	9b03      	ldr	r3, [sp, #12]
 8004734:	f7ff fe36 	bl	80043a4 <mpz_div_qr>
}
 8004738:	b007      	add	sp, #28
 800473a:	f85d fb04 	ldr.w	pc, [sp], #4
 800473e:	bf00      	nop

08004740 <mpz_div_q_2exp>:

static void
mpz_div_q_2exp (mpz_t q, const mpz_t u, mp_bitcnt_t bit_index,
		enum mpz_div_round_mode mode)
{
 8004740:	b500      	push	{lr}
 8004742:	b08b      	sub	sp, #44	; 0x2c
 8004744:	9003      	str	r0, [sp, #12]
 8004746:	9102      	str	r1, [sp, #8]
 8004748:	9201      	str	r2, [sp, #4]
 800474a:	f88d 3003 	strb.w	r3, [sp, #3]
  mp_size_t un, qn;
  mp_size_t limb_cnt;
  mp_ptr qp;
  int adjust;

  un = u->_mp_size;
 800474e:	9b02      	ldr	r3, [sp, #8]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	9307      	str	r3, [sp, #28]
  if (un == 0)
 8004754:	9b07      	ldr	r3, [sp, #28]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <mpz_div_q_2exp+0x22>
    {
      q->_mp_size = 0;
 800475a:	9b03      	ldr	r3, [sp, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]
      return;
 8004760:	e088      	b.n	8004874 <mpz_div_q_2exp+0x134>
    }
  limb_cnt = bit_index / GMP_LIMB_BITS;
 8004762:	9b01      	ldr	r3, [sp, #4]
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	9306      	str	r3, [sp, #24]
  qn = GMP_ABS (un) - limb_cnt;
 8004768:	9b07      	ldr	r3, [sp, #28]
 800476a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800476e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004772:	9b06      	ldr	r3, [sp, #24]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	9309      	str	r3, [sp, #36]	; 0x24
  bit_index %= GMP_LIMB_BITS;
 8004778:	9b01      	ldr	r3, [sp, #4]
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	9301      	str	r3, [sp, #4]

  if (mode == ((un > 0) ? GMP_DIV_CEIL : GMP_DIV_FLOOR)) /* un != 0 here. */
 8004780:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004784:	9b07      	ldr	r3, [sp, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	bfd4      	ite	le
 800478a:	2300      	movle	r3, #0
 800478c:	2301      	movgt	r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	429a      	cmp	r2, r3
 8004792:	d11e      	bne.n	80047d2 <mpz_div_q_2exp+0x92>
    /* Note: Below, the final indexing at limb_cnt is valid because at
       that point we have qn > 0. */
    adjust = (qn <= 0
	      || !mpn_zero_p (u->_mp_d, limb_cnt)
	      || (u->_mp_d[limb_cnt]
 8004794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004796:	2b00      	cmp	r3, #0
 8004798:	dd16      	ble.n	80047c8 <mpz_div_q_2exp+0x88>

  if (mode == ((un > 0) ? GMP_DIV_CEIL : GMP_DIV_FLOOR)) /* un != 0 here. */
    /* Note: Below, the final indexing at limb_cnt is valid because at
       that point we have qn > 0. */
    adjust = (qn <= 0
	      || !mpn_zero_p (u->_mp_d, limb_cnt)
 800479a:	9b02      	ldr	r3, [sp, #8]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4618      	mov	r0, r3
 80047a0:	9906      	ldr	r1, [sp, #24]
 80047a2:	f7fc faaf 	bl	8000d04 <mpn_normalized_size>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10d      	bne.n	80047c8 <mpz_div_q_2exp+0x88>
	      || (u->_mp_d[limb_cnt]
 80047ac:	9b02      	ldr	r3, [sp, #8]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	9b06      	ldr	r3, [sp, #24]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	681a      	ldr	r2, [r3, #0]
		  & (((mp_limb_t) 1 << bit_index) - 1)));
 80047b8:	9b01      	ldr	r3, [sp, #4]
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	4013      	ands	r3, r2
  if (mode == ((un > 0) ? GMP_DIV_CEIL : GMP_DIV_FLOOR)) /* un != 0 here. */
    /* Note: Below, the final indexing at limb_cnt is valid because at
       that point we have qn > 0. */
    adjust = (qn <= 0
	      || !mpn_zero_p (u->_mp_d, limb_cnt)
	      || (u->_mp_d[limb_cnt]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <mpz_div_q_2exp+0x8c>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <mpz_div_q_2exp+0x8e>
 80047cc:	2300      	movs	r3, #0
  bit_index %= GMP_LIMB_BITS;

  if (mode == ((un > 0) ? GMP_DIV_CEIL : GMP_DIV_FLOOR)) /* un != 0 here. */
    /* Note: Below, the final indexing at limb_cnt is valid because at
       that point we have qn > 0. */
    adjust = (qn <= 0
 80047ce:	9308      	str	r3, [sp, #32]
 80047d0:	e001      	b.n	80047d6 <mpz_div_q_2exp+0x96>
	      || !mpn_zero_p (u->_mp_d, limb_cnt)
	      || (u->_mp_d[limb_cnt]
		  & (((mp_limb_t) 1 << bit_index) - 1)));
  else
    adjust = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	9308      	str	r3, [sp, #32]

  if (qn <= 0)
 80047d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dc02      	bgt.n	80047e2 <mpz_div_q_2exp+0xa2>
    qn = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	9309      	str	r3, [sp, #36]	; 0x24
 80047e0:	e036      	b.n	8004850 <mpz_div_q_2exp+0x110>

  else
    {
      qp = MPZ_REALLOC (q, qn);
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e8:	429a      	cmp	r2, r3
 80047ea:	da05      	bge.n	80047f8 <mpz_div_q_2exp+0xb8>
 80047ec:	9803      	ldr	r0, [sp, #12]
 80047ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047f0:	f7fe fc8c 	bl	800310c <mpz_realloc>
 80047f4:	4603      	mov	r3, r0
 80047f6:	e001      	b.n	80047fc <mpz_div_q_2exp+0xbc>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	9305      	str	r3, [sp, #20]

      if (bit_index != 0)
 80047fe:	9b01      	ldr	r3, [sp, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01b      	beq.n	800483c <mpz_div_q_2exp+0xfc>
	{
	  mpn_rshift (qp, u->_mp_d + limb_cnt, qn, bit_index);
 8004804:	9b02      	ldr	r3, [sp, #8]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	9b06      	ldr	r3, [sp, #24]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	9805      	ldr	r0, [sp, #20]
 8004810:	4619      	mov	r1, r3
 8004812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004814:	9b01      	ldr	r3, [sp, #4]
 8004816:	f7fc fecb 	bl	80015b0 <mpn_rshift>
	  qn -= qp[qn - 1] == 0;
 800481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004820:	3b01      	subs	r3, #1
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	9a05      	ldr	r2, [sp, #20]
 8004826:	4413      	add	r3, r2
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2300      	movne	r3, #0
 8004830:	2301      	moveq	r3, #1
 8004832:	b2db      	uxtb	r3, r3
 8004834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	9309      	str	r3, [sp, #36]	; 0x24
 800483a:	e009      	b.n	8004850 <mpz_div_q_2exp+0x110>
	}
      else
	{
	  mpn_copyi (qp, u->_mp_d + limb_cnt, qn);
 800483c:	9b02      	ldr	r3, [sp, #8]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	9b06      	ldr	r3, [sp, #24]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	9805      	ldr	r0, [sp, #20]
 8004848:	4619      	mov	r1, r3
 800484a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800484c:	f7fc f9e0 	bl	8000c10 <mpn_copyi>
	}
    }

  q->_mp_size = qn;
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004854:	605a      	str	r2, [r3, #4]

  if (adjust)
 8004856:	9b08      	ldr	r3, [sp, #32]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <mpz_div_q_2exp+0x126>
    mpz_add_ui (q, q, 1);
 800485c:	9803      	ldr	r0, [sp, #12]
 800485e:	9903      	ldr	r1, [sp, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f7ff fa57 	bl	8003d14 <mpz_add_ui>
  if (un < 0)
 8004866:	9b07      	ldr	r3, [sp, #28]
 8004868:	2b00      	cmp	r3, #0
 800486a:	da03      	bge.n	8004874 <mpz_div_q_2exp+0x134>
    mpz_neg (q, q);
 800486c:	9803      	ldr	r0, [sp, #12]
 800486e:	9903      	ldr	r1, [sp, #12]
 8004870:	f7ff f976 	bl	8003b60 <mpz_neg>
}
 8004874:	b00b      	add	sp, #44	; 0x2c
 8004876:	f85d fb04 	ldr.w	pc, [sp], #4
 800487a:	bf00      	nop

0800487c <mpz_div_r_2exp>:

static void
mpz_div_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t bit_index,
		enum mpz_div_round_mode mode)
{
 800487c:	b500      	push	{lr}
 800487e:	b08f      	sub	sp, #60	; 0x3c
 8004880:	9003      	str	r0, [sp, #12]
 8004882:	9102      	str	r1, [sp, #8]
 8004884:	9201      	str	r2, [sp, #4]
 8004886:	f88d 3003 	strb.w	r3, [sp, #3]
  mp_size_t us, un, rn;
  mp_ptr rp;
  mp_limb_t mask;

  us = u->_mp_size;
 800488a:	9b02      	ldr	r3, [sp, #8]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	930d      	str	r3, [sp, #52]	; 0x34
  if (us == 0 || bit_index == 0)
 8004890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <mpz_div_r_2exp+0x20>
 8004896:	9b01      	ldr	r3, [sp, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <mpz_div_r_2exp+0x28>
    {
      r->_mp_size = 0;
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	605a      	str	r2, [r3, #4]
      return;
 80048a2:	e122      	b.n	8004aea <mpz_div_r_2exp+0x26e>
    }
  rn = (bit_index + GMP_LIMB_BITS - 1) / GMP_LIMB_BITS;
 80048a4:	9b01      	ldr	r3, [sp, #4]
 80048a6:	331f      	adds	r3, #31
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	930c      	str	r3, [sp, #48]	; 0x30
  assert (rn > 0);
 80048ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dc0f      	bgt.n	80048d2 <mpz_div_r_2exp+0x56>
 80048b2:	f243 7064 	movw	r0, #14180	; 0x3764
 80048b6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80048ba:	f640 1145 	movw	r1, #2373	; 0x945
 80048be:	f643 6240 	movw	r2, #15936	; 0x3e40
 80048c2:	f6c0 0201 	movt	r2, #2049	; 0x801
 80048c6:	f643 13c8 	movw	r3, #14792	; 0x39c8
 80048ca:	f6c0 0301 	movt	r3, #2049	; 0x801
 80048ce:	f008 ff27 	bl	800d720 <__assert_func>

  rp = MPZ_REALLOC (r, rn);
 80048d2:	9b03      	ldr	r3, [sp, #12]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048d8:	429a      	cmp	r2, r3
 80048da:	da05      	bge.n	80048e8 <mpz_div_r_2exp+0x6c>
 80048dc:	9803      	ldr	r0, [sp, #12]
 80048de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048e0:	f7fe fc14 	bl	800310c <mpz_realloc>
 80048e4:	4603      	mov	r3, r0
 80048e6:	e001      	b.n	80048ec <mpz_div_r_2exp+0x70>
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	9308      	str	r3, [sp, #32]
  un = GMP_ABS (us);
 80048ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bfb8      	it	lt
 80048f4:	425b      	neglt	r3, r3
 80048f6:	9307      	str	r3, [sp, #28]

  mask = GMP_LIMB_MAX >> (rn * GMP_LIMB_BITS - bit_index);
 80048f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	9b01      	ldr	r3, [sp, #4]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	9306      	str	r3, [sp, #24]

  if (rn > un)
 800490a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	429a      	cmp	r2, r3
 8004910:	dd6b      	ble.n	80049ea <mpz_div_r_2exp+0x16e>
    {
      /* Quotient (with truncation) is zero, and remainder is
	 non-zero */
      if (mode == ((us > 0) ? GMP_DIV_CEIL : GMP_DIV_FLOOR)) /* us != 0 here. */
 8004912:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004918:	2b00      	cmp	r3, #0
 800491a:	bfd4      	ite	le
 800491c:	2300      	movle	r3, #0
 800491e:	2301      	movgt	r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	429a      	cmp	r2, r3
 8004924:	d153      	bne.n	80049ce <mpz_div_r_2exp+0x152>
	{
	  /* Have to negate and sign extend. */
	  mp_size_t i;
	  mp_limb_t cy;

	  for (cy = 1, i = 0; i < un; i++)
 8004926:	2301      	movs	r3, #1
 8004928:	930a      	str	r3, [sp, #40]	; 0x28
 800492a:	2300      	movs	r3, #0
 800492c:	930b      	str	r3, [sp, #44]	; 0x2c
 800492e:	e01a      	b.n	8004966 <mpz_div_r_2exp+0xea>
	    {
	      mp_limb_t s = ~u->_mp_d[i] + cy;
 8004930:	9b02      	ldr	r3, [sp, #8]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	9305      	str	r3, [sp, #20]
	      cy = s < cy;
 8004944:	9a05      	ldr	r2, [sp, #20]
 8004946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004948:	429a      	cmp	r2, r3
 800494a:	bf2c      	ite	cs
 800494c:	2300      	movcs	r3, #0
 800494e:	2301      	movcc	r3, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	930a      	str	r3, [sp, #40]	; 0x28
	      rp[i] = s;
 8004954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	9a08      	ldr	r2, [sp, #32]
 800495a:	4413      	add	r3, r2
 800495c:	9a05      	ldr	r2, [sp, #20]
 800495e:	601a      	str	r2, [r3, #0]
	{
	  /* Have to negate and sign extend. */
	  mp_size_t i;
	  mp_limb_t cy;

	  for (cy = 1, i = 0; i < un; i++)
 8004960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004962:	3301      	adds	r3, #1
 8004964:	930b      	str	r3, [sp, #44]	; 0x2c
 8004966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004968:	9b07      	ldr	r3, [sp, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	dbe0      	blt.n	8004930 <mpz_div_r_2exp+0xb4>
	    {
	      mp_limb_t s = ~u->_mp_d[i] + cy;
	      cy = s < cy;
	      rp[i] = s;
	    }
	  assert (cy == 0);
 800496e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00f      	beq.n	8004994 <mpz_div_r_2exp+0x118>
 8004974:	f243 7064 	movw	r0, #14180	; 0x3764
 8004978:	f6c0 0001 	movt	r0, #2049	; 0x801
 800497c:	f640 115c 	movw	r1, #2396	; 0x95c
 8004980:	f643 6240 	movw	r2, #15936	; 0x3e40
 8004984:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004988:	f643 13d0 	movw	r3, #14800	; 0x39d0
 800498c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8004990:	f008 fec6 	bl	800d720 <__assert_func>
	  for (; i < rn - 1; i++)
 8004994:	e009      	b.n	80049aa <mpz_div_r_2exp+0x12e>
	    rp[i] = GMP_LIMB_MAX;
 8004996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	9a08      	ldr	r2, [sp, #32]
 800499c:	4413      	add	r3, r2
 800499e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a2:	601a      	str	r2, [r3, #0]
	      mp_limb_t s = ~u->_mp_d[i] + cy;
	      cy = s < cy;
	      rp[i] = s;
	    }
	  assert (cy == 0);
	  for (; i < rn - 1; i++)
 80049a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049a6:	3301      	adds	r3, #1
 80049a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80049aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049b0:	429a      	cmp	r2, r3
 80049b2:	dcf0      	bgt.n	8004996 <mpz_div_r_2exp+0x11a>
	    rp[i] = GMP_LIMB_MAX;

	  rp[rn-1] = mask;
 80049b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049ba:	3b01      	subs	r3, #1
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	9a08      	ldr	r2, [sp, #32]
 80049c0:	4413      	add	r3, r2
 80049c2:	9a06      	ldr	r2, [sp, #24]
 80049c4:	601a      	str	r2, [r3, #0]
	  us = -us;
 80049c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c8:	425b      	negs	r3, r3
 80049ca:	930d      	str	r3, [sp, #52]	; 0x34
 80049cc:	e07f      	b.n	8004ace <mpz_div_r_2exp+0x252>
	}
      else
	{
	  /* Just copy */
	  if (r != u)
 80049ce:	9a03      	ldr	r2, [sp, #12]
 80049d0:	9b02      	ldr	r3, [sp, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d006      	beq.n	80049e4 <mpz_div_r_2exp+0x168>
	    mpn_copyi (rp, u->_mp_d, un);
 80049d6:	9b02      	ldr	r3, [sp, #8]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	9808      	ldr	r0, [sp, #32]
 80049dc:	4619      	mov	r1, r3
 80049de:	9a07      	ldr	r2, [sp, #28]
 80049e0:	f7fc f916 	bl	8000c10 <mpn_copyi>

	  rn = un;
 80049e4:	9b07      	ldr	r3, [sp, #28]
 80049e6:	930c      	str	r3, [sp, #48]	; 0x30
 80049e8:	e071      	b.n	8004ace <mpz_div_r_2exp+0x252>
	}
    }
  else
    {
      if (r != u)
 80049ea:	9a03      	ldr	r2, [sp, #12]
 80049ec:	9b02      	ldr	r3, [sp, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d008      	beq.n	8004a04 <mpz_div_r_2exp+0x188>
	mpn_copyi (rp, u->_mp_d, rn - 1);
 80049f2:	9b02      	ldr	r3, [sp, #8]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049f8:	3b01      	subs	r3, #1
 80049fa:	9808      	ldr	r0, [sp, #32]
 80049fc:	4611      	mov	r1, r2
 80049fe:	461a      	mov	r2, r3
 8004a00:	f7fc f906 	bl	8000c10 <mpn_copyi>

      rp[rn-1] = u->_mp_d[rn-1] & mask;
 8004a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	9a08      	ldr	r2, [sp, #32]
 8004a10:	441a      	add	r2, r3
 8004a12:	9b02      	ldr	r3, [sp, #8]
 8004a14:	6899      	ldr	r1, [r3, #8]
 8004a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	9b06      	ldr	r3, [sp, #24]
 8004a26:	400b      	ands	r3, r1
 8004a28:	6013      	str	r3, [r2, #0]

      if (mode == ((us > 0) ? GMP_DIV_CEIL : GMP_DIV_FLOOR)) /* us != 0 here. */
 8004a2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bfd4      	ite	le
 8004a34:	2300      	movle	r3, #0
 8004a36:	2301      	movgt	r3, #1
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d147      	bne.n	8004ace <mpz_div_r_2exp+0x252>
	{
	  /* If r != 0, compute 2^{bit_count} - r. */
	  mp_size_t i;

	  for (i = 0; i < rn && rp[i] == 0; i++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9309      	str	r3, [sp, #36]	; 0x24
 8004a42:	e002      	b.n	8004a4a <mpz_div_r_2exp+0x1ce>
 8004a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a46:	3301      	adds	r3, #1
 8004a48:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	da06      	bge.n	8004a60 <mpz_div_r_2exp+0x1e4>
 8004a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	9a08      	ldr	r2, [sp, #32]
 8004a58:	4413      	add	r3, r2
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f1      	beq.n	8004a44 <mpz_div_r_2exp+0x1c8>
	    ;
	  if (i < rn)
 8004a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a64:	429a      	cmp	r2, r3
 8004a66:	da32      	bge.n	8004ace <mpz_div_r_2exp+0x252>
	    {
	      /* r > 0, need to flip sign. */
	      rp[i] = ~rp[i] + 1;
 8004a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	9a08      	ldr	r2, [sp, #32]
 8004a6e:	4413      	add	r3, r2
 8004a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	9908      	ldr	r1, [sp, #32]
 8004a76:	440a      	add	r2, r1
 8004a78:	6812      	ldr	r2, [r2, #0]
 8004a7a:	4252      	negs	r2, r2
 8004a7c:	601a      	str	r2, [r3, #0]
	      while (++i < rn)
 8004a7e:	e00a      	b.n	8004a96 <mpz_div_r_2exp+0x21a>
		rp[i] = ~rp[i];
 8004a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	9a08      	ldr	r2, [sp, #32]
 8004a86:	4413      	add	r3, r2
 8004a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a8a:	0092      	lsls	r2, r2, #2
 8004a8c:	9908      	ldr	r1, [sp, #32]
 8004a8e:	440a      	add	r2, r1
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	43d2      	mvns	r2, r2
 8004a94:	601a      	str	r2, [r3, #0]
	    ;
	  if (i < rn)
	    {
	      /* r > 0, need to flip sign. */
	      rp[i] = ~rp[i] + 1;
	      while (++i < rn)
 8004a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a98:	3301      	adds	r3, #1
 8004a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	dbed      	blt.n	8004a80 <mpz_div_r_2exp+0x204>
		rp[i] = ~rp[i];

	      rp[rn-1] &= mask;
 8004aa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004aa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	9a08      	ldr	r2, [sp, #32]
 8004ab0:	441a      	add	r2, r3
 8004ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	9908      	ldr	r1, [sp, #32]
 8004abe:	440b      	add	r3, r1
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	9b06      	ldr	r3, [sp, #24]
 8004ac4:	400b      	ands	r3, r1
 8004ac6:	6013      	str	r3, [r2, #0]

	      /* us is not used for anything else, so we can modify it
		 here to indicate flipped sign. */
	      us = -us;
 8004ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aca:	425b      	negs	r3, r3
 8004acc:	930d      	str	r3, [sp, #52]	; 0x34
	    }
	}
    }
  rn = mpn_normalized_size (rp, rn);
 8004ace:	9808      	ldr	r0, [sp, #32]
 8004ad0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ad2:	f7fc f917 	bl	8000d04 <mpn_normalized_size>
 8004ad6:	900c      	str	r0, [sp, #48]	; 0x30
  r->_mp_size = us < 0 ? -rn : rn;
 8004ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da02      	bge.n	8004ae4 <mpz_div_r_2exp+0x268>
 8004ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ae0:	425b      	negs	r3, r3
 8004ae2:	e000      	b.n	8004ae6 <mpz_div_r_2exp+0x26a>
 8004ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ae6:	9a03      	ldr	r2, [sp, #12]
 8004ae8:	6053      	str	r3, [r2, #4]
}
 8004aea:	b00f      	add	sp, #60	; 0x3c
 8004aec:	f85d fb04 	ldr.w	pc, [sp], #4

08004af0 <mpz_cdiv_q_2exp>:

void
mpz_cdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8004af0:	b500      	push	{lr}
 8004af2:	b085      	sub	sp, #20
 8004af4:	9003      	str	r0, [sp, #12]
 8004af6:	9102      	str	r1, [sp, #8]
 8004af8:	9201      	str	r2, [sp, #4]
  mpz_div_q_2exp (r, u, cnt, GMP_DIV_CEIL);
 8004afa:	9803      	ldr	r0, [sp, #12]
 8004afc:	9902      	ldr	r1, [sp, #8]
 8004afe:	9a01      	ldr	r2, [sp, #4]
 8004b00:	2301      	movs	r3, #1
 8004b02:	f7ff fe1d 	bl	8004740 <mpz_div_q_2exp>
}
 8004b06:	b005      	add	sp, #20
 8004b08:	f85d fb04 	ldr.w	pc, [sp], #4

08004b0c <mpz_fdiv_q_2exp>:

void
mpz_fdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8004b0c:	b500      	push	{lr}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	9003      	str	r0, [sp, #12]
 8004b12:	9102      	str	r1, [sp, #8]
 8004b14:	9201      	str	r2, [sp, #4]
  mpz_div_q_2exp (r, u, cnt, GMP_DIV_FLOOR);
 8004b16:	9803      	ldr	r0, [sp, #12]
 8004b18:	9902      	ldr	r1, [sp, #8]
 8004b1a:	9a01      	ldr	r2, [sp, #4]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f7ff fe0f 	bl	8004740 <mpz_div_q_2exp>
}
 8004b22:	b005      	add	sp, #20
 8004b24:	f85d fb04 	ldr.w	pc, [sp], #4

08004b28 <mpz_tdiv_q_2exp>:

void
mpz_tdiv_q_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8004b28:	b500      	push	{lr}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	9003      	str	r0, [sp, #12]
 8004b2e:	9102      	str	r1, [sp, #8]
 8004b30:	9201      	str	r2, [sp, #4]
  mpz_div_q_2exp (r, u, cnt, GMP_DIV_TRUNC);
 8004b32:	9803      	ldr	r0, [sp, #12]
 8004b34:	9902      	ldr	r1, [sp, #8]
 8004b36:	9a01      	ldr	r2, [sp, #4]
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f7ff fe01 	bl	8004740 <mpz_div_q_2exp>
}
 8004b3e:	b005      	add	sp, #20
 8004b40:	f85d fb04 	ldr.w	pc, [sp], #4

08004b44 <mpz_cdiv_r_2exp>:

void
mpz_cdiv_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8004b44:	b500      	push	{lr}
 8004b46:	b085      	sub	sp, #20
 8004b48:	9003      	str	r0, [sp, #12]
 8004b4a:	9102      	str	r1, [sp, #8]
 8004b4c:	9201      	str	r2, [sp, #4]
  mpz_div_r_2exp (r, u, cnt, GMP_DIV_CEIL);
 8004b4e:	9803      	ldr	r0, [sp, #12]
 8004b50:	9902      	ldr	r1, [sp, #8]
 8004b52:	9a01      	ldr	r2, [sp, #4]
 8004b54:	2301      	movs	r3, #1
 8004b56:	f7ff fe91 	bl	800487c <mpz_div_r_2exp>
}
 8004b5a:	b005      	add	sp, #20
 8004b5c:	f85d fb04 	ldr.w	pc, [sp], #4

08004b60 <mpz_fdiv_r_2exp>:

void
mpz_fdiv_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8004b60:	b500      	push	{lr}
 8004b62:	b085      	sub	sp, #20
 8004b64:	9003      	str	r0, [sp, #12]
 8004b66:	9102      	str	r1, [sp, #8]
 8004b68:	9201      	str	r2, [sp, #4]
  mpz_div_r_2exp (r, u, cnt, GMP_DIV_FLOOR);
 8004b6a:	9803      	ldr	r0, [sp, #12]
 8004b6c:	9902      	ldr	r1, [sp, #8]
 8004b6e:	9a01      	ldr	r2, [sp, #4]
 8004b70:	2300      	movs	r3, #0
 8004b72:	f7ff fe83 	bl	800487c <mpz_div_r_2exp>
}
 8004b76:	b005      	add	sp, #20
 8004b78:	f85d fb04 	ldr.w	pc, [sp], #4

08004b7c <mpz_tdiv_r_2exp>:

void
mpz_tdiv_r_2exp (mpz_t r, const mpz_t u, mp_bitcnt_t cnt)
{
 8004b7c:	b500      	push	{lr}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	9003      	str	r0, [sp, #12]
 8004b82:	9102      	str	r1, [sp, #8]
 8004b84:	9201      	str	r2, [sp, #4]
  mpz_div_r_2exp (r, u, cnt, GMP_DIV_TRUNC);
 8004b86:	9803      	ldr	r0, [sp, #12]
 8004b88:	9902      	ldr	r1, [sp, #8]
 8004b8a:	9a01      	ldr	r2, [sp, #4]
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f7ff fe75 	bl	800487c <mpz_div_r_2exp>
}
 8004b92:	b005      	add	sp, #20
 8004b94:	f85d fb04 	ldr.w	pc, [sp], #4

08004b98 <mpz_divexact>:

void
mpz_divexact (mpz_t q, const mpz_t n, const mpz_t d)
{
 8004b98:	b500      	push	{lr}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	9005      	str	r0, [sp, #20]
 8004b9e:	9104      	str	r1, [sp, #16]
 8004ba0:	9203      	str	r2, [sp, #12]
  gmp_assert_nocarry (mpz_div_qr (q, NULL, n, d, GMP_DIV_TRUNC));
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	9805      	ldr	r0, [sp, #20]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	9a04      	ldr	r2, [sp, #16]
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	f7ff fbf9 	bl	80043a4 <mpz_div_qr>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	9307      	str	r3, [sp, #28]
 8004bb6:	9b07      	ldr	r3, [sp, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00f      	beq.n	8004bdc <mpz_divexact+0x44>
 8004bbc:	f243 7064 	movw	r0, #14180	; 0x3764
 8004bc0:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004bc4:	f640 11b4 	movw	r1, #2484	; 0x9b4
 8004bc8:	f643 6250 	movw	r2, #15952	; 0x3e50
 8004bcc:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004bd0:	f643 1344 	movw	r3, #14660	; 0x3944
 8004bd4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8004bd8:	f008 fda2 	bl	800d720 <__assert_func>
}
 8004bdc:	b009      	add	sp, #36	; 0x24
 8004bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8004be2:	bf00      	nop

08004be4 <mpz_divisible_p>:

int
mpz_divisible_p (const mpz_t n, const mpz_t d)
{
 8004be4:	b500      	push	{lr}
 8004be6:	b085      	sub	sp, #20
 8004be8:	9003      	str	r0, [sp, #12]
 8004bea:	9102      	str	r1, [sp, #8]
  return mpz_div_qr (NULL, NULL, n, d, GMP_DIV_TRUNC) == 0;
 8004bec:	2302      	movs	r3, #2
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	9a03      	ldr	r2, [sp, #12]
 8004bf6:	9b02      	ldr	r3, [sp, #8]
 8004bf8:	f7ff fbd4 	bl	80043a4 <mpz_div_qr>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2300      	movne	r3, #0
 8004c04:	2301      	moveq	r3, #1
 8004c06:	b2db      	uxtb	r3, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	b005      	add	sp, #20
 8004c0c:	f85d fb04 	ldr.w	pc, [sp], #4

08004c10 <mpz_congruent_p>:

int
mpz_congruent_p (const mpz_t a, const mpz_t b, const mpz_t m)
{
 8004c10:	b500      	push	{lr}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	9003      	str	r0, [sp, #12]
 8004c16:	9102      	str	r1, [sp, #8]
 8004c18:	9201      	str	r2, [sp, #4]
  mpz_t t;
  int res;

  /* a == b (mod 0) iff a == b */
  if (mpz_sgn (m) == 0)
 8004c1a:	9801      	ldr	r0, [sp, #4]
 8004c1c:	f7fe fe96 	bl	800394c <mpz_sgn>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <mpz_congruent_p+0x2c>
    return (mpz_cmp (a, b) == 0);
 8004c26:	9803      	ldr	r0, [sp, #12]
 8004c28:	9902      	ldr	r1, [sp, #8]
 8004c2a:	f7fe ff07 	bl	8003a3c <mpz_cmp>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2300      	movne	r3, #0
 8004c36:	2301      	moveq	r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e014      	b.n	8004c66 <mpz_congruent_p+0x56>

  mpz_init (t);
 8004c3c:	ab04      	add	r3, sp, #16
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fa22 	bl	8003088 <mpz_init>
  mpz_sub (t, a, b);
 8004c44:	ab04      	add	r3, sp, #16
 8004c46:	4618      	mov	r0, r3
 8004c48:	9903      	ldr	r1, [sp, #12]
 8004c4a:	9a02      	ldr	r2, [sp, #8]
 8004c4c:	f7ff f9bc 	bl	8003fc8 <mpz_sub>
  res = mpz_divisible_p (t, m);
 8004c50:	ab04      	add	r3, sp, #16
 8004c52:	4618      	mov	r0, r3
 8004c54:	9901      	ldr	r1, [sp, #4]
 8004c56:	f7ff ffc5 	bl	8004be4 <mpz_divisible_p>
 8004c5a:	9007      	str	r0, [sp, #28]
  mpz_clear (t);
 8004c5c:	ab04      	add	r3, sp, #16
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fa44 	bl	80030ec <mpz_clear>

  return res;
 8004c64:	9b07      	ldr	r3, [sp, #28]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	b009      	add	sp, #36	; 0x24
 8004c6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c6e:	bf00      	nop

08004c70 <mpz_div_qr_ui>:

static unsigned long
mpz_div_qr_ui (mpz_t q, mpz_t r,
	       const mpz_t n, unsigned long d, enum mpz_div_round_mode mode)
{
 8004c70:	b500      	push	{lr}
 8004c72:	b08b      	sub	sp, #44	; 0x2c
 8004c74:	9003      	str	r0, [sp, #12]
 8004c76:	9102      	str	r1, [sp, #8]
 8004c78:	9201      	str	r2, [sp, #4]
 8004c7a:	9300      	str	r3, [sp, #0]
  mp_size_t ns, qn;
  mp_ptr qp;
  mp_limb_t rl;
  mp_size_t rs;

  ns = n->_mp_size;
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	9306      	str	r3, [sp, #24]
  if (ns == 0)
 8004c82:	9b06      	ldr	r3, [sp, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10d      	bne.n	8004ca4 <mpz_div_qr_ui+0x34>
    {
      if (q)
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <mpz_div_qr_ui+0x24>
	q->_mp_size = 0;
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	605a      	str	r2, [r3, #4]
      if (r)
 8004c94:	9b02      	ldr	r3, [sp, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <mpz_div_qr_ui+0x30>
	r->_mp_size = 0;
 8004c9a:	9b02      	ldr	r3, [sp, #8]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	605a      	str	r2, [r3, #4]
      return 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e0bd      	b.n	8004e20 <mpz_div_qr_ui+0x1b0>
    }

  qn = GMP_ABS (ns);
 8004ca4:	9b06      	ldr	r3, [sp, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bfb8      	it	lt
 8004caa:	425b      	neglt	r3, r3
 8004cac:	9305      	str	r3, [sp, #20]
  if (q)
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00e      	beq.n	8004cd2 <mpz_div_qr_ui+0x62>
    qp = MPZ_REALLOC (q, qn);
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	9b05      	ldr	r3, [sp, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	da05      	bge.n	8004cca <mpz_div_qr_ui+0x5a>
 8004cbe:	9803      	ldr	r0, [sp, #12]
 8004cc0:	9905      	ldr	r1, [sp, #20]
 8004cc2:	f7fe fa23 	bl	800310c <mpz_realloc>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	e001      	b.n	8004cce <mpz_div_qr_ui+0x5e>
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd0:	e001      	b.n	8004cd6 <mpz_div_qr_ui+0x66>
  else
    qp = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9309      	str	r3, [sp, #36]	; 0x24

  rl = mpn_div_qr_1 (qp, n->_mp_d, qn, d);
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cdc:	4619      	mov	r1, r3
 8004cde:	9a05      	ldr	r2, [sp, #20]
 8004ce0:	9b00      	ldr	r3, [sp, #0]
 8004ce2:	f7fd f8c7 	bl	8001e74 <mpn_div_qr_1>
 8004ce6:	9008      	str	r0, [sp, #32]
  assert (rl < d);
 8004ce8:	9a08      	ldr	r2, [sp, #32]
 8004cea:	9b00      	ldr	r3, [sp, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d30f      	bcc.n	8004d10 <mpz_div_qr_ui+0xa0>
 8004cf0:	f243 7064 	movw	r0, #14180	; 0x3764
 8004cf4:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004cf8:	f640 11e9 	movw	r1, #2537	; 0x9e9
 8004cfc:	f643 6260 	movw	r2, #15968	; 0x3e60
 8004d00:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004d04:	f643 13d8 	movw	r3, #14808	; 0x39d8
 8004d08:	f6c0 0301 	movt	r3, #2049	; 0x801
 8004d0c:	f008 fd08 	bl	800d720 <__assert_func>

  rs = rl > 0;
 8004d10:	9b08      	ldr	r3, [sp, #32]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf0c      	ite	eq
 8004d16:	2300      	moveq	r3, #0
 8004d18:	2301      	movne	r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	9307      	str	r3, [sp, #28]
  rs = (ns < 0) ? -rs : rs;
 8004d1e:	9b06      	ldr	r3, [sp, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	da02      	bge.n	8004d2a <mpz_div_qr_ui+0xba>
 8004d24:	9b07      	ldr	r3, [sp, #28]
 8004d26:	425b      	negs	r3, r3
 8004d28:	e000      	b.n	8004d2c <mpz_div_qr_ui+0xbc>
 8004d2a:	9b07      	ldr	r3, [sp, #28]
 8004d2c:	9307      	str	r3, [sp, #28]

  if (rl > 0 && ( (mode == GMP_DIV_FLOOR && ns < 0)
 8004d2e:	9b08      	ldr	r3, [sp, #32]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d031      	beq.n	8004d98 <mpz_div_qr_ui+0x128>
 8004d34:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <mpz_div_qr_ui+0xd2>
 8004d3c:	9b06      	ldr	r3, [sp, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db06      	blt.n	8004d50 <mpz_div_qr_ui+0xe0>
		  || (mode == GMP_DIV_CEIL && ns >= 0)))
 8004d42:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d126      	bne.n	8004d98 <mpz_div_qr_ui+0x128>
 8004d4a:	9b06      	ldr	r3, [sp, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	db23      	blt.n	8004d98 <mpz_div_qr_ui+0x128>
    {
      if (q)
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d019      	beq.n	8004d8a <mpz_div_qr_ui+0x11a>
	gmp_assert_nocarry (mpn_add_1 (qp, qp, qn, 1));
 8004d56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d5a:	9a05      	ldr	r2, [sp, #20]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f7fb ffff 	bl	8000d60 <mpn_add_1>
 8004d62:	9004      	str	r0, [sp, #16]
 8004d64:	9b04      	ldr	r3, [sp, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00f      	beq.n	8004d8a <mpz_div_qr_ui+0x11a>
 8004d6a:	f243 7064 	movw	r0, #14180	; 0x3764
 8004d6e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004d72:	f640 11f2 	movw	r1, #2546	; 0x9f2
 8004d76:	f643 6260 	movw	r2, #15968	; 0x3e60
 8004d7a:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004d7e:	f643 1344 	movw	r3, #14660	; 0x3944
 8004d82:	f6c0 0301 	movt	r3, #2049	; 0x801
 8004d86:	f008 fccb 	bl	800d720 <__assert_func>
      rl = d - rl;
 8004d8a:	9a00      	ldr	r2, [sp, #0]
 8004d8c:	9b08      	ldr	r3, [sp, #32]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	9308      	str	r3, [sp, #32]
      rs = -rs;
 8004d92:	9b07      	ldr	r3, [sp, #28]
 8004d94:	425b      	negs	r3, r3
 8004d96:	9307      	str	r3, [sp, #28]
    }

  if (r)
 8004d98:	9b02      	ldr	r3, [sp, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <mpz_div_qr_ui+0x13c>
    {
      r->_mp_d[0] = rl;
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	9a08      	ldr	r2, [sp, #32]
 8004da4:	601a      	str	r2, [r3, #0]
      r->_mp_size = rs;
 8004da6:	9b02      	ldr	r3, [sp, #8]
 8004da8:	9a07      	ldr	r2, [sp, #28]
 8004daa:	605a      	str	r2, [r3, #4]
    }
  if (q)
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d035      	beq.n	8004e1e <mpz_div_qr_ui+0x1ae>
    {
      qn -= (qp[qn-1] == 0);
 8004db2:	9b05      	ldr	r3, [sp, #20]
 8004db4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004db8:	3b01      	subs	r3, #1
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dbe:	4413      	add	r3, r2
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf14      	ite	ne
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	9a05      	ldr	r2, [sp, #20]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	9305      	str	r3, [sp, #20]
      assert (qn == 0 || qp[qn-1] > 0);
 8004dd2:	9b05      	ldr	r3, [sp, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d019      	beq.n	8004e0c <mpz_div_qr_ui+0x19c>
 8004dd8:	9b05      	ldr	r3, [sp, #20]
 8004dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dde:	3b01      	subs	r3, #1
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de4:	4413      	add	r3, r2
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10f      	bne.n	8004e0c <mpz_div_qr_ui+0x19c>
 8004dec:	f243 7064 	movw	r0, #14180	; 0x3764
 8004df0:	f6c0 0001 	movt	r0, #2049	; 0x801
 8004df4:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8004df8:	f643 6260 	movw	r2, #15968	; 0x3e60
 8004dfc:	f6c0 0201 	movt	r2, #2049	; 0x801
 8004e00:	f643 13e0 	movw	r3, #14816	; 0x39e0
 8004e04:	f6c0 0301 	movt	r3, #2049	; 0x801
 8004e08:	f008 fc8a 	bl	800d720 <__assert_func>

      q->_mp_size = (ns < 0) ? - qn : qn;
 8004e0c:	9b06      	ldr	r3, [sp, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da02      	bge.n	8004e18 <mpz_div_qr_ui+0x1a8>
 8004e12:	9b05      	ldr	r3, [sp, #20]
 8004e14:	425b      	negs	r3, r3
 8004e16:	e000      	b.n	8004e1a <mpz_div_qr_ui+0x1aa>
 8004e18:	9b05      	ldr	r3, [sp, #20]
 8004e1a:	9a03      	ldr	r2, [sp, #12]
 8004e1c:	6053      	str	r3, [r2, #4]
    }

  return rl;
 8004e1e:	9b08      	ldr	r3, [sp, #32]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	b00b      	add	sp, #44	; 0x2c
 8004e24:	f85d fb04 	ldr.w	pc, [sp], #4

08004e28 <mpz_cdiv_qr_ui>:

unsigned long
mpz_cdiv_qr_ui (mpz_t q, mpz_t r, const mpz_t n, unsigned long d)
{
 8004e28:	b500      	push	{lr}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	9005      	str	r0, [sp, #20]
 8004e2e:	9104      	str	r1, [sp, #16]
 8004e30:	9203      	str	r2, [sp, #12]
 8004e32:	9302      	str	r3, [sp, #8]
  return mpz_div_qr_ui (q, r, n, d, GMP_DIV_CEIL);
 8004e34:	2301      	movs	r3, #1
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	9805      	ldr	r0, [sp, #20]
 8004e3a:	9904      	ldr	r1, [sp, #16]
 8004e3c:	9a03      	ldr	r2, [sp, #12]
 8004e3e:	9b02      	ldr	r3, [sp, #8]
 8004e40:	f7ff ff16 	bl	8004c70 <mpz_div_qr_ui>
 8004e44:	4603      	mov	r3, r0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	b007      	add	sp, #28
 8004e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e4e:	bf00      	nop

08004e50 <mpz_fdiv_qr_ui>:

unsigned long
mpz_fdiv_qr_ui (mpz_t q, mpz_t r, const mpz_t n, unsigned long d)
{
 8004e50:	b500      	push	{lr}
 8004e52:	b087      	sub	sp, #28
 8004e54:	9005      	str	r0, [sp, #20]
 8004e56:	9104      	str	r1, [sp, #16]
 8004e58:	9203      	str	r2, [sp, #12]
 8004e5a:	9302      	str	r3, [sp, #8]
  return mpz_div_qr_ui (q, r, n, d, GMP_DIV_FLOOR);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	9805      	ldr	r0, [sp, #20]
 8004e62:	9904      	ldr	r1, [sp, #16]
 8004e64:	9a03      	ldr	r2, [sp, #12]
 8004e66:	9b02      	ldr	r3, [sp, #8]
 8004e68:	f7ff ff02 	bl	8004c70 <mpz_div_qr_ui>
 8004e6c:	4603      	mov	r3, r0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	b007      	add	sp, #28
 8004e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e76:	bf00      	nop

08004e78 <mpz_tdiv_qr_ui>:

unsigned long
mpz_tdiv_qr_ui (mpz_t q, mpz_t r, const mpz_t n, unsigned long d)
{
 8004e78:	b500      	push	{lr}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	9005      	str	r0, [sp, #20]
 8004e7e:	9104      	str	r1, [sp, #16]
 8004e80:	9203      	str	r2, [sp, #12]
 8004e82:	9302      	str	r3, [sp, #8]
  return mpz_div_qr_ui (q, r, n, d, GMP_DIV_TRUNC);
 8004e84:	2302      	movs	r3, #2
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	9805      	ldr	r0, [sp, #20]
 8004e8a:	9904      	ldr	r1, [sp, #16]
 8004e8c:	9a03      	ldr	r2, [sp, #12]
 8004e8e:	9b02      	ldr	r3, [sp, #8]
 8004e90:	f7ff feee 	bl	8004c70 <mpz_div_qr_ui>
 8004e94:	4603      	mov	r3, r0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	b007      	add	sp, #28
 8004e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e9e:	bf00      	nop

08004ea0 <mpz_cdiv_q_ui>:

unsigned long
mpz_cdiv_q_ui (mpz_t q, const mpz_t n, unsigned long d)
{
 8004ea0:	b500      	push	{lr}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	9005      	str	r0, [sp, #20]
 8004ea6:	9104      	str	r1, [sp, #16]
 8004ea8:	9203      	str	r2, [sp, #12]
  return mpz_div_qr_ui (q, NULL, n, d, GMP_DIV_CEIL);
 8004eaa:	2301      	movs	r3, #1
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	9805      	ldr	r0, [sp, #20]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	9a04      	ldr	r2, [sp, #16]
 8004eb4:	9b03      	ldr	r3, [sp, #12]
 8004eb6:	f7ff fedb 	bl	8004c70 <mpz_div_qr_ui>
 8004eba:	4603      	mov	r3, r0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	b007      	add	sp, #28
 8004ec0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ec4 <mpz_fdiv_q_ui>:

unsigned long
mpz_fdiv_q_ui (mpz_t q, const mpz_t n, unsigned long d)
{
 8004ec4:	b500      	push	{lr}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	9005      	str	r0, [sp, #20]
 8004eca:	9104      	str	r1, [sp, #16]
 8004ecc:	9203      	str	r2, [sp, #12]
  return mpz_div_qr_ui (q, NULL, n, d, GMP_DIV_FLOOR);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	9805      	ldr	r0, [sp, #20]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	9a04      	ldr	r2, [sp, #16]
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	f7ff fec9 	bl	8004c70 <mpz_div_qr_ui>
 8004ede:	4603      	mov	r3, r0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	b007      	add	sp, #28
 8004ee4:	f85d fb04 	ldr.w	pc, [sp], #4

08004ee8 <mpz_tdiv_q_ui>:

unsigned long
mpz_tdiv_q_ui (mpz_t q, const mpz_t n, unsigned long d)
{
 8004ee8:	b500      	push	{lr}
 8004eea:	b087      	sub	sp, #28
 8004eec:	9005      	str	r0, [sp, #20]
 8004eee:	9104      	str	r1, [sp, #16]
 8004ef0:	9203      	str	r2, [sp, #12]
  return mpz_div_qr_ui (q, NULL, n, d, GMP_DIV_TRUNC);
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	9805      	ldr	r0, [sp, #20]
 8004ef8:	2100      	movs	r1, #0
 8004efa:	9a04      	ldr	r2, [sp, #16]
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	f7ff feb7 	bl	8004c70 <mpz_div_qr_ui>
 8004f02:	4603      	mov	r3, r0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	b007      	add	sp, #28
 8004f08:	f85d fb04 	ldr.w	pc, [sp], #4

08004f0c <mpz_cdiv_r_ui>:

unsigned long
mpz_cdiv_r_ui (mpz_t r, const mpz_t n, unsigned long d)
{
 8004f0c:	b500      	push	{lr}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	9005      	str	r0, [sp, #20]
 8004f12:	9104      	str	r1, [sp, #16]
 8004f14:	9203      	str	r2, [sp, #12]
  return mpz_div_qr_ui (NULL, r, n, d, GMP_DIV_CEIL);
 8004f16:	2301      	movs	r3, #1
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	9905      	ldr	r1, [sp, #20]
 8004f1e:	9a04      	ldr	r2, [sp, #16]
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	f7ff fea5 	bl	8004c70 <mpz_div_qr_ui>
 8004f26:	4603      	mov	r3, r0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	b007      	add	sp, #28
 8004f2c:	f85d fb04 	ldr.w	pc, [sp], #4

08004f30 <mpz_fdiv_r_ui>:
unsigned long
mpz_fdiv_r_ui (mpz_t r, const mpz_t n, unsigned long d)
{
 8004f30:	b500      	push	{lr}
 8004f32:	b087      	sub	sp, #28
 8004f34:	9005      	str	r0, [sp, #20]
 8004f36:	9104      	str	r1, [sp, #16]
 8004f38:	9203      	str	r2, [sp, #12]
  return mpz_div_qr_ui (NULL, r, n, d, GMP_DIV_FLOOR);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2000      	movs	r0, #0
 8004f40:	9905      	ldr	r1, [sp, #20]
 8004f42:	9a04      	ldr	r2, [sp, #16]
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	f7ff fe93 	bl	8004c70 <mpz_div_qr_ui>
 8004f4a:	4603      	mov	r3, r0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	b007      	add	sp, #28
 8004f50:	f85d fb04 	ldr.w	pc, [sp], #4

08004f54 <mpz_tdiv_r_ui>:
unsigned long
mpz_tdiv_r_ui (mpz_t r, const mpz_t n, unsigned long d)
{
 8004f54:	b500      	push	{lr}
 8004f56:	b087      	sub	sp, #28
 8004f58:	9005      	str	r0, [sp, #20]
 8004f5a:	9104      	str	r1, [sp, #16]
 8004f5c:	9203      	str	r2, [sp, #12]
  return mpz_div_qr_ui (NULL, r, n, d, GMP_DIV_TRUNC);
 8004f5e:	2302      	movs	r3, #2
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2000      	movs	r0, #0
 8004f64:	9905      	ldr	r1, [sp, #20]
 8004f66:	9a04      	ldr	r2, [sp, #16]
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	f7ff fe81 	bl	8004c70 <mpz_div_qr_ui>
 8004f6e:	4603      	mov	r3, r0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	b007      	add	sp, #28
 8004f74:	f85d fb04 	ldr.w	pc, [sp], #4

08004f78 <mpz_cdiv_ui>:

unsigned long
mpz_cdiv_ui (const mpz_t n, unsigned long d)
{
 8004f78:	b500      	push	{lr}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	9003      	str	r0, [sp, #12]
 8004f7e:	9102      	str	r1, [sp, #8]
  return mpz_div_qr_ui (NULL, NULL, n, d, GMP_DIV_CEIL);
 8004f80:	2301      	movs	r3, #1
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	2000      	movs	r0, #0
 8004f86:	2100      	movs	r1, #0
 8004f88:	9a03      	ldr	r2, [sp, #12]
 8004f8a:	9b02      	ldr	r3, [sp, #8]
 8004f8c:	f7ff fe70 	bl	8004c70 <mpz_div_qr_ui>
 8004f90:	4603      	mov	r3, r0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	b005      	add	sp, #20
 8004f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f9a:	bf00      	nop

08004f9c <mpz_fdiv_ui>:

unsigned long
mpz_fdiv_ui (const mpz_t n, unsigned long d)
{
 8004f9c:	b500      	push	{lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	9003      	str	r0, [sp, #12]
 8004fa2:	9102      	str	r1, [sp, #8]
  return mpz_div_qr_ui (NULL, NULL, n, d, GMP_DIV_FLOOR);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	2000      	movs	r0, #0
 8004faa:	2100      	movs	r1, #0
 8004fac:	9a03      	ldr	r2, [sp, #12]
 8004fae:	9b02      	ldr	r3, [sp, #8]
 8004fb0:	f7ff fe5e 	bl	8004c70 <mpz_div_qr_ui>
 8004fb4:	4603      	mov	r3, r0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	b005      	add	sp, #20
 8004fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fbe:	bf00      	nop

08004fc0 <mpz_tdiv_ui>:

unsigned long
mpz_tdiv_ui (const mpz_t n, unsigned long d)
{
 8004fc0:	b500      	push	{lr}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	9003      	str	r0, [sp, #12]
 8004fc6:	9102      	str	r1, [sp, #8]
  return mpz_div_qr_ui (NULL, NULL, n, d, GMP_DIV_TRUNC);
 8004fc8:	2302      	movs	r3, #2
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2000      	movs	r0, #0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	9a03      	ldr	r2, [sp, #12]
 8004fd2:	9b02      	ldr	r3, [sp, #8]
 8004fd4:	f7ff fe4c 	bl	8004c70 <mpz_div_qr_ui>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	b005      	add	sp, #20
 8004fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fe2:	bf00      	nop

08004fe4 <mpz_mod_ui>:

unsigned long
mpz_mod_ui (mpz_t r, const mpz_t n, unsigned long d)
{
 8004fe4:	b500      	push	{lr}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	9005      	str	r0, [sp, #20]
 8004fea:	9104      	str	r1, [sp, #16]
 8004fec:	9203      	str	r2, [sp, #12]
  return mpz_div_qr_ui (NULL, r, n, d, GMP_DIV_FLOOR);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	9905      	ldr	r1, [sp, #20]
 8004ff6:	9a04      	ldr	r2, [sp, #16]
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	f7ff fe39 	bl	8004c70 <mpz_div_qr_ui>
 8004ffe:	4603      	mov	r3, r0
}
 8005000:	4618      	mov	r0, r3
 8005002:	b007      	add	sp, #28
 8005004:	f85d fb04 	ldr.w	pc, [sp], #4

08005008 <mpz_divexact_ui>:

void
mpz_divexact_ui (mpz_t q, const mpz_t n, unsigned long d)
{
 8005008:	b500      	push	{lr}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	9005      	str	r0, [sp, #20]
 800500e:	9104      	str	r1, [sp, #16]
 8005010:	9203      	str	r2, [sp, #12]
  gmp_assert_nocarry (mpz_div_qr_ui (q, NULL, n, d, GMP_DIV_TRUNC));
 8005012:	2302      	movs	r3, #2
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	9805      	ldr	r0, [sp, #20]
 8005018:	2100      	movs	r1, #0
 800501a:	9a04      	ldr	r2, [sp, #16]
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	f7ff fe27 	bl	8004c70 <mpz_div_qr_ui>
 8005022:	9007      	str	r0, [sp, #28]
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00f      	beq.n	800504a <mpz_divexact_ui+0x42>
 800502a:	f243 7064 	movw	r0, #14180	; 0x3764
 800502e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005032:	f640 2156 	movw	r1, #2646	; 0xa56
 8005036:	f643 6270 	movw	r2, #15984	; 0x3e70
 800503a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800503e:	f643 1344 	movw	r3, #14660	; 0x3944
 8005042:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005046:	f008 fb6b 	bl	800d720 <__assert_func>
}
 800504a:	b009      	add	sp, #36	; 0x24
 800504c:	f85d fb04 	ldr.w	pc, [sp], #4

08005050 <mpz_divisible_ui_p>:

int
mpz_divisible_ui_p (const mpz_t n, unsigned long d)
{
 8005050:	b500      	push	{lr}
 8005052:	b085      	sub	sp, #20
 8005054:	9003      	str	r0, [sp, #12]
 8005056:	9102      	str	r1, [sp, #8]
  return mpz_div_qr_ui (NULL, NULL, n, d, GMP_DIV_TRUNC) == 0;
 8005058:	2302      	movs	r3, #2
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	2000      	movs	r0, #0
 800505e:	2100      	movs	r1, #0
 8005060:	9a03      	ldr	r2, [sp, #12]
 8005062:	9b02      	ldr	r3, [sp, #8]
 8005064:	f7ff fe04 	bl	8004c70 <mpz_div_qr_ui>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	bf14      	ite	ne
 800506e:	2300      	movne	r3, #0
 8005070:	2301      	moveq	r3, #1
 8005072:	b2db      	uxtb	r3, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	b005      	add	sp, #20
 8005078:	f85d fb04 	ldr.w	pc, [sp], #4

0800507c <mpn_gcd_11>:


/* GCD */
static mp_limb_t
mpn_gcd_11 (mp_limb_t u, mp_limb_t v)
{
 800507c:	b500      	push	{lr}
 800507e:	b089      	sub	sp, #36	; 0x24
 8005080:	9001      	str	r0, [sp, #4]
 8005082:	9100      	str	r1, [sp, #0]
  unsigned shift;

  assert ( (u | v) > 0);
 8005084:	9a01      	ldr	r2, [sp, #4]
 8005086:	9b00      	ldr	r3, [sp, #0]
 8005088:	4313      	orrs	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10f      	bne.n	80050ae <mpn_gcd_11+0x32>
 800508e:	f243 7064 	movw	r0, #14180	; 0x3764
 8005092:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005096:	f640 2166 	movw	r1, #2662	; 0xa66
 800509a:	f643 6280 	movw	r2, #16000	; 0x3e80
 800509e:	f6c0 0201 	movt	r2, #2049	; 0x801
 80050a2:	f643 13f8 	movw	r3, #14840	; 0x39f8
 80050a6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80050aa:	f008 fb39 	bl	800d720 <__assert_func>

  if (u == 0)
 80050ae:	9b01      	ldr	r3, [sp, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <mpn_gcd_11+0x3c>
    return v;
 80050b4:	9b00      	ldr	r3, [sp, #0]
 80050b6:	e072      	b.n	800519e <mpn_gcd_11+0x122>
  else if (v == 0)
 80050b8:	9b00      	ldr	r3, [sp, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <mpn_gcd_11+0x46>
    return u;
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	e06d      	b.n	800519e <mpn_gcd_11+0x122>

  gmp_ctz (shift, u | v);
 80050c2:	9a01      	ldr	r2, [sp, #4]
 80050c4:	9b00      	ldr	r3, [sp, #0]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	9305      	str	r3, [sp, #20]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9304      	str	r3, [sp, #16]
 80050ce:	9b05      	ldr	r3, [sp, #20]
 80050d0:	425a      	negs	r2, r3
 80050d2:	9b05      	ldr	r3, [sp, #20]
 80050d4:	4013      	ands	r3, r2
 80050d6:	9307      	str	r3, [sp, #28]
 80050d8:	2300      	movs	r3, #0
 80050da:	9306      	str	r3, [sp, #24]
 80050dc:	e005      	b.n	80050ea <mpn_gcd_11+0x6e>
 80050de:	9b07      	ldr	r3, [sp, #28]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	9307      	str	r3, [sp, #28]
 80050e4:	9b06      	ldr	r3, [sp, #24]
 80050e6:	3308      	adds	r3, #8
 80050e8:	9306      	str	r3, [sp, #24]
 80050ea:	9b07      	ldr	r3, [sp, #28]
 80050ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f4      	beq.n	80050de <mpn_gcd_11+0x62>
 80050f4:	e005      	b.n	8005102 <mpn_gcd_11+0x86>
 80050f6:	9b07      	ldr	r3, [sp, #28]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	9307      	str	r3, [sp, #28]
 80050fc:	9b06      	ldr	r3, [sp, #24]
 80050fe:	3301      	adds	r3, #1
 8005100:	9306      	str	r3, [sp, #24]
 8005102:	9b07      	ldr	r3, [sp, #28]
 8005104:	2b00      	cmp	r3, #0
 8005106:	daf6      	bge.n	80050f6 <mpn_gcd_11+0x7a>
 8005108:	9b06      	ldr	r3, [sp, #24]
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	9b04      	ldr	r3, [sp, #16]
 800510e:	f1c3 031f 	rsb	r3, r3, #31
 8005112:	9303      	str	r3, [sp, #12]

  u >>= shift;
 8005114:	9b03      	ldr	r3, [sp, #12]
 8005116:	9a01      	ldr	r2, [sp, #4]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	9301      	str	r3, [sp, #4]
  v >>= shift;
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	9a00      	ldr	r2, [sp, #0]
 8005122:	fa22 f303 	lsr.w	r3, r2, r3
 8005126:	9300      	str	r3, [sp, #0]

  if ( (u & 1) == 0)
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <mpn_gcd_11+0xc4>
    MP_LIMB_T_SWAP (u, v);
 8005132:	9b01      	ldr	r3, [sp, #4]
 8005134:	9302      	str	r3, [sp, #8]
 8005136:	9b00      	ldr	r3, [sp, #0]
 8005138:	9301      	str	r3, [sp, #4]
 800513a:	9b02      	ldr	r3, [sp, #8]
 800513c:	9300      	str	r3, [sp, #0]

  while ( (v & 1) == 0)
 800513e:	e003      	b.n	8005148 <mpn_gcd_11+0xcc>
 8005140:	e002      	b.n	8005148 <mpn_gcd_11+0xcc>
    v >>= 1;
 8005142:	9b00      	ldr	r3, [sp, #0]
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	9300      	str	r3, [sp, #0]
  v >>= shift;

  if ( (u & 1) == 0)
    MP_LIMB_T_SWAP (u, v);

  while ( (v & 1) == 0)
 8005148:	9b00      	ldr	r3, [sp, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f7      	beq.n	8005142 <mpn_gcd_11+0xc6>
    v >>= 1;

  while (u != v)
 8005152:	e01c      	b.n	800518e <mpn_gcd_11+0x112>
    {
      if (u > v)
 8005154:	9a01      	ldr	r2, [sp, #4]
 8005156:	9b00      	ldr	r3, [sp, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d90c      	bls.n	8005176 <mpn_gcd_11+0xfa>
	{
	  u -= v;
 800515c:	9a01      	ldr	r2, [sp, #4]
 800515e:	9b00      	ldr	r3, [sp, #0]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	9301      	str	r3, [sp, #4]
	  do
	    u >>= 1;
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	9301      	str	r3, [sp, #4]
	  while ( (u & 1) == 0);
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f7      	beq.n	8005164 <mpn_gcd_11+0xe8>
 8005174:	e00b      	b.n	800518e <mpn_gcd_11+0x112>
	}
      else
	{
	  v -= u;
 8005176:	9a00      	ldr	r2, [sp, #0]
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	9300      	str	r3, [sp, #0]
	  do
	    v >>= 1;
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	9300      	str	r3, [sp, #0]
	  while ( (v & 1) == 0);
 8005184:	9b00      	ldr	r3, [sp, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f7      	beq.n	800517e <mpn_gcd_11+0x102>
    MP_LIMB_T_SWAP (u, v);

  while ( (v & 1) == 0)
    v >>= 1;

  while (u != v)
 800518e:	9a01      	ldr	r2, [sp, #4]
 8005190:	9b00      	ldr	r3, [sp, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d1de      	bne.n	8005154 <mpn_gcd_11+0xd8>
	  do
	    v >>= 1;
	  while ( (v & 1) == 0);
	}
    }
  return u << shift;
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	9a01      	ldr	r2, [sp, #4]
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
}
 800519e:	4618      	mov	r0, r3
 80051a0:	b009      	add	sp, #36	; 0x24
 80051a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80051a6:	bf00      	nop

080051a8 <mpz_gcd_ui>:

unsigned long
mpz_gcd_ui (mpz_t g, const mpz_t u, unsigned long v)
{
 80051a8:	b500      	push	{lr}
 80051aa:	b087      	sub	sp, #28
 80051ac:	9003      	str	r0, [sp, #12]
 80051ae:	9102      	str	r1, [sp, #8]
 80051b0:	9201      	str	r2, [sp, #4]
  mp_size_t un;

  if (v == 0)
 80051b2:	9b01      	ldr	r3, [sp, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d107      	bne.n	80051c8 <mpz_gcd_ui+0x20>
    {
      if (g)
 80051b8:	9b03      	ldr	r3, [sp, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d022      	beq.n	8005204 <mpz_gcd_ui+0x5c>
	mpz_abs (g, u);
 80051be:	9803      	ldr	r0, [sp, #12]
 80051c0:	9902      	ldr	r1, [sp, #8]
 80051c2:	f7fe fcb5 	bl	8003b30 <mpz_abs>
 80051c6:	e01d      	b.n	8005204 <mpz_gcd_ui+0x5c>
    }
  else
    {
      un = GMP_ABS (u->_mp_size);
 80051c8:	9b02      	ldr	r3, [sp, #8]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bfb8      	it	lt
 80051d0:	425b      	neglt	r3, r3
 80051d2:	9305      	str	r3, [sp, #20]
      if (un != 0)
 80051d4:	9b05      	ldr	r3, [sp, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <mpz_gcd_ui+0x4e>
	v = mpn_gcd_11 (mpn_div_qr_1 (NULL, u->_mp_d, un, v), v);
 80051da:	9b02      	ldr	r3, [sp, #8]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2000      	movs	r0, #0
 80051e0:	4619      	mov	r1, r3
 80051e2:	9a05      	ldr	r2, [sp, #20]
 80051e4:	9b01      	ldr	r3, [sp, #4]
 80051e6:	f7fc fe45 	bl	8001e74 <mpn_div_qr_1>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4618      	mov	r0, r3
 80051ee:	9901      	ldr	r1, [sp, #4]
 80051f0:	f7ff ff44 	bl	800507c <mpn_gcd_11>
 80051f4:	9001      	str	r0, [sp, #4]

      if (g)
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <mpz_gcd_ui+0x5c>
	mpz_set_ui (g, v);
 80051fc:	9803      	ldr	r0, [sp, #12]
 80051fe:	9901      	ldr	r1, [sp, #4]
 8005200:	f7fd ffc6 	bl	8003190 <mpz_set_ui>
    }

  return v;
 8005204:	9b01      	ldr	r3, [sp, #4]
}
 8005206:	4618      	mov	r0, r3
 8005208:	b007      	add	sp, #28
 800520a:	f85d fb04 	ldr.w	pc, [sp], #4
 800520e:	bf00      	nop

08005210 <mpz_make_odd>:

static mp_bitcnt_t
mpz_make_odd (mpz_t r)
{
 8005210:	b500      	push	{lr}
 8005212:	b087      	sub	sp, #28
 8005214:	9003      	str	r0, [sp, #12]
  mp_bitcnt_t shift;

  assert (r->_mp_size > 0);
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	dc0f      	bgt.n	800523e <mpz_make_odd+0x2e>
 800521e:	f243 7064 	movw	r0, #14180	; 0x3764
 8005222:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005226:	f640 21a8 	movw	r1, #2728	; 0xaa8
 800522a:	f643 628c 	movw	r2, #16012	; 0x3e8c
 800522e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005232:	f643 2304 	movw	r3, #14852	; 0x3a04
 8005236:	f6c0 0301 	movt	r3, #2049	; 0x801
 800523a:	f008 fa71 	bl	800d720 <__assert_func>
  /* Count trailing zeros, equivalent to mpn_scan1, because we know that there is a 1 */
  shift = mpn_common_scan (r->_mp_d[0], 0, r->_mp_d, 0, 0);
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2100      	movs	r1, #0
 800524a:	9100      	str	r1, [sp, #0]
 800524c:	4610      	mov	r0, r2
 800524e:	2100      	movs	r1, #0
 8005250:	461a      	mov	r2, r3
 8005252:	2300      	movs	r3, #0
 8005254:	f7fc fa22 	bl	800169c <mpn_common_scan>
 8005258:	9005      	str	r0, [sp, #20]
  mpz_tdiv_q_2exp (r, r, shift);
 800525a:	9803      	ldr	r0, [sp, #12]
 800525c:	9903      	ldr	r1, [sp, #12]
 800525e:	9a05      	ldr	r2, [sp, #20]
 8005260:	f7ff fc62 	bl	8004b28 <mpz_tdiv_q_2exp>

  return shift;
 8005264:	9b05      	ldr	r3, [sp, #20]
}
 8005266:	4618      	mov	r0, r3
 8005268:	b007      	add	sp, #28
 800526a:	f85d fb04 	ldr.w	pc, [sp], #4
 800526e:	bf00      	nop

08005270 <mpz_gcd>:

void
mpz_gcd (mpz_t g, const mpz_t u, const mpz_t v)
{
 8005270:	b500      	push	{lr}
 8005272:	b091      	sub	sp, #68	; 0x44
 8005274:	9003      	str	r0, [sp, #12]
 8005276:	9102      	str	r1, [sp, #8]
 8005278:	9201      	str	r2, [sp, #4]
  mpz_t tu, tv;
  mp_bitcnt_t uz, vz, gz;

  if (u->_mp_size == 0)
 800527a:	9b02      	ldr	r3, [sp, #8]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <mpz_gcd+0x1c>
    {
      mpz_abs (g, v);
 8005282:	9803      	ldr	r0, [sp, #12]
 8005284:	9901      	ldr	r1, [sp, #4]
 8005286:	f7fe fc53 	bl	8003b30 <mpz_abs>
      return;
 800528a:	e08e      	b.n	80053aa <mpz_gcd+0x13a>
    }
  if (v->_mp_size == 0)
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d104      	bne.n	800529e <mpz_gcd+0x2e>
    {
      mpz_abs (g, u);
 8005294:	9803      	ldr	r0, [sp, #12]
 8005296:	9902      	ldr	r1, [sp, #8]
 8005298:	f7fe fc4a 	bl	8003b30 <mpz_abs>
      return;
 800529c:	e085      	b.n	80053aa <mpz_gcd+0x13a>
    }

  mpz_init (tu);
 800529e:	ab07      	add	r3, sp, #28
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fd fef1 	bl	8003088 <mpz_init>
  mpz_init (tv);
 80052a6:	ab04      	add	r3, sp, #16
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fd feed 	bl	8003088 <mpz_init>

  mpz_abs (tu, u);
 80052ae:	ab07      	add	r3, sp, #28
 80052b0:	4618      	mov	r0, r3
 80052b2:	9902      	ldr	r1, [sp, #8]
 80052b4:	f7fe fc3c 	bl	8003b30 <mpz_abs>
  uz = mpz_make_odd (tu);
 80052b8:	ab07      	add	r3, sp, #28
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff ffa8 	bl	8005210 <mpz_make_odd>
 80052c0:	900f      	str	r0, [sp, #60]	; 0x3c
  mpz_abs (tv, v);
 80052c2:	ab04      	add	r3, sp, #16
 80052c4:	4618      	mov	r0, r3
 80052c6:	9901      	ldr	r1, [sp, #4]
 80052c8:	f7fe fc32 	bl	8003b30 <mpz_abs>
  vz = mpz_make_odd (tv);
 80052cc:	ab04      	add	r3, sp, #16
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ff9e 	bl	8005210 <mpz_make_odd>
 80052d4:	900e      	str	r0, [sp, #56]	; 0x38
  gz = GMP_MIN (uz, vz);
 80052d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052da:	429a      	cmp	r2, r3
 80052dc:	bf38      	it	cc
 80052de:	4613      	movcc	r3, r2
 80052e0:	930d      	str	r3, [sp, #52]	; 0x34

  if (tu->_mp_size < tv->_mp_size)
 80052e2:	9a08      	ldr	r2, [sp, #32]
 80052e4:	9b05      	ldr	r3, [sp, #20]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	da05      	bge.n	80052f6 <mpz_gcd+0x86>
    mpz_swap (tu, tv);
 80052ea:	aa07      	add	r2, sp, #28
 80052ec:	ab04      	add	r3, sp, #16
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	f7fe fc49 	bl	8003b88 <mpz_swap>

  mpz_tdiv_r (tu, tu, tv);
 80052f6:	a907      	add	r1, sp, #28
 80052f8:	aa07      	add	r2, sp, #28
 80052fa:	ab04      	add	r3, sp, #16
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	f7ff f9f9 	bl	80046f8 <mpz_tdiv_r>
  if (tu->_mp_size == 0)
 8005306:	9b08      	ldr	r3, [sp, #32]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <mpz_gcd+0xa8>
    {
      mpz_swap (g, tv);
 800530c:	ab04      	add	r3, sp, #16
 800530e:	9803      	ldr	r0, [sp, #12]
 8005310:	4619      	mov	r1, r3
 8005312:	f7fe fc39 	bl	8003b88 <mpz_swap>
 8005316:	e03b      	b.n	8005390 <mpz_gcd+0x120>
  else
    for (;;)
      {
	int c;

	mpz_make_odd (tu);
 8005318:	ab07      	add	r3, sp, #28
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ff78 	bl	8005210 <mpz_make_odd>
	c = mpz_cmp (tu, tv);
 8005320:	aa07      	add	r2, sp, #28
 8005322:	ab04      	add	r3, sp, #16
 8005324:	4610      	mov	r0, r2
 8005326:	4619      	mov	r1, r3
 8005328:	f7fe fb88 	bl	8003a3c <mpz_cmp>
 800532c:	900c      	str	r0, [sp, #48]	; 0x30
	if (c == 0)
 800532e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <mpz_gcd+0xd0>
	  {
	    mpz_swap (g, tu);
 8005334:	ab07      	add	r3, sp, #28
 8005336:	9803      	ldr	r0, [sp, #12]
 8005338:	4619      	mov	r1, r3
 800533a:	f7fe fc25 	bl	8003b88 <mpz_swap>
	    break;
 800533e:	e027      	b.n	8005390 <mpz_gcd+0x120>
	  }
	if (c < 0)
 8005340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005342:	2b00      	cmp	r3, #0
 8005344:	da05      	bge.n	8005352 <mpz_gcd+0xe2>
	  mpz_swap (tu, tv);
 8005346:	aa07      	add	r2, sp, #28
 8005348:	ab04      	add	r3, sp, #16
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f7fe fc1b 	bl	8003b88 <mpz_swap>

	if (tv->_mp_size == 1)
 8005352:	9b05      	ldr	r3, [sp, #20]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d112      	bne.n	800537e <mpz_gcd+0x10e>
	  {
	    mp_limb_t vl = tv->_mp_d[0];
 8005358:	9b06      	ldr	r3, [sp, #24]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	930b      	str	r3, [sp, #44]	; 0x2c
	    mp_limb_t ul = mpz_tdiv_ui (tu, vl);
 800535e:	ab07      	add	r3, sp, #28
 8005360:	4618      	mov	r0, r3
 8005362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005364:	f7ff fe2c 	bl	8004fc0 <mpz_tdiv_ui>
 8005368:	900a      	str	r0, [sp, #40]	; 0x28
	    mpz_set_ui (g, mpn_gcd_11 (ul, vl));
 800536a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800536c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800536e:	f7ff fe85 	bl	800507c <mpn_gcd_11>
 8005372:	4603      	mov	r3, r0
 8005374:	9803      	ldr	r0, [sp, #12]
 8005376:	4619      	mov	r1, r3
 8005378:	f7fd ff0a 	bl	8003190 <mpz_set_ui>
	    break;
 800537c:	e008      	b.n	8005390 <mpz_gcd+0x120>
	  }
	mpz_sub (tu, tu, tv);
 800537e:	a907      	add	r1, sp, #28
 8005380:	aa07      	add	r2, sp, #28
 8005382:	ab04      	add	r3, sp, #16
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	461a      	mov	r2, r3
 800538a:	f7fe fe1d 	bl	8003fc8 <mpz_sub>
      }
 800538e:	e7c3      	b.n	8005318 <mpz_gcd+0xa8>
  mpz_clear (tu);
 8005390:	ab07      	add	r3, sp, #28
 8005392:	4618      	mov	r0, r3
 8005394:	f7fd feaa 	bl	80030ec <mpz_clear>
  mpz_clear (tv);
 8005398:	ab04      	add	r3, sp, #16
 800539a:	4618      	mov	r0, r3
 800539c:	f7fd fea6 	bl	80030ec <mpz_clear>
  mpz_mul_2exp (g, g, gz);
 80053a0:	9803      	ldr	r0, [sp, #12]
 80053a2:	9903      	ldr	r1, [sp, #12]
 80053a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053a6:	f7fe ff13 	bl	80041d0 <mpz_mul_2exp>
}
 80053aa:	b011      	add	sp, #68	; 0x44
 80053ac:	f85d fb04 	ldr.w	pc, [sp], #4

080053b0 <mpz_gcdext>:

void
mpz_gcdext (mpz_t g, mpz_t s, mpz_t t, const mpz_t u, const mpz_t v)
{
 80053b0:	b500      	push	{lr}
 80053b2:	b0a3      	sub	sp, #140	; 0x8c
 80053b4:	9003      	str	r0, [sp, #12]
 80053b6:	9102      	str	r1, [sp, #8]
 80053b8:	9201      	str	r2, [sp, #4]
 80053ba:	9300      	str	r3, [sp, #0]
  mpz_t tu, tv, s0, s1, t0, t1;
  mp_bitcnt_t uz, vz, gz;
  mp_bitcnt_t power;

  if (u->_mp_size == 0)
 80053bc:	9b00      	ldr	r3, [sp, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d117      	bne.n	80053f4 <mpz_gcdext+0x44>
    {
      /* g = 0 u + sgn(v) v */
      signed long sign = mpz_sgn (v);
 80053c4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80053c6:	f7fe fac1 	bl	800394c <mpz_sgn>
 80053ca:	901d      	str	r0, [sp, #116]	; 0x74
      mpz_abs (g, v);
 80053cc:	9803      	ldr	r0, [sp, #12]
 80053ce:	9924      	ldr	r1, [sp, #144]	; 0x90
 80053d0:	f7fe fbae 	bl	8003b30 <mpz_abs>
      if (s)
 80053d4:	9b02      	ldr	r3, [sp, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <mpz_gcdext+0x32>
	mpz_set_ui (s, 0);
 80053da:	9802      	ldr	r0, [sp, #8]
 80053dc:	2100      	movs	r1, #0
 80053de:	f7fd fed7 	bl	8003190 <mpz_set_ui>
      if (t)
 80053e2:	9b01      	ldr	r3, [sp, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <mpz_gcdext+0x42>
	mpz_set_si (t, sign);
 80053e8:	9801      	ldr	r0, [sp, #4]
 80053ea:	991d      	ldr	r1, [sp, #116]	; 0x74
 80053ec:	f7fd feb6 	bl	800315c <mpz_set_si>
      return;
 80053f0:	e1d5      	b.n	800579e <mpz_gcdext+0x3ee>
 80053f2:	e1d4      	b.n	800579e <mpz_gcdext+0x3ee>
    }

  if (v->_mp_size == 0)
 80053f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d117      	bne.n	800542c <mpz_gcdext+0x7c>
    {
      /* g = sgn(u) u + 0 v */
      signed long sign = mpz_sgn (u);
 80053fc:	9800      	ldr	r0, [sp, #0]
 80053fe:	f7fe faa5 	bl	800394c <mpz_sgn>
 8005402:	901c      	str	r0, [sp, #112]	; 0x70
      mpz_abs (g, u);
 8005404:	9803      	ldr	r0, [sp, #12]
 8005406:	9900      	ldr	r1, [sp, #0]
 8005408:	f7fe fb92 	bl	8003b30 <mpz_abs>
      if (s)
 800540c:	9b02      	ldr	r3, [sp, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <mpz_gcdext+0x6a>
	mpz_set_si (s, sign);
 8005412:	9802      	ldr	r0, [sp, #8]
 8005414:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005416:	f7fd fea1 	bl	800315c <mpz_set_si>
      if (t)
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <mpz_gcdext+0x7a>
	mpz_set_ui (t, 0);
 8005420:	9801      	ldr	r0, [sp, #4]
 8005422:	2100      	movs	r1, #0
 8005424:	f7fd feb4 	bl	8003190 <mpz_set_ui>
      return;
 8005428:	e1b9      	b.n	800579e <mpz_gcdext+0x3ee>
 800542a:	e1b8      	b.n	800579e <mpz_gcdext+0x3ee>
    }

  mpz_init (tu);
 800542c:	ab14      	add	r3, sp, #80	; 0x50
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd fe2a 	bl	8003088 <mpz_init>
  mpz_init (tv);
 8005434:	ab11      	add	r3, sp, #68	; 0x44
 8005436:	4618      	mov	r0, r3
 8005438:	f7fd fe26 	bl	8003088 <mpz_init>
  mpz_init (s0);
 800543c:	ab0e      	add	r3, sp, #56	; 0x38
 800543e:	4618      	mov	r0, r3
 8005440:	f7fd fe22 	bl	8003088 <mpz_init>
  mpz_init (s1);
 8005444:	ab0b      	add	r3, sp, #44	; 0x2c
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fe1e 	bl	8003088 <mpz_init>
  mpz_init (t0);
 800544c:	ab08      	add	r3, sp, #32
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fe1a 	bl	8003088 <mpz_init>
  mpz_init (t1);
 8005454:	ab05      	add	r3, sp, #20
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd fe16 	bl	8003088 <mpz_init>

  mpz_abs (tu, u);
 800545c:	ab14      	add	r3, sp, #80	; 0x50
 800545e:	4618      	mov	r0, r3
 8005460:	9900      	ldr	r1, [sp, #0]
 8005462:	f7fe fb65 	bl	8003b30 <mpz_abs>
  uz = mpz_make_odd (tu);
 8005466:	ab14      	add	r3, sp, #80	; 0x50
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fed1 	bl	8005210 <mpz_make_odd>
 800546e:	9021      	str	r0, [sp, #132]	; 0x84
  mpz_abs (tv, v);
 8005470:	ab11      	add	r3, sp, #68	; 0x44
 8005472:	4618      	mov	r0, r3
 8005474:	9924      	ldr	r1, [sp, #144]	; 0x90
 8005476:	f7fe fb5b 	bl	8003b30 <mpz_abs>
  vz = mpz_make_odd (tv);
 800547a:	ab11      	add	r3, sp, #68	; 0x44
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff fec7 	bl	8005210 <mpz_make_odd>
 8005482:	9020      	str	r0, [sp, #128]	; 0x80
  gz = GMP_MIN (uz, vz);
 8005484:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005488:	429a      	cmp	r2, r3
 800548a:	bf38      	it	cc
 800548c:	4613      	movcc	r3, r2
 800548e:	931b      	str	r3, [sp, #108]	; 0x6c

  uz -= gz;
 8005490:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005492:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	9321      	str	r3, [sp, #132]	; 0x84
  vz -= gz;
 8005498:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800549a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	9320      	str	r3, [sp, #128]	; 0x80

  /* Cofactors corresponding to odd gcd. gz handled later. */
  if (tu->_mp_size < tv->_mp_size)
 80054a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80054a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054a4:	429a      	cmp	r2, r3
 80054a6:	da17      	bge.n	80054d8 <mpz_gcdext+0x128>
    {
      mpz_swap (tu, tv);
 80054a8:	aa14      	add	r2, sp, #80	; 0x50
 80054aa:	ab11      	add	r3, sp, #68	; 0x44
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	f7fe fb6a 	bl	8003b88 <mpz_swap>
      MPZ_SRCPTR_SWAP (u, v);
 80054b4:	9b00      	ldr	r3, [sp, #0]
 80054b6:	931a      	str	r3, [sp, #104]	; 0x68
 80054b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80054be:	9324      	str	r3, [sp, #144]	; 0x90
      MPZ_PTR_SWAP (s, t);
 80054c0:	9b02      	ldr	r3, [sp, #8]
 80054c2:	9319      	str	r3, [sp, #100]	; 0x64
 80054c4:	9b01      	ldr	r3, [sp, #4]
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054ca:	9301      	str	r3, [sp, #4]
      MP_BITCNT_T_SWAP (uz, vz);
 80054cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054ce:	9318      	str	r3, [sp, #96]	; 0x60
 80054d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054d2:	9321      	str	r3, [sp, #132]	; 0x84
 80054d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80054d6:	9320      	str	r3, [sp, #128]	; 0x80
   *
   * t0 = 2^uz, t1 = 2^uz q
   * s0 = 0,    s1 = 2^vz
   */

  mpz_setbit (t0, uz);
 80054d8:	ab08      	add	r3, sp, #32
 80054da:	4618      	mov	r0, r3
 80054dc:	9921      	ldr	r1, [sp, #132]	; 0x84
 80054de:	f001 f87d 	bl	80065dc <mpz_setbit>
  mpz_tdiv_qr (t1, tu, tu, tv);
 80054e2:	a805      	add	r0, sp, #20
 80054e4:	a914      	add	r1, sp, #80	; 0x50
 80054e6:	aa14      	add	r2, sp, #80	; 0x50
 80054e8:	ab11      	add	r3, sp, #68	; 0x44
 80054ea:	f7ff f8a3 	bl	8004634 <mpz_tdiv_qr>
  mpz_mul_2exp (t1, t1, uz);
 80054ee:	aa05      	add	r2, sp, #20
 80054f0:	ab05      	add	r3, sp, #20
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054f8:	f7fe fe6a 	bl	80041d0 <mpz_mul_2exp>

  mpz_setbit (s1, vz);
 80054fc:	ab0b      	add	r3, sp, #44	; 0x2c
 80054fe:	4618      	mov	r0, r3
 8005500:	9920      	ldr	r1, [sp, #128]	; 0x80
 8005502:	f001 f86b 	bl	80065dc <mpz_setbit>
  power = uz + vz;
 8005506:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005508:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800550a:	4413      	add	r3, r2
 800550c:	931f      	str	r3, [sp, #124]	; 0x7c

  if (tu->_mp_size > 0)
 800550e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005510:	2b00      	cmp	r3, #0
 8005512:	f340 8081 	ble.w	8005618 <mpz_gcdext+0x268>
    {
      mp_bitcnt_t shift;
      shift = mpz_make_odd (tu);
 8005516:	ab14      	add	r3, sp, #80	; 0x50
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fe79 	bl	8005210 <mpz_make_odd>
 800551e:	901e      	str	r0, [sp, #120]	; 0x78
      mpz_mul_2exp (t0, t0, shift);
 8005520:	aa08      	add	r2, sp, #32
 8005522:	ab08      	add	r3, sp, #32
 8005524:	4610      	mov	r0, r2
 8005526:	4619      	mov	r1, r3
 8005528:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800552a:	f7fe fe51 	bl	80041d0 <mpz_mul_2exp>
      mpz_mul_2exp (s0, s0, shift);
 800552e:	aa0e      	add	r2, sp, #56	; 0x38
 8005530:	ab0e      	add	r3, sp, #56	; 0x38
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005538:	f7fe fe4a 	bl	80041d0 <mpz_mul_2exp>
      power += shift;
 800553c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800553e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005540:	4413      	add	r3, r2
 8005542:	931f      	str	r3, [sp, #124]	; 0x7c

      for (;;)
	{
	  int c;
	  c = mpz_cmp (tu, tv);
 8005544:	aa14      	add	r2, sp, #80	; 0x50
 8005546:	ab11      	add	r3, sp, #68	; 0x44
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	f7fe fa76 	bl	8003a3c <mpz_cmp>
 8005550:	9017      	str	r0, [sp, #92]	; 0x5c
	  if (c == 0)
 8005552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d100      	bne.n	800555a <mpz_gcdext+0x1aa>
	    break;
 8005558:	e05e      	b.n	8005618 <mpz_gcdext+0x268>

	  if (c < 0)
 800555a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800555c:	2b00      	cmp	r3, #0
 800555e:	da2b      	bge.n	80055b8 <mpz_gcdext+0x208>
	      /* tv = tv' + tu
	       *
	       * u = t0 tu + t1 (tv' + tu) = (t0 + t1) tu + t1 tv'
	       * v = s0 tu + s1 (tv' + tu) = (s0 + s1) tu + s1 tv' */

	      mpz_sub (tv, tv, tu);
 8005560:	a911      	add	r1, sp, #68	; 0x44
 8005562:	aa11      	add	r2, sp, #68	; 0x44
 8005564:	ab14      	add	r3, sp, #80	; 0x50
 8005566:	4608      	mov	r0, r1
 8005568:	4611      	mov	r1, r2
 800556a:	461a      	mov	r2, r3
 800556c:	f7fe fd2c 	bl	8003fc8 <mpz_sub>
	      mpz_add (t0, t0, t1);
 8005570:	a908      	add	r1, sp, #32
 8005572:	aa08      	add	r2, sp, #32
 8005574:	ab05      	add	r3, sp, #20
 8005576:	4608      	mov	r0, r1
 8005578:	4611      	mov	r1, r2
 800557a:	461a      	mov	r2, r3
 800557c:	f7fe fcfe 	bl	8003f7c <mpz_add>
	      mpz_add (s0, s0, s1);
 8005580:	a90e      	add	r1, sp, #56	; 0x38
 8005582:	aa0e      	add	r2, sp, #56	; 0x38
 8005584:	ab0b      	add	r3, sp, #44	; 0x2c
 8005586:	4608      	mov	r0, r1
 8005588:	4611      	mov	r1, r2
 800558a:	461a      	mov	r2, r3
 800558c:	f7fe fcf6 	bl	8003f7c <mpz_add>

	      shift = mpz_make_odd (tv);
 8005590:	ab11      	add	r3, sp, #68	; 0x44
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fe3c 	bl	8005210 <mpz_make_odd>
 8005598:	901e      	str	r0, [sp, #120]	; 0x78
	      mpz_mul_2exp (t1, t1, shift);
 800559a:	aa05      	add	r2, sp, #20
 800559c:	ab05      	add	r3, sp, #20
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055a4:	f7fe fe14 	bl	80041d0 <mpz_mul_2exp>
	      mpz_mul_2exp (s1, s1, shift);
 80055a8:	aa0b      	add	r2, sp, #44	; 0x2c
 80055aa:	ab0b      	add	r3, sp, #44	; 0x2c
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055b2:	f7fe fe0d 	bl	80041d0 <mpz_mul_2exp>
 80055b6:	e02a      	b.n	800560e <mpz_gcdext+0x25e>
	    }
	  else
	    {
	      mpz_sub (tu, tu, tv);
 80055b8:	a914      	add	r1, sp, #80	; 0x50
 80055ba:	aa14      	add	r2, sp, #80	; 0x50
 80055bc:	ab11      	add	r3, sp, #68	; 0x44
 80055be:	4608      	mov	r0, r1
 80055c0:	4611      	mov	r1, r2
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7fe fd00 	bl	8003fc8 <mpz_sub>
	      mpz_add (t1, t0, t1);
 80055c8:	a905      	add	r1, sp, #20
 80055ca:	aa08      	add	r2, sp, #32
 80055cc:	ab05      	add	r3, sp, #20
 80055ce:	4608      	mov	r0, r1
 80055d0:	4611      	mov	r1, r2
 80055d2:	461a      	mov	r2, r3
 80055d4:	f7fe fcd2 	bl	8003f7c <mpz_add>
	      mpz_add (s1, s0, s1);
 80055d8:	a90b      	add	r1, sp, #44	; 0x2c
 80055da:	aa0e      	add	r2, sp, #56	; 0x38
 80055dc:	ab0b      	add	r3, sp, #44	; 0x2c
 80055de:	4608      	mov	r0, r1
 80055e0:	4611      	mov	r1, r2
 80055e2:	461a      	mov	r2, r3
 80055e4:	f7fe fcca 	bl	8003f7c <mpz_add>

	      shift = mpz_make_odd (tu);
 80055e8:	ab14      	add	r3, sp, #80	; 0x50
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fe10 	bl	8005210 <mpz_make_odd>
 80055f0:	901e      	str	r0, [sp, #120]	; 0x78
	      mpz_mul_2exp (t0, t0, shift);
 80055f2:	aa08      	add	r2, sp, #32
 80055f4:	ab08      	add	r3, sp, #32
 80055f6:	4610      	mov	r0, r2
 80055f8:	4619      	mov	r1, r3
 80055fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055fc:	f7fe fde8 	bl	80041d0 <mpz_mul_2exp>
	      mpz_mul_2exp (s0, s0, shift);
 8005600:	aa0e      	add	r2, sp, #56	; 0x38
 8005602:	ab0e      	add	r3, sp, #56	; 0x38
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800560a:	f7fe fde1 	bl	80041d0 <mpz_mul_2exp>
	    }
	  power += shift;
 800560e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005610:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005612:	4413      	add	r3, r2
 8005614:	931f      	str	r3, [sp, #124]	; 0x7c
	}
 8005616:	e795      	b.n	8005544 <mpz_gcdext+0x194>
    }

  /* Now tv = odd part of gcd, and -s0 and t0 are corresponding
     cofactors. */

  mpz_mul_2exp (tv, tv, gz);
 8005618:	aa11      	add	r2, sp, #68	; 0x44
 800561a:	ab11      	add	r3, sp, #68	; 0x44
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005622:	f7fe fdd5 	bl	80041d0 <mpz_mul_2exp>
  mpz_neg (s0, s0);
 8005626:	aa0e      	add	r2, sp, #56	; 0x38
 8005628:	ab0e      	add	r3, sp, #56	; 0x38
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	f7fe fa97 	bl	8003b60 <mpz_neg>

  /* 2^p g = s0 u + t0 v. Eliminate one factor of two at a time. To
     adjust cofactors, we need u / g and v / g */

  mpz_divexact (s1, v, tv);
 8005632:	aa0b      	add	r2, sp, #44	; 0x2c
 8005634:	ab11      	add	r3, sp, #68	; 0x44
 8005636:	4610      	mov	r0, r2
 8005638:	9924      	ldr	r1, [sp, #144]	; 0x90
 800563a:	461a      	mov	r2, r3
 800563c:	f7ff faac 	bl	8004b98 <mpz_divexact>
  mpz_abs (s1, s1);
 8005640:	aa0b      	add	r2, sp, #44	; 0x2c
 8005642:	ab0b      	add	r3, sp, #44	; 0x2c
 8005644:	4610      	mov	r0, r2
 8005646:	4619      	mov	r1, r3
 8005648:	f7fe fa72 	bl	8003b30 <mpz_abs>
  mpz_divexact (t1, u, tv);
 800564c:	aa05      	add	r2, sp, #20
 800564e:	ab11      	add	r3, sp, #68	; 0x44
 8005650:	4610      	mov	r0, r2
 8005652:	9900      	ldr	r1, [sp, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	f7ff fa9f 	bl	8004b98 <mpz_divexact>
  mpz_abs (t1, t1);
 800565a:	aa05      	add	r2, sp, #20
 800565c:	ab05      	add	r3, sp, #20
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	f7fe fa65 	bl	8003b30 <mpz_abs>

  while (power-- > 0)
 8005666:	e035      	b.n	80056d4 <mpz_gcdext+0x324>
    {
      /* s0 u + t0 v = (s0 - v/g) u - (t0 + u/g) v */
      if (mpz_odd_p (s0) || mpz_odd_p (t0))
 8005668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf0c      	ite	eq
 800566e:	2300      	moveq	r3, #0
 8005670:	2301      	movne	r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <mpz_gcdext+0x2e8>
 8005680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf0c      	ite	eq
 8005686:	2300      	moveq	r3, #0
 8005688:	2301      	movne	r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00f      	beq.n	80056b8 <mpz_gcdext+0x308>
	{
	  mpz_sub (s0, s0, s1);
 8005698:	a90e      	add	r1, sp, #56	; 0x38
 800569a:	aa0e      	add	r2, sp, #56	; 0x38
 800569c:	ab0b      	add	r3, sp, #44	; 0x2c
 800569e:	4608      	mov	r0, r1
 80056a0:	4611      	mov	r1, r2
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fe fc90 	bl	8003fc8 <mpz_sub>
	  mpz_add (t0, t0, t1);
 80056a8:	a908      	add	r1, sp, #32
 80056aa:	aa08      	add	r2, sp, #32
 80056ac:	ab05      	add	r3, sp, #20
 80056ae:	4608      	mov	r0, r1
 80056b0:	4611      	mov	r1, r2
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7fe fc62 	bl	8003f7c <mpz_add>
	}
      mpz_divexact_ui (s0, s0, 2);
 80056b8:	aa0e      	add	r2, sp, #56	; 0x38
 80056ba:	ab0e      	add	r3, sp, #56	; 0x38
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	2202      	movs	r2, #2
 80056c2:	f7ff fca1 	bl	8005008 <mpz_divexact_ui>
      mpz_divexact_ui (t0, t0, 2);
 80056c6:	aa08      	add	r2, sp, #32
 80056c8:	ab08      	add	r3, sp, #32
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	2202      	movs	r2, #2
 80056d0:	f7ff fc9a 	bl	8005008 <mpz_divexact_ui>
  mpz_divexact (s1, v, tv);
  mpz_abs (s1, s1);
  mpz_divexact (t1, u, tv);
  mpz_abs (t1, t1);

  while (power-- > 0)
 80056d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056d6:	1e5a      	subs	r2, r3, #1
 80056d8:	921f      	str	r2, [sp, #124]	; 0x7c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1c4      	bne.n	8005668 <mpz_gcdext+0x2b8>
      mpz_divexact_ui (s0, s0, 2);
      mpz_divexact_ui (t0, t0, 2);
    }

  /* Arrange so that |s| < |u| / 2g */
  mpz_add (s1, s0, s1);
 80056de:	a90b      	add	r1, sp, #44	; 0x2c
 80056e0:	aa0e      	add	r2, sp, #56	; 0x38
 80056e2:	ab0b      	add	r3, sp, #44	; 0x2c
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	461a      	mov	r2, r3
 80056ea:	f7fe fc47 	bl	8003f7c <mpz_add>
  if (mpz_cmpabs (s0, s1) > 0)
 80056ee:	aa0e      	add	r2, sp, #56	; 0x38
 80056f0:	ab0b      	add	r3, sp, #44	; 0x2c
 80056f2:	4610      	mov	r0, r2
 80056f4:	4619      	mov	r1, r3
 80056f6:	f7fe fa01 	bl	8003afc <mpz_cmpabs>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dd0d      	ble.n	800571c <mpz_gcdext+0x36c>
    {
      mpz_swap (s0, s1);
 8005700:	aa0e      	add	r2, sp, #56	; 0x38
 8005702:	ab0b      	add	r3, sp, #44	; 0x2c
 8005704:	4610      	mov	r0, r2
 8005706:	4619      	mov	r1, r3
 8005708:	f7fe fa3e 	bl	8003b88 <mpz_swap>
      mpz_sub (t0, t0, t1);
 800570c:	a908      	add	r1, sp, #32
 800570e:	aa08      	add	r2, sp, #32
 8005710:	ab05      	add	r3, sp, #20
 8005712:	4608      	mov	r0, r1
 8005714:	4611      	mov	r1, r2
 8005716:	461a      	mov	r2, r3
 8005718:	f7fe fc56 	bl	8003fc8 <mpz_sub>
    }
  if (u->_mp_size < 0)
 800571c:	9b00      	ldr	r3, [sp, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	da05      	bge.n	8005730 <mpz_gcdext+0x380>
    mpz_neg (s0, s0);
 8005724:	aa0e      	add	r2, sp, #56	; 0x38
 8005726:	ab0e      	add	r3, sp, #56	; 0x38
 8005728:	4610      	mov	r0, r2
 800572a:	4619      	mov	r1, r3
 800572c:	f7fe fa18 	bl	8003b60 <mpz_neg>
  if (v->_mp_size < 0)
 8005730:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	da05      	bge.n	8005744 <mpz_gcdext+0x394>
    mpz_neg (t0, t0);
 8005738:	aa08      	add	r2, sp, #32
 800573a:	ab08      	add	r3, sp, #32
 800573c:	4610      	mov	r0, r2
 800573e:	4619      	mov	r1, r3
 8005740:	f7fe fa0e 	bl	8003b60 <mpz_neg>

  mpz_swap (g, tv);
 8005744:	ab11      	add	r3, sp, #68	; 0x44
 8005746:	9803      	ldr	r0, [sp, #12]
 8005748:	4619      	mov	r1, r3
 800574a:	f7fe fa1d 	bl	8003b88 <mpz_swap>
  if (s)
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <mpz_gcdext+0x3ae>
    mpz_swap (s, s0);
 8005754:	ab0e      	add	r3, sp, #56	; 0x38
 8005756:	9802      	ldr	r0, [sp, #8]
 8005758:	4619      	mov	r1, r3
 800575a:	f7fe fa15 	bl	8003b88 <mpz_swap>
  if (t)
 800575e:	9b01      	ldr	r3, [sp, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <mpz_gcdext+0x3be>
    mpz_swap (t, t0);
 8005764:	ab08      	add	r3, sp, #32
 8005766:	9801      	ldr	r0, [sp, #4]
 8005768:	4619      	mov	r1, r3
 800576a:	f7fe fa0d 	bl	8003b88 <mpz_swap>

  mpz_clear (tu);
 800576e:	ab14      	add	r3, sp, #80	; 0x50
 8005770:	4618      	mov	r0, r3
 8005772:	f7fd fcbb 	bl	80030ec <mpz_clear>
  mpz_clear (tv);
 8005776:	ab11      	add	r3, sp, #68	; 0x44
 8005778:	4618      	mov	r0, r3
 800577a:	f7fd fcb7 	bl	80030ec <mpz_clear>
  mpz_clear (s0);
 800577e:	ab0e      	add	r3, sp, #56	; 0x38
 8005780:	4618      	mov	r0, r3
 8005782:	f7fd fcb3 	bl	80030ec <mpz_clear>
  mpz_clear (s1);
 8005786:	ab0b      	add	r3, sp, #44	; 0x2c
 8005788:	4618      	mov	r0, r3
 800578a:	f7fd fcaf 	bl	80030ec <mpz_clear>
  mpz_clear (t0);
 800578e:	ab08      	add	r3, sp, #32
 8005790:	4618      	mov	r0, r3
 8005792:	f7fd fcab 	bl	80030ec <mpz_clear>
  mpz_clear (t1);
 8005796:	ab05      	add	r3, sp, #20
 8005798:	4618      	mov	r0, r3
 800579a:	f7fd fca7 	bl	80030ec <mpz_clear>
}
 800579e:	b023      	add	sp, #140	; 0x8c
 80057a0:	f85d fb04 	ldr.w	pc, [sp], #4

080057a4 <mpz_lcm>:

void
mpz_lcm (mpz_t r, const mpz_t u, const mpz_t v)
{
 80057a4:	b500      	push	{lr}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	9003      	str	r0, [sp, #12]
 80057aa:	9102      	str	r1, [sp, #8]
 80057ac:	9201      	str	r2, [sp, #4]
  mpz_t g;

  if (u->_mp_size == 0 || v->_mp_size == 0)
 80057ae:	9b02      	ldr	r3, [sp, #8]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <mpz_lcm+0x1a>
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <mpz_lcm+0x22>
    {
      r->_mp_size = 0;
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	605a      	str	r2, [r3, #4]
 80057c4:	e01e      	b.n	8005804 <mpz_lcm+0x60>
      return;
    }

  mpz_init (g);
 80057c6:	ab05      	add	r3, sp, #20
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd fc5d 	bl	8003088 <mpz_init>

  mpz_gcd (g, u, v);
 80057ce:	ab05      	add	r3, sp, #20
 80057d0:	4618      	mov	r0, r3
 80057d2:	9902      	ldr	r1, [sp, #8]
 80057d4:	9a01      	ldr	r2, [sp, #4]
 80057d6:	f7ff fd4b 	bl	8005270 <mpz_gcd>
  mpz_divexact (g, u, g);
 80057da:	aa05      	add	r2, sp, #20
 80057dc:	ab05      	add	r3, sp, #20
 80057de:	4610      	mov	r0, r2
 80057e0:	9902      	ldr	r1, [sp, #8]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7ff f9d8 	bl	8004b98 <mpz_divexact>
  mpz_mul (r, g, v);
 80057e8:	ab05      	add	r3, sp, #20
 80057ea:	9803      	ldr	r0, [sp, #12]
 80057ec:	4619      	mov	r1, r3
 80057ee:	9a01      	ldr	r2, [sp, #4]
 80057f0:	f7fe fc7a 	bl	80040e8 <mpz_mul>

  mpz_clear (g);
 80057f4:	ab05      	add	r3, sp, #20
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd fc78 	bl	80030ec <mpz_clear>
  mpz_abs (r, r);
 80057fc:	9803      	ldr	r0, [sp, #12]
 80057fe:	9903      	ldr	r1, [sp, #12]
 8005800:	f7fe f996 	bl	8003b30 <mpz_abs>
}
 8005804:	b009      	add	sp, #36	; 0x24
 8005806:	f85d fb04 	ldr.w	pc, [sp], #4
 800580a:	bf00      	nop

0800580c <mpz_lcm_ui>:

void
mpz_lcm_ui (mpz_t r, const mpz_t u, unsigned long v)
{
 800580c:	b500      	push	{lr}
 800580e:	b085      	sub	sp, #20
 8005810:	9003      	str	r0, [sp, #12]
 8005812:	9102      	str	r1, [sp, #8]
 8005814:	9201      	str	r2, [sp, #4]
  if (v == 0 || u->_mp_size == 0)
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <mpz_lcm_ui+0x18>
 800581c:	9b02      	ldr	r3, [sp, #8]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <mpz_lcm_ui+0x20>
    {
      r->_mp_size = 0;
 8005824:	9b03      	ldr	r3, [sp, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	605a      	str	r2, [r3, #4]
      return;
 800582a:	e012      	b.n	8005852 <mpz_lcm_ui+0x46>
    }

  v /= mpz_gcd_ui (NULL, u, v);
 800582c:	2000      	movs	r0, #0
 800582e:	9902      	ldr	r1, [sp, #8]
 8005830:	9a01      	ldr	r2, [sp, #4]
 8005832:	f7ff fcb9 	bl	80051a8 <mpz_gcd_ui>
 8005836:	4603      	mov	r3, r0
 8005838:	9a01      	ldr	r2, [sp, #4]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	9301      	str	r3, [sp, #4]
  mpz_mul_ui (r, u, v);
 8005840:	9803      	ldr	r0, [sp, #12]
 8005842:	9902      	ldr	r1, [sp, #8]
 8005844:	9a01      	ldr	r2, [sp, #4]
 8005846:	f7fe fc03 	bl	8004050 <mpz_mul_ui>

  mpz_abs (r, r);
 800584a:	9803      	ldr	r0, [sp, #12]
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	f7fe f96f 	bl	8003b30 <mpz_abs>
}
 8005852:	b005      	add	sp, #20
 8005854:	f85d fb04 	ldr.w	pc, [sp], #4

08005858 <mpz_invert>:

int
mpz_invert (mpz_t r, const mpz_t u, const mpz_t m)
{
 8005858:	b500      	push	{lr}
 800585a:	b08f      	sub	sp, #60	; 0x3c
 800585c:	9005      	str	r0, [sp, #20]
 800585e:	9104      	str	r1, [sp, #16]
 8005860:	9203      	str	r2, [sp, #12]
  mpz_t g, tr;
  int invertible;

  if (u->_mp_size == 0 || mpz_cmpabs_ui (m, 1) <= 0)
 8005862:	9b04      	ldr	r3, [sp, #16]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <mpz_invert+0x20>
 800586a:	9803      	ldr	r0, [sp, #12]
 800586c:	2101      	movs	r1, #1
 800586e:	f7fe f91b 	bl	8003aa8 <mpz_cmpabs_ui>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	dc01      	bgt.n	800587c <mpz_invert+0x24>
    return 0;
 8005878:	2300      	movs	r3, #0
 800587a:	e044      	b.n	8005906 <mpz_invert+0xae>

  mpz_init (g);
 800587c:	ab0a      	add	r3, sp, #40	; 0x28
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fc02 	bl	8003088 <mpz_init>
  mpz_init (tr);
 8005884:	ab07      	add	r3, sp, #28
 8005886:	4618      	mov	r0, r3
 8005888:	f7fd fbfe 	bl	8003088 <mpz_init>

  mpz_gcdext (g, tr, NULL, u, m);
 800588c:	aa0a      	add	r2, sp, #40	; 0x28
 800588e:	ab07      	add	r3, sp, #28
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	9100      	str	r1, [sp, #0]
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	2200      	movs	r2, #0
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	f7ff fd88 	bl	80053b0 <mpz_gcdext>
  invertible = (mpz_cmp_ui (g, 1) == 0);
 80058a0:	ab0a      	add	r3, sp, #40	; 0x28
 80058a2:	4618      	mov	r0, r3
 80058a4:	2101      	movs	r1, #1
 80058a6:	f7fe f89b 	bl	80039e0 <mpz_cmp_ui>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf14      	ite	ne
 80058b0:	2300      	movne	r3, #0
 80058b2:	2301      	moveq	r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	930d      	str	r3, [sp, #52]	; 0x34

  if (invertible)
 80058b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d01a      	beq.n	80058f4 <mpz_invert+0x9c>
    {
      if (tr->_mp_size < 0)
 80058be:	9b08      	ldr	r3, [sp, #32]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da12      	bge.n	80058ea <mpz_invert+0x92>
	{
	  if (m->_mp_size >= 0)
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db07      	blt.n	80058dc <mpz_invert+0x84>
	    mpz_add (tr, tr, m);
 80058cc:	aa07      	add	r2, sp, #28
 80058ce:	ab07      	add	r3, sp, #28
 80058d0:	4610      	mov	r0, r2
 80058d2:	4619      	mov	r1, r3
 80058d4:	9a03      	ldr	r2, [sp, #12]
 80058d6:	f7fe fb51 	bl	8003f7c <mpz_add>
 80058da:	e006      	b.n	80058ea <mpz_invert+0x92>
	  else
	    mpz_sub (tr, tr, m);
 80058dc:	aa07      	add	r2, sp, #28
 80058de:	ab07      	add	r3, sp, #28
 80058e0:	4610      	mov	r0, r2
 80058e2:	4619      	mov	r1, r3
 80058e4:	9a03      	ldr	r2, [sp, #12]
 80058e6:	f7fe fb6f 	bl	8003fc8 <mpz_sub>
	}
      mpz_swap (r, tr);
 80058ea:	ab07      	add	r3, sp, #28
 80058ec:	9805      	ldr	r0, [sp, #20]
 80058ee:	4619      	mov	r1, r3
 80058f0:	f7fe f94a 	bl	8003b88 <mpz_swap>
    }

  mpz_clear (g);
 80058f4:	ab0a      	add	r3, sp, #40	; 0x28
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd fbf8 	bl	80030ec <mpz_clear>
  mpz_clear (tr);
 80058fc:	ab07      	add	r3, sp, #28
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fd fbf4 	bl	80030ec <mpz_clear>
  return invertible;
 8005904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 8005906:	4618      	mov	r0, r3
 8005908:	b00f      	add	sp, #60	; 0x3c
 800590a:	f85d fb04 	ldr.w	pc, [sp], #4
 800590e:	bf00      	nop

08005910 <mpz_pow_ui>:

/* Higher level operations (sqrt, pow and root) */

void
mpz_pow_ui (mpz_t r, const mpz_t b, unsigned long e)
{
 8005910:	b500      	push	{lr}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	9003      	str	r0, [sp, #12]
 8005916:	9102      	str	r1, [sp, #8]
 8005918:	9201      	str	r2, [sp, #4]
  unsigned long bit;
  mpz_t tr;
  mpz_init_set_ui (tr, 1);
 800591a:	ab04      	add	r3, sp, #16
 800591c:	4618      	mov	r0, r3
 800591e:	2101      	movs	r1, #1
 8005920:	f7fd fc82 	bl	8003228 <mpz_init_set_ui>

  bit = GMP_ULONG_HIGHBIT;
 8005924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005928:	9307      	str	r3, [sp, #28]
  do
    {
      mpz_mul (tr, tr, tr);
 800592a:	a904      	add	r1, sp, #16
 800592c:	aa04      	add	r2, sp, #16
 800592e:	ab04      	add	r3, sp, #16
 8005930:	4608      	mov	r0, r1
 8005932:	4611      	mov	r1, r2
 8005934:	461a      	mov	r2, r3
 8005936:	f7fe fbd7 	bl	80040e8 <mpz_mul>
      if (e & bit)
 800593a:	9a01      	ldr	r2, [sp, #4]
 800593c:	9b07      	ldr	r3, [sp, #28]
 800593e:	4013      	ands	r3, r2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d006      	beq.n	8005952 <mpz_pow_ui+0x42>
	mpz_mul (tr, tr, b);
 8005944:	aa04      	add	r2, sp, #16
 8005946:	ab04      	add	r3, sp, #16
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	9a02      	ldr	r2, [sp, #8]
 800594e:	f7fe fbcb 	bl	80040e8 <mpz_mul>
      bit >>= 1;
 8005952:	9b07      	ldr	r3, [sp, #28]
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	9307      	str	r3, [sp, #28]
    }
  while (bit > 0);
 8005958:	9b07      	ldr	r3, [sp, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <mpz_pow_ui+0x1a>

  mpz_swap (r, tr);
 800595e:	ab04      	add	r3, sp, #16
 8005960:	9803      	ldr	r0, [sp, #12]
 8005962:	4619      	mov	r1, r3
 8005964:	f7fe f910 	bl	8003b88 <mpz_swap>
  mpz_clear (tr);
 8005968:	ab04      	add	r3, sp, #16
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fbbe 	bl	80030ec <mpz_clear>
}
 8005970:	b009      	add	sp, #36	; 0x24
 8005972:	f85d fb04 	ldr.w	pc, [sp], #4
 8005976:	bf00      	nop

08005978 <mpz_ui_pow_ui>:

void
mpz_ui_pow_ui (mpz_t r, unsigned long blimb, unsigned long e)
{
 8005978:	b500      	push	{lr}
 800597a:	b089      	sub	sp, #36	; 0x24
 800597c:	9003      	str	r0, [sp, #12]
 800597e:	9102      	str	r1, [sp, #8]
 8005980:	9201      	str	r2, [sp, #4]
  mpz_t b;
  mpz_init_set_ui (b, blimb);
 8005982:	ab05      	add	r3, sp, #20
 8005984:	4618      	mov	r0, r3
 8005986:	9902      	ldr	r1, [sp, #8]
 8005988:	f7fd fc4e 	bl	8003228 <mpz_init_set_ui>
  mpz_pow_ui (r, b, e);
 800598c:	ab05      	add	r3, sp, #20
 800598e:	9803      	ldr	r0, [sp, #12]
 8005990:	4619      	mov	r1, r3
 8005992:	9a01      	ldr	r2, [sp, #4]
 8005994:	f7ff ffbc 	bl	8005910 <mpz_pow_ui>
  mpz_clear (b);
 8005998:	ab05      	add	r3, sp, #20
 800599a:	4618      	mov	r0, r3
 800599c:	f7fd fba6 	bl	80030ec <mpz_clear>
}
 80059a0:	b009      	add	sp, #36	; 0x24
 80059a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80059a6:	bf00      	nop

080059a8 <mpz_powm>:

void
mpz_powm (mpz_t r, const mpz_t b, const mpz_t e, const mpz_t m)
{
 80059a8:	b500      	push	{lr}
 80059aa:	b09d      	sub	sp, #116	; 0x74
 80059ac:	9005      	str	r0, [sp, #20]
 80059ae:	9104      	str	r1, [sp, #16]
 80059b0:	9203      	str	r2, [sp, #12]
 80059b2:	9302      	str	r3, [sp, #8]
  mpz_t base;
  mp_size_t en, mn;
  mp_srcptr mp;
  struct gmp_div_inverse minv;
  unsigned shift;
  mp_ptr tp = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	9319      	str	r3, [sp, #100]	; 0x64

  en = GMP_ABS (e->_mp_size);
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfb8      	it	lt
 80059c0:	425b      	neglt	r3, r3
 80059c2:	931b      	str	r3, [sp, #108]	; 0x6c
  mn = GMP_ABS (m->_mp_size);
 80059c4:	9b02      	ldr	r3, [sp, #8]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bfb8      	it	lt
 80059cc:	425b      	neglt	r3, r3
 80059ce:	9316      	str	r3, [sp, #88]	; 0x58
  if (mn == 0)
 80059d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <mpz_powm+0x3a>
    gmp_die ("mpz_powm: Zero modulo.");
 80059d6:	f643 2014 	movw	r0, #14868	; 0x3a14
 80059da:	f6c0 0001 	movt	r0, #2049	; 0x801
 80059de:	f7fb f82d 	bl	8000a3c <gmp_die>

  if (en == 0)
 80059e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <mpz_powm+0x4a>
    {
      mpz_set_ui (r, 1);
 80059e8:	9805      	ldr	r0, [sp, #20]
 80059ea:	2101      	movs	r1, #1
 80059ec:	f7fd fbd0 	bl	8003190 <mpz_set_ui>
 80059f0:	e10e      	b.n	8005c10 <mpz_powm+0x268>
      return;
    }

  mp = m->_mp_d;
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	931a      	str	r3, [sp, #104]	; 0x68
  mpn_div_qr_invert (&minv, mp, mn);
 80059f8:	ab07      	add	r3, sp, #28
 80059fa:	4618      	mov	r0, r3
 80059fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005a00:	f7fc f8c8 	bl	8001b94 <mpn_div_qr_invert>
  shift = minv.shift;
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	9315      	str	r3, [sp, #84]	; 0x54

  if (shift > 0)
 8005a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d021      	beq.n	8005a52 <mpz_powm+0xaa>
    {
      /* To avoid shifts, we do all our reductions, except the final
	 one, using a *normalized* m. */
      minv.shift = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	9307      	str	r3, [sp, #28]

      tp = gmp_xalloc_limbs (mn);
 8005a12:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005a14:	f7fb f8c4 	bl	8000ba0 <gmp_xalloc_limbs>
 8005a18:	9019      	str	r0, [sp, #100]	; 0x64
      gmp_assert_nocarry (mpn_lshift (tp, mp, mn, shift));
 8005a1a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005a1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005a1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a22:	f7fb fd3f 	bl	80014a4 <mpn_lshift>
 8005a26:	9014      	str	r0, [sp, #80]	; 0x50
 8005a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00f      	beq.n	8005a4e <mpz_powm+0xa6>
 8005a2e:	f243 7064 	movw	r0, #14180	; 0x3764
 8005a32:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005a36:	f640 412b 	movw	r1, #3115	; 0xc2b
 8005a3a:	f643 629c 	movw	r2, #16028	; 0x3e9c
 8005a3e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005a42:	f643 1344 	movw	r3, #14660	; 0x3944
 8005a46:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005a4a:	f007 fe69 	bl	800d720 <__assert_func>
      mp = tp;
 8005a4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a50:	931a      	str	r3, [sp, #104]	; 0x68
    }

  mpz_init (base);
 8005a52:	ab0b      	add	r3, sp, #44	; 0x2c
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fd fb17 	bl	8003088 <mpz_init>

  if (e->_mp_size < 0)
 8005a5a:	9b03      	ldr	r3, [sp, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	da0f      	bge.n	8005a82 <mpz_powm+0xda>
    {
      if (!mpz_invert (base, b, m))
 8005a62:	ab0b      	add	r3, sp, #44	; 0x2c
 8005a64:	4618      	mov	r0, r3
 8005a66:	9904      	ldr	r1, [sp, #16]
 8005a68:	9a02      	ldr	r2, [sp, #8]
 8005a6a:	f7ff fef5 	bl	8005858 <mpz_invert>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d155      	bne.n	8005b20 <mpz_powm+0x178>
	gmp_die ("mpz_powm: Negative exponent and non-invertible base.");
 8005a74:	f643 202c 	movw	r0, #14892	; 0x3a2c
 8005a78:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005a7c:	f7fa ffde 	bl	8000a3c <gmp_die>
 8005a80:	e04e      	b.n	8005b20 <mpz_powm+0x178>
    }
  else
    {
      mp_size_t bn;
      mpz_abs (base, b);
 8005a82:	ab0b      	add	r3, sp, #44	; 0x2c
 8005a84:	4618      	mov	r0, r3
 8005a86:	9904      	ldr	r1, [sp, #16]
 8005a88:	f7fe f852 	bl	8003b30 <mpz_abs>

      bn = base->_mp_size;
 8005a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a8e:	9318      	str	r3, [sp, #96]	; 0x60
      if (bn >= mn)
 8005a90:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005a92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a94:	429a      	cmp	r2, r3
 8005a96:	db0d      	blt.n	8005ab4 <mpz_powm+0x10c>
	{
	  mpn_div_qr_preinv (NULL, base->_mp_d, base->_mp_size, mp, mn, &minv);
 8005a98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005a9e:	9100      	str	r1, [sp, #0]
 8005aa0:	a907      	add	r1, sp, #28
 8005aa2:	9101      	str	r1, [sp, #4]
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005aac:	f7fc fde4 	bl	8002678 <mpn_div_qr_preinv>
	  bn = mn;
 8005ab0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ab2:	9318      	str	r3, [sp, #96]	; 0x60
	}

      /* We have reduced the absolute value. Now take care of the
	 sign. Note that we get zero represented non-canonically as
	 m. */
      if (b->_mp_size < 0)
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da2a      	bge.n	8005b12 <mpz_powm+0x16a>
	{
	  mp_ptr bp = MPZ_REALLOC (base, mn);
 8005abc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	da06      	bge.n	8005ad2 <mpz_powm+0x12a>
 8005ac4:	ab0b      	add	r3, sp, #44	; 0x2c
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005aca:	f7fd fb1f 	bl	800310c <mpz_realloc>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	e000      	b.n	8005ad4 <mpz_powm+0x12c>
 8005ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad4:	9313      	str	r3, [sp, #76]	; 0x4c
	  gmp_assert_nocarry (mpn_sub (bp, mp, mn, bp, bn));
 8005ad6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ade:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ae2:	f7fb fa79 	bl	8000fd8 <mpn_sub>
 8005ae6:	9012      	str	r0, [sp, #72]	; 0x48
 8005ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00f      	beq.n	8005b0e <mpz_powm+0x166>
 8005aee:	f243 7064 	movw	r0, #14180	; 0x3764
 8005af2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005af6:	f640 4148 	movw	r1, #3144	; 0xc48
 8005afa:	f643 629c 	movw	r2, #16028	; 0x3e9c
 8005afe:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005b02:	f643 1344 	movw	r3, #14660	; 0x3944
 8005b06:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005b0a:	f007 fe09 	bl	800d720 <__assert_func>
	  bn = mn;
 8005b0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b10:	9318      	str	r3, [sp, #96]	; 0x60
	}
      base->_mp_size = mpn_normalized_size (base->_mp_d, bn);
 8005b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b14:	4618      	mov	r0, r3
 8005b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b18:	f7fb f8f4 	bl	8000d04 <mpn_normalized_size>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	930c      	str	r3, [sp, #48]	; 0x30
    }
  mpz_init_set_ui (tr, 1);
 8005b20:	ab0e      	add	r3, sp, #56	; 0x38
 8005b22:	4618      	mov	r0, r3
 8005b24:	2101      	movs	r1, #1
 8005b26:	f7fd fb7f 	bl	8003228 <mpz_init_set_ui>

  while (en-- > 0)
 8005b2a:	e03b      	b.n	8005ba4 <mpz_powm+0x1fc>
    {
      mp_limb_t w = e->_mp_d[en];
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	9311      	str	r3, [sp, #68]	; 0x44
      mp_limb_t bit;

      bit = GMP_LIMB_HIGHBIT;
 8005b3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b3e:	9317      	str	r3, [sp, #92]	; 0x5c
      do
	{
	  mpz_mul (tr, tr, tr);
 8005b40:	a90e      	add	r1, sp, #56	; 0x38
 8005b42:	aa0e      	add	r2, sp, #56	; 0x38
 8005b44:	ab0e      	add	r3, sp, #56	; 0x38
 8005b46:	4608      	mov	r0, r1
 8005b48:	4611      	mov	r1, r2
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fe facc 	bl	80040e8 <mpz_mul>
	  if (w & bit)
 8005b50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <mpz_powm+0x1c2>
	    mpz_mul (tr, tr, base);
 8005b5a:	a90e      	add	r1, sp, #56	; 0x38
 8005b5c:	aa0e      	add	r2, sp, #56	; 0x38
 8005b5e:	ab0b      	add	r3, sp, #44	; 0x2c
 8005b60:	4608      	mov	r0, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	461a      	mov	r2, r3
 8005b66:	f7fe fabf 	bl	80040e8 <mpz_mul>
	  if (tr->_mp_size > mn)
 8005b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	dd12      	ble.n	8005b98 <mpz_powm+0x1f0>
	    {
	      mpn_div_qr_preinv (NULL, tr->_mp_d, tr->_mp_size, mp, mn, &minv);
 8005b72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b76:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005b78:	9100      	str	r1, [sp, #0]
 8005b7a:	a907      	add	r1, sp, #28
 8005b7c:	9101      	str	r1, [sp, #4]
 8005b7e:	2000      	movs	r0, #0
 8005b80:	4611      	mov	r1, r2
 8005b82:	461a      	mov	r2, r3
 8005b84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005b86:	f7fc fd77 	bl	8002678 <mpn_div_qr_preinv>
	      tr->_mp_size = mpn_normalized_size (tr->_mp_d, mn);
 8005b8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005b90:	f7fb f8b8 	bl	8000d04 <mpn_normalized_size>
 8005b94:	4603      	mov	r3, r0
 8005b96:	930f      	str	r3, [sp, #60]	; 0x3c
	    }
	  bit >>= 1;
 8005b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	9317      	str	r3, [sp, #92]	; 0x5c
	}
      while (bit > 0);
 8005b9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1cd      	bne.n	8005b40 <mpz_powm+0x198>
	}
      base->_mp_size = mpn_normalized_size (base->_mp_d, bn);
    }
  mpz_init_set_ui (tr, 1);

  while (en-- > 0)
 8005ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dcbe      	bgt.n	8005b2c <mpz_powm+0x184>
	}
      while (bit > 0);
    }

  /* Final reduction */
  if (tr->_mp_size >= mn)
 8005bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	db14      	blt.n	8005be0 <mpz_powm+0x238>
    {
      minv.shift = shift;
 8005bb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bb8:	9307      	str	r3, [sp, #28]
      mpn_div_qr_preinv (NULL, tr->_mp_d, tr->_mp_size, mp, mn, &minv);
 8005bba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bbe:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005bc0:	9100      	str	r1, [sp, #0]
 8005bc2:	a907      	add	r1, sp, #28
 8005bc4:	9101      	str	r1, [sp, #4]
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	4611      	mov	r1, r2
 8005bca:	461a      	mov	r2, r3
 8005bcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005bce:	f7fc fd53 	bl	8002678 <mpn_div_qr_preinv>
      tr->_mp_size = mpn_normalized_size (tr->_mp_d, mn);
 8005bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005bd8:	f7fb f894 	bl	8000d04 <mpn_normalized_size>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	930f      	str	r3, [sp, #60]	; 0x3c
    }
  if (tp)
 8005be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <mpz_powm+0x24e>
    gmp_free (tp);
 8005be6:	f240 0314 	movw	r3, #20
 8005bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4798      	blx	r3

  mpz_swap (r, tr);
 8005bf6:	ab0e      	add	r3, sp, #56	; 0x38
 8005bf8:	9805      	ldr	r0, [sp, #20]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f7fd ffc4 	bl	8003b88 <mpz_swap>
  mpz_clear (tr);
 8005c00:	ab0e      	add	r3, sp, #56	; 0x38
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd fa72 	bl	80030ec <mpz_clear>
  mpz_clear (base);
 8005c08:	ab0b      	add	r3, sp, #44	; 0x2c
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fd fa6e 	bl	80030ec <mpz_clear>
}
 8005c10:	b01d      	add	sp, #116	; 0x74
 8005c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c16:	bf00      	nop

08005c18 <mpz_powm_ui>:

void
mpz_powm_ui (mpz_t r, const mpz_t b, unsigned long elimb, const mpz_t m)
{
 8005c18:	b500      	push	{lr}
 8005c1a:	b089      	sub	sp, #36	; 0x24
 8005c1c:	9003      	str	r0, [sp, #12]
 8005c1e:	9102      	str	r1, [sp, #8]
 8005c20:	9201      	str	r2, [sp, #4]
 8005c22:	9300      	str	r3, [sp, #0]
  mpz_t e;
  mpz_init_set_ui (e, elimb);
 8005c24:	ab05      	add	r3, sp, #20
 8005c26:	4618      	mov	r0, r3
 8005c28:	9901      	ldr	r1, [sp, #4]
 8005c2a:	f7fd fafd 	bl	8003228 <mpz_init_set_ui>
  mpz_powm (r, b, e, m);
 8005c2e:	ab05      	add	r3, sp, #20
 8005c30:	9803      	ldr	r0, [sp, #12]
 8005c32:	9902      	ldr	r1, [sp, #8]
 8005c34:	461a      	mov	r2, r3
 8005c36:	9b00      	ldr	r3, [sp, #0]
 8005c38:	f7ff feb6 	bl	80059a8 <mpz_powm>
  mpz_clear (e);
 8005c3c:	ab05      	add	r3, sp, #20
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fd fa54 	bl	80030ec <mpz_clear>
}
 8005c44:	b009      	add	sp, #36	; 0x24
 8005c46:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c4a:	bf00      	nop

08005c4c <mpz_rootrem>:

/* x=trunc(y^(1/z)), r=y-x^z */
void
mpz_rootrem (mpz_t x, mpz_t r, const mpz_t y, unsigned long z)
{
 8005c4c:	b500      	push	{lr}
 8005c4e:	b091      	sub	sp, #68	; 0x44
 8005c50:	9003      	str	r0, [sp, #12]
 8005c52:	9102      	str	r1, [sp, #8]
 8005c54:	9201      	str	r2, [sp, #4]
 8005c56:	9300      	str	r3, [sp, #0]
  int sgn;
  mpz_t t, u;

  sgn = y->_mp_size < 0;
 8005c58:	9b01      	ldr	r3, [sp, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	0fdb      	lsrs	r3, r3, #31
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	930f      	str	r3, [sp, #60]	; 0x3c
  if ((~z & sgn) != 0)
 8005c62:	9b00      	ldr	r3, [sp, #0]
 8005c64:	43da      	mvns	r2, r3
 8005c66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <mpz_rootrem+0x2e>
    gmp_die ("mpz_rootrem: Negative argument, with even root.");
 8005c6e:	f643 2064 	movw	r0, #14948	; 0x3a64
 8005c72:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005c76:	f7fa fee1 	bl	8000a3c <gmp_die>
  if (z == 0)
 8005c7a:	9b00      	ldr	r3, [sp, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <mpz_rootrem+0x40>
    gmp_die ("mpz_rootrem: Zeroth root.");
 8005c80:	f643 2094 	movw	r0, #14996	; 0x3a94
 8005c84:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005c88:	f7fa fed8 	bl	8000a3c <gmp_die>

  if (mpz_cmpabs_ui (y, 1) <= 0) {
 8005c8c:	9801      	ldr	r0, [sp, #4]
 8005c8e:	2101      	movs	r1, #1
 8005c90:	f7fd ff0a 	bl	8003aa8 <mpz_cmpabs_ui>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dc0e      	bgt.n	8005cb8 <mpz_rootrem+0x6c>
    if (x)
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <mpz_rootrem+0x5c>
      mpz_set (x, y);
 8005ca0:	9803      	ldr	r0, [sp, #12]
 8005ca2:	9901      	ldr	r1, [sp, #4]
 8005ca4:	f7fd fa88 	bl	80031b8 <mpz_set>
    if (r)
 8005ca8:	9b02      	ldr	r3, [sp, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80ad 	beq.w	8005e0a <mpz_rootrem+0x1be>
      r->_mp_size = 0;
 8005cb0:	9b02      	ldr	r3, [sp, #8]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	605a      	str	r2, [r3, #4]
    return;
 8005cb6:	e0a8      	b.n	8005e0a <mpz_rootrem+0x1be>
  }

  mpz_init (u);
 8005cb8:	ab08      	add	r3, sp, #32
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fd f9e4 	bl	8003088 <mpz_init>
  {
    mp_bitcnt_t tb;
    tb = mpz_sizeinbase (y, 2) / z + 1;
 8005cc0:	9801      	ldr	r0, [sp, #4]
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	f001 f9d6 	bl	8007074 <mpz_sizeinbase>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	9b00      	ldr	r3, [sp, #0]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	930e      	str	r3, [sp, #56]	; 0x38
    mpz_init2 (t, tb);
 8005cd4:	ab0b      	add	r3, sp, #44	; 0x2c
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005cda:	f7fd f9e7 	bl	80030ac <mpz_init2>
    mpz_setbit (t, tb);
 8005cde:	ab0b      	add	r3, sp, #44	; 0x2c
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ce4:	f000 fc7a 	bl	80065dc <mpz_setbit>
  }

  if (z == 2) /* simplify sqrt loop: z-1 == 1 */
 8005ce8:	9b00      	ldr	r3, [sp, #0]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d125      	bne.n	8005d3a <mpz_rootrem+0xee>
    do {
      mpz_swap (u, t);			/* u = x */
 8005cee:	aa08      	add	r2, sp, #32
 8005cf0:	ab0b      	add	r3, sp, #44	; 0x2c
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f7fd ff47 	bl	8003b88 <mpz_swap>
      mpz_tdiv_q (t, y, u);		/* t = y/x */
 8005cfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cfc:	ab08      	add	r3, sp, #32
 8005cfe:	4610      	mov	r0, r2
 8005d00:	9901      	ldr	r1, [sp, #4]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f7fe fcc8 	bl	8004698 <mpz_tdiv_q>
      mpz_add (t, t, u);		/* t = y/x + x */
 8005d08:	a90b      	add	r1, sp, #44	; 0x2c
 8005d0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d0c:	ab08      	add	r3, sp, #32
 8005d0e:	4608      	mov	r0, r1
 8005d10:	4611      	mov	r1, r2
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fe f932 	bl	8003f7c <mpz_add>
      mpz_tdiv_q_2exp (t, t, 1);	/* x'= (y/x + x)/2 */
 8005d18:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d1a:	ab0b      	add	r3, sp, #44	; 0x2c
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	2201      	movs	r2, #1
 8005d22:	f7fe ff01 	bl	8004b28 <mpz_tdiv_q_2exp>
    } while (mpz_cmpabs (t, u) < 0);	/* |x'| < |x| */
 8005d26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d28:	ab08      	add	r3, sp, #32
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f7fd fee5 	bl	8003afc <mpz_cmpabs>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	dbda      	blt.n	8005cee <mpz_rootrem+0xa2>
 8005d38:	e047      	b.n	8005dca <mpz_rootrem+0x17e>
  else /* z != 2 */ {
    mpz_t v;

    mpz_init (v);
 8005d3a:	ab05      	add	r3, sp, #20
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fd f9a3 	bl	8003088 <mpz_init>
    if (sgn)
 8005d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <mpz_rootrem+0x108>
      mpz_neg (t, t);
 8005d48:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d4a:	ab0b      	add	r3, sp, #44	; 0x2c
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f7fd ff06 	bl	8003b60 <mpz_neg>

    do {
      mpz_swap (u, t);			/* u = x */
 8005d54:	aa08      	add	r2, sp, #32
 8005d56:	ab0b      	add	r3, sp, #44	; 0x2c
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	f7fd ff14 	bl	8003b88 <mpz_swap>
      mpz_pow_ui (t, u, z - 1);		/* t = x^(z-1) */
 8005d60:	9b00      	ldr	r3, [sp, #0]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	a90b      	add	r1, sp, #44	; 0x2c
 8005d66:	aa08      	add	r2, sp, #32
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f7ff fdcf 	bl	8005910 <mpz_pow_ui>
      mpz_tdiv_q (t, y, t);		/* t = y/x^(z-1) */
 8005d72:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d74:	ab0b      	add	r3, sp, #44	; 0x2c
 8005d76:	4610      	mov	r0, r2
 8005d78:	9901      	ldr	r1, [sp, #4]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f7fe fc8c 	bl	8004698 <mpz_tdiv_q>
      mpz_mul_ui (v, u, z - 1);		/* v = x*(z-1) */
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	a905      	add	r1, sp, #20
 8005d86:	aa08      	add	r2, sp, #32
 8005d88:	4608      	mov	r0, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f7fe f95f 	bl	8004050 <mpz_mul_ui>
      mpz_add (t, t, v);		/* t = y/x^(z-1) + x*(z-1) */
 8005d92:	a90b      	add	r1, sp, #44	; 0x2c
 8005d94:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d96:	ab05      	add	r3, sp, #20
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f7fe f8ed 	bl	8003f7c <mpz_add>
      mpz_tdiv_q_ui (t, t, z);		/* x'=(y/x^(z-1) + x*(z-1))/z */
 8005da2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005da4:	ab0b      	add	r3, sp, #44	; 0x2c
 8005da6:	4610      	mov	r0, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	9a00      	ldr	r2, [sp, #0]
 8005dac:	f7ff f89c 	bl	8004ee8 <mpz_tdiv_q_ui>
    } while (mpz_cmpabs (t, u) < 0);	/* |x'| < |x| */
 8005db0:	aa0b      	add	r2, sp, #44	; 0x2c
 8005db2:	ab08      	add	r3, sp, #32
 8005db4:	4610      	mov	r0, r2
 8005db6:	4619      	mov	r1, r3
 8005db8:	f7fd fea0 	bl	8003afc <mpz_cmpabs>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dbc8      	blt.n	8005d54 <mpz_rootrem+0x108>

    mpz_clear (v);
 8005dc2:	ab05      	add	r3, sp, #20
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd f991 	bl	80030ec <mpz_clear>
  }

  if (r) {
 8005dca:	9b02      	ldr	r3, [sp, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00c      	beq.n	8005dea <mpz_rootrem+0x19e>
    mpz_pow_ui (t, u, z);
 8005dd0:	aa0b      	add	r2, sp, #44	; 0x2c
 8005dd2:	ab08      	add	r3, sp, #32
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	9a00      	ldr	r2, [sp, #0]
 8005dda:	f7ff fd99 	bl	8005910 <mpz_pow_ui>
    mpz_sub (r, y, t);
 8005dde:	ab0b      	add	r3, sp, #44	; 0x2c
 8005de0:	9802      	ldr	r0, [sp, #8]
 8005de2:	9901      	ldr	r1, [sp, #4]
 8005de4:	461a      	mov	r2, r3
 8005de6:	f7fe f8ef 	bl	8003fc8 <mpz_sub>
  }
  if (x)
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <mpz_rootrem+0x1ae>
    mpz_swap (x, u);
 8005df0:	ab08      	add	r3, sp, #32
 8005df2:	9803      	ldr	r0, [sp, #12]
 8005df4:	4619      	mov	r1, r3
 8005df6:	f7fd fec7 	bl	8003b88 <mpz_swap>
  mpz_clear (u);
 8005dfa:	ab08      	add	r3, sp, #32
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fd f975 	bl	80030ec <mpz_clear>
  mpz_clear (t);
 8005e02:	ab0b      	add	r3, sp, #44	; 0x2c
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fd f971 	bl	80030ec <mpz_clear>
}
 8005e0a:	b011      	add	sp, #68	; 0x44
 8005e0c:	f85d fb04 	ldr.w	pc, [sp], #4

08005e10 <mpz_root>:

int
mpz_root (mpz_t x, const mpz_t y, unsigned long z)
{
 8005e10:	b500      	push	{lr}
 8005e12:	b089      	sub	sp, #36	; 0x24
 8005e14:	9003      	str	r0, [sp, #12]
 8005e16:	9102      	str	r1, [sp, #8]
 8005e18:	9201      	str	r2, [sp, #4]
  int res;
  mpz_t r;

  mpz_init (r);
 8005e1a:	ab04      	add	r3, sp, #16
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fd f933 	bl	8003088 <mpz_init>
  mpz_rootrem (x, r, y, z);
 8005e22:	ab04      	add	r3, sp, #16
 8005e24:	9803      	ldr	r0, [sp, #12]
 8005e26:	4619      	mov	r1, r3
 8005e28:	9a02      	ldr	r2, [sp, #8]
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	f7ff ff0e 	bl	8005c4c <mpz_rootrem>
  res = r->_mp_size == 0;
 8005e30:	9b05      	ldr	r3, [sp, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bf14      	ite	ne
 8005e36:	2300      	movne	r3, #0
 8005e38:	2301      	moveq	r3, #1
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	9307      	str	r3, [sp, #28]
  mpz_clear (r);
 8005e3e:	ab04      	add	r3, sp, #16
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fd f953 	bl	80030ec <mpz_clear>

  return res;
 8005e46:	9b07      	ldr	r3, [sp, #28]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	b009      	add	sp, #36	; 0x24
 8005e4c:	f85d fb04 	ldr.w	pc, [sp], #4

08005e50 <mpz_sqrtrem>:

/* Compute s = floor(sqrt(u)) and r = u - s^2. Allows r == NULL */
void
mpz_sqrtrem (mpz_t s, mpz_t r, const mpz_t u)
{
 8005e50:	b500      	push	{lr}
 8005e52:	b085      	sub	sp, #20
 8005e54:	9003      	str	r0, [sp, #12]
 8005e56:	9102      	str	r1, [sp, #8]
 8005e58:	9201      	str	r2, [sp, #4]
  mpz_rootrem (s, r, u, 2);
 8005e5a:	9803      	ldr	r0, [sp, #12]
 8005e5c:	9902      	ldr	r1, [sp, #8]
 8005e5e:	9a01      	ldr	r2, [sp, #4]
 8005e60:	2302      	movs	r3, #2
 8005e62:	f7ff fef3 	bl	8005c4c <mpz_rootrem>
}
 8005e66:	b005      	add	sp, #20
 8005e68:	f85d fb04 	ldr.w	pc, [sp], #4

08005e6c <mpz_sqrt>:

void
mpz_sqrt (mpz_t s, const mpz_t u)
{
 8005e6c:	b500      	push	{lr}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	9001      	str	r0, [sp, #4]
 8005e72:	9100      	str	r1, [sp, #0]
  mpz_rootrem (s, NULL, u, 2);
 8005e74:	9801      	ldr	r0, [sp, #4]
 8005e76:	2100      	movs	r1, #0
 8005e78:	9a00      	ldr	r2, [sp, #0]
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	f7ff fee6 	bl	8005c4c <mpz_rootrem>
}
 8005e80:	b003      	add	sp, #12
 8005e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e86:	bf00      	nop

08005e88 <mpz_perfect_square_p>:

int
mpz_perfect_square_p (const mpz_t u)
{
 8005e88:	b500      	push	{lr}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	9001      	str	r0, [sp, #4]
  if (u->_mp_size <= 0)
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	dc07      	bgt.n	8005ea6 <mpz_perfect_square_p+0x1e>
    return (u->_mp_size == 0);
 8005e96:	9b01      	ldr	r3, [sp, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bf14      	ite	ne
 8005e9e:	2300      	movne	r3, #0
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e005      	b.n	8005eb2 <mpz_perfect_square_p+0x2a>
  else
    return mpz_root (NULL, u, 2);
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	9901      	ldr	r1, [sp, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f7ff ffb0 	bl	8005e10 <mpz_root>
 8005eb0:	4603      	mov	r3, r0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	b003      	add	sp, #12
 8005eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eba:	bf00      	nop

08005ebc <mpn_perfect_square_p>:

int
mpn_perfect_square_p (mp_srcptr p, mp_size_t n)
{
 8005ebc:	b500      	push	{lr}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	9001      	str	r0, [sp, #4]
 8005ec2:	9100      	str	r1, [sp, #0]
  mpz_t t;

  assert (n > 0);
 8005ec4:	9b00      	ldr	r3, [sp, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dc0f      	bgt.n	8005eea <mpn_perfect_square_p+0x2e>
 8005eca:	f243 7064 	movw	r0, #14180	; 0x3764
 8005ece:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005ed2:	f640 41e6 	movw	r1, #3302	; 0xce6
 8005ed6:	f643 62a8 	movw	r2, #16040	; 0x3ea8
 8005eda:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005ede:	f243 73e0 	movw	r3, #14304	; 0x37e0
 8005ee2:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005ee6:	f007 fc1b 	bl	800d720 <__assert_func>
  assert (p [n-1] != 0);
 8005eea:	9b00      	ldr	r3, [sp, #0]
 8005eec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	9a01      	ldr	r2, [sp, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10f      	bne.n	8005f1e <mpn_perfect_square_p+0x62>
 8005efe:	f243 7064 	movw	r0, #14180	; 0x3764
 8005f02:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005f06:	f640 41e7 	movw	r1, #3303	; 0xce7
 8005f0a:	f643 62a8 	movw	r2, #16040	; 0x3ea8
 8005f0e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005f12:	f643 23b0 	movw	r3, #15024	; 0x3ab0
 8005f16:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005f1a:	f007 fc01 	bl	800d720 <__assert_func>
  return mpz_root (NULL, mpz_roinit_n (t, p, n), 2);
 8005f1e:	ab03      	add	r3, sp, #12
 8005f20:	4618      	mov	r0, r3
 8005f22:	9901      	ldr	r1, [sp, #4]
 8005f24:	9a00      	ldr	r2, [sp, #0]
 8005f26:	f7fd fa95 	bl	8003454 <mpz_roinit_n>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	4619      	mov	r1, r3
 8005f30:	2202      	movs	r2, #2
 8005f32:	f7ff ff6d 	bl	8005e10 <mpz_root>
 8005f36:	4603      	mov	r3, r0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	b007      	add	sp, #28
 8005f3c:	f85d fb04 	ldr.w	pc, [sp], #4

08005f40 <mpn_sqrtrem>:

mp_size_t
mpn_sqrtrem (mp_ptr sp, mp_ptr rp, mp_srcptr p, mp_size_t n)
{
 8005f40:	b500      	push	{lr}
 8005f42:	b08f      	sub	sp, #60	; 0x3c
 8005f44:	9003      	str	r0, [sp, #12]
 8005f46:	9102      	str	r1, [sp, #8]
 8005f48:	9201      	str	r2, [sp, #4]
 8005f4a:	9300      	str	r3, [sp, #0]
  mpz_t s, r, u;
  mp_size_t res;

  assert (n > 0);
 8005f4c:	9b00      	ldr	r3, [sp, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	dc0f      	bgt.n	8005f72 <mpn_sqrtrem+0x32>
 8005f52:	f243 7064 	movw	r0, #14180	; 0x3764
 8005f56:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005f5a:	f640 41f1 	movw	r1, #3313	; 0xcf1
 8005f5e:	f643 62c0 	movw	r2, #16064	; 0x3ec0
 8005f62:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005f66:	f243 73e0 	movw	r3, #14304	; 0x37e0
 8005f6a:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005f6e:	f007 fbd7 	bl	800d720 <__assert_func>
  assert (p [n-1] != 0);
 8005f72:	9b00      	ldr	r3, [sp, #0]
 8005f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	9a01      	ldr	r2, [sp, #4]
 8005f7e:	4413      	add	r3, r2
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <mpn_sqrtrem+0x66>
 8005f86:	f243 7064 	movw	r0, #14180	; 0x3764
 8005f8a:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005f8e:	f640 41f2 	movw	r1, #3314	; 0xcf2
 8005f92:	f643 62c0 	movw	r2, #16064	; 0x3ec0
 8005f96:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005f9a:	f643 23b0 	movw	r3, #15024	; 0x3ab0
 8005f9e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8005fa2:	f007 fbbd 	bl	800d720 <__assert_func>

  mpz_init (r);
 8005fa6:	ab07      	add	r3, sp, #28
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fd f86d 	bl	8003088 <mpz_init>
  mpz_init (s);
 8005fae:	ab0a      	add	r3, sp, #40	; 0x28
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fd f869 	bl	8003088 <mpz_init>
  mpz_rootrem (s, r, mpz_roinit_n (u, p, n), 2);
 8005fb6:	ab04      	add	r3, sp, #16
 8005fb8:	4618      	mov	r0, r3
 8005fba:	9901      	ldr	r1, [sp, #4]
 8005fbc:	9a00      	ldr	r2, [sp, #0]
 8005fbe:	f7fd fa49 	bl	8003454 <mpz_roinit_n>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	a90a      	add	r1, sp, #40	; 0x28
 8005fc6:	aa07      	add	r2, sp, #28
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	2302      	movs	r3, #2
 8005fd0:	f7ff fe3c 	bl	8005c4c <mpz_rootrem>

  assert (s->_mp_size == (n+1)/2);
 8005fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	0fd9      	lsrs	r1, r3, #31
 8005fdc:	440b      	add	r3, r1
 8005fde:	105b      	asrs	r3, r3, #1
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d00f      	beq.n	8006004 <mpn_sqrtrem+0xc4>
 8005fe4:	f243 7064 	movw	r0, #14180	; 0x3764
 8005fe8:	f6c0 0001 	movt	r0, #2049	; 0x801
 8005fec:	f640 41f8 	movw	r1, #3320	; 0xcf8
 8005ff0:	f643 62c0 	movw	r2, #16064	; 0x3ec0
 8005ff4:	f6c0 0201 	movt	r2, #2049	; 0x801
 8005ff8:	f643 23c0 	movw	r3, #15040	; 0x3ac0
 8005ffc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006000:	f007 fb8e 	bl	800d720 <__assert_func>
  mpn_copyd (sp, s->_mp_d, s->_mp_size);
 8006004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006008:	9803      	ldr	r0, [sp, #12]
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	f7fa fe19 	bl	8000c44 <mpn_copyd>
  mpz_clear (s);
 8006012:	ab0a      	add	r3, sp, #40	; 0x28
 8006014:	4618      	mov	r0, r3
 8006016:	f7fd f869 	bl	80030ec <mpz_clear>
  res = r->_mp_size;
 800601a:	9b08      	ldr	r3, [sp, #32]
 800601c:	930d      	str	r3, [sp, #52]	; 0x34
  if (rp)
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <mpn_sqrtrem+0xf0>
    mpn_copyd (rp, r->_mp_d, res);
 8006024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006026:	9802      	ldr	r0, [sp, #8]
 8006028:	4619      	mov	r1, r3
 800602a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800602c:	f7fa fe0a 	bl	8000c44 <mpn_copyd>
  mpz_clear (r);
 8006030:	ab07      	add	r3, sp, #28
 8006032:	4618      	mov	r0, r3
 8006034:	f7fd f85a 	bl	80030ec <mpz_clear>
  return res;
 8006038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
 800603a:	4618      	mov	r0, r3
 800603c:	b00f      	add	sp, #60	; 0x3c
 800603e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006042:	bf00      	nop

08006044 <mpz_fac_ui>:

/* Combinatorics */

void
mpz_fac_ui (mpz_t x, unsigned long n)
{
 8006044:	b500      	push	{lr}
 8006046:	b083      	sub	sp, #12
 8006048:	9001      	str	r0, [sp, #4]
 800604a:	9100      	str	r1, [sp, #0]
  mpz_set_ui (x, n + (n == 0));
 800604c:	9b00      	ldr	r3, [sp, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2300      	movne	r3, #0
 8006054:	2301      	moveq	r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	9b00      	ldr	r3, [sp, #0]
 800605c:	4413      	add	r3, r2
 800605e:	9801      	ldr	r0, [sp, #4]
 8006060:	4619      	mov	r1, r3
 8006062:	f7fd f895 	bl	8003190 <mpz_set_ui>
  for (;n > 2;)
 8006066:	e007      	b.n	8006078 <mpz_fac_ui+0x34>
    mpz_mul_ui (x, x, --n);
 8006068:	9b00      	ldr	r3, [sp, #0]
 800606a:	3b01      	subs	r3, #1
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	9801      	ldr	r0, [sp, #4]
 8006070:	9901      	ldr	r1, [sp, #4]
 8006072:	9a00      	ldr	r2, [sp, #0]
 8006074:	f7fd ffec 	bl	8004050 <mpz_mul_ui>

void
mpz_fac_ui (mpz_t x, unsigned long n)
{
  mpz_set_ui (x, n + (n == 0));
  for (;n > 2;)
 8006078:	9b00      	ldr	r3, [sp, #0]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d8f4      	bhi.n	8006068 <mpz_fac_ui+0x24>
    mpz_mul_ui (x, x, --n);
}
 800607e:	b003      	add	sp, #12
 8006080:	f85d fb04 	ldr.w	pc, [sp], #4

08006084 <mpz_bin_uiui>:

void
mpz_bin_uiui (mpz_t r, unsigned long n, unsigned long k)
{
 8006084:	b500      	push	{lr}
 8006086:	b089      	sub	sp, #36	; 0x24
 8006088:	9003      	str	r0, [sp, #12]
 800608a:	9102      	str	r1, [sp, #8]
 800608c:	9201      	str	r2, [sp, #4]
  mpz_t t;

  mpz_set_ui (r, k <= n);
 800608e:	9a01      	ldr	r2, [sp, #4]
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	bf8c      	ite	hi
 8006096:	2300      	movhi	r3, #0
 8006098:	2301      	movls	r3, #1
 800609a:	b2db      	uxtb	r3, r3
 800609c:	9803      	ldr	r0, [sp, #12]
 800609e:	4619      	mov	r1, r3
 80060a0:	f7fd f876 	bl	8003190 <mpz_set_ui>

  if (k > (n >> 1))
 80060a4:	9b02      	ldr	r3, [sp, #8]
 80060a6:	085a      	lsrs	r2, r3, #1
 80060a8:	9b01      	ldr	r3, [sp, #4]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d209      	bcs.n	80060c2 <mpz_bin_uiui+0x3e>
    k = (k <= n) ? n - k : 0;
 80060ae:	9a01      	ldr	r2, [sp, #4]
 80060b0:	9b02      	ldr	r3, [sp, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d803      	bhi.n	80060be <mpz_bin_uiui+0x3a>
 80060b6:	9a02      	ldr	r2, [sp, #8]
 80060b8:	9b01      	ldr	r3, [sp, #4]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	e000      	b.n	80060c0 <mpz_bin_uiui+0x3c>
 80060be:	2300      	movs	r3, #0
 80060c0:	9301      	str	r3, [sp, #4]

  mpz_init (t);
 80060c2:	ab05      	add	r3, sp, #20
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fc ffdf 	bl	8003088 <mpz_init>
  mpz_fac_ui (t, k);
 80060ca:	ab05      	add	r3, sp, #20
 80060cc:	4618      	mov	r0, r3
 80060ce:	9901      	ldr	r1, [sp, #4]
 80060d0:	f7ff ffb8 	bl	8006044 <mpz_fac_ui>

  for (; k > 0; k--)
 80060d4:	e00a      	b.n	80060ec <mpz_bin_uiui+0x68>
      mpz_mul_ui (r, r, n--);
 80060d6:	9b02      	ldr	r3, [sp, #8]
 80060d8:	1e5a      	subs	r2, r3, #1
 80060da:	9202      	str	r2, [sp, #8]
 80060dc:	9803      	ldr	r0, [sp, #12]
 80060de:	9903      	ldr	r1, [sp, #12]
 80060e0:	461a      	mov	r2, r3
 80060e2:	f7fd ffb5 	bl	8004050 <mpz_mul_ui>
    k = (k <= n) ? n - k : 0;

  mpz_init (t);
  mpz_fac_ui (t, k);

  for (; k > 0; k--)
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f1      	bne.n	80060d6 <mpz_bin_uiui+0x52>
      mpz_mul_ui (r, r, n--);

  mpz_divexact (r, r, t);
 80060f2:	ab05      	add	r3, sp, #20
 80060f4:	9803      	ldr	r0, [sp, #12]
 80060f6:	9903      	ldr	r1, [sp, #12]
 80060f8:	461a      	mov	r2, r3
 80060fa:	f7fe fd4d 	bl	8004b98 <mpz_divexact>
  mpz_clear (t);
 80060fe:	ab05      	add	r3, sp, #20
 8006100:	4618      	mov	r0, r3
 8006102:	f7fc fff3 	bl	80030ec <mpz_clear>
}
 8006106:	b009      	add	sp, #36	; 0x24
 8006108:	f85d fb04 	ldr.w	pc, [sp], #4

0800610c <gmp_millerrabin>:

/* Primality testing */
static int
gmp_millerrabin (const mpz_t n, const mpz_t nm1, mpz_t y,
		 const mpz_t q, mp_bitcnt_t k)
{
 800610c:	b500      	push	{lr}
 800610e:	b085      	sub	sp, #20
 8006110:	9003      	str	r0, [sp, #12]
 8006112:	9102      	str	r1, [sp, #8]
 8006114:	9201      	str	r2, [sp, #4]
 8006116:	9300      	str	r3, [sp, #0]
  assert (k > 0);
 8006118:	9b06      	ldr	r3, [sp, #24]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <gmp_millerrabin+0x32>
 800611e:	f243 7064 	movw	r0, #14180	; 0x3764
 8006122:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006126:	f640 5126 	movw	r1, #3366	; 0xd26
 800612a:	f643 62cc 	movw	r2, #16076	; 0x3ecc
 800612e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006132:	f643 23d8 	movw	r3, #15064	; 0x3ad8
 8006136:	f6c0 0301 	movt	r3, #2049	; 0x801
 800613a:	f007 faf1 	bl	800d720 <__assert_func>

  /* Caller must initialize y to the base. */
  mpz_powm (y, y, q, n);
 800613e:	9801      	ldr	r0, [sp, #4]
 8006140:	9901      	ldr	r1, [sp, #4]
 8006142:	9a00      	ldr	r2, [sp, #0]
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	f7ff fc2f 	bl	80059a8 <mpz_powm>

  if (mpz_cmp_ui (y, 1) == 0 || mpz_cmp (y, nm1) == 0)
 800614a:	9801      	ldr	r0, [sp, #4]
 800614c:	2101      	movs	r1, #1
 800614e:	f7fd fc47 	bl	80039e0 <mpz_cmp_ui>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d006      	beq.n	8006166 <gmp_millerrabin+0x5a>
 8006158:	9801      	ldr	r0, [sp, #4]
 800615a:	9902      	ldr	r1, [sp, #8]
 800615c:	f7fd fc6e 	bl	8003a3c <mpz_cmp>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <gmp_millerrabin+0x5e>
    return 1;
 8006166:	2301      	movs	r3, #1
 8006168:	e01f      	b.n	80061aa <gmp_millerrabin+0x9e>

  while (--k > 0)
 800616a:	e017      	b.n	800619c <gmp_millerrabin+0x90>
    {
      mpz_powm_ui (y, y, 2, n);
 800616c:	9801      	ldr	r0, [sp, #4]
 800616e:	9901      	ldr	r1, [sp, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	f7ff fd50 	bl	8005c18 <mpz_powm_ui>
      if (mpz_cmp (y, nm1) == 0)
 8006178:	9801      	ldr	r0, [sp, #4]
 800617a:	9902      	ldr	r1, [sp, #8]
 800617c:	f7fd fc5e 	bl	8003a3c <mpz_cmp>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <gmp_millerrabin+0x7e>
	return 1;
 8006186:	2301      	movs	r3, #1
 8006188:	e00f      	b.n	80061aa <gmp_millerrabin+0x9e>
      /* y == 1 means that the previous y was a non-trivial square root
	 of 1 (mod n). y == 0 means that n is a power of the base.
	 In either case, n is not prime. */
      if (mpz_cmp_ui (y, 1) <= 0)
 800618a:	9801      	ldr	r0, [sp, #4]
 800618c:	2101      	movs	r1, #1
 800618e:	f7fd fc27 	bl	80039e0 <mpz_cmp_ui>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	dc01      	bgt.n	800619c <gmp_millerrabin+0x90>
	return 0;
 8006198:	2300      	movs	r3, #0
 800619a:	e006      	b.n	80061aa <gmp_millerrabin+0x9e>
  mpz_powm (y, y, q, n);

  if (mpz_cmp_ui (y, 1) == 0 || mpz_cmp (y, nm1) == 0)
    return 1;

  while (--k > 0)
 800619c:	9b06      	ldr	r3, [sp, #24]
 800619e:	3b01      	subs	r3, #1
 80061a0:	9306      	str	r3, [sp, #24]
 80061a2:	9b06      	ldr	r3, [sp, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e1      	bne.n	800616c <gmp_millerrabin+0x60>
	 of 1 (mod n). y == 0 means that n is a power of the base.
	 In either case, n is not prime. */
      if (mpz_cmp_ui (y, 1) <= 0)
	return 0;
    }
  return 0;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	b005      	add	sp, #20
 80061ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80061b2:	bf00      	nop

080061b4 <mpz_probab_prime_p>:
/* Bit (p+1)/2 is set, for each odd prime <= 61 */
#define GMP_PRIME_MASK 0xc96996dcUL

int
mpz_probab_prime_p (const mpz_t n, int reps)
{
 80061b4:	b500      	push	{lr}
 80061b6:	b091      	sub	sp, #68	; 0x44
 80061b8:	9003      	str	r0, [sp, #12]
 80061ba:	9102      	str	r1, [sp, #8]
  int is_prime;
  int j;

  /* Note that we use the absolute value of n only, for compatibility
     with the real GMP. */
  if (mpz_even_p (n))
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf0c      	ite	eq
 80061c4:	2300      	moveq	r3, #0
 80061c6:	2301      	movne	r3, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <mpz_probab_prime_p+0x3a>
    return (mpz_cmpabs_ui (n, 2) == 0) ? 2 : 0;
 80061d8:	9803      	ldr	r0, [sp, #12]
 80061da:	2102      	movs	r1, #2
 80061dc:	f7fd fc64 	bl	8003aa8 <mpz_cmpabs_ui>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <mpz_probab_prime_p+0x36>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e000      	b.n	80061ec <mpz_probab_prime_p+0x38>
 80061ea:	2300      	movs	r3, #0
 80061ec:	e0b2      	b.n	8006354 <mpz_probab_prime_p+0x1a0>

  /* Above test excludes n == 0 */
  assert (n->_mp_size != 0);
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <mpz_probab_prime_p+0x62>
 80061f6:	f243 7064 	movw	r0, #14180	; 0x3764
 80061fa:	f6c0 0001 	movt	r0, #2049	; 0x801
 80061fe:	f640 5153 	movw	r1, #3411	; 0xd53
 8006202:	f643 62dc 	movw	r2, #16092	; 0x3edc
 8006206:	f6c0 0201 	movt	r2, #2049	; 0x801
 800620a:	f643 23e0 	movw	r3, #15072	; 0x3ae0
 800620e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006212:	f007 fa85 	bl	800d720 <__assert_func>

  if (mpz_cmpabs_ui (n, 64) < 0)
 8006216:	9803      	ldr	r0, [sp, #12]
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	f7fd fc45 	bl	8003aa8 <mpz_cmpabs_ui>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	da0c      	bge.n	800623e <mpz_probab_prime_p+0x8a>
    return (GMP_PRIME_MASK >> (n->_mp_d[0] >> 1)) & 2;
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	461a      	mov	r2, r3
 800622e:	f249 63dc 	movw	r3, #38620	; 0x96dc
 8006232:	f6cc 1369 	movt	r3, #51561	; 0xc969
 8006236:	40d3      	lsrs	r3, r2
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	e08a      	b.n	8006354 <mpz_probab_prime_p+0x1a0>

  if (mpz_gcd_ui (NULL, n, GMP_PRIME_PRODUCT) != 1)
 800623e:	2000      	movs	r0, #0
 8006240:	9903      	ldr	r1, [sp, #12]
 8006242:	f24d 7297 	movw	r2, #55191	; 0xd797
 8006246:	f2cc 02cf 	movt	r2, #49359	; 0xc0cf
 800624a:	f7fe ffad 	bl	80051a8 <mpz_gcd_ui>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d001      	beq.n	8006258 <mpz_probab_prime_p+0xa4>
    return 0;
 8006254:	2300      	movs	r3, #0
 8006256:	e07d      	b.n	8006354 <mpz_probab_prime_p+0x1a0>

  /* All prime factors are >= 31. */
  if (mpz_cmpabs_ui (n, 31*31) < 0)
 8006258:	9803      	ldr	r0, [sp, #12]
 800625a:	f240 31c1 	movw	r1, #961	; 0x3c1
 800625e:	f7fd fc23 	bl	8003aa8 <mpz_cmpabs_ui>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	da01      	bge.n	800626c <mpz_probab_prime_p+0xb8>
    return 2;
 8006268:	2302      	movs	r3, #2
 800626a:	e073      	b.n	8006354 <mpz_probab_prime_p+0x1a0>
  /* Use Miller-Rabin, with a deterministic sequence of bases, a[j] =
     j^2 + j + 41 using Euler's polynomial. We potentially stop early,
     if a[j] >= n - 1. Since n >= 31*31, this can happen only if reps >
     30 (a[30] == 971 > 31*31 == 961). */

  mpz_init (nm1);
 800626c:	ab0a      	add	r3, sp, #40	; 0x28
 800626e:	4618      	mov	r0, r3
 8006270:	f7fc ff0a 	bl	8003088 <mpz_init>
  mpz_init (q);
 8006274:	ab07      	add	r3, sp, #28
 8006276:	4618      	mov	r0, r3
 8006278:	f7fc ff06 	bl	8003088 <mpz_init>
  mpz_init (y);
 800627c:	ab04      	add	r3, sp, #16
 800627e:	4618      	mov	r0, r3
 8006280:	f7fc ff02 	bl	8003088 <mpz_init>

  /* Find q and k, where q is odd and n = 1 + 2**k * q.  */
  nm1->_mp_size = mpz_abs_sub_ui (nm1, n, 1);
 8006284:	ab0a      	add	r3, sp, #40	; 0x28
 8006286:	4618      	mov	r0, r3
 8006288:	9903      	ldr	r1, [sp, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f7fd fce2 	bl	8003c54 <mpz_abs_sub_ui>
 8006290:	4603      	mov	r3, r0
 8006292:	930b      	str	r3, [sp, #44]	; 0x2c
  k = mpz_scan1 (nm1, 0);
 8006294:	ab0a      	add	r3, sp, #40	; 0x28
 8006296:	4618      	mov	r0, r3
 8006298:	2100      	movs	r1, #0
 800629a:	f000 fe3b 	bl	8006f14 <mpz_scan1>
 800629e:	900d      	str	r0, [sp, #52]	; 0x34
  mpz_tdiv_q_2exp (q, nm1, k);
 80062a0:	aa07      	add	r2, sp, #28
 80062a2:	ab0a      	add	r3, sp, #40	; 0x28
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062aa:	f7fe fc3d 	bl	8004b28 <mpz_tdiv_q_2exp>

  for (j = 0, is_prime = 1; is_prime & (j < reps); j++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	930e      	str	r3, [sp, #56]	; 0x38
 80062b2:	2301      	movs	r3, #1
 80062b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b6:	e034      	b.n	8006322 <mpz_probab_prime_p+0x16e>
    {
      mpz_set_ui (y, (unsigned long) j*j+j+41);
 80062b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062bc:	fb02 f203 	mul.w	r2, r2, r3
 80062c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c2:	4413      	add	r3, r2
 80062c4:	3329      	adds	r3, #41	; 0x29
 80062c6:	aa04      	add	r2, sp, #16
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	f7fc ff60 	bl	8003190 <mpz_set_ui>
      if (mpz_cmp (y, nm1) >= 0)
 80062d0:	aa04      	add	r2, sp, #16
 80062d2:	ab0a      	add	r3, sp, #40	; 0x28
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f7fd fbb0 	bl	8003a3c <mpz_cmp>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db13      	blt.n	800630a <mpz_probab_prime_p+0x156>
	{
	  /* Don't try any further bases. This "early" break does not affect
	     the result for any reasonable reps value (<=5000 was tested) */
	  assert (j >= 30);
 80062e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e4:	2b1d      	cmp	r3, #29
 80062e6:	dc0f      	bgt.n	8006308 <mpz_probab_prime_p+0x154>
 80062e8:	f243 7064 	movw	r0, #14180	; 0x3764
 80062ec:	f6c0 0001 	movt	r0, #2049	; 0x801
 80062f0:	f640 5174 	movw	r1, #3444	; 0xd74
 80062f4:	f643 62dc 	movw	r2, #16092	; 0x3edc
 80062f8:	f6c0 0201 	movt	r2, #2049	; 0x801
 80062fc:	f643 23f4 	movw	r3, #15092	; 0x3af4
 8006300:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006304:	f007 fa0c 	bl	800d720 <__assert_func>
	  break;
 8006308:	e017      	b.n	800633a <mpz_probab_prime_p+0x186>
	}
      is_prime = gmp_millerrabin (n, nm1, y, q, k);
 800630a:	a90a      	add	r1, sp, #40	; 0x28
 800630c:	aa04      	add	r2, sp, #16
 800630e:	ab07      	add	r3, sp, #28
 8006310:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006312:	9000      	str	r0, [sp, #0]
 8006314:	9803      	ldr	r0, [sp, #12]
 8006316:	f7ff fef9 	bl	800610c <gmp_millerrabin>
 800631a:	900f      	str	r0, [sp, #60]	; 0x3c
  /* Find q and k, where q is odd and n = 1 + 2**k * q.  */
  nm1->_mp_size = mpz_abs_sub_ui (nm1, n, 1);
  k = mpz_scan1 (nm1, 0);
  mpz_tdiv_q_2exp (q, nm1, k);

  for (j = 0, is_prime = 1; is_prime & (j < reps); j++)
 800631c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800631e:	3301      	adds	r3, #1
 8006320:	930e      	str	r3, [sp, #56]	; 0x38
 8006322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	bfac      	ite	ge
 800632a:	2300      	movge	r3, #0
 800632c:	2301      	movlt	r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1be      	bne.n	80062b8 <mpz_probab_prime_p+0x104>
	  assert (j >= 30);
	  break;
	}
      is_prime = gmp_millerrabin (n, nm1, y, q, k);
    }
  mpz_clear (nm1);
 800633a:	ab0a      	add	r3, sp, #40	; 0x28
 800633c:	4618      	mov	r0, r3
 800633e:	f7fc fed5 	bl	80030ec <mpz_clear>
  mpz_clear (q);
 8006342:	ab07      	add	r3, sp, #28
 8006344:	4618      	mov	r0, r3
 8006346:	f7fc fed1 	bl	80030ec <mpz_clear>
  mpz_clear (y);
 800634a:	ab04      	add	r3, sp, #16
 800634c:	4618      	mov	r0, r3
 800634e:	f7fc fecd 	bl	80030ec <mpz_clear>

  return is_prime;
 8006352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
 8006354:	4618      	mov	r0, r3
 8006356:	b011      	add	sp, #68	; 0x44
 8006358:	f85d fb04 	ldr.w	pc, [sp], #4

0800635c <mpz_tstbit>:
   two's complement is 110001. Clearing the least significant bit, we
   get two's complement 110000, and -010000. */

int
mpz_tstbit (const mpz_t d, mp_bitcnt_t bit_index)
{
 800635c:	b088      	sub	sp, #32
 800635e:	9001      	str	r0, [sp, #4]
 8006360:	9100      	str	r1, [sp, #0]
  mp_size_t ds;
  mp_size_t dn;
  mp_limb_t w;
  int bit;

  ds = d->_mp_size;
 8006362:	9b01      	ldr	r3, [sp, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	9306      	str	r3, [sp, #24]
  dn = GMP_ABS (ds);
 8006368:	9b06      	ldr	r3, [sp, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfb8      	it	lt
 800636e:	425b      	neglt	r3, r3
 8006370:	9305      	str	r3, [sp, #20]
  limb_index = bit_index / GMP_LIMB_BITS;
 8006372:	9b00      	ldr	r3, [sp, #0]
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	9307      	str	r3, [sp, #28]
  if (limb_index >= dn)
 8006378:	9a07      	ldr	r2, [sp, #28]
 800637a:	9b05      	ldr	r3, [sp, #20]
 800637c:	429a      	cmp	r2, r3
 800637e:	db03      	blt.n	8006388 <mpz_tstbit+0x2c>
    return ds < 0;
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	0fdb      	lsrs	r3, r3, #31
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e036      	b.n	80063f6 <mpz_tstbit+0x9a>

  shift = bit_index % GMP_LIMB_BITS;
 8006388:	9b00      	ldr	r3, [sp, #0]
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	9304      	str	r3, [sp, #16]
  w = d->_mp_d[limb_index];
 8006390:	9b01      	ldr	r3, [sp, #4]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	9b07      	ldr	r3, [sp, #28]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	9303      	str	r3, [sp, #12]
  bit = (w >> shift) & 1;
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	9a03      	ldr	r2, [sp, #12]
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	9302      	str	r3, [sp, #8]

  if (ds < 0)
 80063ac:	9b06      	ldr	r3, [sp, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da20      	bge.n	80063f4 <mpz_tstbit+0x98>
    {
      /* d < 0. Check if any of the bits below is set: If so, our bit
	 must be complemented. */
      if (shift > 0 && (w << (GMP_LIMB_BITS - shift)) > 0)
 80063b2:	9b04      	ldr	r3, [sp, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <mpz_tstbit+0x74>
 80063b8:	9b04      	ldr	r3, [sp, #16]
 80063ba:	f1c3 0320 	rsb	r3, r3, #32
 80063be:	9a03      	ldr	r2, [sp, #12]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <mpz_tstbit+0x74>
	return bit ^ 1;
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	f083 0301 	eor.w	r3, r3, #1
 80063ce:	e012      	b.n	80063f6 <mpz_tstbit+0x9a>
      while (limb_index-- > 0)
 80063d0:	e00b      	b.n	80063ea <mpz_tstbit+0x8e>
	if (d->_mp_d[limb_index] > 0)
 80063d2:	9b01      	ldr	r3, [sp, #4]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	9b07      	ldr	r3, [sp, #28]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <mpz_tstbit+0x8e>
	  return bit ^ 1;
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	f083 0301 	eor.w	r3, r3, #1
 80063e8:	e005      	b.n	80063f6 <mpz_tstbit+0x9a>
    {
      /* d < 0. Check if any of the bits below is set: If so, our bit
	 must be complemented. */
      if (shift > 0 && (w << (GMP_LIMB_BITS - shift)) > 0)
	return bit ^ 1;
      while (limb_index-- > 0)
 80063ea:	9b07      	ldr	r3, [sp, #28]
 80063ec:	1e5a      	subs	r2, r3, #1
 80063ee:	9207      	str	r2, [sp, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dcee      	bgt.n	80063d2 <mpz_tstbit+0x76>
	if (d->_mp_d[limb_index] > 0)
	  return bit ^ 1;
    }
  return bit;
 80063f4:	9b02      	ldr	r3, [sp, #8]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	b008      	add	sp, #32
 80063fa:	4770      	bx	lr

080063fc <mpz_abs_add_bit>:

static void
mpz_abs_add_bit (mpz_t d, mp_bitcnt_t bit_index)
{
 80063fc:	b500      	push	{lr}
 80063fe:	b089      	sub	sp, #36	; 0x24
 8006400:	9001      	str	r0, [sp, #4]
 8006402:	9100      	str	r1, [sp, #0]
  mp_size_t dn, limb_index;
  mp_limb_t bit;
  mp_ptr dp;

  dn = GMP_ABS (d->_mp_size);
 8006404:	9b01      	ldr	r3, [sp, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	bfb8      	it	lt
 800640c:	425b      	neglt	r3, r3
 800640e:	9307      	str	r3, [sp, #28]

  limb_index = bit_index / GMP_LIMB_BITS;
 8006410:	9b00      	ldr	r3, [sp, #0]
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	9305      	str	r3, [sp, #20]
  bit = (mp_limb_t) 1 << (bit_index % GMP_LIMB_BITS);
 8006416:	9b00      	ldr	r3, [sp, #0]
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2201      	movs	r2, #1
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	9304      	str	r3, [sp, #16]

  if (limb_index >= dn)
 8006424:	9a05      	ldr	r2, [sp, #20]
 8006426:	9b07      	ldr	r3, [sp, #28]
 8006428:	429a      	cmp	r2, r3
 800642a:	db2a      	blt.n	8006482 <mpz_abs_add_bit+0x86>
    {
      mp_size_t i;
      /* The bit should be set outside of the end of the number.
	 We have to increase the size of the number. */
      dp = MPZ_REALLOC (d, limb_index + 1);
 800642c:	9b05      	ldr	r3, [sp, #20]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	9b01      	ldr	r3, [sp, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	dd07      	ble.n	8006448 <mpz_abs_add_bit+0x4c>
 8006438:	9b05      	ldr	r3, [sp, #20]
 800643a:	3301      	adds	r3, #1
 800643c:	9801      	ldr	r0, [sp, #4]
 800643e:	4619      	mov	r1, r3
 8006440:	f7fc fe64 	bl	800310c <mpz_realloc>
 8006444:	4603      	mov	r3, r0
 8006446:	e001      	b.n	800644c <mpz_abs_add_bit+0x50>
 8006448:	9b01      	ldr	r3, [sp, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	9303      	str	r3, [sp, #12]

      dp[limb_index] = bit;
 800644e:	9b05      	ldr	r3, [sp, #20]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	9a03      	ldr	r2, [sp, #12]
 8006454:	4413      	add	r3, r2
 8006456:	9a04      	ldr	r2, [sp, #16]
 8006458:	601a      	str	r2, [r3, #0]
      for (i = dn; i < limb_index; i++)
 800645a:	9b07      	ldr	r3, [sp, #28]
 800645c:	9306      	str	r3, [sp, #24]
 800645e:	e008      	b.n	8006472 <mpz_abs_add_bit+0x76>
	dp[i] = 0;
 8006460:	9b06      	ldr	r3, [sp, #24]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	9a03      	ldr	r2, [sp, #12]
 8006466:	4413      	add	r3, r2
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
      /* The bit should be set outside of the end of the number.
	 We have to increase the size of the number. */
      dp = MPZ_REALLOC (d, limb_index + 1);

      dp[limb_index] = bit;
      for (i = dn; i < limb_index; i++)
 800646c:	9b06      	ldr	r3, [sp, #24]
 800646e:	3301      	adds	r3, #1
 8006470:	9306      	str	r3, [sp, #24]
 8006472:	9a06      	ldr	r2, [sp, #24]
 8006474:	9b05      	ldr	r3, [sp, #20]
 8006476:	429a      	cmp	r2, r3
 8006478:	dbf2      	blt.n	8006460 <mpz_abs_add_bit+0x64>
	dp[i] = 0;
      dn = limb_index + 1;
 800647a:	9b05      	ldr	r3, [sp, #20]
 800647c:	3301      	adds	r3, #1
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	e030      	b.n	80064e4 <mpz_abs_add_bit+0xe8>
    }
  else
    {
      mp_limb_t cy;

      dp = d->_mp_d;
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	9303      	str	r3, [sp, #12]

      cy = mpn_add_1 (dp + limb_index, dp + limb_index, dn - limb_index, bit);
 8006488:	9b05      	ldr	r3, [sp, #20]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	9a03      	ldr	r2, [sp, #12]
 800648e:	18d1      	adds	r1, r2, r3
 8006490:	9b05      	ldr	r3, [sp, #20]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	9a03      	ldr	r2, [sp, #12]
 8006496:	441a      	add	r2, r3
 8006498:	9807      	ldr	r0, [sp, #28]
 800649a:	9b05      	ldr	r3, [sp, #20]
 800649c:	1ac3      	subs	r3, r0, r3
 800649e:	4608      	mov	r0, r1
 80064a0:	4611      	mov	r1, r2
 80064a2:	461a      	mov	r2, r3
 80064a4:	9b04      	ldr	r3, [sp, #16]
 80064a6:	f7fa fc5b 	bl	8000d60 <mpn_add_1>
 80064aa:	9002      	str	r0, [sp, #8]
      if (cy > 0)
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <mpz_abs_add_bit+0xe8>
	{
	  dp = MPZ_REALLOC (d, dn + 1);
 80064b2:	9b07      	ldr	r3, [sp, #28]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	9b01      	ldr	r3, [sp, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	dd07      	ble.n	80064ce <mpz_abs_add_bit+0xd2>
 80064be:	9b07      	ldr	r3, [sp, #28]
 80064c0:	3301      	adds	r3, #1
 80064c2:	9801      	ldr	r0, [sp, #4]
 80064c4:	4619      	mov	r1, r3
 80064c6:	f7fc fe21 	bl	800310c <mpz_realloc>
 80064ca:	4603      	mov	r3, r0
 80064cc:	e001      	b.n	80064d2 <mpz_abs_add_bit+0xd6>
 80064ce:	9b01      	ldr	r3, [sp, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	9303      	str	r3, [sp, #12]
	  dp[dn++] = cy;
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	9207      	str	r2, [sp, #28]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	9a03      	ldr	r2, [sp, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	9a02      	ldr	r2, [sp, #8]
 80064e2:	601a      	str	r2, [r3, #0]
	}
    }

  d->_mp_size = (d->_mp_size < 0) ? - dn : dn;
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da02      	bge.n	80064f2 <mpz_abs_add_bit+0xf6>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	425b      	negs	r3, r3
 80064f0:	e000      	b.n	80064f4 <mpz_abs_add_bit+0xf8>
 80064f2:	9b07      	ldr	r3, [sp, #28]
 80064f4:	9a01      	ldr	r2, [sp, #4]
 80064f6:	6053      	str	r3, [r2, #4]
}
 80064f8:	b009      	add	sp, #36	; 0x24
 80064fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80064fe:	bf00      	nop

08006500 <mpz_abs_sub_bit>:

static void
mpz_abs_sub_bit (mpz_t d, mp_bitcnt_t bit_index)
{
 8006500:	b500      	push	{lr}
 8006502:	b089      	sub	sp, #36	; 0x24
 8006504:	9001      	str	r0, [sp, #4]
 8006506:	9100      	str	r1, [sp, #0]
  mp_size_t dn, limb_index;
  mp_ptr dp;
  mp_limb_t bit;

  dn = GMP_ABS (d->_mp_size);
 8006508:	9b01      	ldr	r3, [sp, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	bfb8      	it	lt
 8006510:	425b      	neglt	r3, r3
 8006512:	9307      	str	r3, [sp, #28]
  dp = d->_mp_d;
 8006514:	9b01      	ldr	r3, [sp, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	9306      	str	r3, [sp, #24]

  limb_index = bit_index / GMP_LIMB_BITS;
 800651a:	9b00      	ldr	r3, [sp, #0]
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	9305      	str	r3, [sp, #20]
  bit = (mp_limb_t) 1 << (bit_index % GMP_LIMB_BITS);
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	9304      	str	r3, [sp, #16]

  assert (limb_index < dn);
 800652e:	9a05      	ldr	r2, [sp, #20]
 8006530:	9b07      	ldr	r3, [sp, #28]
 8006532:	429a      	cmp	r2, r3
 8006534:	db0f      	blt.n	8006556 <mpz_abs_sub_bit+0x56>
 8006536:	f243 7064 	movw	r0, #14180	; 0x3764
 800653a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800653e:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 8006542:	f643 62f0 	movw	r2, #16112	; 0x3ef0
 8006546:	f6c0 0201 	movt	r2, #2049	; 0x801
 800654a:	f643 23fc 	movw	r3, #15100	; 0x3afc
 800654e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006552:	f007 f8e5 	bl	800d720 <__assert_func>

  gmp_assert_nocarry (mpn_sub_1 (dp + limb_index, dp + limb_index,
 8006556:	9b05      	ldr	r3, [sp, #20]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	9a06      	ldr	r2, [sp, #24]
 800655c:	18d1      	adds	r1, r2, r3
 800655e:	9b05      	ldr	r3, [sp, #20]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	9a06      	ldr	r2, [sp, #24]
 8006564:	441a      	add	r2, r3
 8006566:	9807      	ldr	r0, [sp, #28]
 8006568:	9b05      	ldr	r3, [sp, #20]
 800656a:	1ac3      	subs	r3, r0, r3
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	9b04      	ldr	r3, [sp, #16]
 8006574:	f7fa fcb0 	bl	8000ed8 <mpn_sub_1>
 8006578:	9003      	str	r0, [sp, #12]
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00f      	beq.n	80065a0 <mpz_abs_sub_bit+0xa0>
 8006580:	f243 7064 	movw	r0, #14180	; 0x3764
 8006584:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006588:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800658c:	f643 62f0 	movw	r2, #16112	; 0x3ef0
 8006590:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006594:	f643 1344 	movw	r3, #14660	; 0x3944
 8006598:	f6c0 0301 	movt	r3, #2049	; 0x801
 800659c:	f007 f8c0 	bl	800d720 <__assert_func>
				 dn - limb_index, bit));
  dn -= (dp[dn-1] == 0);
 80065a0:	9b07      	ldr	r3, [sp, #28]
 80065a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065a6:	3b01      	subs	r3, #1
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	9a06      	ldr	r2, [sp, #24]
 80065ac:	4413      	add	r3, r2
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	bf14      	ite	ne
 80065b4:	2300      	movne	r3, #0
 80065b6:	2301      	moveq	r3, #1
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	9a07      	ldr	r2, [sp, #28]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	9307      	str	r3, [sp, #28]
  d->_mp_size = (d->_mp_size < 0) ? - dn : dn;
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	da02      	bge.n	80065ce <mpz_abs_sub_bit+0xce>
 80065c8:	9b07      	ldr	r3, [sp, #28]
 80065ca:	425b      	negs	r3, r3
 80065cc:	e000      	b.n	80065d0 <mpz_abs_sub_bit+0xd0>
 80065ce:	9b07      	ldr	r3, [sp, #28]
 80065d0:	9a01      	ldr	r2, [sp, #4]
 80065d2:	6053      	str	r3, [r2, #4]
}
 80065d4:	b009      	add	sp, #36	; 0x24
 80065d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80065da:	bf00      	nop

080065dc <mpz_setbit>:

void
mpz_setbit (mpz_t d, mp_bitcnt_t bit_index)
{
 80065dc:	b500      	push	{lr}
 80065de:	b083      	sub	sp, #12
 80065e0:	9001      	str	r0, [sp, #4]
 80065e2:	9100      	str	r1, [sp, #0]
  if (!mpz_tstbit (d, bit_index))
 80065e4:	9801      	ldr	r0, [sp, #4]
 80065e6:	9900      	ldr	r1, [sp, #0]
 80065e8:	f7ff feb8 	bl	800635c <mpz_tstbit>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10c      	bne.n	800660c <mpz_setbit+0x30>
    {
      if (d->_mp_size >= 0)
 80065f2:	9b01      	ldr	r3, [sp, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	db04      	blt.n	8006604 <mpz_setbit+0x28>
	mpz_abs_add_bit (d, bit_index);
 80065fa:	9801      	ldr	r0, [sp, #4]
 80065fc:	9900      	ldr	r1, [sp, #0]
 80065fe:	f7ff fefd 	bl	80063fc <mpz_abs_add_bit>
 8006602:	e003      	b.n	800660c <mpz_setbit+0x30>
      else
	mpz_abs_sub_bit (d, bit_index);
 8006604:	9801      	ldr	r0, [sp, #4]
 8006606:	9900      	ldr	r1, [sp, #0]
 8006608:	f7ff ff7a 	bl	8006500 <mpz_abs_sub_bit>
    }
}
 800660c:	b003      	add	sp, #12
 800660e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006612:	bf00      	nop

08006614 <mpz_clrbit>:

void
mpz_clrbit (mpz_t d, mp_bitcnt_t bit_index)
{
 8006614:	b500      	push	{lr}
 8006616:	b083      	sub	sp, #12
 8006618:	9001      	str	r0, [sp, #4]
 800661a:	9100      	str	r1, [sp, #0]
  if (mpz_tstbit (d, bit_index))
 800661c:	9801      	ldr	r0, [sp, #4]
 800661e:	9900      	ldr	r1, [sp, #0]
 8006620:	f7ff fe9c 	bl	800635c <mpz_tstbit>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <mpz_clrbit+0x30>
    {
      if (d->_mp_size >= 0)
 800662a:	9b01      	ldr	r3, [sp, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	db04      	blt.n	800663c <mpz_clrbit+0x28>
	mpz_abs_sub_bit (d, bit_index);
 8006632:	9801      	ldr	r0, [sp, #4]
 8006634:	9900      	ldr	r1, [sp, #0]
 8006636:	f7ff ff63 	bl	8006500 <mpz_abs_sub_bit>
 800663a:	e003      	b.n	8006644 <mpz_clrbit+0x30>
      else
	mpz_abs_add_bit (d, bit_index);
 800663c:	9801      	ldr	r0, [sp, #4]
 800663e:	9900      	ldr	r1, [sp, #0]
 8006640:	f7ff fedc 	bl	80063fc <mpz_abs_add_bit>
    }
}
 8006644:	b003      	add	sp, #12
 8006646:	f85d fb04 	ldr.w	pc, [sp], #4
 800664a:	bf00      	nop

0800664c <mpz_combit>:

void
mpz_combit (mpz_t d, mp_bitcnt_t bit_index)
{
 800664c:	b500      	push	{lr}
 800664e:	b083      	sub	sp, #12
 8006650:	9001      	str	r0, [sp, #4]
 8006652:	9100      	str	r1, [sp, #0]
  if (mpz_tstbit (d, bit_index) ^ (d->_mp_size < 0))
 8006654:	9801      	ldr	r0, [sp, #4]
 8006656:	9900      	ldr	r1, [sp, #0]
 8006658:	f7ff fe80 	bl	800635c <mpz_tstbit>
 800665c:	4602      	mov	r2, r0
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	0fdb      	lsrs	r3, r3, #31
 8006664:	b2db      	uxtb	r3, r3
 8006666:	429a      	cmp	r2, r3
 8006668:	d004      	beq.n	8006674 <mpz_combit+0x28>
    mpz_abs_sub_bit (d, bit_index);
 800666a:	9801      	ldr	r0, [sp, #4]
 800666c:	9900      	ldr	r1, [sp, #0]
 800666e:	f7ff ff47 	bl	8006500 <mpz_abs_sub_bit>
 8006672:	e003      	b.n	800667c <mpz_combit+0x30>
  else
    mpz_abs_add_bit (d, bit_index);
 8006674:	9801      	ldr	r0, [sp, #4]
 8006676:	9900      	ldr	r1, [sp, #0]
 8006678:	f7ff fec0 	bl	80063fc <mpz_abs_add_bit>
}
 800667c:	b003      	add	sp, #12
 800667e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006682:	bf00      	nop

08006684 <mpz_com>:

void
mpz_com (mpz_t r, const mpz_t u)
{
 8006684:	b500      	push	{lr}
 8006686:	b083      	sub	sp, #12
 8006688:	9001      	str	r0, [sp, #4]
 800668a:	9100      	str	r1, [sp, #0]
  mpz_neg (r, u);
 800668c:	9801      	ldr	r0, [sp, #4]
 800668e:	9900      	ldr	r1, [sp, #0]
 8006690:	f7fd fa66 	bl	8003b60 <mpz_neg>
  mpz_sub_ui (r, r, 1);
 8006694:	9801      	ldr	r0, [sp, #4]
 8006696:	9901      	ldr	r1, [sp, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f7fd fb59 	bl	8003d50 <mpz_sub_ui>
}
 800669e:	b003      	add	sp, #12
 80066a0:	f85d fb04 	ldr.w	pc, [sp], #4

080066a4 <mpz_and>:

void
mpz_and (mpz_t r, const mpz_t u, const mpz_t v)
{
 80066a4:	b500      	push	{lr}
 80066a6:	b097      	sub	sp, #92	; 0x5c
 80066a8:	9003      	str	r0, [sp, #12]
 80066aa:	9102      	str	r1, [sp, #8]
 80066ac:	9201      	str	r2, [sp, #4]

  mp_limb_t ux, vx, rx;
  mp_limb_t uc, vc, rc;
  mp_limb_t ul, vl, rl;

  un = GMP_ABS (u->_mp_size);
 80066ae:	9b02      	ldr	r3, [sp, #8]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	bfb8      	it	lt
 80066b6:	425b      	neglt	r3, r3
 80066b8:	9315      	str	r3, [sp, #84]	; 0x54
  vn = GMP_ABS (v->_mp_size);
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	425b      	neglt	r3, r3
 80066c4:	9314      	str	r3, [sp, #80]	; 0x50
  if (un < vn)
 80066c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066ca:	429a      	cmp	r2, r3
 80066cc:	da0b      	bge.n	80066e6 <mpz_and+0x42>
    {
      MPZ_SRCPTR_SWAP (u, v);
 80066ce:	9b02      	ldr	r3, [sp, #8]
 80066d0:	930e      	str	r3, [sp, #56]	; 0x38
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	9302      	str	r3, [sp, #8]
 80066d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d8:	9301      	str	r3, [sp, #4]
      MP_SIZE_T_SWAP (un, vn);
 80066da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066dc:	930d      	str	r3, [sp, #52]	; 0x34
 80066de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066e0:	9315      	str	r3, [sp, #84]	; 0x54
 80066e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066e4:	9314      	str	r3, [sp, #80]	; 0x50
    }
  if (vn == 0)
 80066e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <mpz_and+0x50>
    {
      r->_mp_size = 0;
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	605a      	str	r2, [r3, #4]
      return;
 80066f2:	e0d6      	b.n	80068a2 <mpz_and+0x1fe>
    }

  uc = u->_mp_size < 0;
 80066f4:	9b02      	ldr	r3, [sp, #8]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	0fdb      	lsrs	r3, r3, #31
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	9311      	str	r3, [sp, #68]	; 0x44
  vc = v->_mp_size < 0;
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	0fdb      	lsrs	r3, r3, #31
 8006704:	b2db      	uxtb	r3, r3
 8006706:	9310      	str	r3, [sp, #64]	; 0x40
  rc = uc & vc;
 8006708:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800670a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800670c:	4013      	ands	r3, r2
 800670e:	930f      	str	r3, [sp, #60]	; 0x3c

  ux = -uc;
 8006710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006712:	425b      	negs	r3, r3
 8006714:	930c      	str	r3, [sp, #48]	; 0x30
  vx = -vc;
 8006716:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006718:	425b      	negs	r3, r3
 800671a:	930b      	str	r3, [sp, #44]	; 0x2c
  rx = -rc;
 800671c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800671e:	425b      	negs	r3, r3
 8006720:	930a      	str	r3, [sp, #40]	; 0x28

  /* If the smaller input is positive, higher limbs don't matter. */
  rn = vx ? un : vn;
 8006722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <mpz_and+0x88>
 8006728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800672a:	e000      	b.n	800672e <mpz_and+0x8a>
 800672c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800672e:	9313      	str	r3, [sp, #76]	; 0x4c

  rp = MPZ_REALLOC (r, rn + rc);
 8006730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006734:	441a      	add	r2, r3
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d908      	bls.n	8006750 <mpz_and+0xac>
 800673e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006742:	4413      	add	r3, r2
 8006744:	9803      	ldr	r0, [sp, #12]
 8006746:	4619      	mov	r1, r3
 8006748:	f7fc fce0 	bl	800310c <mpz_realloc>
 800674c:	4603      	mov	r3, r0
 800674e:	e001      	b.n	8006754 <mpz_and+0xb0>
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	9309      	str	r3, [sp, #36]	; 0x24

  up = u->_mp_d;
 8006756:	9b02      	ldr	r3, [sp, #8]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	9308      	str	r3, [sp, #32]
  vp = v->_mp_d;
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	9307      	str	r3, [sp, #28]

  i = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	9312      	str	r3, [sp, #72]	; 0x48
  do
    {
      ul = (up[i] ^ ux) + uc;
 8006766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	9a08      	ldr	r2, [sp, #32]
 800676c:	4413      	add	r3, r2
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006772:	405a      	eors	r2, r3
 8006774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006776:	4413      	add	r3, r2
 8006778:	9306      	str	r3, [sp, #24]
      uc = ul < uc;
 800677a:	9a06      	ldr	r2, [sp, #24]
 800677c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800677e:	429a      	cmp	r2, r3
 8006780:	bf2c      	ite	cs
 8006782:	2300      	movcs	r3, #0
 8006784:	2301      	movcc	r3, #1
 8006786:	b2db      	uxtb	r3, r3
 8006788:	9311      	str	r3, [sp, #68]	; 0x44

      vl = (vp[i] ^ vx) + vc;
 800678a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	9a07      	ldr	r2, [sp, #28]
 8006790:	4413      	add	r3, r2
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006796:	405a      	eors	r2, r3
 8006798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800679a:	4413      	add	r3, r2
 800679c:	9305      	str	r3, [sp, #20]
      vc = vl < vc;
 800679e:	9a05      	ldr	r2, [sp, #20]
 80067a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067a2:	429a      	cmp	r2, r3
 80067a4:	bf2c      	ite	cs
 80067a6:	2300      	movcs	r3, #0
 80067a8:	2301      	movcc	r3, #1
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	9310      	str	r3, [sp, #64]	; 0x40

      rl = ( (ul & vl) ^ rx) + rc;
 80067ae:	9a06      	ldr	r2, [sp, #24]
 80067b0:	9b05      	ldr	r3, [sp, #20]
 80067b2:	401a      	ands	r2, r3
 80067b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b6:	405a      	eors	r2, r3
 80067b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067ba:	4413      	add	r3, r2
 80067bc:	9304      	str	r3, [sp, #16]
      rc = rl < rc;
 80067be:	9a04      	ldr	r2, [sp, #16]
 80067c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	bf2c      	ite	cs
 80067c6:	2300      	movcs	r3, #0
 80067c8:	2301      	movcc	r3, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	930f      	str	r3, [sp, #60]	; 0x3c
      rp[i] = rl;
 80067ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067d4:	4413      	add	r3, r2
 80067d6:	9a04      	ldr	r2, [sp, #16]
 80067d8:	601a      	str	r2, [r3, #0]
    }
  while (++i < vn);
 80067da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067dc:	3301      	adds	r3, #1
 80067de:	9312      	str	r3, [sp, #72]	; 0x48
 80067e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067e4:	429a      	cmp	r2, r3
 80067e6:	dbbe      	blt.n	8006766 <mpz_and+0xc2>
  assert (vc == 0);
 80067e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00f      	beq.n	800680e <mpz_and+0x16a>
 80067ee:	f243 7064 	movw	r0, #14180	; 0x3764
 80067f2:	f6c0 0001 	movt	r0, #2049	; 0x801
 80067f6:	f640 6155 	movw	r1, #3669	; 0xe55
 80067fa:	f643 7200 	movw	r2, #16128	; 0x3f00
 80067fe:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006802:	f643 330c 	movw	r3, #15116	; 0x3b0c
 8006806:	f6c0 0301 	movt	r3, #2049	; 0x801
 800680a:	f006 ff89 	bl	800d720 <__assert_func>

  for (; i < rn; i++)
 800680e:	e02a      	b.n	8006866 <mpz_and+0x1c2>
    {
      ul = (up[i] ^ ux) + uc;
 8006810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	9a08      	ldr	r2, [sp, #32]
 8006816:	4413      	add	r3, r2
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800681c:	405a      	eors	r2, r3
 800681e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006820:	4413      	add	r3, r2
 8006822:	9306      	str	r3, [sp, #24]
      uc = ul < uc;
 8006824:	9a06      	ldr	r2, [sp, #24]
 8006826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006828:	429a      	cmp	r2, r3
 800682a:	bf2c      	ite	cs
 800682c:	2300      	movcs	r3, #0
 800682e:	2301      	movcc	r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	9311      	str	r3, [sp, #68]	; 0x44

      rl = ( (ul & vx) ^ rx) + rc;
 8006834:	9a06      	ldr	r2, [sp, #24]
 8006836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006838:	401a      	ands	r2, r3
 800683a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683c:	405a      	eors	r2, r3
 800683e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006840:	4413      	add	r3, r2
 8006842:	9304      	str	r3, [sp, #16]
      rc = rl < rc;
 8006844:	9a04      	ldr	r2, [sp, #16]
 8006846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006848:	429a      	cmp	r2, r3
 800684a:	bf2c      	ite	cs
 800684c:	2300      	movcs	r3, #0
 800684e:	2301      	movcc	r3, #1
 8006850:	b2db      	uxtb	r3, r3
 8006852:	930f      	str	r3, [sp, #60]	; 0x3c
      rp[i] = rl;
 8006854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800685a:	4413      	add	r3, r2
 800685c:	9a04      	ldr	r2, [sp, #16]
 800685e:	601a      	str	r2, [r3, #0]
      rp[i] = rl;
    }
  while (++i < vn);
  assert (vc == 0);

  for (; i < rn; i++)
 8006860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006862:	3301      	adds	r3, #1
 8006864:	9312      	str	r3, [sp, #72]	; 0x48
 8006866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006868:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800686a:	429a      	cmp	r2, r3
 800686c:	dbd0      	blt.n	8006810 <mpz_and+0x16c>

      rl = ( (ul & vx) ^ rx) + rc;
      rc = rl < rc;
      rp[i] = rl;
    }
  if (rc)
 800686e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <mpz_and+0x1e2>
    rp[rn++] = rc;
 8006874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	9213      	str	r2, [sp, #76]	; 0x4c
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800687e:	4413      	add	r3, r2
 8006880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e004      	b.n	8006890 <mpz_and+0x1ec>
  else
    rn = mpn_normalized_size (rp, rn);
 8006886:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006888:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800688a:	f7fa fa3b 	bl	8000d04 <mpn_normalized_size>
 800688e:	9013      	str	r0, [sp, #76]	; 0x4c

  r->_mp_size = rx ? -rn : rn;
 8006890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <mpz_and+0x1f8>
 8006896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006898:	425b      	negs	r3, r3
 800689a:	e000      	b.n	800689e <mpz_and+0x1fa>
 800689c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800689e:	9a03      	ldr	r2, [sp, #12]
 80068a0:	6053      	str	r3, [r2, #4]
}
 80068a2:	b017      	add	sp, #92	; 0x5c
 80068a4:	f85d fb04 	ldr.w	pc, [sp], #4

080068a8 <mpz_ior>:

void
mpz_ior (mpz_t r, const mpz_t u, const mpz_t v)
{
 80068a8:	b500      	push	{lr}
 80068aa:	b097      	sub	sp, #92	; 0x5c
 80068ac:	9003      	str	r0, [sp, #12]
 80068ae:	9102      	str	r1, [sp, #8]
 80068b0:	9201      	str	r2, [sp, #4]

  mp_limb_t ux, vx, rx;
  mp_limb_t uc, vc, rc;
  mp_limb_t ul, vl, rl;

  un = GMP_ABS (u->_mp_size);
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfb8      	it	lt
 80068ba:	425b      	neglt	r3, r3
 80068bc:	9315      	str	r3, [sp, #84]	; 0x54
  vn = GMP_ABS (v->_mp_size);
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfb8      	it	lt
 80068c6:	425b      	neglt	r3, r3
 80068c8:	9314      	str	r3, [sp, #80]	; 0x50
  if (un < vn)
 80068ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80068cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068ce:	429a      	cmp	r2, r3
 80068d0:	da0b      	bge.n	80068ea <mpz_ior+0x42>
    {
      MPZ_SRCPTR_SWAP (u, v);
 80068d2:	9b02      	ldr	r3, [sp, #8]
 80068d4:	930e      	str	r3, [sp, #56]	; 0x38
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	9302      	str	r3, [sp, #8]
 80068da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068dc:	9301      	str	r3, [sp, #4]
      MP_SIZE_T_SWAP (un, vn);
 80068de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e0:	930d      	str	r3, [sp, #52]	; 0x34
 80068e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068e4:	9315      	str	r3, [sp, #84]	; 0x54
 80068e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068e8:	9314      	str	r3, [sp, #80]	; 0x50
    }
  if (vn == 0)
 80068ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <mpz_ior+0x52>
    {
      mpz_set (r, u);
 80068f0:	9803      	ldr	r0, [sp, #12]
 80068f2:	9902      	ldr	r1, [sp, #8]
 80068f4:	f7fc fc60 	bl	80031b8 <mpz_set>
      return;
 80068f8:	e0d6      	b.n	8006aa8 <mpz_ior+0x200>
    }

  uc = u->_mp_size < 0;
 80068fa:	9b02      	ldr	r3, [sp, #8]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	0fdb      	lsrs	r3, r3, #31
 8006900:	b2db      	uxtb	r3, r3
 8006902:	9311      	str	r3, [sp, #68]	; 0x44
  vc = v->_mp_size < 0;
 8006904:	9b01      	ldr	r3, [sp, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	0fdb      	lsrs	r3, r3, #31
 800690a:	b2db      	uxtb	r3, r3
 800690c:	9310      	str	r3, [sp, #64]	; 0x40
  rc = uc | vc;
 800690e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006910:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006912:	4313      	orrs	r3, r2
 8006914:	930f      	str	r3, [sp, #60]	; 0x3c

  ux = -uc;
 8006916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006918:	425b      	negs	r3, r3
 800691a:	930c      	str	r3, [sp, #48]	; 0x30
  vx = -vc;
 800691c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800691e:	425b      	negs	r3, r3
 8006920:	930b      	str	r3, [sp, #44]	; 0x2c
  rx = -rc;
 8006922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006924:	425b      	negs	r3, r3
 8006926:	930a      	str	r3, [sp, #40]	; 0x28

  /* If the smaller input is negative, by sign extension higher limbs
     don't matter. */
  rn = vx ? vn : un;
 8006928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <mpz_ior+0x8a>
 800692e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006930:	e000      	b.n	8006934 <mpz_ior+0x8c>
 8006932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006934:	9313      	str	r3, [sp, #76]	; 0x4c

  rp = MPZ_REALLOC (r, rn + rc);
 8006936:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800693a:	441a      	add	r2, r3
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d908      	bls.n	8006956 <mpz_ior+0xae>
 8006944:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006948:	4413      	add	r3, r2
 800694a:	9803      	ldr	r0, [sp, #12]
 800694c:	4619      	mov	r1, r3
 800694e:	f7fc fbdd 	bl	800310c <mpz_realloc>
 8006952:	4603      	mov	r3, r0
 8006954:	e001      	b.n	800695a <mpz_ior+0xb2>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	9309      	str	r3, [sp, #36]	; 0x24

  up = u->_mp_d;
 800695c:	9b02      	ldr	r3, [sp, #8]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	9308      	str	r3, [sp, #32]
  vp = v->_mp_d;
 8006962:	9b01      	ldr	r3, [sp, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	9307      	str	r3, [sp, #28]

  i = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	9312      	str	r3, [sp, #72]	; 0x48
  do
    {
      ul = (up[i] ^ ux) + uc;
 800696c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	9a08      	ldr	r2, [sp, #32]
 8006972:	4413      	add	r3, r2
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006978:	405a      	eors	r2, r3
 800697a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800697c:	4413      	add	r3, r2
 800697e:	9306      	str	r3, [sp, #24]
      uc = ul < uc;
 8006980:	9a06      	ldr	r2, [sp, #24]
 8006982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006984:	429a      	cmp	r2, r3
 8006986:	bf2c      	ite	cs
 8006988:	2300      	movcs	r3, #0
 800698a:	2301      	movcc	r3, #1
 800698c:	b2db      	uxtb	r3, r3
 800698e:	9311      	str	r3, [sp, #68]	; 0x44

      vl = (vp[i] ^ vx) + vc;
 8006990:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	9a07      	ldr	r2, [sp, #28]
 8006996:	4413      	add	r3, r2
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800699c:	405a      	eors	r2, r3
 800699e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069a0:	4413      	add	r3, r2
 80069a2:	9305      	str	r3, [sp, #20]
      vc = vl < vc;
 80069a4:	9a05      	ldr	r2, [sp, #20]
 80069a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069a8:	429a      	cmp	r2, r3
 80069aa:	bf2c      	ite	cs
 80069ac:	2300      	movcs	r3, #0
 80069ae:	2301      	movcc	r3, #1
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	9310      	str	r3, [sp, #64]	; 0x40

      rl = ( (ul | vl) ^ rx) + rc;
 80069b4:	9a06      	ldr	r2, [sp, #24]
 80069b6:	9b05      	ldr	r3, [sp, #20]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069bc:	405a      	eors	r2, r3
 80069be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c0:	4413      	add	r3, r2
 80069c2:	9304      	str	r3, [sp, #16]
      rc = rl < rc;
 80069c4:	9a04      	ldr	r2, [sp, #16]
 80069c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c8:	429a      	cmp	r2, r3
 80069ca:	bf2c      	ite	cs
 80069cc:	2300      	movcs	r3, #0
 80069ce:	2301      	movcc	r3, #1
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	930f      	str	r3, [sp, #60]	; 0x3c
      rp[i] = rl;
 80069d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069da:	4413      	add	r3, r2
 80069dc:	9a04      	ldr	r2, [sp, #16]
 80069de:	601a      	str	r2, [r3, #0]
    }
  while (++i < vn);
 80069e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069e2:	3301      	adds	r3, #1
 80069e4:	9312      	str	r3, [sp, #72]	; 0x48
 80069e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069ea:	429a      	cmp	r2, r3
 80069ec:	dbbe      	blt.n	800696c <mpz_ior+0xc4>
  assert (vc == 0);
 80069ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00f      	beq.n	8006a14 <mpz_ior+0x16c>
 80069f4:	f243 7064 	movw	r0, #14180	; 0x3764
 80069f8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80069fc:	f640 619e 	movw	r1, #3742	; 0xe9e
 8006a00:	f643 7208 	movw	r2, #16136	; 0x3f08
 8006a04:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006a08:	f643 330c 	movw	r3, #15116	; 0x3b0c
 8006a0c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006a10:	f006 fe86 	bl	800d720 <__assert_func>

  for (; i < rn; i++)
 8006a14:	e02a      	b.n	8006a6c <mpz_ior+0x1c4>
    {
      ul = (up[i] ^ ux) + uc;
 8006a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	9a08      	ldr	r2, [sp, #32]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a22:	405a      	eors	r2, r3
 8006a24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a26:	4413      	add	r3, r2
 8006a28:	9306      	str	r3, [sp, #24]
      uc = ul < uc;
 8006a2a:	9a06      	ldr	r2, [sp, #24]
 8006a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	bf2c      	ite	cs
 8006a32:	2300      	movcs	r3, #0
 8006a34:	2301      	movcc	r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	9311      	str	r3, [sp, #68]	; 0x44

      rl = ( (ul | vx) ^ rx) + rc;
 8006a3a:	9a06      	ldr	r2, [sp, #24]
 8006a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a42:	405a      	eors	r2, r3
 8006a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a46:	4413      	add	r3, r2
 8006a48:	9304      	str	r3, [sp, #16]
      rc = rl < rc;
 8006a4a:	9a04      	ldr	r2, [sp, #16]
 8006a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	bf2c      	ite	cs
 8006a52:	2300      	movcs	r3, #0
 8006a54:	2301      	movcc	r3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	930f      	str	r3, [sp, #60]	; 0x3c
      rp[i] = rl;
 8006a5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a60:	4413      	add	r3, r2
 8006a62:	9a04      	ldr	r2, [sp, #16]
 8006a64:	601a      	str	r2, [r3, #0]
      rp[i] = rl;
    }
  while (++i < vn);
  assert (vc == 0);

  for (; i < rn; i++)
 8006a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a68:	3301      	adds	r3, #1
 8006a6a:	9312      	str	r3, [sp, #72]	; 0x48
 8006a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a70:	429a      	cmp	r2, r3
 8006a72:	dbd0      	blt.n	8006a16 <mpz_ior+0x16e>

      rl = ( (ul | vx) ^ rx) + rc;
      rc = rl < rc;
      rp[i] = rl;
    }
  if (rc)
 8006a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <mpz_ior+0x1e4>
    rp[rn++] = rc;
 8006a7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a84:	4413      	add	r3, r2
 8006a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	e004      	b.n	8006a96 <mpz_ior+0x1ee>
  else
    rn = mpn_normalized_size (rp, rn);
 8006a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a90:	f7fa f938 	bl	8000d04 <mpn_normalized_size>
 8006a94:	9013      	str	r0, [sp, #76]	; 0x4c

  r->_mp_size = rx ? -rn : rn;
 8006a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <mpz_ior+0x1fa>
 8006a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a9e:	425b      	negs	r3, r3
 8006aa0:	e000      	b.n	8006aa4 <mpz_ior+0x1fc>
 8006aa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aa4:	9a03      	ldr	r2, [sp, #12]
 8006aa6:	6053      	str	r3, [r2, #4]
}
 8006aa8:	b017      	add	sp, #92	; 0x5c
 8006aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aae:	bf00      	nop

08006ab0 <mpz_xor>:

void
mpz_xor (mpz_t r, const mpz_t u, const mpz_t v)
{
 8006ab0:	b500      	push	{lr}
 8006ab2:	b097      	sub	sp, #92	; 0x5c
 8006ab4:	9003      	str	r0, [sp, #12]
 8006ab6:	9102      	str	r1, [sp, #8]
 8006ab8:	9201      	str	r2, [sp, #4]

  mp_limb_t ux, vx, rx;
  mp_limb_t uc, vc, rc;
  mp_limb_t ul, vl, rl;

  un = GMP_ABS (u->_mp_size);
 8006aba:	9b02      	ldr	r3, [sp, #8]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bfb8      	it	lt
 8006ac2:	425b      	neglt	r3, r3
 8006ac4:	9315      	str	r3, [sp, #84]	; 0x54
  vn = GMP_ABS (v->_mp_size);
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bfb8      	it	lt
 8006ace:	425b      	neglt	r3, r3
 8006ad0:	9314      	str	r3, [sp, #80]	; 0x50
  if (un < vn)
 8006ad2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	da0b      	bge.n	8006af2 <mpz_xor+0x42>
    {
      MPZ_SRCPTR_SWAP (u, v);
 8006ada:	9b02      	ldr	r3, [sp, #8]
 8006adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ae4:	9301      	str	r3, [sp, #4]
      MP_SIZE_T_SWAP (un, vn);
 8006ae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ae8:	930e      	str	r3, [sp, #56]	; 0x38
 8006aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aec:	9315      	str	r3, [sp, #84]	; 0x54
 8006aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006af0:	9314      	str	r3, [sp, #80]	; 0x50
    }
  if (vn == 0)
 8006af2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <mpz_xor+0x52>
    {
      mpz_set (r, u);
 8006af8:	9803      	ldr	r0, [sp, #12]
 8006afa:	9902      	ldr	r1, [sp, #8]
 8006afc:	f7fc fb5c 	bl	80031b8 <mpz_set>
      return;
 8006b00:	e0cd      	b.n	8006c9e <mpz_xor+0x1ee>
    }

  uc = u->_mp_size < 0;
 8006b02:	9b02      	ldr	r3, [sp, #8]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	0fdb      	lsrs	r3, r3, #31
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	9312      	str	r3, [sp, #72]	; 0x48
  vc = v->_mp_size < 0;
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	0fdb      	lsrs	r3, r3, #31
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	9311      	str	r3, [sp, #68]	; 0x44
  rc = uc ^ vc;
 8006b16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b1a:	4053      	eors	r3, r2
 8006b1c:	9310      	str	r3, [sp, #64]	; 0x40

  ux = -uc;
 8006b1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b20:	425b      	negs	r3, r3
 8006b22:	930d      	str	r3, [sp, #52]	; 0x34
  vx = -vc;
 8006b24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b26:	425b      	negs	r3, r3
 8006b28:	930c      	str	r3, [sp, #48]	; 0x30
  rx = -rc;
 8006b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b2c:	425b      	negs	r3, r3
 8006b2e:	930b      	str	r3, [sp, #44]	; 0x2c

  rp = MPZ_REALLOC (r, un + rc);
 8006b30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b34:	441a      	add	r2, r3
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d908      	bls.n	8006b50 <mpz_xor+0xa0>
 8006b3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b42:	4413      	add	r3, r2
 8006b44:	9803      	ldr	r0, [sp, #12]
 8006b46:	4619      	mov	r1, r3
 8006b48:	f7fc fae0 	bl	800310c <mpz_realloc>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	e001      	b.n	8006b54 <mpz_xor+0xa4>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	930a      	str	r3, [sp, #40]	; 0x28

  up = u->_mp_d;
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	9309      	str	r3, [sp, #36]	; 0x24
  vp = v->_mp_d;
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	9308      	str	r3, [sp, #32]

  i = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	9313      	str	r3, [sp, #76]	; 0x4c
  do
    {
      ul = (up[i] ^ ux) + uc;
 8006b66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b6c:	4413      	add	r3, r2
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b72:	405a      	eors	r2, r3
 8006b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b76:	4413      	add	r3, r2
 8006b78:	9307      	str	r3, [sp, #28]
      uc = ul < uc;
 8006b7a:	9a07      	ldr	r2, [sp, #28]
 8006b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	bf2c      	ite	cs
 8006b82:	2300      	movcs	r3, #0
 8006b84:	2301      	movcc	r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	9312      	str	r3, [sp, #72]	; 0x48

      vl = (vp[i] ^ vx) + vc;
 8006b8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	9a08      	ldr	r2, [sp, #32]
 8006b90:	4413      	add	r3, r2
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b96:	405a      	eors	r2, r3
 8006b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b9a:	4413      	add	r3, r2
 8006b9c:	9306      	str	r3, [sp, #24]
      vc = vl < vc;
 8006b9e:	9a06      	ldr	r2, [sp, #24]
 8006ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	bf2c      	ite	cs
 8006ba6:	2300      	movcs	r3, #0
 8006ba8:	2301      	movcc	r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	9311      	str	r3, [sp, #68]	; 0x44

      rl = (ul ^ vl ^ rx) + rc;
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	9b06      	ldr	r3, [sp, #24]
 8006bb2:	405a      	eors	r2, r3
 8006bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb6:	405a      	eors	r2, r3
 8006bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bba:	4413      	add	r3, r2
 8006bbc:	9305      	str	r3, [sp, #20]
      rc = rl < rc;
 8006bbe:	9a05      	ldr	r2, [sp, #20]
 8006bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	bf2c      	ite	cs
 8006bc6:	2300      	movcs	r3, #0
 8006bc8:	2301      	movcc	r3, #1
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	9310      	str	r3, [sp, #64]	; 0x40
      rp[i] = rl;
 8006bce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bd4:	4413      	add	r3, r2
 8006bd6:	9a05      	ldr	r2, [sp, #20]
 8006bd8:	601a      	str	r2, [r3, #0]
    }
  while (++i < vn);
 8006bda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bdc:	3301      	adds	r3, #1
 8006bde:	9313      	str	r3, [sp, #76]	; 0x4c
 8006be0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006be2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006be4:	429a      	cmp	r2, r3
 8006be6:	dbbe      	blt.n	8006b66 <mpz_xor+0xb6>
  assert (vc == 0);
 8006be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00f      	beq.n	8006c0e <mpz_xor+0x15e>
 8006bee:	f243 7064 	movw	r0, #14180	; 0x3764
 8006bf2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006bf6:	f640 61e3 	movw	r1, #3811	; 0xee3
 8006bfa:	f643 7210 	movw	r2, #16144	; 0x3f10
 8006bfe:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006c02:	f643 330c 	movw	r3, #15116	; 0x3b0c
 8006c06:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006c0a:	f006 fd89 	bl	800d720 <__assert_func>

  for (; i < un; i++)
 8006c0e:	e028      	b.n	8006c62 <mpz_xor+0x1b2>
    {
      ul = (up[i] ^ ux) + uc;
 8006c10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c16:	4413      	add	r3, r2
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c1c:	405a      	eors	r2, r3
 8006c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c20:	4413      	add	r3, r2
 8006c22:	9307      	str	r3, [sp, #28]
      uc = ul < uc;
 8006c24:	9a07      	ldr	r2, [sp, #28]
 8006c26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	bf2c      	ite	cs
 8006c2c:	2300      	movcs	r3, #0
 8006c2e:	2301      	movcc	r3, #1
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	9312      	str	r3, [sp, #72]	; 0x48

      rl = (ul ^ ux) + rc;
 8006c34:	9a07      	ldr	r2, [sp, #28]
 8006c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c38:	405a      	eors	r2, r3
 8006c3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c3c:	4413      	add	r3, r2
 8006c3e:	9305      	str	r3, [sp, #20]
      rc = rl < rc;
 8006c40:	9a05      	ldr	r2, [sp, #20]
 8006c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c44:	429a      	cmp	r2, r3
 8006c46:	bf2c      	ite	cs
 8006c48:	2300      	movcs	r3, #0
 8006c4a:	2301      	movcc	r3, #1
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	9310      	str	r3, [sp, #64]	; 0x40
      rp[i] = rl;
 8006c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c56:	4413      	add	r3, r2
 8006c58:	9a05      	ldr	r2, [sp, #20]
 8006c5a:	601a      	str	r2, [r3, #0]
      rp[i] = rl;
    }
  while (++i < vn);
  assert (vc == 0);

  for (; i < un; i++)
 8006c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c5e:	3301      	adds	r3, #1
 8006c60:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c66:	429a      	cmp	r2, r3
 8006c68:	dbd2      	blt.n	8006c10 <mpz_xor+0x160>

      rl = (ul ^ ux) + rc;
      rc = rl < rc;
      rp[i] = rl;
    }
  if (rc)
 8006c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <mpz_xor+0x1d2>
    rp[un++] = rc;
 8006c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	9215      	str	r2, [sp, #84]	; 0x54
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c7a:	4413      	add	r3, r2
 8006c7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	e004      	b.n	8006c8c <mpz_xor+0x1dc>
  else
    un = mpn_normalized_size (rp, un);
 8006c82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c84:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006c86:	f7fa f83d 	bl	8000d04 <mpn_normalized_size>
 8006c8a:	9015      	str	r0, [sp, #84]	; 0x54

  r->_mp_size = rx ? -un : un;
 8006c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <mpz_xor+0x1e8>
 8006c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c94:	425b      	negs	r3, r3
 8006c96:	e000      	b.n	8006c9a <mpz_xor+0x1ea>
 8006c98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c9a:	9a03      	ldr	r2, [sp, #12]
 8006c9c:	6053      	str	r3, [r2, #4]
}
 8006c9e:	b017      	add	sp, #92	; 0x5c
 8006ca0:	f85d fb04 	ldr.w	pc, [sp], #4

08006ca4 <gmp_popcount_limb>:

static unsigned
gmp_popcount_limb (mp_limb_t x)
{
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	9001      	str	r0, [sp, #4]
  unsigned c;

  /* Do 16 bits at a time, to avoid limb-sized constants. */
  for (c = 0; x > 0; x >>= 16)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	e02d      	b.n	8006d0a <gmp_popcount_limb+0x66>
    {
      unsigned w = ((x >> 1) & 0x5555) + (x & 0x5555);
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	f245 5255 	movw	r2, #21845	; 0x5555
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	9901      	ldr	r1, [sp, #4]
 8006cba:	f245 5355 	movw	r3, #21845	; 0x5555
 8006cbe:	400b      	ands	r3, r1
 8006cc0:	4413      	add	r3, r2
 8006cc2:	9302      	str	r3, [sp, #8]
      w = ((w >> 2) & 0x3333) + (w & 0x3333);
 8006cc4:	9b02      	ldr	r3, [sp, #8]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	f243 3233 	movw	r2, #13107	; 0x3333
 8006ccc:	401a      	ands	r2, r3
 8006cce:	9902      	ldr	r1, [sp, #8]
 8006cd0:	f243 3333 	movw	r3, #13107	; 0x3333
 8006cd4:	400b      	ands	r3, r1
 8006cd6:	4413      	add	r3, r2
 8006cd8:	9302      	str	r3, [sp, #8]
      w = ((w >> 4) & 0x0f0f) + (w & 0x0f0f);
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	091b      	lsrs	r3, r3, #4
 8006cde:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006ce2:	401a      	ands	r2, r3
 8006ce4:	9902      	ldr	r1, [sp, #8]
 8006ce6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006cea:	400b      	ands	r3, r1
 8006cec:	4413      	add	r3, r2
 8006cee:	9302      	str	r3, [sp, #8]
      w = (w >> 8) + (w & 0x00ff);
 8006cf0:	9b02      	ldr	r3, [sp, #8]
 8006cf2:	0a1a      	lsrs	r2, r3, #8
 8006cf4:	9b02      	ldr	r3, [sp, #8]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	4413      	add	r3, r2
 8006cfa:	9302      	str	r3, [sp, #8]
      c += w;
 8006cfc:	9a03      	ldr	r2, [sp, #12]
 8006cfe:	9b02      	ldr	r3, [sp, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	9303      	str	r3, [sp, #12]
gmp_popcount_limb (mp_limb_t x)
{
  unsigned c;

  /* Do 16 bits at a time, to avoid limb-sized constants. */
  for (c = 0; x > 0; x >>= 16)
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	0c1b      	lsrs	r3, r3, #16
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1ce      	bne.n	8006cae <gmp_popcount_limb+0xa>
      w = ((w >> 2) & 0x3333) + (w & 0x3333);
      w = ((w >> 4) & 0x0f0f) + (w & 0x0f0f);
      w = (w >> 8) + (w & 0x00ff);
      c += w;
    }
  return c;
 8006d10:	9b03      	ldr	r3, [sp, #12]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	b004      	add	sp, #16
 8006d16:	4770      	bx	lr

08006d18 <mpn_popcount>:

mp_bitcnt_t
mpn_popcount (mp_srcptr p, mp_size_t n)
{
 8006d18:	b500      	push	{lr}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	9001      	str	r0, [sp, #4]
 8006d1e:	9100      	str	r1, [sp, #0]
  mp_size_t i;
  mp_bitcnt_t c;

  for (c = 0, i = 0; i < n; i++)
 8006d20:	2300      	movs	r3, #0
 8006d22:	9302      	str	r3, [sp, #8]
 8006d24:	2300      	movs	r3, #0
 8006d26:	9303      	str	r3, [sp, #12]
 8006d28:	e00e      	b.n	8006d48 <mpn_popcount+0x30>
    c += gmp_popcount_limb (p[i]);
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	9a01      	ldr	r2, [sp, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff ffb5 	bl	8006ca4 <gmp_popcount_limb>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	9a02      	ldr	r2, [sp, #8]
 8006d3e:	4413      	add	r3, r2
 8006d40:	9302      	str	r3, [sp, #8]
mpn_popcount (mp_srcptr p, mp_size_t n)
{
  mp_size_t i;
  mp_bitcnt_t c;

  for (c = 0, i = 0; i < n; i++)
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	9a03      	ldr	r2, [sp, #12]
 8006d4a:	9b00      	ldr	r3, [sp, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	dbec      	blt.n	8006d2a <mpn_popcount+0x12>
    c += gmp_popcount_limb (p[i]);

  return c;
 8006d50:	9b02      	ldr	r3, [sp, #8]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	b005      	add	sp, #20
 8006d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d5a:	bf00      	nop

08006d5c <mpz_popcount>:

mp_bitcnt_t
mpz_popcount (const mpz_t u)
{
 8006d5c:	b500      	push	{lr}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	9001      	str	r0, [sp, #4]
  mp_size_t un;

  un = u->_mp_size;
 8006d62:	9b01      	ldr	r3, [sp, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	9303      	str	r3, [sp, #12]

  if (un < 0)
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da02      	bge.n	8006d74 <mpz_popcount+0x18>
    return ~(mp_bitcnt_t) 0;
 8006d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d72:	e006      	b.n	8006d82 <mpz_popcount+0x26>

  return mpn_popcount (u->_mp_d, un);
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	9903      	ldr	r1, [sp, #12]
 8006d7c:	f7ff ffcc 	bl	8006d18 <mpn_popcount>
 8006d80:	4603      	mov	r3, r0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	b005      	add	sp, #20
 8006d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d8a:	bf00      	nop

08006d8c <mpz_hamdist>:

mp_bitcnt_t
mpz_hamdist (const mpz_t u, const mpz_t v)
{
 8006d8c:	b500      	push	{lr}
 8006d8e:	b091      	sub	sp, #68	; 0x44
 8006d90:	9001      	str	r0, [sp, #4]
 8006d92:	9100      	str	r1, [sp, #0]
  mp_size_t un, vn, i;
  mp_limb_t uc, vc, ul, vl, comp;
  mp_srcptr up, vp;
  mp_bitcnt_t c;

  un = u->_mp_size;
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	930f      	str	r3, [sp, #60]	; 0x3c
  vn = v->_mp_size;
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	930e      	str	r3, [sp, #56]	; 0x38

  if ( (un ^ vn) < 0)
 8006da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006da4:	4053      	eors	r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da02      	bge.n	8006db0 <mpz_hamdist+0x24>
    return ~(mp_bitcnt_t) 0;
 8006daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dae:	e0ac      	b.n	8006f0a <mpz_hamdist+0x17e>

  comp = - (uc = vc = (un < 0));
 8006db0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006db2:	0fdb      	lsrs	r3, r3, #31
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dba:	930c      	str	r3, [sp, #48]	; 0x30
 8006dbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dbe:	425b      	negs	r3, r3
 8006dc0:	9307      	str	r3, [sp, #28]
  if (uc)
 8006dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d018      	beq.n	8006dfa <mpz_hamdist+0x6e>
    {
      assert (vn < 0);
 8006dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	db0f      	blt.n	8006dee <mpz_hamdist+0x62>
 8006dce:	f243 7064 	movw	r0, #14180	; 0x3764
 8006dd2:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006dd6:	f640 7131 	movw	r1, #3889	; 0xf31
 8006dda:	f643 7218 	movw	r2, #16152	; 0x3f18
 8006dde:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006de2:	f643 3314 	movw	r3, #15124	; 0x3b14
 8006de6:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006dea:	f006 fc99 	bl	800d720 <__assert_func>
      un = -un;
 8006dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006df0:	425b      	negs	r3, r3
 8006df2:	930f      	str	r3, [sp, #60]	; 0x3c
      vn = -vn;
 8006df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006df6:	425b      	negs	r3, r3
 8006df8:	930e      	str	r3, [sp, #56]	; 0x38
    }

  up = u->_mp_d;
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	930a      	str	r3, [sp, #40]	; 0x28
  vp = v->_mp_d;
 8006e00:	9b00      	ldr	r3, [sp, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	9309      	str	r3, [sp, #36]	; 0x24

  if (un < vn)
 8006e06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	da0b      	bge.n	8006e26 <mpz_hamdist+0x9a>
    MPN_SRCPTR_SWAP (up, un, vp, vn);
 8006e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e10:	9306      	str	r3, [sp, #24]
 8006e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e14:	930a      	str	r3, [sp, #40]	; 0x28
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	9309      	str	r3, [sp, #36]	; 0x24
 8006e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e22:	9b05      	ldr	r3, [sp, #20]
 8006e24:	930e      	str	r3, [sp, #56]	; 0x38

  for (i = 0, c = 0; i < vn; i++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	930d      	str	r3, [sp, #52]	; 0x34
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9308      	str	r3, [sp, #32]
 8006e2e:	e030      	b.n	8006e92 <mpz_hamdist+0x106>
    {
      ul = (up[i] ^ comp) + uc;
 8006e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e36:	4413      	add	r3, r2
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	9b07      	ldr	r3, [sp, #28]
 8006e3c:	405a      	eors	r2, r3
 8006e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e40:	4413      	add	r3, r2
 8006e42:	9304      	str	r3, [sp, #16]
      uc = ul < uc;
 8006e44:	9a04      	ldr	r2, [sp, #16]
 8006e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bf2c      	ite	cs
 8006e4c:	2300      	movcs	r3, #0
 8006e4e:	2301      	movcc	r3, #1
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	930c      	str	r3, [sp, #48]	; 0x30

      vl = (vp[i] ^ comp) + vc;
 8006e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e5a:	4413      	add	r3, r2
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	9b07      	ldr	r3, [sp, #28]
 8006e60:	405a      	eors	r2, r3
 8006e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e64:	4413      	add	r3, r2
 8006e66:	9303      	str	r3, [sp, #12]
      vc = vl < vc;
 8006e68:	9a03      	ldr	r2, [sp, #12]
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	bf2c      	ite	cs
 8006e70:	2300      	movcs	r3, #0
 8006e72:	2301      	movcc	r3, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	930b      	str	r3, [sp, #44]	; 0x2c

      c += gmp_popcount_limb (ul ^ vl);
 8006e78:	9a04      	ldr	r2, [sp, #16]
 8006e7a:	9b03      	ldr	r3, [sp, #12]
 8006e7c:	4053      	eors	r3, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff ff10 	bl	8006ca4 <gmp_popcount_limb>
 8006e84:	4603      	mov	r3, r0
 8006e86:	9a08      	ldr	r2, [sp, #32]
 8006e88:	4413      	add	r3, r2
 8006e8a:	9308      	str	r3, [sp, #32]
  vp = v->_mp_d;

  if (un < vn)
    MPN_SRCPTR_SWAP (up, un, vp, vn);

  for (i = 0, c = 0; i < vn; i++)
 8006e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e8e:	3301      	adds	r3, #1
 8006e90:	930d      	str	r3, [sp, #52]	; 0x34
 8006e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e96:	429a      	cmp	r2, r3
 8006e98:	dbca      	blt.n	8006e30 <mpz_hamdist+0xa4>
      vl = (vp[i] ^ comp) + vc;
      vc = vl < vc;

      c += gmp_popcount_limb (ul ^ vl);
    }
  assert (vc == 0);
 8006e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00f      	beq.n	8006ec0 <mpz_hamdist+0x134>
 8006ea0:	f243 7064 	movw	r0, #14180	; 0x3764
 8006ea4:	f6c0 0001 	movt	r0, #2049	; 0x801
 8006ea8:	f640 7146 	movw	r1, #3910	; 0xf46
 8006eac:	f643 7218 	movw	r2, #16152	; 0x3f18
 8006eb0:	f6c0 0201 	movt	r2, #2049	; 0x801
 8006eb4:	f643 330c 	movw	r3, #15116	; 0x3b0c
 8006eb8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8006ebc:	f006 fc30 	bl	800d720 <__assert_func>

  for (; i < un; i++)
 8006ec0:	e01e      	b.n	8006f00 <mpz_hamdist+0x174>
    {
      ul = (up[i] ^ comp) + uc;
 8006ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ec8:	4413      	add	r3, r2
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	405a      	eors	r2, r3
 8006ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed2:	4413      	add	r3, r2
 8006ed4:	9304      	str	r3, [sp, #16]
      uc = ul < uc;
 8006ed6:	9a04      	ldr	r2, [sp, #16]
 8006ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eda:	429a      	cmp	r2, r3
 8006edc:	bf2c      	ite	cs
 8006ede:	2300      	movcs	r3, #0
 8006ee0:	2301      	movcc	r3, #1
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	930c      	str	r3, [sp, #48]	; 0x30

      c += gmp_popcount_limb (ul ^ comp);
 8006ee6:	9a04      	ldr	r2, [sp, #16]
 8006ee8:	9b07      	ldr	r3, [sp, #28]
 8006eea:	4053      	eors	r3, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff fed9 	bl	8006ca4 <gmp_popcount_limb>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	9a08      	ldr	r2, [sp, #32]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	9308      	str	r3, [sp, #32]

      c += gmp_popcount_limb (ul ^ vl);
    }
  assert (vc == 0);

  for (; i < un; i++)
 8006efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006efc:	3301      	adds	r3, #1
 8006efe:	930d      	str	r3, [sp, #52]	; 0x34
 8006f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f04:	429a      	cmp	r2, r3
 8006f06:	dbdc      	blt.n	8006ec2 <mpz_hamdist+0x136>
      uc = ul < uc;

      c += gmp_popcount_limb (ul ^ comp);
    }

  return c;
 8006f08:	9b08      	ldr	r3, [sp, #32]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	b011      	add	sp, #68	; 0x44
 8006f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f12:	bf00      	nop

08006f14 <mpz_scan1>:

mp_bitcnt_t
mpz_scan1 (const mpz_t u, mp_bitcnt_t starting_bit)
{
 8006f14:	b500      	push	{lr}
 8006f16:	b08b      	sub	sp, #44	; 0x2c
 8006f18:	9003      	str	r0, [sp, #12]
 8006f1a:	9102      	str	r1, [sp, #8]
  mp_ptr up;
  mp_size_t us, un, i;
  mp_limb_t limb, ux;

  us = u->_mp_size;
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	9307      	str	r3, [sp, #28]
  un = GMP_ABS (us);
 8006f22:	9b07      	ldr	r3, [sp, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bfb8      	it	lt
 8006f28:	425b      	neglt	r3, r3
 8006f2a:	9306      	str	r3, [sp, #24]
  i = starting_bit / GMP_LIMB_BITS;
 8006f2c:	9b02      	ldr	r3, [sp, #8]
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	9305      	str	r3, [sp, #20]

  /* Past the end there's no 1 bits for u>=0, or an immediate 1 bit
     for u<0. Notice this test picks up any u==0 too. */
  if (i >= un)
 8006f32:	9a05      	ldr	r2, [sp, #20]
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	db07      	blt.n	8006f4a <mpz_scan1+0x36>
    return (us >= 0 ? ~(mp_bitcnt_t) 0 : starting_bit);
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da01      	bge.n	8006f44 <mpz_scan1+0x30>
 8006f40:	9b02      	ldr	r3, [sp, #8]
 8006f42:	e001      	b.n	8006f48 <mpz_scan1+0x34>
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f48:	e03c      	b.n	8006fc4 <mpz_scan1+0xb0>

  up = u->_mp_d;
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	9304      	str	r3, [sp, #16]
  ux = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	9308      	str	r3, [sp, #32]
  limb = up[i];
 8006f54:	9b05      	ldr	r3, [sp, #20]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	9a04      	ldr	r2, [sp, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	9309      	str	r3, [sp, #36]	; 0x24

  if (starting_bit != 0)
 8006f60:	9b02      	ldr	r3, [sp, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d025      	beq.n	8006fb2 <mpz_scan1+0x9e>
    {
      if (us < 0)
 8006f66:	9b07      	ldr	r3, [sp, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da18      	bge.n	8006f9e <mpz_scan1+0x8a>
	{
	  ux = mpn_zero_p (up, i);
 8006f6c:	9804      	ldr	r0, [sp, #16]
 8006f6e:	9905      	ldr	r1, [sp, #20]
 8006f70:	f7f9 fec8 	bl	8000d04 <mpn_normalized_size>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bf14      	ite	ne
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	2301      	moveq	r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	9308      	str	r3, [sp, #32]
	  limb = ~ limb + ux;
 8006f82:	9a08      	ldr	r2, [sp, #32]
 8006f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	9309      	str	r3, [sp, #36]	; 0x24
	  ux = - (mp_limb_t) (limb >= ux);
 8006f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f8e:	9b08      	ldr	r3, [sp, #32]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	bf34      	ite	cc
 8006f94:	2300      	movcc	r3, #0
 8006f96:	2301      	movcs	r3, #1
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	425b      	negs	r3, r3
 8006f9c:	9308      	str	r3, [sp, #32]
	}

      /* Mask to 0 all bits before starting_bit, thus ignoring them. */
      limb &= (GMP_LIMB_MAX << (starting_bit % GMP_LIMB_BITS));
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fae:	4013      	ands	r3, r2
 8006fb0:	9309      	str	r3, [sp, #36]	; 0x24
    }

  return mpn_common_scan (limb, i, up, un, ux);
 8006fb2:	9b08      	ldr	r3, [sp, #32]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fb8:	9905      	ldr	r1, [sp, #20]
 8006fba:	9a04      	ldr	r2, [sp, #16]
 8006fbc:	9b06      	ldr	r3, [sp, #24]
 8006fbe:	f7fa fb6d 	bl	800169c <mpn_common_scan>
 8006fc2:	4603      	mov	r3, r0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	b00b      	add	sp, #44	; 0x2c
 8006fc8:	f85d fb04 	ldr.w	pc, [sp], #4

08006fcc <mpz_scan0>:

mp_bitcnt_t
mpz_scan0 (const mpz_t u, mp_bitcnt_t starting_bit)
{
 8006fcc:	b500      	push	{lr}
 8006fce:	b08b      	sub	sp, #44	; 0x2c
 8006fd0:	9003      	str	r0, [sp, #12]
 8006fd2:	9102      	str	r1, [sp, #8]
  mp_ptr up;
  mp_size_t us, un, i;
  mp_limb_t limb, ux;

  us = u->_mp_size;
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	9308      	str	r3, [sp, #32]
  ux = - (mp_limb_t) (us >= 0);
 8006fda:	9b08      	ldr	r3, [sp, #32]
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	0fdb      	lsrs	r3, r3, #31
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	425b      	negs	r3, r3
 8006fe4:	9307      	str	r3, [sp, #28]
  un = GMP_ABS (us);
 8006fe6:	9b08      	ldr	r3, [sp, #32]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bfb8      	it	lt
 8006fec:	425b      	neglt	r3, r3
 8006fee:	9306      	str	r3, [sp, #24]
  i = starting_bit / GMP_LIMB_BITS;
 8006ff0:	9b02      	ldr	r3, [sp, #8]
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	9305      	str	r3, [sp, #20]

  /* When past end, there's an immediate 0 bit for u>=0, or no 0 bits for
     u<0.  Notice this test picks up all cases of u==0 too. */
  if (i >= un)
 8006ff6:	9a05      	ldr	r2, [sp, #20]
 8006ff8:	9b06      	ldr	r3, [sp, #24]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	db07      	blt.n	800700e <mpz_scan0+0x42>
    return (ux ? starting_bit : ~(mp_bitcnt_t) 0);
 8006ffe:	9b07      	ldr	r3, [sp, #28]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <mpz_scan0+0x3c>
 8007004:	9b02      	ldr	r3, [sp, #8]
 8007006:	e001      	b.n	800700c <mpz_scan0+0x40>
 8007008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800700c:	e02d      	b.n	800706a <mpz_scan0+0x9e>

  up = u->_mp_d;
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	9304      	str	r3, [sp, #16]
  limb = up[i] ^ ux;
 8007014:	9b05      	ldr	r3, [sp, #20]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	9a04      	ldr	r2, [sp, #16]
 800701a:	4413      	add	r3, r2
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	9b07      	ldr	r3, [sp, #28]
 8007020:	4053      	eors	r3, r2
 8007022:	9309      	str	r3, [sp, #36]	; 0x24

  if (ux == 0)
 8007024:	9b07      	ldr	r3, [sp, #28]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10c      	bne.n	8007044 <mpz_scan0+0x78>
    limb -= mpn_zero_p (up, i); /* limb = ~(~limb + zero_p) */
 800702a:	9804      	ldr	r0, [sp, #16]
 800702c:	9905      	ldr	r1, [sp, #20]
 800702e:	f7f9 fe69 	bl	8000d04 <mpn_normalized_size>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf14      	ite	ne
 8007038:	2300      	movne	r3, #0
 800703a:	2301      	moveq	r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	9309      	str	r3, [sp, #36]	; 0x24

  /* Mask all bits before starting_bit, thus ignoring them. */
  limb &= (GMP_LIMB_MAX << (starting_bit % GMP_LIMB_BITS));
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007054:	4013      	ands	r3, r2
 8007056:	9309      	str	r3, [sp, #36]	; 0x24

  return mpn_common_scan (limb, i, up, un, ux);
 8007058:	9b07      	ldr	r3, [sp, #28]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800705e:	9905      	ldr	r1, [sp, #20]
 8007060:	9a04      	ldr	r2, [sp, #16]
 8007062:	9b06      	ldr	r3, [sp, #24]
 8007064:	f7fa fb1a 	bl	800169c <mpn_common_scan>
 8007068:	4603      	mov	r3, r0
}
 800706a:	4618      	mov	r0, r3
 800706c:	b00b      	add	sp, #44	; 0x2c
 800706e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007072:	bf00      	nop

08007074 <mpz_sizeinbase>:

/* MPZ base conversion. */

size_t
mpz_sizeinbase (const mpz_t u, int base)
{
 8007074:	b510      	push	{r4, lr}
 8007076:	b08c      	sub	sp, #48	; 0x30
 8007078:	9001      	str	r0, [sp, #4]
 800707a:	9100      	str	r1, [sp, #0]
  mp_ptr tp;
  mp_bitcnt_t bits;
  struct gmp_div_inverse bi;
  size_t ndigits;

  assert (base >= 2);
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	2b01      	cmp	r3, #1
 8007080:	dc0f      	bgt.n	80070a2 <mpz_sizeinbase+0x2e>
 8007082:	f243 7064 	movw	r0, #14180	; 0x3764
 8007086:	f6c0 0001 	movt	r0, #2049	; 0x801
 800708a:	f640 71a1 	movw	r1, #4001	; 0xfa1
 800708e:	f643 7224 	movw	r2, #16164	; 0x3f24
 8007092:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007096:	f643 331c 	movw	r3, #15132	; 0x3b1c
 800709a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800709e:	f006 fb3f 	bl	800d720 <__assert_func>
  assert (base <= 36);
 80070a2:	9b00      	ldr	r3, [sp, #0]
 80070a4:	2b24      	cmp	r3, #36	; 0x24
 80070a6:	dd0f      	ble.n	80070c8 <mpz_sizeinbase+0x54>
 80070a8:	f243 7064 	movw	r0, #14180	; 0x3764
 80070ac:	f6c0 0001 	movt	r0, #2049	; 0x801
 80070b0:	f640 71a2 	movw	r1, #4002	; 0xfa2
 80070b4:	f643 7224 	movw	r2, #16164	; 0x3f24
 80070b8:	f6c0 0201 	movt	r2, #2049	; 0x801
 80070bc:	f643 3328 	movw	r3, #15144	; 0x3b28
 80070c0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80070c4:	f006 fb2c 	bl	800d720 <__assert_func>

  un = GMP_ABS (u->_mp_size);
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfb8      	it	lt
 80070d0:	425b      	neglt	r3, r3
 80070d2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (un == 0)
 80070d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <mpz_sizeinbase+0x6a>
    return 1;
 80070da:	2301      	movs	r3, #1
 80070dc:	e0ac      	b.n	8007238 <mpz_sizeinbase+0x1c4>

  up = u->_mp_d;
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	9309      	str	r3, [sp, #36]	; 0x24

  bits = (un - 1) * GMP_LIMB_BITS + mpn_limb_size_in_base_2 (up[un-1]);
 80070e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e6:	3b01      	subs	r3, #1
 80070e8:	015c      	lsls	r4, r3, #5
 80070ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070f0:	3b01      	subs	r3, #1
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070f6:	4413      	add	r3, r2
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fb fc52 	bl	80029a4 <mpn_limb_size_in_base_2>
 8007100:	4603      	mov	r3, r0
 8007102:	4423      	add	r3, r4
 8007104:	9308      	str	r3, [sp, #32]
  switch (base)
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	3b02      	subs	r3, #2
 800710a:	2b1e      	cmp	r3, #30
 800710c:	d85e      	bhi.n	80071cc <mpz_sizeinbase+0x158>
 800710e:	a101      	add	r1, pc, #4	; (adr r1, 8007114 <mpz_sizeinbase+0xa0>)
 8007110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007114:	08007191 	.word	0x08007191
 8007118:	080071cd 	.word	0x080071cd
 800711c:	08007195 	.word	0x08007195
 8007120:	080071cd 	.word	0x080071cd
 8007124:	080071cd 	.word	0x080071cd
 8007128:	080071cd 	.word	0x080071cd
 800712c:	0800719d 	.word	0x0800719d
 8007130:	080071cd 	.word	0x080071cd
 8007134:	080071cd 	.word	0x080071cd
 8007138:	080071cd 	.word	0x080071cd
 800713c:	080071cd 	.word	0x080071cd
 8007140:	080071cd 	.word	0x080071cd
 8007144:	080071cd 	.word	0x080071cd
 8007148:	080071cd 	.word	0x080071cd
 800714c:	080071b1 	.word	0x080071b1
 8007150:	080071cd 	.word	0x080071cd
 8007154:	080071cd 	.word	0x080071cd
 8007158:	080071cd 	.word	0x080071cd
 800715c:	080071cd 	.word	0x080071cd
 8007160:	080071cd 	.word	0x080071cd
 8007164:	080071cd 	.word	0x080071cd
 8007168:	080071cd 	.word	0x080071cd
 800716c:	080071cd 	.word	0x080071cd
 8007170:	080071cd 	.word	0x080071cd
 8007174:	080071cd 	.word	0x080071cd
 8007178:	080071cd 	.word	0x080071cd
 800717c:	080071cd 	.word	0x080071cd
 8007180:	080071cd 	.word	0x080071cd
 8007184:	080071cd 	.word	0x080071cd
 8007188:	080071cd 	.word	0x080071cd
 800718c:	080071b9 	.word	0x080071b9
    {
    case 2:
      return bits;
 8007190:	9b08      	ldr	r3, [sp, #32]
 8007192:	e051      	b.n	8007238 <mpz_sizeinbase+0x1c4>
    case 4:
      return (bits + 1) / 2;
 8007194:	9b08      	ldr	r3, [sp, #32]
 8007196:	3301      	adds	r3, #1
 8007198:	085b      	lsrs	r3, r3, #1
 800719a:	e04d      	b.n	8007238 <mpz_sizeinbase+0x1c4>
    case 8:
      return (bits + 2) / 3;
 800719c:	9b08      	ldr	r3, [sp, #32]
 800719e:	1c9a      	adds	r2, r3, #2
 80071a0:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 80071a4:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
 80071a8:	fba3 1302 	umull	r1, r3, r3, r2
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	e043      	b.n	8007238 <mpz_sizeinbase+0x1c4>
    case 16:
      return (bits + 3) / 4;
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	3303      	adds	r3, #3
 80071b4:	089b      	lsrs	r3, r3, #2
 80071b6:	e03f      	b.n	8007238 <mpz_sizeinbase+0x1c4>
    case 32:
      return (bits + 4) / 5;
 80071b8:	9b08      	ldr	r3, [sp, #32]
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 80071c0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80071c4:	fba3 1302 	umull	r1, r3, r3, r2
 80071c8:	089b      	lsrs	r3, r3, #2
 80071ca:	e035      	b.n	8007238 <mpz_sizeinbase+0x1c4>
      /* FIXME: Do something more clever for the common case of base
	 10. */
    }

  tp = gmp_xalloc_limbs (un);
 80071cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071ce:	f7f9 fce7 	bl	8000ba0 <gmp_xalloc_limbs>
 80071d2:	9007      	str	r0, [sp, #28]
  mpn_copyi (tp, up, un);
 80071d4:	9807      	ldr	r0, [sp, #28]
 80071d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071da:	f7f9 fd19 	bl	8000c10 <mpn_copyi>
  mpn_div_qr_1_invert (&bi, base);
 80071de:	9b00      	ldr	r3, [sp, #0]
 80071e0:	aa03      	add	r2, sp, #12
 80071e2:	4610      	mov	r0, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	f7fa fc33 	bl	8001a50 <mpn_div_qr_1_invert>

  ndigits = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	930a      	str	r3, [sp, #40]	; 0x28
  do
    {
      ndigits++;
 80071ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f0:	3301      	adds	r3, #1
 80071f2:	930a      	str	r3, [sp, #40]	; 0x28
      mpn_div_qr_1_preinv (tp, tp, un, &bi);
 80071f4:	ab03      	add	r3, sp, #12
 80071f6:	9807      	ldr	r0, [sp, #28]
 80071f8:	9907      	ldr	r1, [sp, #28]
 80071fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071fc:	f7fa fd6e 	bl	8001cdc <mpn_div_qr_1_preinv>
      un -= (tp[un-1] == 0);
 8007200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007202:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007206:	3b01      	subs	r3, #1
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	9a07      	ldr	r2, [sp, #28]
 800720c:	4413      	add	r3, r2
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf14      	ite	ne
 8007214:	2300      	movne	r3, #0
 8007216:	2301      	moveq	r3, #1
 8007218:	b2db      	uxtb	r3, r3
 800721a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	930b      	str	r3, [sp, #44]	; 0x2c
    }
  while (un > 0);
 8007220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007222:	2b00      	cmp	r3, #0
 8007224:	dce3      	bgt.n	80071ee <mpz_sizeinbase+0x17a>

  gmp_free (tp);
 8007226:	f240 0314 	movw	r3, #20
 800722a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	9807      	ldr	r0, [sp, #28]
 8007232:	2100      	movs	r1, #0
 8007234:	4798      	blx	r3
  return ndigits;
 8007236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 8007238:	4618      	mov	r0, r3
 800723a:	b00c      	add	sp, #48	; 0x30
 800723c:	bd10      	pop	{r4, pc}
 800723e:	bf00      	nop

08007240 <mpz_get_str>:

char *
mpz_get_str (char *sp, int base, const mpz_t u)
{
 8007240:	b500      	push	{lr}
 8007242:	b08f      	sub	sp, #60	; 0x3c
 8007244:	9005      	str	r0, [sp, #20]
 8007246:	9104      	str	r1, [sp, #16]
 8007248:	9203      	str	r2, [sp, #12]
  unsigned bits;
  const char *digits;
  mp_size_t un;
  size_t i, sn;

  if (base >= 0)
 800724a:	9b04      	ldr	r3, [sp, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	db05      	blt.n	800725c <mpz_get_str+0x1c>
    {
      digits = "0123456789abcdefghijklmnopqrstuvwxyz";
 8007250:	f643 3334 	movw	r3, #15156	; 0x3b34
 8007254:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007258:	930d      	str	r3, [sp, #52]	; 0x34
 800725a:	e007      	b.n	800726c <mpz_get_str+0x2c>
    }
  else
    {
      base = -base;
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	425b      	negs	r3, r3
 8007260:	9304      	str	r3, [sp, #16]
      digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 8007262:	f643 335c 	movw	r3, #15196	; 0x3b5c
 8007266:	f6c0 0301 	movt	r3, #2049	; 0x801
 800726a:	930d      	str	r3, [sp, #52]	; 0x34
    }
  if (base <= 1)
 800726c:	9b04      	ldr	r3, [sp, #16]
 800726e:	2b01      	cmp	r3, #1
 8007270:	dc01      	bgt.n	8007276 <mpz_get_str+0x36>
    base = 10;
 8007272:	230a      	movs	r3, #10
 8007274:	9304      	str	r3, [sp, #16]
  if (base > 36)
 8007276:	9b04      	ldr	r3, [sp, #16]
 8007278:	2b24      	cmp	r3, #36	; 0x24
 800727a:	dd01      	ble.n	8007280 <mpz_get_str+0x40>
    return NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	e08c      	b.n	800739a <mpz_get_str+0x15a>

  sn = 1 + mpz_sizeinbase (u, base);
 8007280:	9803      	ldr	r0, [sp, #12]
 8007282:	9904      	ldr	r1, [sp, #16]
 8007284:	f7ff fef6 	bl	8007074 <mpz_sizeinbase>
 8007288:	4603      	mov	r3, r0
 800728a:	3301      	adds	r3, #1
 800728c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (!sp)
 800728e:	9b05      	ldr	r3, [sp, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <mpz_get_str+0x68>
    sp = gmp_xalloc (1 + sn);
 8007294:	f240 030c 	movw	r3, #12
 8007298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072a0:	3201      	adds	r2, #1
 80072a2:	4610      	mov	r0, r2
 80072a4:	4798      	blx	r3
 80072a6:	9005      	str	r0, [sp, #20]

  un = GMP_ABS (u->_mp_size);
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bfb8      	it	lt
 80072b0:	425b      	neglt	r3, r3
 80072b2:	930a      	str	r3, [sp, #40]	; 0x28

  if (un == 0)
 80072b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d108      	bne.n	80072cc <mpz_get_str+0x8c>
    {
      sp[0] = '0';
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	2230      	movs	r2, #48	; 0x30
 80072be:	701a      	strb	r2, [r3, #0]
      sp[1] = '\0';
 80072c0:	9b05      	ldr	r3, [sp, #20]
 80072c2:	3301      	adds	r3, #1
 80072c4:	2200      	movs	r2, #0
 80072c6:	701a      	strb	r2, [r3, #0]
      return sp;
 80072c8:	9b05      	ldr	r3, [sp, #20]
 80072ca:	e066      	b.n	800739a <mpz_get_str+0x15a>
    }

  i = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	930c      	str	r3, [sp, #48]	; 0x30

  if (u->_mp_size < 0)
 80072d0:	9b03      	ldr	r3, [sp, #12]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da06      	bge.n	80072e6 <mpz_get_str+0xa6>
    sp[i++] = '-';
 80072d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	920c      	str	r2, [sp, #48]	; 0x30
 80072de:	9a05      	ldr	r2, [sp, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	222d      	movs	r2, #45	; 0x2d
 80072e4:	701a      	strb	r2, [r3, #0]

  bits = mpn_base_power_of_two_p (base);
 80072e6:	9b04      	ldr	r3, [sp, #16]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fb fb09 	bl	8002900 <mpn_base_power_of_two_p>
 80072ee:	9009      	str	r0, [sp, #36]	; 0x24

  if (bits)
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00f      	beq.n	8007316 <mpz_get_str+0xd6>
    /* Not modified in this case. */
    sn = i + mpn_get_str_bits ((unsigned char *) sp + i, bits, u->_mp_d, un);
 80072f6:	9a05      	ldr	r2, [sp, #20]
 80072f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072fa:	441a      	add	r2, r3
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4610      	mov	r0, r2
 8007302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007304:	461a      	mov	r2, r3
 8007306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007308:	f7fb fb86 	bl	8002a18 <mpn_get_str_bits>
 800730c:	4602      	mov	r2, r0
 800730e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007310:	4413      	add	r3, r2
 8007312:	930b      	str	r3, [sp, #44]	; 0x2c

      sn = i + mpn_get_str_other ((unsigned char *) sp + i, base, &info, tp, un);
      gmp_free (tp);
    }

  for (; i < sn; i++)
 8007314:	e037      	b.n	8007386 <mpz_get_str+0x146>
  else
    {
      struct mpn_base_info info;
      mp_ptr tp;

      mpn_get_base_info (&info, base);
 8007316:	9b04      	ldr	r3, [sp, #16]
 8007318:	aa06      	add	r2, sp, #24
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	f7fb fb1f 	bl	8002960 <mpn_get_base_info>
      tp = gmp_xalloc_limbs (un);
 8007322:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007324:	f7f9 fc3c 	bl	8000ba0 <gmp_xalloc_limbs>
 8007328:	9008      	str	r0, [sp, #32]
      mpn_copyi (tp, u->_mp_d, un);
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	9808      	ldr	r0, [sp, #32]
 8007330:	4619      	mov	r1, r3
 8007332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007334:	f7f9 fc6c 	bl	8000c10 <mpn_copyi>

      sn = i + mpn_get_str_other ((unsigned char *) sp + i, base, &info, tp, un);
 8007338:	9a05      	ldr	r2, [sp, #20]
 800733a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800733c:	441a      	add	r2, r3
 800733e:	ab06      	add	r3, sp, #24
 8007340:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007342:	9100      	str	r1, [sp, #0]
 8007344:	4610      	mov	r0, r2
 8007346:	9904      	ldr	r1, [sp, #16]
 8007348:	461a      	mov	r2, r3
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	f7fb fc96 	bl	8002c7c <mpn_get_str_other>
 8007350:	4602      	mov	r2, r0
 8007352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007354:	4413      	add	r3, r2
 8007356:	930b      	str	r3, [sp, #44]	; 0x2c
      gmp_free (tp);
 8007358:	f240 0314 	movw	r3, #20
 800735c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	9808      	ldr	r0, [sp, #32]
 8007364:	2100      	movs	r1, #0
 8007366:	4798      	blx	r3
    }

  for (; i < sn; i++)
 8007368:	e00d      	b.n	8007386 <mpz_get_str+0x146>
    sp[i] = digits[(unsigned char) sp[i]];
 800736a:	9a05      	ldr	r2, [sp, #20]
 800736c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800736e:	4413      	add	r3, r2
 8007370:	9905      	ldr	r1, [sp, #20]
 8007372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007374:	440a      	add	r2, r1
 8007376:	7812      	ldrb	r2, [r2, #0]
 8007378:	990d      	ldr	r1, [sp, #52]	; 0x34
 800737a:	440a      	add	r2, r1
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	701a      	strb	r2, [r3, #0]

      sn = i + mpn_get_str_other ((unsigned char *) sp + i, base, &info, tp, un);
      gmp_free (tp);
    }

  for (; i < sn; i++)
 8007380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007382:	3301      	adds	r3, #1
 8007384:	930c      	str	r3, [sp, #48]	; 0x30
 8007386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738a:	429a      	cmp	r2, r3
 800738c:	d3ed      	bcc.n	800736a <mpz_get_str+0x12a>
    sp[i] = digits[(unsigned char) sp[i]];

  sp[sn] = '\0';
 800738e:	9a05      	ldr	r2, [sp, #20]
 8007390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007392:	4413      	add	r3, r2
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
  return sp;
 8007398:	9b05      	ldr	r3, [sp, #20]
}
 800739a:	4618      	mov	r0, r3
 800739c:	b00f      	add	sp, #60	; 0x3c
 800739e:	f85d fb04 	ldr.w	pc, [sp], #4
 80073a2:	bf00      	nop

080073a4 <mpz_set_str>:

int
mpz_set_str (mpz_t r, const char *sp, int base)
{
 80073a4:	b500      	push	{lr}
 80073a6:	b091      	sub	sp, #68	; 0x44
 80073a8:	9005      	str	r0, [sp, #20]
 80073aa:	9104      	str	r1, [sp, #16]
 80073ac:	9203      	str	r2, [sp, #12]
  mp_ptr rp;
  size_t sn;
  int sign;
  unsigned char *dp;

  assert (base == 0 || (base >= 2 && base <= 36));
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d015      	beq.n	80073e0 <mpz_set_str+0x3c>
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	dd02      	ble.n	80073c0 <mpz_set_str+0x1c>
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	2b24      	cmp	r3, #36	; 0x24
 80073be:	dd0f      	ble.n	80073e0 <mpz_set_str+0x3c>
 80073c0:	f243 7064 	movw	r0, #14180	; 0x3764
 80073c4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80073c8:	f241 0117 	movw	r1, #4119	; 0x1017
 80073cc:	f643 7234 	movw	r2, #16180	; 0x3f34
 80073d0:	f6c0 0201 	movt	r2, #2049	; 0x801
 80073d4:	f643 3384 	movw	r3, #15236	; 0x3b84
 80073d8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80073dc:	f006 f9a0 	bl	800d720 <__assert_func>

  while (isspace( (unsigned char) *sp))
 80073e0:	e002      	b.n	80073e8 <mpz_set_str+0x44>
    sp++;
 80073e2:	9b04      	ldr	r3, [sp, #16]
 80073e4:	3301      	adds	r3, #1
 80073e6:	9304      	str	r3, [sp, #16]
  int sign;
  unsigned char *dp;

  assert (base == 0 || (base >= 2 && base <= 36));

  while (isspace( (unsigned char) *sp))
 80073e8:	f240 1358 	movw	r3, #344	; 0x158
 80073ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	9b04      	ldr	r3, [sp, #16]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	4413      	add	r3, r2
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1ee      	bne.n	80073e2 <mpz_set_str+0x3e>
    sp++;

  sign = (*sp == '-');
 8007404:	9b04      	ldr	r3, [sp, #16]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b2d      	cmp	r3, #45	; 0x2d
 800740a:	bf14      	ite	ne
 800740c:	2300      	movne	r3, #0
 800740e:	2301      	moveq	r3, #1
 8007410:	b2db      	uxtb	r3, r3
 8007412:	930b      	str	r3, [sp, #44]	; 0x2c
  sp += sign;
 8007414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007416:	9a04      	ldr	r2, [sp, #16]
 8007418:	4413      	add	r3, r2
 800741a:	9304      	str	r3, [sp, #16]

  if (base == 0)
 800741c:	9b03      	ldr	r3, [sp, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d128      	bne.n	8007474 <mpz_set_str+0xd0>
    {
      if (*sp == '0')
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b30      	cmp	r3, #48	; 0x30
 8007428:	d122      	bne.n	8007470 <mpz_set_str+0xcc>
	{
	  sp++;
 800742a:	9b04      	ldr	r3, [sp, #16]
 800742c:	3301      	adds	r3, #1
 800742e:	9304      	str	r3, [sp, #16]
	  if (*sp == 'x' || *sp == 'X')
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b78      	cmp	r3, #120	; 0x78
 8007436:	d003      	beq.n	8007440 <mpz_set_str+0x9c>
 8007438:	9b04      	ldr	r3, [sp, #16]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b58      	cmp	r3, #88	; 0x58
 800743e:	d105      	bne.n	800744c <mpz_set_str+0xa8>
	    {
	      base = 16;
 8007440:	2310      	movs	r3, #16
 8007442:	9303      	str	r3, [sp, #12]
	      sp++;
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	3301      	adds	r3, #1
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	e010      	b.n	800746e <mpz_set_str+0xca>
	    }
	  else if (*sp == 'b' || *sp == 'B')
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b62      	cmp	r3, #98	; 0x62
 8007452:	d003      	beq.n	800745c <mpz_set_str+0xb8>
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b42      	cmp	r3, #66	; 0x42
 800745a:	d105      	bne.n	8007468 <mpz_set_str+0xc4>
	    {
	      base = 2;
 800745c:	2302      	movs	r3, #2
 800745e:	9303      	str	r3, [sp, #12]
	      sp++;
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	3301      	adds	r3, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	e002      	b.n	800746e <mpz_set_str+0xca>
	    }
	  else
	    base = 8;
 8007468:	2308      	movs	r3, #8
 800746a:	9303      	str	r3, [sp, #12]
 800746c:	e002      	b.n	8007474 <mpz_set_str+0xd0>
 800746e:	e001      	b.n	8007474 <mpz_set_str+0xd0>
	}
      else
	base = 10;
 8007470:	230a      	movs	r3, #10
 8007472:	9303      	str	r3, [sp, #12]
    }

  sn = strlen (sp);
 8007474:	9804      	ldr	r0, [sp, #16]
 8007476:	f007 fb11 	bl	800ea9c <strlen>
 800747a:	900d      	str	r0, [sp, #52]	; 0x34
  dp = gmp_xalloc (sn + (sn == 0));
 800747c:	f240 030c 	movw	r3, #12
 8007480:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007488:	2a00      	cmp	r2, #0
 800748a:	bf14      	ite	ne
 800748c:	2200      	movne	r2, #0
 800748e:	2201      	moveq	r2, #1
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	4611      	mov	r1, r2
 8007494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007496:	440a      	add	r2, r1
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
 800749c:	900a      	str	r0, [sp, #40]	; 0x28

  for (sn = 0; *sp; sp++)
 800749e:	2300      	movs	r3, #0
 80074a0:	930d      	str	r3, [sp, #52]	; 0x34
 80074a2:	e054      	b.n	800754e <mpz_set_str+0x1aa>
    {
      unsigned digit;

      if (isspace ((unsigned char) *sp))
 80074a4:	f240 1358 	movw	r3, #344	; 0x158
 80074a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	4413      	add	r3, r2
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d000      	beq.n	80074c2 <mpz_set_str+0x11e>
	continue;
 80074c0:	e042      	b.n	8007548 <mpz_set_str+0x1a4>
      if (*sp >= '0' && *sp <= '9')
 80074c2:	9b04      	ldr	r3, [sp, #16]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b2f      	cmp	r3, #47	; 0x2f
 80074c8:	d908      	bls.n	80074dc <mpz_set_str+0x138>
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b39      	cmp	r3, #57	; 0x39
 80074d0:	d804      	bhi.n	80074dc <mpz_set_str+0x138>
	digit = *sp - '0';
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	3b30      	subs	r3, #48	; 0x30
 80074d8:	930c      	str	r3, [sp, #48]	; 0x30
 80074da:	e01b      	b.n	8007514 <mpz_set_str+0x170>
      else if (*sp >= 'a' && *sp <= 'z')
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	2b60      	cmp	r3, #96	; 0x60
 80074e2:	d908      	bls.n	80074f6 <mpz_set_str+0x152>
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b7a      	cmp	r3, #122	; 0x7a
 80074ea:	d804      	bhi.n	80074f6 <mpz_set_str+0x152>
	digit = *sp - 'a' + 10;
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	3b57      	subs	r3, #87	; 0x57
 80074f2:	930c      	str	r3, [sp, #48]	; 0x30
 80074f4:	e00e      	b.n	8007514 <mpz_set_str+0x170>
      else if (*sp >= 'A' && *sp <= 'Z')
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	d908      	bls.n	8007510 <mpz_set_str+0x16c>
 80074fe:	9b04      	ldr	r3, [sp, #16]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b5a      	cmp	r3, #90	; 0x5a
 8007504:	d804      	bhi.n	8007510 <mpz_set_str+0x16c>
	digit = *sp - 'A' + 10;
 8007506:	9b04      	ldr	r3, [sp, #16]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	3b37      	subs	r3, #55	; 0x37
 800750c:	930c      	str	r3, [sp, #48]	; 0x30
 800750e:	e001      	b.n	8007514 <mpz_set_str+0x170>
      else
	digit = base; /* fail */
 8007510:	9b03      	ldr	r3, [sp, #12]
 8007512:	930c      	str	r3, [sp, #48]	; 0x30

      if (digit >= base)
 8007514:	9a03      	ldr	r2, [sp, #12]
 8007516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007518:	429a      	cmp	r2, r3
 800751a:	d80d      	bhi.n	8007538 <mpz_set_str+0x194>
	{
	  gmp_free (dp);
 800751c:	f240 0314 	movw	r3, #20
 8007520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007528:	2100      	movs	r1, #0
 800752a:	4798      	blx	r3
	  r->_mp_size = 0;
 800752c:	9b05      	ldr	r3, [sp, #20]
 800752e:	2200      	movs	r2, #0
 8007530:	605a      	str	r2, [r3, #4]
	  return -1;
 8007532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007536:	e07e      	b.n	8007636 <mpz_set_str+0x292>
	}

      dp[sn++] = digit;
 8007538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	920d      	str	r2, [sp, #52]	; 0x34
 800753e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007540:	4413      	add	r3, r2
 8007542:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007544:	b2d2      	uxtb	r2, r2
 8007546:	701a      	strb	r2, [r3, #0]
    }

  sn = strlen (sp);
  dp = gmp_xalloc (sn + (sn == 0));

  for (sn = 0; *sp; sp++)
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1a6      	bne.n	80074a4 <mpz_set_str+0x100>
	}

      dp[sn++] = digit;
    }

  bits = mpn_base_power_of_two_p (base);
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	4618      	mov	r0, r3
 800755a:	f7fb f9d1 	bl	8002900 <mpn_base_power_of_two_p>
 800755e:	9009      	str	r0, [sp, #36]	; 0x24

  if (bits > 0)
 8007560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01c      	beq.n	80075a0 <mpz_set_str+0x1fc>
    {
      alloc = (sn * bits + GMP_LIMB_BITS - 1) / GMP_LIMB_BITS;
 8007566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	331f      	adds	r3, #31
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	930e      	str	r3, [sp, #56]	; 0x38
      rp = MPZ_REALLOC (r, alloc);
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800757a:	429a      	cmp	r2, r3
 800757c:	da05      	bge.n	800758a <mpz_set_str+0x1e6>
 800757e:	9805      	ldr	r0, [sp, #20]
 8007580:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007582:	f7fb fdc3 	bl	800310c <mpz_realloc>
 8007586:	4603      	mov	r3, r0
 8007588:	e001      	b.n	800758e <mpz_set_str+0x1ea>
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	9308      	str	r3, [sp, #32]
      rn = mpn_set_str_bits (rp, dp, sn, bits);
 8007590:	9808      	ldr	r0, [sp, #32]
 8007592:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007598:	f7fb fc52 	bl	8002e40 <mpn_set_str_bits>
 800759c:	900f      	str	r0, [sp, #60]	; 0x3c
 800759e:	e024      	b.n	80075ea <mpz_set_str+0x246>
    }
  else
    {
      struct mpn_base_info info;
      mpn_get_base_info (&info, base);
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	aa06      	add	r2, sp, #24
 80075a4:	4610      	mov	r0, r2
 80075a6:	4619      	mov	r1, r3
 80075a8:	f7fb f9da 	bl	8002960 <mpn_get_base_info>
      alloc = (sn + info.exp - 1) / info.exp;
 80075ac:	9a06      	ldr	r2, [sp, #24]
 80075ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b0:	4413      	add	r3, r2
 80075b2:	1e5a      	subs	r2, r3, #1
 80075b4:	9b06      	ldr	r3, [sp, #24]
 80075b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ba:	930e      	str	r3, [sp, #56]	; 0x38
      rp = MPZ_REALLOC (r, alloc);
 80075bc:	9b05      	ldr	r3, [sp, #20]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075c2:	429a      	cmp	r2, r3
 80075c4:	da05      	bge.n	80075d2 <mpz_set_str+0x22e>
 80075c6:	9805      	ldr	r0, [sp, #20]
 80075c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80075ca:	f7fb fd9f 	bl	800310c <mpz_realloc>
 80075ce:	4603      	mov	r3, r0
 80075d0:	e001      	b.n	80075d6 <mpz_set_str+0x232>
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	9308      	str	r3, [sp, #32]
      rn = mpn_set_str_other (rp, dp, sn, base, &info);
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	aa06      	add	r2, sp, #24
 80075dc:	9200      	str	r2, [sp, #0]
 80075de:	9808      	ldr	r0, [sp, #32]
 80075e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075e4:	f7fb fc92 	bl	8002f0c <mpn_set_str_other>
 80075e8:	900f      	str	r0, [sp, #60]	; 0x3c
    }
  assert (rn <= alloc);
 80075ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ee:	429a      	cmp	r2, r3
 80075f0:	dd0f      	ble.n	8007612 <mpz_set_str+0x26e>
 80075f2:	f243 7064 	movw	r0, #14180	; 0x3764
 80075f6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80075fa:	f241 0161 	movw	r1, #4193	; 0x1061
 80075fe:	f643 7234 	movw	r2, #16180	; 0x3f34
 8007602:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007606:	f643 33ac 	movw	r3, #15276	; 0x3bac
 800760a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800760e:	f006 f887 	bl	800d720 <__assert_func>
  gmp_free (dp);
 8007612:	f240 0314 	movw	r3, #20
 8007616:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800761e:	2100      	movs	r1, #0
 8007620:	4798      	blx	r3

  r->_mp_size = sign ? - rn : rn;
 8007622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <mpz_set_str+0x28a>
 8007628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800762a:	425b      	negs	r3, r3
 800762c:	e000      	b.n	8007630 <mpz_set_str+0x28c>
 800762e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007630:	9a05      	ldr	r2, [sp, #20]
 8007632:	6053      	str	r3, [r2, #4]

  return 0;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	b011      	add	sp, #68	; 0x44
 800763a:	f85d fb04 	ldr.w	pc, [sp], #4
 800763e:	bf00      	nop

08007640 <mpz_init_set_str>:

int
mpz_init_set_str (mpz_t r, const char *sp, int base)
{
 8007640:	b500      	push	{lr}
 8007642:	b085      	sub	sp, #20
 8007644:	9003      	str	r0, [sp, #12]
 8007646:	9102      	str	r1, [sp, #8]
 8007648:	9201      	str	r2, [sp, #4]
  mpz_init (r);
 800764a:	9803      	ldr	r0, [sp, #12]
 800764c:	f7fb fd1c 	bl	8003088 <mpz_init>
  return mpz_set_str (r, sp, base);
 8007650:	9803      	ldr	r0, [sp, #12]
 8007652:	9902      	ldr	r1, [sp, #8]
 8007654:	9a01      	ldr	r2, [sp, #4]
 8007656:	f7ff fea5 	bl	80073a4 <mpz_set_str>
 800765a:	4603      	mov	r3, r0
}
 800765c:	4618      	mov	r0, r3
 800765e:	b005      	add	sp, #20
 8007660:	f85d fb04 	ldr.w	pc, [sp], #4

08007664 <mpz_out_str>:

size_t
mpz_out_str (FILE *stream, int base, const mpz_t x)
{
 8007664:	b500      	push	{lr}
 8007666:	b087      	sub	sp, #28
 8007668:	9003      	str	r0, [sp, #12]
 800766a:	9102      	str	r1, [sp, #8]
 800766c:	9201      	str	r2, [sp, #4]
  char *str;
  size_t len;

  str = mpz_get_str (NULL, base, x);
 800766e:	2000      	movs	r0, #0
 8007670:	9902      	ldr	r1, [sp, #8]
 8007672:	9a01      	ldr	r2, [sp, #4]
 8007674:	f7ff fde4 	bl	8007240 <mpz_get_str>
 8007678:	9005      	str	r0, [sp, #20]
  len = strlen (str);
 800767a:	9805      	ldr	r0, [sp, #20]
 800767c:	f007 fa0e 	bl	800ea9c <strlen>
 8007680:	9004      	str	r0, [sp, #16]
  len = fwrite (str, 1, len, stream);
 8007682:	9805      	ldr	r0, [sp, #20]
 8007684:	2101      	movs	r1, #1
 8007686:	9a04      	ldr	r2, [sp, #16]
 8007688:	9b03      	ldr	r3, [sp, #12]
 800768a:	f006 faab 	bl	800dbe4 <fwrite>
 800768e:	9004      	str	r0, [sp, #16]
  gmp_free (str);
 8007690:	f240 0314 	movw	r3, #20
 8007694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9805      	ldr	r0, [sp, #20]
 800769c:	2100      	movs	r1, #0
 800769e:	4798      	blx	r3
  return len;
 80076a0:	9b04      	ldr	r3, [sp, #16]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	b007      	add	sp, #28
 80076a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80076aa:	bf00      	nop

080076ac <gmp_detect_endian>:


static int
gmp_detect_endian (void)
{
 80076ac:	b082      	sub	sp, #8
  static const int i = 2;
  const unsigned char *p = (const unsigned char *) &i;
 80076ae:	f643 7340 	movw	r3, #16192	; 0x3f40
 80076b2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80076b6:	9301      	str	r3, [sp, #4]
  return 1 - *p;
 80076b8:	9b01      	ldr	r3, [sp, #4]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f1c3 0301 	rsb	r3, r3, #1
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	b002      	add	sp, #8
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop

080076c8 <mpz_import>:

/* Import and export. Does not support nails. */
void
mpz_import (mpz_t r, size_t count, int order, size_t size, int endian,
	    size_t nails, const void *src)
{
 80076c8:	b500      	push	{lr}
 80076ca:	b08d      	sub	sp, #52	; 0x34
 80076cc:	9003      	str	r0, [sp, #12]
 80076ce:	9102      	str	r1, [sp, #8]
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	9300      	str	r3, [sp, #0]
     the low end). */
  size_t bytes;
  /* The index where the limb should be stored, when completed. */
  mp_size_t i;

  if (nails != 0)
 80076d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <mpz_import+0x1e>
    gmp_die ("mpz_import: Nails not supported.");
 80076da:	f643 30b8 	movw	r0, #15288	; 0x3bb8
 80076de:	f6c0 0001 	movt	r0, #2049	; 0x801
 80076e2:	f7f9 f9ab 	bl	8000a3c <gmp_die>

  assert (order == 1 || order == -1);
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d013      	beq.n	8007714 <mpz_import+0x4c>
 80076ec:	9b01      	ldr	r3, [sp, #4]
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f2:	d00f      	beq.n	8007714 <mpz_import+0x4c>
 80076f4:	f243 7064 	movw	r0, #14180	; 0x3764
 80076f8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80076fc:	f241 019b 	movw	r1, #4251	; 0x109b
 8007700:	f643 7244 	movw	r2, #16196	; 0x3f44
 8007704:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007708:	f643 33dc 	movw	r3, #15324	; 0x3bdc
 800770c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007710:	f006 f806 	bl	800d720 <__assert_func>
  assert (endian >= -1 && endian <= 1);
 8007714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800771a:	db02      	blt.n	8007722 <mpz_import+0x5a>
 800771c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800771e:	2b01      	cmp	r3, #1
 8007720:	dd0f      	ble.n	8007742 <mpz_import+0x7a>
 8007722:	f243 7064 	movw	r0, #14180	; 0x3764
 8007726:	f6c0 0001 	movt	r0, #2049	; 0x801
 800772a:	f241 019c 	movw	r1, #4252	; 0x109c
 800772e:	f643 7244 	movw	r2, #16196	; 0x3f44
 8007732:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007736:	f643 33f8 	movw	r3, #15352	; 0x3bf8
 800773a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800773e:	f005 ffef 	bl	800d720 <__assert_func>

  if (endian == 0)
 8007742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <mpz_import+0x86>
    endian = gmp_detect_endian ();
 8007748:	f7ff ffb0 	bl	80076ac <gmp_detect_endian>
 800774c:	900e      	str	r0, [sp, #56]	; 0x38

  p = (unsigned char *) src;
 800774e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007750:	930b      	str	r3, [sp, #44]	; 0x2c

  word_step = (order != endian) ? 2 * size : 0;
 8007752:	9a01      	ldr	r2, [sp, #4]
 8007754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007756:	429a      	cmp	r2, r3
 8007758:	d002      	beq.n	8007760 <mpz_import+0x98>
 800775a:	9b00      	ldr	r3, [sp, #0]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	e000      	b.n	8007762 <mpz_import+0x9a>
 8007760:	2300      	movs	r3, #0
 8007762:	930a      	str	r3, [sp, #40]	; 0x28

  /* Process bytes from the least significant end, so point p at the
     least significant word. */
  if (order == 1)
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d10a      	bne.n	8007780 <mpz_import+0xb8>
    {
      p += size * (count - 1);
 800776a:	9b02      	ldr	r3, [sp, #8]
 800776c:	3b01      	subs	r3, #1
 800776e:	9a00      	ldr	r2, [sp, #0]
 8007770:	fb02 f303 	mul.w	r3, r2, r3
 8007774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007776:	4413      	add	r3, r2
 8007778:	930b      	str	r3, [sp, #44]	; 0x2c
      word_step = - word_step;
 800777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777c:	425b      	negs	r3, r3
 800777e:	930a      	str	r3, [sp, #40]	; 0x28
    }

  /* And at least significant byte of that word. */
  if (endian == 1)
 8007780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007782:	2b01      	cmp	r3, #1
 8007784:	d104      	bne.n	8007790 <mpz_import+0xc8>
    p += (size - 1);
 8007786:	9b00      	ldr	r3, [sp, #0]
 8007788:	3b01      	subs	r3, #1
 800778a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800778c:	4413      	add	r3, r2
 800778e:	930b      	str	r3, [sp, #44]	; 0x2c

  rn = (size * count + sizeof(mp_limb_t) - 1) / sizeof(mp_limb_t);
 8007790:	9b00      	ldr	r3, [sp, #0]
 8007792:	9a02      	ldr	r2, [sp, #8]
 8007794:	fb02 f303 	mul.w	r3, r2, r3
 8007798:	3303      	adds	r3, #3
 800779a:	089b      	lsrs	r3, r3, #2
 800779c:	9305      	str	r3, [sp, #20]
  rp = MPZ_REALLOC (r, rn);
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	9b05      	ldr	r3, [sp, #20]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	da05      	bge.n	80077b4 <mpz_import+0xec>
 80077a8:	9803      	ldr	r0, [sp, #12]
 80077aa:	9905      	ldr	r1, [sp, #20]
 80077ac:	f7fb fcae 	bl	800310c <mpz_realloc>
 80077b0:	4603      	mov	r3, r0
 80077b2:	e001      	b.n	80077b8 <mpz_import+0xf0>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	9304      	str	r3, [sp, #16]

  for (limb = 0, bytes = 0, i = 0; count > 0; count--, p += word_step)
 80077ba:	2300      	movs	r3, #0
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	2300      	movs	r3, #0
 80077c0:	9308      	str	r3, [sp, #32]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9307      	str	r3, [sp, #28]
 80077c6:	e030      	b.n	800782a <mpz_import+0x162>
    {
      size_t j;
      for (j = 0; j < size; j++, p -= (ptrdiff_t) endian)
 80077c8:	2300      	movs	r3, #0
 80077ca:	9306      	str	r3, [sp, #24]
 80077cc:	e022      	b.n	8007814 <mpz_import+0x14c>
	{
	  limb |= (mp_limb_t) *p << (bytes++ * CHAR_BIT);
 80077ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	9b08      	ldr	r3, [sp, #32]
 80077d6:	1c59      	adds	r1, r3, #1
 80077d8:	9108      	str	r1, [sp, #32]
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e2:	4313      	orrs	r3, r2
 80077e4:	9309      	str	r3, [sp, #36]	; 0x24
	  if (bytes == sizeof(mp_limb_t))
 80077e6:	9b08      	ldr	r3, [sp, #32]
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d10b      	bne.n	8007804 <mpz_import+0x13c>
	    {
	      rp[i++] = limb;
 80077ec:	9b07      	ldr	r3, [sp, #28]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	9207      	str	r2, [sp, #28]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	9a04      	ldr	r2, [sp, #16]
 80077f6:	4413      	add	r3, r2
 80077f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077fa:	601a      	str	r2, [r3, #0]
	      bytes = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	9308      	str	r3, [sp, #32]
	      limb = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	9309      	str	r3, [sp, #36]	; 0x24
  rp = MPZ_REALLOC (r, rn);

  for (limb = 0, bytes = 0, i = 0; count > 0; count--, p += word_step)
    {
      size_t j;
      for (j = 0; j < size; j++, p -= (ptrdiff_t) endian)
 8007804:	9b06      	ldr	r3, [sp, #24]
 8007806:	3301      	adds	r3, #1
 8007808:	9306      	str	r3, [sp, #24]
 800780a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800780c:	425b      	negs	r3, r3
 800780e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007810:	4413      	add	r3, r2
 8007812:	930b      	str	r3, [sp, #44]	; 0x2c
 8007814:	9a06      	ldr	r2, [sp, #24]
 8007816:	9b00      	ldr	r3, [sp, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d3d8      	bcc.n	80077ce <mpz_import+0x106>
    p += (size - 1);

  rn = (size * count + sizeof(mp_limb_t) - 1) / sizeof(mp_limb_t);
  rp = MPZ_REALLOC (r, rn);

  for (limb = 0, bytes = 0, i = 0; count > 0; count--, p += word_step)
 800781c:	9b02      	ldr	r3, [sp, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	9302      	str	r3, [sp, #8]
 8007822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007826:	4413      	add	r3, r2
 8007828:	930b      	str	r3, [sp, #44]	; 0x2c
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1cb      	bne.n	80077c8 <mpz_import+0x100>
	      bytes = 0;
	      limb = 0;
	    }
	}
    }
  assert (i + (bytes > 0) == rn);
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	bf0c      	ite	eq
 8007836:	2300      	moveq	r3, #0
 8007838:	2301      	movne	r3, #1
 800783a:	b2db      	uxtb	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	9b07      	ldr	r3, [sp, #28]
 8007840:	441a      	add	r2, r3
 8007842:	9b05      	ldr	r3, [sp, #20]
 8007844:	429a      	cmp	r2, r3
 8007846:	d00f      	beq.n	8007868 <mpz_import+0x1a0>
 8007848:	f243 7064 	movw	r0, #14180	; 0x3764
 800784c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007850:	f241 01c2 	movw	r1, #4290	; 0x10c2
 8007854:	f643 7244 	movw	r2, #16196	; 0x3f44
 8007858:	f6c0 0201 	movt	r2, #2049	; 0x801
 800785c:	f643 4314 	movw	r3, #15380	; 0x3c14
 8007860:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007864:	f005 ff5c 	bl	800d720 <__assert_func>
  if (limb != 0)
 8007868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <mpz_import+0x1b8>
    rp[i++] = limb;
 800786e:	9b07      	ldr	r3, [sp, #28]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	9207      	str	r2, [sp, #28]
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	9a04      	ldr	r2, [sp, #16]
 8007878:	4413      	add	r3, r2
 800787a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e004      	b.n	800788a <mpz_import+0x1c2>
  else
    i = mpn_normalized_size (rp, i);
 8007880:	9804      	ldr	r0, [sp, #16]
 8007882:	9907      	ldr	r1, [sp, #28]
 8007884:	f7f9 fa3e 	bl	8000d04 <mpn_normalized_size>
 8007888:	9007      	str	r0, [sp, #28]

  r->_mp_size = i;
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	9a07      	ldr	r2, [sp, #28]
 800788e:	605a      	str	r2, [r3, #4]
}
 8007890:	b00d      	add	sp, #52	; 0x34
 8007892:	f85d fb04 	ldr.w	pc, [sp], #4
 8007896:	bf00      	nop

08007898 <mpz_export>:

void *
mpz_export (void *r, size_t *countp, int order, size_t size, int endian,
	    size_t nails, const mpz_t u)
{
 8007898:	b500      	push	{lr}
 800789a:	b08f      	sub	sp, #60	; 0x3c
 800789c:	9003      	str	r0, [sp, #12]
 800789e:	9102      	str	r1, [sp, #8]
 80078a0:	9201      	str	r2, [sp, #4]
 80078a2:	9300      	str	r3, [sp, #0]
  size_t count;
  mp_size_t un;

  if (nails != 0)
 80078a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <mpz_export+0x1e>
    gmp_die ("mpz_import: Nails not supported.");
 80078aa:	f643 30b8 	movw	r0, #15288	; 0x3bb8
 80078ae:	f6c0 0001 	movt	r0, #2049	; 0x801
 80078b2:	f7f9 f8c3 	bl	8000a3c <gmp_die>

  assert (order == 1 || order == -1);
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d013      	beq.n	80078e4 <mpz_export+0x4c>
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c2:	d00f      	beq.n	80078e4 <mpz_export+0x4c>
 80078c4:	f243 7064 	movw	r0, #14180	; 0x3764
 80078c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80078cc:	f241 01d5 	movw	r1, #4309	; 0x10d5
 80078d0:	f643 7250 	movw	r2, #16208	; 0x3f50
 80078d4:	f6c0 0201 	movt	r2, #2049	; 0x801
 80078d8:	f643 33dc 	movw	r3, #15324	; 0x3bdc
 80078dc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80078e0:	f005 ff1e 	bl	800d720 <__assert_func>
  assert (endian >= -1 && endian <= 1);
 80078e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ea:	db02      	blt.n	80078f2 <mpz_export+0x5a>
 80078ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	dd0f      	ble.n	8007912 <mpz_export+0x7a>
 80078f2:	f243 7064 	movw	r0, #14180	; 0x3764
 80078f6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80078fa:	f241 01d6 	movw	r1, #4310	; 0x10d6
 80078fe:	f643 7250 	movw	r2, #16208	; 0x3f50
 8007902:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007906:	f643 33f8 	movw	r3, #15352	; 0x3bf8
 800790a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800790e:	f005 ff07 	bl	800d720 <__assert_func>
  assert (size > 0 || u->_mp_size == 0);
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d113      	bne.n	8007940 <mpz_export+0xa8>
 8007918:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00f      	beq.n	8007940 <mpz_export+0xa8>
 8007920:	f243 7064 	movw	r0, #14180	; 0x3764
 8007924:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007928:	f241 01d7 	movw	r1, #4311	; 0x10d7
 800792c:	f643 7250 	movw	r2, #16208	; 0x3f50
 8007930:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007934:	f643 432c 	movw	r3, #15404	; 0x3c2c
 8007938:	f6c0 0301 	movt	r3, #2049	; 0x801
 800793c:	f005 fef0 	bl	800d720 <__assert_func>

  un = u->_mp_size;
 8007940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	9305      	str	r3, [sp, #20]
  count = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	930d      	str	r3, [sp, #52]	; 0x34
  if (un != 0)
 800794a:	9b05      	ldr	r3, [sp, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80d4 	beq.w	8007afa <mpz_export+0x262>
      /* The number of bytes left to to in this limb. */
      size_t bytes;
      /* The index where the limb was read. */
      mp_size_t i;

      un = GMP_ABS (un);
 8007952:	9b05      	ldr	r3, [sp, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	bfb8      	it	lt
 8007958:	425b      	neglt	r3, r3
 800795a:	9305      	str	r3, [sp, #20]

      /* Count bytes in top limb. */
      limb = u->_mp_d[un-1];
 800795c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	9b05      	ldr	r3, [sp, #20]
 8007962:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007966:	3b01      	subs	r3, #1
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	9309      	str	r3, [sp, #36]	; 0x24
      assert (limb != 0);
 8007970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10f      	bne.n	8007996 <mpz_export+0xfe>
 8007976:	f243 7064 	movw	r0, #14180	; 0x3764
 800797a:	f6c0 0001 	movt	r0, #2049	; 0x801
 800797e:	f241 01eb 	movw	r1, #4331	; 0x10eb
 8007982:	f643 7250 	movw	r2, #16208	; 0x3f50
 8007986:	f6c0 0201 	movt	r2, #2049	; 0x801
 800798a:	f643 434c 	movw	r3, #15436	; 0x3c4c
 800798e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007992:	f005 fec5 	bl	800d720 <__assert_func>

      k = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	930c      	str	r3, [sp, #48]	; 0x30
      do {
	k++; limb >>= CHAR_BIT;
 800799a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800799c:	3301      	adds	r3, #1
 800799e:	930c      	str	r3, [sp, #48]	; 0x30
 80079a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	9309      	str	r3, [sp, #36]	; 0x24
      } while (limb != 0);
 80079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f6      	bne.n	800799a <mpz_export+0x102>

      count = (k + (un-1) * sizeof (mp_limb_t) + size - 1) / size;
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	009a      	lsls	r2, r3, #2
 80079b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079b4:	441a      	add	r2, r3
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	4413      	add	r3, r2
 80079ba:	1e5a      	subs	r2, r3, #1
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c2:	930d      	str	r3, [sp, #52]	; 0x34

      if (!r)
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10b      	bne.n	80079e2 <mpz_export+0x14a>
	r = gmp_xalloc (count * size);
 80079ca:	f240 030c 	movw	r3, #12
 80079ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079d6:	9900      	ldr	r1, [sp, #0]
 80079d8:	fb01 f202 	mul.w	r2, r1, r2
 80079dc:	4610      	mov	r0, r2
 80079de:	4798      	blx	r3
 80079e0:	9003      	str	r0, [sp, #12]

      if (endian == 0)
 80079e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <mpz_export+0x156>
	endian = gmp_detect_endian ();
 80079e8:	f7ff fe60 	bl	80076ac <gmp_detect_endian>
 80079ec:	9010      	str	r0, [sp, #64]	; 0x40

      p = (unsigned char *) r;
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	930b      	str	r3, [sp, #44]	; 0x2c

      word_step = (order != endian) ? 2 * size : 0;
 80079f2:	9a01      	ldr	r2, [sp, #4]
 80079f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d002      	beq.n	8007a00 <mpz_export+0x168>
 80079fa:	9b00      	ldr	r3, [sp, #0]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	e000      	b.n	8007a02 <mpz_export+0x16a>
 8007a00:	2300      	movs	r3, #0
 8007a02:	930a      	str	r3, [sp, #40]	; 0x28

      /* Process bytes from the least significant end, so point p at the
	 least significant word. */
      if (order == 1)
 8007a04:	9b01      	ldr	r3, [sp, #4]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d10a      	bne.n	8007a20 <mpz_export+0x188>
	{
	  p += size * (count - 1);
 8007a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	9a00      	ldr	r2, [sp, #0]
 8007a10:	fb02 f303 	mul.w	r3, r2, r3
 8007a14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a16:	4413      	add	r3, r2
 8007a18:	930b      	str	r3, [sp, #44]	; 0x2c
	  word_step = - word_step;
 8007a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1c:	425b      	negs	r3, r3
 8007a1e:	930a      	str	r3, [sp, #40]	; 0x28
	}

      /* And at least significant byte of that word. */
      if (endian == 1)
 8007a20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d104      	bne.n	8007a30 <mpz_export+0x198>
	p += (size - 1);
 8007a26:	9b00      	ldr	r3, [sp, #0]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a2c:	4413      	add	r3, r2
 8007a2e:	930b      	str	r3, [sp, #44]	; 0x2c

      for (bytes = 0, i = 0, k = 0; k < count; k++, p += word_step)
 8007a30:	2300      	movs	r3, #0
 8007a32:	9308      	str	r3, [sp, #32]
 8007a34:	2300      	movs	r3, #0
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a3c:	e031      	b.n	8007aa2 <mpz_export+0x20a>
	{
	  size_t j;
	  for (j = 0; j < size; j++, p -= (ptrdiff_t) endian)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9306      	str	r3, [sp, #24]
 8007a42:	e023      	b.n	8007a8c <mpz_export+0x1f4>
	    {
	      if (bytes == 0)
 8007a44:	9b08      	ldr	r3, [sp, #32]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10e      	bne.n	8007a68 <mpz_export+0x1d0>
		{
		  if (i < un)
 8007a4a:	9a07      	ldr	r2, [sp, #28]
 8007a4c:	9b05      	ldr	r3, [sp, #20]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	da08      	bge.n	8007a64 <mpz_export+0x1cc>
		    limb = u->_mp_d[i++];
 8007a52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	9b07      	ldr	r3, [sp, #28]
 8007a58:	1c59      	adds	r1, r3, #1
 8007a5a:	9107      	str	r1, [sp, #28]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
		  bytes = sizeof (mp_limb_t);
 8007a64:	2304      	movs	r3, #4
 8007a66:	9308      	str	r3, [sp, #32]
		}
	      *p = limb;
 8007a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a6e:	701a      	strb	r2, [r3, #0]
	      limb >>= CHAR_BIT;
 8007a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	9309      	str	r3, [sp, #36]	; 0x24
	      bytes--;
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	9308      	str	r3, [sp, #32]
	p += (size - 1);

      for (bytes = 0, i = 0, k = 0; k < count; k++, p += word_step)
	{
	  size_t j;
	  for (j = 0; j < size; j++, p -= (ptrdiff_t) endian)
 8007a7c:	9b06      	ldr	r3, [sp, #24]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	9306      	str	r3, [sp, #24]
 8007a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a84:	425b      	negs	r3, r3
 8007a86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a88:	4413      	add	r3, r2
 8007a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a8c:	9a06      	ldr	r2, [sp, #24]
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d3d7      	bcc.n	8007a44 <mpz_export+0x1ac>

      /* And at least significant byte of that word. */
      if (endian == 1)
	p += (size - 1);

      for (bytes = 0, i = 0, k = 0; k < count; k++, p += word_step)
 8007a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a96:	3301      	adds	r3, #1
 8007a98:	930c      	str	r3, [sp, #48]	; 0x30
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a9e:	4413      	add	r3, r2
 8007aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d3c9      	bcc.n	8007a3e <mpz_export+0x1a6>
	      *p = limb;
	      limb >>= CHAR_BIT;
	      bytes--;
	    }
	}
      assert (i == un);
 8007aaa:	9a07      	ldr	r2, [sp, #28]
 8007aac:	9b05      	ldr	r3, [sp, #20]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d00f      	beq.n	8007ad2 <mpz_export+0x23a>
 8007ab2:	f243 7064 	movw	r0, #14180	; 0x3764
 8007ab6:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007aba:	f241 111a 	movw	r1, #4378	; 0x111a
 8007abe:	f643 7250 	movw	r2, #16208	; 0x3f50
 8007ac2:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007ac6:	f643 4358 	movw	r3, #15448	; 0x3c58
 8007aca:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007ace:	f005 fe27 	bl	800d720 <__assert_func>
      assert (k == count);
 8007ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d00f      	beq.n	8007afa <mpz_export+0x262>
 8007ada:	f243 7064 	movw	r0, #14180	; 0x3764
 8007ade:	f6c0 0001 	movt	r0, #2049	; 0x801
 8007ae2:	f241 111b 	movw	r1, #4379	; 0x111b
 8007ae6:	f643 7250 	movw	r2, #16208	; 0x3f50
 8007aea:	f6c0 0201 	movt	r2, #2049	; 0x801
 8007aee:	f643 4360 	movw	r3, #15456	; 0x3c60
 8007af2:	f6c0 0301 	movt	r3, #2049	; 0x801
 8007af6:	f005 fe13 	bl	800d720 <__assert_func>
    }

  if (countp)
 8007afa:	9b02      	ldr	r3, [sp, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <mpz_export+0x26e>
    *countp = count;
 8007b00:	9b02      	ldr	r3, [sp, #8]
 8007b02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b04:	601a      	str	r2, [r3, #0]

  return r;
 8007b06:	9b03      	ldr	r3, [sp, #12]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	b00f      	add	sp, #60	; 0x3c
 8007b0c:	f85d fb04 	ldr.w	pc, [sp], #4

08007b10 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop

08007b14 <HardFault_Handler>:
{
  /* Go to infinite loop when Hard Fault exception occurs */
  //while (1)
  //{
  //}
}
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop

08007b18 <MemManage_Handler>:
{
  /* Go to infinite loop when Memory Manage exception occurs */
  //while (1)
  //{
  //}
}
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop

08007b1c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8007b1c:	e7fe      	b.n	8007b1c <BusFault_Handler>
 8007b1e:	bf00      	nop

08007b20 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8007b20:	e7fe      	b.n	8007b20 <UsageFault_Handler>
 8007b22:	bf00      	nop

08007b24 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop

08007b28 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop

08007b2c <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop

08007b30 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8007b30:	b508      	push	{r3, lr}
	timing_handler();
 8007b32:	f7f8 ff1b 	bl	800096c <timing_handler>
}
 8007b36:	bd08      	pop	{r3, pc}

08007b38 <OTG_FS_WKUP_IRQHandler>:
/*  file (startup_stm32f4xx.s).                                               */
/******************************************************************************/

#ifdef USE_USB_OTG_FS
void OTG_FS_WKUP_IRQHandler(void)
{
 8007b38:	b508      	push	{r3, lr}
  if(USB_OTG_dev.cfg.low_power)
 8007b3a:	f640 33e0 	movw	r3, #3040	; 0xbe0
 8007b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007b42:	7a9b      	ldrb	r3, [r3, #10]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d013      	beq.n	8007b70 <OTG_FS_WKUP_IRQHandler+0x38>
  {
    *(uint32_t *)(0xE000ED10) &= 0xFFFFFFF9 ;
 8007b48:	f64e 5310 	movw	r3, #60688	; 0xed10
 8007b4c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8007b50:	f64e 5210 	movw	r2, #60688	; 0xed10
 8007b54:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	f022 0206 	bic.w	r2, r2, #6
 8007b5e:	601a      	str	r2, [r3, #0]
    SystemInit();
 8007b60:	f000 f814 	bl	8007b8c <SystemInit>
    USB_OTG_UngateClock(&USB_OTG_dev);
 8007b64:	f640 30e0 	movw	r0, #3040	; 0xbe0
 8007b68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007b6c:	f002 fd74 	bl	800a658 <USB_OTG_UngateClock>
  }
  EXTI_ClearITPendingBit(EXTI_Line18);
 8007b70:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007b74:	f001 fa08 	bl	8008f88 <EXTI_ClearITPendingBit>
}
 8007b78:	bd08      	pop	{r3, pc}
 8007b7a:	bf00      	nop

08007b7c <OTG_FS_IRQHandler>:
#ifdef USE_USB_OTG_HS
void OTG_HS_IRQHandler(void)
#else
void OTG_FS_IRQHandler(void)
#endif
{
 8007b7c:	b508      	push	{r3, lr}
  USBD_OTG_ISR_Handler (&USB_OTG_dev);
 8007b7e:	f640 30e0 	movw	r0, #3040	; 0xbe0
 8007b82:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007b86:	f002 ff6d 	bl	800aa64 <USBD_OTG_ISR_Handler>
}
 8007b8a:	bd08      	pop	{r3, pc}

08007b8c <SystemInit>:
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8007b8c:	b508      	push	{r3, lr}
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b8e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8007b92:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8007b96:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8007b9a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8007b9e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007ba2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8007baa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007bb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007bba:	6812      	ldr	r2, [r2, #0]
 8007bbc:	f042 0201 	orr.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8007bc2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bca:	2200      	movs	r2, #0
 8007bcc:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007bce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bd6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007bda:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007be4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007be8:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8007bea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bf2:	f243 0210 	movw	r2, #12304	; 0x3010
 8007bf6:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8007bfa:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007bfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c04:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007c08:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c12:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8007c14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	60da      	str	r2, [r3, #12]
	SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

	/* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
	SetSysClock();
 8007c20:	f000 f8ae 	bl	8007d80 <SetSysClock>

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c24:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8007c28:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8007c2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c30:	609a      	str	r2, [r3, #8]
#endif
}
 8007c32:	bd08      	pop	{r3, pc}

08007c34 <SystemCoreClockUpdate>:
 *
 * @param  None
 * @retval None
 */
void SystemCoreClockUpdate(void)
{
 8007c34:	b086      	sub	sp, #24
	uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8007c36:	2300      	movs	r3, #0
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9305      	str	r3, [sp, #20]
 8007c3e:	2302      	movs	r3, #2
 8007c40:	9303      	str	r3, [sp, #12]
 8007c42:	2300      	movs	r3, #0
 8007c44:	9302      	str	r3, [sp, #8]
 8007c46:	2302      	movs	r3, #2
 8007c48:	9301      	str	r3, [sp, #4]

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 8007c4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 030c 	and.w	r3, r3, #12
 8007c58:	9304      	str	r3, [sp, #16]

	switch (tmp)
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d00d      	beq.n	8007c7c <SystemCoreClockUpdate+0x48>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d015      	beq.n	8007c90 <SystemCoreClockUpdate+0x5c>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d163      	bne.n	8007d30 <SystemCoreClockUpdate+0xfc>
	{
	case 0x00:  /* HSI used as system clock source */
		SystemCoreClock = HSI_VALUE;
 8007c68:	f240 0318 	movw	r3, #24
 8007c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c70:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8007c74:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8007c78:	601a      	str	r2, [r3, #0]
		break;
 8007c7a:	e063      	b.n	8007d44 <SystemCoreClockUpdate+0x110>
	case 0x04:  /* HSE used as system clock source */
		SystemCoreClock = HSE_VALUE;
 8007c7c:	f240 0318 	movw	r3, #24
 8007c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007c84:	f647 0240 	movw	r2, #30784	; 0x7840
 8007c88:	f2c0 127d 	movt	r2, #381	; 0x17d
 8007c8c:	601a      	str	r2, [r3, #0]
		break;
 8007c8e:	e059      	b.n	8007d44 <SystemCoreClockUpdate+0x110>
	case 0x08:  /* PLL used as system clock source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
		 */
		pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8007c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c9e:	0d9b      	lsrs	r3, r3, #22
 8007ca0:	9302      	str	r3, [sp, #8]
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ca2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007ca6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb0:	9301      	str	r3, [sp, #4]

		if (pllsource != 0)
 8007cb2:	9b02      	ldr	r3, [sp, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d013      	beq.n	8007ce0 <SystemCoreClockUpdate+0xac>
		{
			/* HSE used as PLL clock source */
			pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007cb8:	f647 0340 	movw	r3, #30784	; 0x7840
 8007cbc:	f2c0 137d 	movt	r3, #381	; 0x17d
 8007cc0:	9a01      	ldr	r2, [sp, #4]
 8007cc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cce:	6859      	ldr	r1, [r3, #4]
 8007cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cd4:	400b      	ands	r3, r1
 8007cd6:	099b      	lsrs	r3, r3, #6
 8007cd8:	fb03 f302 	mul.w	r3, r3, r2
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	e012      	b.n	8007d06 <SystemCoreClockUpdate+0xd2>
		}
		else
		{
			/* HSI used as PLL clock source */
			pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007ce0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8007ce4:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8007ce8:	9a01      	ldr	r2, [sp, #4]
 8007cea:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007cf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cf6:	6859      	ldr	r1, [r3, #4]
 8007cf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007cfc:	400b      	ands	r3, r1
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	fb03 f302 	mul.w	r3, r3, r2
 8007d04:	9305      	str	r3, [sp, #20]
		}

		pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007d06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007d0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	3301      	adds	r3, #1
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	9303      	str	r3, [sp, #12]
		SystemCoreClock = pllvco/pllp;
 8007d1c:	9a05      	ldr	r2, [sp, #20]
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d24:	f240 0318 	movw	r3, #24
 8007d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d2c:	601a      	str	r2, [r3, #0]
		break;
 8007d2e:	e009      	b.n	8007d44 <SystemCoreClockUpdate+0x110>
	default:
		SystemCoreClock = HSI_VALUE;
 8007d30:	f240 0318 	movw	r3, #24
 8007d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d38:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8007d3c:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8007d40:	601a      	str	r2, [r3, #0]
		break;
 8007d42:	bf00      	nop
	}
	/* Compute HCLK frequency --------------------------------------------------*/
	/* Get HCLK prescaler */
	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8007d44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d52:	091a      	lsrs	r2, r3, #4
 8007d54:	f240 031c 	movw	r3, #28
 8007d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d5c:	5c9b      	ldrb	r3, [r3, r2]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	9304      	str	r3, [sp, #16]
	/* HCLK frequency */
	SystemCoreClock >>= tmp;
 8007d62:	f240 0318 	movw	r3, #24
 8007d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	40da      	lsrs	r2, r3
 8007d70:	f240 0318 	movw	r3, #24
 8007d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007d78:	601a      	str	r2, [r3, #0]
}
 8007d7a:	b006      	add	sp, #24
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <SetSysClock>:
 *         is reset to the default reset state (done in SystemInit() function).
 * @param  None
 * @retval None
 */
static void SetSysClock(void)
{
 8007d80:	b082      	sub	sp, #8
	/******************************************************************************/
	/*            PLL (clocked by HSE) used as System clock source                */
	/******************************************************************************/
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	2300      	movs	r3, #0
 8007d88:	9300      	str	r3, [sp, #0]

	/* Enable HSE */
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8007d8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007d8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d92:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007d96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007da0:	601a      	str	r2, [r3, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do
	{
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8007da2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007da6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db0:	9300      	str	r3, [sp, #0]
		StartUpCounter++;
 8007db2:	9b01      	ldr	r3, [sp, #4]
 8007db4:	3301      	adds	r3, #1
 8007db6:	9301      	str	r3, [sp, #4]
	} while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8007db8:	9b00      	ldr	r3, [sp, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <SetSysClock+0x46>
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007dc4:	d1ed      	bne.n	8007da2 <SetSysClock+0x22>

	if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8007dc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007dca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <SetSysClock+0x5e>
	{
		HSEStatus = (uint32_t)0x01;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	e001      	b.n	8007de2 <SetSysClock+0x62>
	}
	else
	{
		HSEStatus = (uint32_t)0x00;
 8007dde:	2300      	movs	r3, #0
 8007de0:	9300      	str	r3, [sp, #0]
	}

	if (HSEStatus == (uint32_t)0x01)
 8007de2:	9b00      	ldr	r3, [sp, #0]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	f040 8082 	bne.w	8007eee <SetSysClock+0x16e>
	{
		/* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
		RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8007dea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007dee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007df2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007df6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007dfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007dfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e00:	641a      	str	r2, [r3, #64]	; 0x40
		PWR->CR |= PWR_CR_VOS;
 8007e02:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8007e06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007e0a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8007e0e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e18:	601a      	str	r2, [r3, #0]

		/* HCLK = SYSCLK / 1*/
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8007e1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e22:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007e26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007e2a:	6892      	ldr	r2, [r2, #8]
 8007e2c:	609a      	str	r2, [r3, #8]

		/* PCLK2 = HCLK / 2*/
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8007e2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e36:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007e3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007e3e:	6892      	ldr	r2, [r2, #8]
 8007e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e44:	609a      	str	r2, [r3, #8]

		/* PCLK1 = HCLK / 4*/
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8007e46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e4e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007e52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007e56:	6892      	ldr	r2, [r2, #8]
 8007e58:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8007e5c:	609a      	str	r2, [r3, #8]

		/* Configure the main PLL */
		RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8007e5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e66:	f245 4208 	movw	r2, #21512	; 0x5408
 8007e6a:	f2c0 7240 	movt	r2, #1856	; 0x740
 8007e6e:	605a      	str	r2, [r3, #4]
				(RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

		/* Enable the main PLL */
		RCC->CR |= RCC_CR_PLLON;
 8007e70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007e7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007e86:	601a      	str	r2, [r3, #0]

		/* Wait till the main PLL is ready */
		while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8007e88:	bf00      	nop
 8007e8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f6      	beq.n	8007e8a <SetSysClock+0x10a>
		{
		}

		/* Configure Flash prefetch, Instruction cache, Data cache and wait state */
		//FLASH->ACR =  FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS; // <-- On active cache inst et donnée etc.
		FLASH->ACR =   FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8007e9c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ea0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ea4:	f240 4205 	movw	r2, #1029	; 0x405
 8007ea8:	601a      	str	r2, [r3, #0]
		//FLASH->ACR =  FLASH_ACR_ICEN  | FLASH_ACR_LATENCY_5WS;				
		//FLASH->ACR = FLASH_ACR_LATENCY_5WS; //<-- On désactive cache instruction et cache donnée 
		/* Select the main PLL as system clock source */
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8007eaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007eae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007eb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007eb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007eba:	6892      	ldr	r2, [r2, #8]
 8007ebc:	f022 0203 	bic.w	r2, r2, #3
 8007ec0:	609a      	str	r2, [r3, #8]
		RCC->CFGR |= RCC_CFGR_SW_PLL;
 8007ec2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007eca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007ed2:	6892      	ldr	r2, [r2, #8]
 8007ed4:	f042 0202 	orr.w	r2, r2, #2
 8007ed8:	609a      	str	r2, [r3, #8]

		/* Wait till the main PLL is used as system clock source */
		while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8007eda:	bf00      	nop
 8007edc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 030c 	and.w	r3, r3, #12
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d1f6      	bne.n	8007edc <SetSysClock+0x15c>
	/* Wait till PLLI2S is ready */
	while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
	{
	}
#endif
}
 8007eee:	b002      	add	sp, #8
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop

08007ef4 <_close>:
#include "stm32f4xx_conf.h"
#include "usbd_cdc_vcp.h"

int __errno;

int _close(int file) {
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	9001      	str	r0, [sp, #4]
	return 0;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	b002      	add	sp, #8
 8007efe:	4770      	bx	lr

08007f00 <_fstat>:
int _fstat(int file, struct stat *st) {
 8007f00:	b082      	sub	sp, #8
 8007f02:	9001      	str	r0, [sp, #4]
 8007f04:	9100      	str	r1, [sp, #0]
	return 0;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	b002      	add	sp, #8
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <_isatty>:

int _isatty(int file) {
 8007f10:	b082      	sub	sp, #8
 8007f12:	9001      	str	r0, [sp, #4]
	return 1;
 8007f14:	2301      	movs	r3, #1
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	b002      	add	sp, #8
 8007f1a:	4770      	bx	lr

08007f1c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	9003      	str	r0, [sp, #12]
 8007f20:	9102      	str	r1, [sp, #8]
 8007f22:	9201      	str	r2, [sp, #4]
	return 0;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	b004      	add	sp, #16
 8007f2a:	4770      	bx	lr

08007f2c <_open>:

int _open(const char *name, int flags, int mode) {
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	9003      	str	r0, [sp, #12]
 8007f30:	9102      	str	r1, [sp, #8]
 8007f32:	9201      	str	r2, [sp, #4]
	return -1;
 8007f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	b004      	add	sp, #16
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop

08007f40 <_kill>:

int _kill(const char *name, int flags, int mode) {
 8007f40:	b084      	sub	sp, #16
 8007f42:	9003      	str	r0, [sp, #12]
 8007f44:	9102      	str	r1, [sp, #8]
 8007f46:	9201      	str	r2, [sp, #4]

	return -1;
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	b004      	add	sp, #16
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop

08007f54 <_get_pid>:
int _get_pid(const char *name, int flags, int mode) {
 8007f54:	b084      	sub	sp, #16
 8007f56:	9003      	str	r0, [sp, #12]
 8007f58:	9102      	str	r1, [sp, #8]
 8007f5a:	9201      	str	r2, [sp, #4]

	return -1;
 8007f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	b004      	add	sp, #16
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop

08007f68 <_getpid>:
int _getpid(const char *name, int flags, int mode) {
 8007f68:	b084      	sub	sp, #16
 8007f6a:	9003      	str	r0, [sp, #12]
 8007f6c:	9102      	str	r1, [sp, #8]
 8007f6e:	9201      	str	r2, [sp, #4]
	return -1;
 8007f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	b004      	add	sp, #16
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <_read>:
	
	int _read(int file, char *ptr, int len) {
 8007f7c:	b500      	push	{lr}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	9003      	str	r0, [sp, #12]
 8007f82:	9102      	str	r1, [sp, #8]
 8007f84:	9201      	str	r2, [sp, #4]
	if (file != 0) {
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <_read+0x14>
		return 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e00c      	b.n	8007faa <_read+0x2e>
	}

	// Use USB CDC Port for stdin
	while(!VCP_get_char((uint8_t*)ptr)){};
 8007f90:	bf00      	nop
 8007f92:	9802      	ldr	r0, [sp, #8]
 8007f94:	f000 f9bc 	bl	8008310 <VCP_get_char>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f9      	beq.n	8007f92 <_read+0x16>

	// Echo typed characters
	VCP_put_char((uint8_t)*ptr);
 8007f9e:	9b02      	ldr	r3, [sp, #8]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 f906 	bl	80081b4 <VCP_put_char>

	return 1;
 8007fa8:	2301      	movs	r3, #1
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	b005      	add	sp, #20
 8007fae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fb2:	bf00      	nop

08007fb4 <_sbrk_r>:

/* Register name faking - works in collusion with the linker.  */
register char * stack_ptr asm ("sp");

caddr_t _sbrk_r (struct _reent *r, int incr) {
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	9001      	str	r0, [sp, #4]
 8007fb8:	9100      	str	r1, [sp, #0]
	extern char   end asm ("end"); /* Defined by the linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == NULL)
 8007fba:	f640 2320 	movw	r3, #2592	; 0xa20
 8007fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d108      	bne.n	8007fda <_sbrk_r+0x26>
		heap_end = & end;
 8007fc8:	f640 2320 	movw	r3, #2592	; 0xa20
 8007fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fd0:	f641 3230 	movw	r2, #6960	; 0x1b30
 8007fd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007fd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007fda:	f640 2320 	movw	r3, #2592	; 0xa20
 8007fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	9303      	str	r3, [sp, #12]

	if (heap_end + incr > stack_ptr) {
 8007fe6:	f640 2320 	movw	r3, #2592	; 0xa20
 8007fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	441a      	add	r2, r3
 8007ff4:	466b      	mov	r3, sp
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d902      	bls.n	8008000 <_sbrk_r+0x4c>
		//errno = ENOMEM;
		return (caddr_t) -1;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ffe:	e00c      	b.n	800801a <_sbrk_r+0x66>
	}

	heap_end += incr;
 8008000:	f640 2320 	movw	r3, #2592	; 0xa20
 8008004:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	9b00      	ldr	r3, [sp, #0]
 800800c:	441a      	add	r2, r3
 800800e:	f640 2320 	movw	r3, #2592	; 0xa20
 8008012:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008016:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8008018:	9b03      	ldr	r3, [sp, #12]
}
 800801a:	4618      	mov	r0, r3
 800801c:	b004      	add	sp, #16
 800801e:	4770      	bx	lr

08008020 <_write>:

int _write(int file, char *ptr, int len) {
 8008020:	b500      	push	{lr}
 8008022:	b085      	sub	sp, #20
 8008024:	9003      	str	r0, [sp, #12]
 8008026:	9102      	str	r1, [sp, #8]
 8008028:	9201      	str	r2, [sp, #4]
	VCP_send_buffer((uint8_t*)ptr, len);
 800802a:	9802      	ldr	r0, [sp, #8]
 800802c:	9901      	ldr	r1, [sp, #4]
 800802e:	f000 f8e5 	bl	80081fc <VCP_send_buffer>
	return len;
 8008032:	9b01      	ldr	r3, [sp, #4]
}
 8008034:	4618      	mov	r0, r3
 8008036:	b005      	add	sp, #20
 8008038:	f85d fb04 	ldr.w	pc, [sp], #4

0800803c <USBD_USR_Init>:
* @retval None
*/
void USBD_USR_Init(void)
{   

}
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop

08008040 <USBD_USR_DeviceReset>:
*         Displays the message on LCD on device Reset Event
* @param  speed : device speed
* @retval None
*/
void USBD_USR_DeviceReset(uint8_t speed )
{
 8008040:	b082      	sub	sp, #8
 8008042:	4603      	mov	r3, r0
 8008044:	f88d 3007 	strb.w	r3, [sp, #7]
 switch (speed)
 8008048:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <USBD_USR_DeviceReset+0x16>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d002      	beq.n	800805a <USBD_USR_DeviceReset+0x1a>
     break;

  case USB_OTG_SPEED_FULL: 
     break;
 default:
     break;
 8008054:	e002      	b.n	800805c <USBD_USR_DeviceReset+0x1c>
void USBD_USR_DeviceReset(uint8_t speed )
{
 switch (speed)
 {
   case USB_OTG_SPEED_HIGH: 
     break;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <USBD_USR_DeviceReset+0x1c>

  case USB_OTG_SPEED_FULL: 
     break;
 800805a:	bf00      	nop
 default:
     break;
     
 }
}
 800805c:	b002      	add	sp, #8
 800805e:	4770      	bx	lr

08008060 <USBD_USR_DeviceConfigured>:
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConfigured (void)
{
}
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop

08008064 <USBD_USR_DeviceConnected>:
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceConnected (void)
{
}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop

08008068 <USBD_USR_DeviceDisconnected>:
* @param  None
* @retval Staus
*/
void USBD_USR_DeviceDisconnected (void)
{
}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop

0800806c <USBD_USR_DeviceSuspended>:
* @retval None
*/
void USBD_USR_DeviceSuspended(void)
{
  /* Users can do their application actions here for the USB-Reset */
}
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop

08008070 <USBD_USR_DeviceResumed>:
* @retval None
*/
void USBD_USR_DeviceResumed(void)
{
  /* Users can do their application actions here for the USB-Reset */
}
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop

08008074 <VCP_Init>:
 *         Initializes the Media on the STM32
 * @param  None
 * @retval Result of the opeartion (USBD_OK in all cases)
 */
static uint16_t VCP_Init(void) {
	return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop

0800807c <VCP_DeInit>:
 *         DeInitializes the Media on the STM32
 * @param  None
 * @retval Result of the opeartion (USBD_OK in all cases)
 */
static uint16_t VCP_DeInit(void) {
	return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop

08008084 <VCP_Ctrl>:
 * @param  Cmd: Command code
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the opeartion (USBD_OK in all cases)
 */
static uint16_t VCP_Ctrl(uint32_t Cmd, uint8_t* Buf, uint32_t Len) {
 8008084:	b084      	sub	sp, #16
 8008086:	9003      	str	r0, [sp, #12]
 8008088:	9102      	str	r1, [sp, #8]
 800808a:	9201      	str	r2, [sp, #4]
	switch (Cmd) {
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	2b23      	cmp	r3, #35	; 0x23
 8008090:	f200 808b 	bhi.w	80081aa <VCP_Ctrl+0x126>
 8008094:	a201      	add	r2, pc, #4	; (adr r2, 800809c <VCP_Ctrl+0x18>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	080081ab 	.word	0x080081ab
 80080a0:	080081ab 	.word	0x080081ab
 80080a4:	080081ab 	.word	0x080081ab
 80080a8:	080081ab 	.word	0x080081ab
 80080ac:	080081ab 	.word	0x080081ab
 80080b0:	080081ab 	.word	0x080081ab
 80080b4:	080081ab 	.word	0x080081ab
 80080b8:	080081ab 	.word	0x080081ab
 80080bc:	080081ab 	.word	0x080081ab
 80080c0:	080081ab 	.word	0x080081ab
 80080c4:	080081ab 	.word	0x080081ab
 80080c8:	080081ab 	.word	0x080081ab
 80080cc:	080081ab 	.word	0x080081ab
 80080d0:	080081ab 	.word	0x080081ab
 80080d4:	080081ab 	.word	0x080081ab
 80080d8:	080081ab 	.word	0x080081ab
 80080dc:	080081ab 	.word	0x080081ab
 80080e0:	080081ab 	.word	0x080081ab
 80080e4:	080081ab 	.word	0x080081ab
 80080e8:	080081ab 	.word	0x080081ab
 80080ec:	080081ab 	.word	0x080081ab
 80080f0:	080081ab 	.word	0x080081ab
 80080f4:	080081ab 	.word	0x080081ab
 80080f8:	080081ab 	.word	0x080081ab
 80080fc:	080081ab 	.word	0x080081ab
 8008100:	080081ab 	.word	0x080081ab
 8008104:	080081ab 	.word	0x080081ab
 8008108:	080081ab 	.word	0x080081ab
 800810c:	080081ab 	.word	0x080081ab
 8008110:	080081ab 	.word	0x080081ab
 8008114:	080081ab 	.word	0x080081ab
 8008118:	080081ab 	.word	0x080081ab
 800811c:	080081ab 	.word	0x080081ab
 8008120:	0800812d 	.word	0x0800812d
 8008124:	080081ab 	.word	0x080081ab
 8008128:	080081ab 	.word	0x080081ab
	case SET_LINE_CODING:
		/* Not  needed for this driver */
		break;

	case GET_LINE_CODING:
		Buf[0] = (uint8_t) (linecoding.bitrate);
 800812c:	f240 0348 	movw	r3, #72	; 0x48
 8008130:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	9b02      	ldr	r3, [sp, #8]
 800813a:	701a      	strb	r2, [r3, #0]
		Buf[1] = (uint8_t) (linecoding.bitrate >> 8);
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	f240 0348 	movw	r3, #72	; 0x48
 8008144:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	b2db      	uxtb	r3, r3
 800814e:	7013      	strb	r3, [r2, #0]
		Buf[2] = (uint8_t) (linecoding.bitrate >> 16);
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	1c9a      	adds	r2, r3, #2
 8008154:	f240 0348 	movw	r3, #72	; 0x48
 8008158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	0c1b      	lsrs	r3, r3, #16
 8008160:	b2db      	uxtb	r3, r3
 8008162:	7013      	strb	r3, [r2, #0]
		Buf[3] = (uint8_t) (linecoding.bitrate >> 24);
 8008164:	9b02      	ldr	r3, [sp, #8]
 8008166:	1cda      	adds	r2, r3, #3
 8008168:	f240 0348 	movw	r3, #72	; 0x48
 800816c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	0e1b      	lsrs	r3, r3, #24
 8008174:	b2db      	uxtb	r3, r3
 8008176:	7013      	strb	r3, [r2, #0]
		Buf[4] = linecoding.format;
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	1d1a      	adds	r2, r3, #4
 800817c:	f240 0348 	movw	r3, #72	; 0x48
 8008180:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008184:	791b      	ldrb	r3, [r3, #4]
 8008186:	7013      	strb	r3, [r2, #0]
		Buf[5] = linecoding.paritytype;
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	1d5a      	adds	r2, r3, #5
 800818c:	f240 0348 	movw	r3, #72	; 0x48
 8008190:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008194:	795b      	ldrb	r3, [r3, #5]
 8008196:	7013      	strb	r3, [r2, #0]
		Buf[6] = linecoding.datatype;
 8008198:	9b02      	ldr	r3, [sp, #8]
 800819a:	1d9a      	adds	r2, r3, #6
 800819c:	f240 0348 	movw	r3, #72	; 0x48
 80081a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80081a4:	799b      	ldrb	r3, [r3, #6]
 80081a6:	7013      	strb	r3, [r2, #0]
		break;
 80081a8:	e000      	b.n	80081ac <VCP_Ctrl+0x128>
	case SEND_BREAK:
		/* Not  needed for this driver */
		break;

	default:
		break;
 80081aa:	bf00      	nop
	}

	return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	b004      	add	sp, #16
 80081b2:	4770      	bx	lr

080081b4 <VCP_put_char>:
 *         Sends one char over the USB serial link.
 * @param  buf: char to be sent
 * @retval none
 */

void VCP_put_char(uint8_t buf) {
 80081b4:	b500      	push	{lr}
 80081b6:	b083      	sub	sp, #12
 80081b8:	4603      	mov	r3, r0
 80081ba:	f88d 3007 	strb.w	r3, [sp, #7]
	VCP_DataTx(&buf, 1);
 80081be:	f10d 0307 	add.w	r3, sp, #7
 80081c2:	4618      	mov	r0, r3
 80081c4:	2101      	movs	r1, #1
 80081c6:	f000 f825 	bl	8008214 <VCP_DataTx>
}
 80081ca:	b003      	add	sp, #12
 80081cc:	f85d fb04 	ldr.w	pc, [sp], #4

080081d0 <VCP_send_str>:

void VCP_send_str(uint8_t* buf) {
 80081d0:	b500      	push	{lr}
 80081d2:	b085      	sub	sp, #20
 80081d4:	9001      	str	r0, [sp, #4]
	uint32_t i = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	9303      	str	r3, [sp, #12]
	while (*(buf + i)) {
 80081da:	e002      	b.n	80081e2 <VCP_send_str+0x12>
		i++;
 80081dc:	9b03      	ldr	r3, [sp, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	9303      	str	r3, [sp, #12]
	VCP_DataTx(&buf, 1);
}

void VCP_send_str(uint8_t* buf) {
	uint32_t i = 0;
	while (*(buf + i)) {
 80081e2:	9a01      	ldr	r2, [sp, #4]
 80081e4:	9b03      	ldr	r3, [sp, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f6      	bne.n	80081dc <VCP_send_str+0xc>
		i++;
	}
	VCP_DataTx(buf, i);
 80081ee:	9801      	ldr	r0, [sp, #4]
 80081f0:	9903      	ldr	r1, [sp, #12]
 80081f2:	f000 f80f 	bl	8008214 <VCP_DataTx>
}
 80081f6:	b005      	add	sp, #20
 80081f8:	f85d fb04 	ldr.w	pc, [sp], #4

080081fc <VCP_send_buffer>:

void VCP_send_buffer(uint8_t* buf, int len) {
 80081fc:	b500      	push	{lr}
 80081fe:	b083      	sub	sp, #12
 8008200:	9001      	str	r0, [sp, #4]
 8008202:	9100      	str	r1, [sp, #0]
	VCP_DataTx(buf, len);
 8008204:	9b00      	ldr	r3, [sp, #0]
 8008206:	9801      	ldr	r0, [sp, #4]
 8008208:	4619      	mov	r1, r3
 800820a:	f000 f803 	bl	8008214 <VCP_DataTx>
}
 800820e:	b003      	add	sp, #12
 8008210:	f85d fb04 	ldr.w	pc, [sp], #4

08008214 <VCP_DataTx>:
 *         this function.
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
 */
static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len) {
 8008214:	b084      	sub	sp, #16
 8008216:	9001      	str	r0, [sp, #4]
 8008218:	9100      	str	r1, [sp, #0]
	uint32_t i = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	9303      	str	r3, [sp, #12]
	while (i < Len) {
 800821e:	e029      	b.n	8008274 <VCP_DataTx+0x60>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(Buf + i);
 8008220:	f640 2344 	movw	r3, #2628	; 0xa44
 8008224:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	9901      	ldr	r1, [sp, #4]
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	440b      	add	r3, r1
 8008230:	7819      	ldrb	r1, [r3, #0]
 8008232:	f241 332c 	movw	r3, #4908	; 0x132c
 8008236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800823a:	5499      	strb	r1, [r3, r2]
		APP_Rx_ptr_in++;
 800823c:	f640 2344 	movw	r3, #2628	; 0xa44
 8008240:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	f640 2344 	movw	r3, #2628	; 0xa44
 800824c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008250:	601a      	str	r2, [r3, #0]
		i++;
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	9303      	str	r3, [sp, #12]
		/* To avoid buffer overflow */
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8008258:	f640 2344 	movw	r3, #2628	; 0xa44
 800825c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008266:	d105      	bne.n	8008274 <VCP_DataTx+0x60>
			APP_Rx_ptr_in = 0;
 8008268:	f640 2344 	movw	r3, #2628	; 0xa44
 800826c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
 */
static uint16_t VCP_DataTx(uint8_t* Buf, uint32_t Len) {
	uint32_t i = 0;
	while (i < Len) {
 8008274:	9a03      	ldr	r2, [sp, #12]
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d3d1      	bcc.n	8008220 <VCP_DataTx+0xc>
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
			APP_Rx_ptr_in = 0;
		}
	}

	return USBD_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	b004      	add	sp, #16
 8008282:	4770      	bx	lr

08008284 <VCP_DataRx>:
#define APP_TX_BUF_SIZE 128
uint8_t APP_Tx_Buffer[APP_TX_BUF_SIZE];
uint32_t APP_tx_ptr_head;
uint32_t APP_tx_ptr_tail;

static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len) {
 8008284:	b084      	sub	sp, #16
 8008286:	9001      	str	r0, [sp, #4]
 8008288:	9100      	str	r1, [sp, #0]
	uint32_t i;

	for (i = 0; i < Len; i++) {
 800828a:	2300      	movs	r3, #0
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	e036      	b.n	80082fe <VCP_DataRx+0x7a>
		APP_Tx_Buffer[APP_tx_ptr_head] = *(Buf + i);
 8008290:	f241 2368 	movw	r3, #4712	; 0x1268
 8008294:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	9901      	ldr	r1, [sp, #4]
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	440b      	add	r3, r1
 80082a0:	7819      	ldrb	r1, [r3, #0]
 80082a2:	f241 13d4 	movw	r3, #4564	; 0x11d4
 80082a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082aa:	5499      	strb	r1, [r3, r2]
		APP_tx_ptr_head++;
 80082ac:	f241 2368 	movw	r3, #4712	; 0x1268
 80082b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	f241 2368 	movw	r3, #4712	; 0x1268
 80082bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082c0:	601a      	str	r2, [r3, #0]
		if (APP_tx_ptr_head == APP_TX_BUF_SIZE)
 80082c2:	f241 2368 	movw	r3, #4712	; 0x1268
 80082c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b80      	cmp	r3, #128	; 0x80
 80082ce:	d105      	bne.n	80082dc <VCP_DataRx+0x58>
			APP_tx_ptr_head = 0;
 80082d0:	f241 2368 	movw	r3, #4712	; 0x1268
 80082d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

		if (APP_tx_ptr_head == APP_tx_ptr_tail)
 80082dc:	f241 2368 	movw	r3, #4712	; 0x1268
 80082e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	f241 2354 	movw	r3, #4692	; 0x1254
 80082ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d101      	bne.n	80082f8 <VCP_DataRx+0x74>
			return USBD_FAIL;
 80082f4:	2302      	movs	r3, #2
 80082f6:	e007      	b.n	8008308 <VCP_DataRx+0x84>
uint32_t APP_tx_ptr_tail;

static uint16_t VCP_DataRx(uint8_t* Buf, uint32_t Len) {
	uint32_t i;

	for (i = 0; i < Len; i++) {
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	9a03      	ldr	r2, [sp, #12]
 8008300:	9b00      	ldr	r3, [sp, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d3c4      	bcc.n	8008290 <VCP_DataRx+0xc>

		if (APP_tx_ptr_head == APP_tx_ptr_tail)
			return USBD_FAIL;
	}

	return USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	b004      	add	sp, #16
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <VCP_get_char>:

int VCP_get_char(uint8_t *buf) {
 8008310:	b082      	sub	sp, #8
 8008312:	9001      	str	r0, [sp, #4]
	if (APP_tx_ptr_head == APP_tx_ptr_tail)
 8008314:	f241 2368 	movw	r3, #4712	; 0x1268
 8008318:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	f241 2354 	movw	r3, #4692	; 0x1254
 8008322:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d101      	bne.n	8008330 <VCP_get_char+0x20>
		return 0;
 800832c:	2300      	movs	r3, #0
 800832e:	e024      	b.n	800837a <VCP_get_char+0x6a>

	*buf = APP_Tx_Buffer[APP_tx_ptr_tail];
 8008330:	f241 2354 	movw	r3, #4692	; 0x1254
 8008334:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	f241 13d4 	movw	r3, #4564	; 0x11d4
 800833e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008342:	5c9a      	ldrb	r2, [r3, r2]
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	701a      	strb	r2, [r3, #0]
	APP_tx_ptr_tail++;
 8008348:	f241 2354 	movw	r3, #4692	; 0x1254
 800834c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	f241 2354 	movw	r3, #4692	; 0x1254
 8008358:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800835c:	601a      	str	r2, [r3, #0]
	if (APP_tx_ptr_tail == APP_TX_BUF_SIZE)
 800835e:	f241 2354 	movw	r3, #4692	; 0x1254
 8008362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b80      	cmp	r3, #128	; 0x80
 800836a:	d105      	bne.n	8008378 <VCP_get_char+0x68>
		APP_tx_ptr_tail = 0;
 800836c:	f241 2354 	movw	r3, #4692	; 0x1254
 8008370:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]

	return 1;
 8008378:	2301      	movs	r3, #1
}
 800837a:	4618      	mov	r0, r3
 800837c:	b002      	add	sp, #8
 800837e:	4770      	bx	lr

08008380 <VCP_get_string>:

int VCP_get_string(uint8_t *buf) {
 8008380:	b084      	sub	sp, #16
 8008382:	9001      	str	r0, [sp, #4]
	if (APP_tx_ptr_head == APP_tx_ptr_tail)
 8008384:	f241 2368 	movw	r3, #4712	; 0x1268
 8008388:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	f241 2354 	movw	r3, #4692	; 0x1254
 8008392:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d101      	bne.n	80083a0 <VCP_get_string+0x20>
		return 0;
 800839c:	2300      	movs	r3, #0
 800839e:	e0ce      	b.n	800853e <VCP_get_string+0x1be>

	while (!APP_Tx_Buffer[APP_tx_ptr_tail]
 80083a0:	e025      	b.n	80083ee <VCP_get_string+0x6e>
			|| APP_Tx_Buffer[APP_tx_ptr_tail] == '\n'
			|| APP_Tx_Buffer[APP_tx_ptr_tail] == '\r') {
		APP_tx_ptr_tail++;
 80083a2:	f241 2354 	movw	r3, #4692	; 0x1254
 80083a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	f241 2354 	movw	r3, #4692	; 0x1254
 80083b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083b6:	601a      	str	r2, [r3, #0]
		if (APP_tx_ptr_tail == APP_TX_BUF_SIZE)
 80083b8:	f241 2354 	movw	r3, #4692	; 0x1254
 80083bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b80      	cmp	r3, #128	; 0x80
 80083c4:	d105      	bne.n	80083d2 <VCP_get_string+0x52>
			APP_tx_ptr_tail = 0;
 80083c6:	f241 2354 	movw	r3, #4692	; 0x1254
 80083ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]
		if (APP_tx_ptr_head == APP_tx_ptr_tail)
 80083d2:	f241 2368 	movw	r3, #4712	; 0x1268
 80083d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	f241 2354 	movw	r3, #4692	; 0x1254
 80083e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d101      	bne.n	80083ee <VCP_get_string+0x6e>
			return 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e0a7      	b.n	800853e <VCP_get_string+0x1be>

int VCP_get_string(uint8_t *buf) {
	if (APP_tx_ptr_head == APP_tx_ptr_tail)
		return 0;

	while (!APP_Tx_Buffer[APP_tx_ptr_tail]
 80083ee:	f241 2354 	movw	r3, #4692	; 0x1254
 80083f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	f241 13d4 	movw	r3, #4564	; 0x11d4
 80083fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008400:	5c9b      	ldrb	r3, [r3, r2]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0cd      	beq.n	80083a2 <VCP_get_string+0x22>
			|| APP_Tx_Buffer[APP_tx_ptr_tail] == '\n'
 8008406:	f241 2354 	movw	r3, #4692	; 0x1254
 800840a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	f241 13d4 	movw	r3, #4564	; 0x11d4
 8008414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008418:	5c9b      	ldrb	r3, [r3, r2]
 800841a:	2b0a      	cmp	r3, #10
 800841c:	d0c1      	beq.n	80083a2 <VCP_get_string+0x22>
			|| APP_Tx_Buffer[APP_tx_ptr_tail] == '\r') {
 800841e:	f241 2354 	movw	r3, #4692	; 0x1254
 8008422:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	f241 13d4 	movw	r3, #4564	; 0x11d4
 800842c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008430:	5c9b      	ldrb	r3, [r3, r2]
 8008432:	2b0d      	cmp	r3, #13
 8008434:	d0b5      	beq.n	80083a2 <VCP_get_string+0x22>
			APP_tx_ptr_tail = 0;
		if (APP_tx_ptr_head == APP_tx_ptr_tail)
			return 0;
	}

	int i = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	9303      	str	r3, [sp, #12]
	do {
		*(buf + i) = APP_Tx_Buffer[i + APP_tx_ptr_tail];
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	9a01      	ldr	r2, [sp, #4]
 800843e:	441a      	add	r2, r3
 8008440:	9903      	ldr	r1, [sp, #12]
 8008442:	f241 2354 	movw	r3, #4692	; 0x1254
 8008446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4419      	add	r1, r3
 800844e:	f241 13d4 	movw	r3, #4564	; 0x11d4
 8008452:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008456:	5c5b      	ldrb	r3, [r3, r1]
 8008458:	7013      	strb	r3, [r2, #0]
		i++;
 800845a:	9b03      	ldr	r3, [sp, #12]
 800845c:	3301      	adds	r3, #1
 800845e:	9303      	str	r3, [sp, #12]

		if ((APP_tx_ptr_tail + i) == APP_TX_BUF_SIZE)
 8008460:	f241 2354 	movw	r3, #4692	; 0x1254
 8008464:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	4413      	add	r3, r2
 800846e:	2b80      	cmp	r3, #128	; 0x80
 8008470:	d106      	bne.n	8008480 <VCP_get_string+0x100>
			i = -APP_tx_ptr_tail;
 8008472:	f241 2354 	movw	r3, #4692	; 0x1254
 8008476:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	425b      	negs	r3, r3
 800847e:	9303      	str	r3, [sp, #12]
		if (APP_tx_ptr_head == (APP_tx_ptr_tail + i))
 8008480:	f241 2354 	movw	r3, #4692	; 0x1254
 8008484:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	441a      	add	r2, r3
 800848e:	f241 2368 	movw	r3, #4712	; 0x1268
 8008492:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d101      	bne.n	80084a0 <VCP_get_string+0x120>
			return 0;
 800849c:	2300      	movs	r3, #0
 800849e:	e04e      	b.n	800853e <VCP_get_string+0x1be>

	} while (APP_Tx_Buffer[APP_tx_ptr_tail + i]
 80084a0:	f241 2354 	movw	r3, #4692	; 0x1254
 80084a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	441a      	add	r2, r3
 80084ae:	f241 13d4 	movw	r3, #4564	; 0x11d4
 80084b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084b6:	5c9b      	ldrb	r3, [r3, r2]
			&& APP_Tx_Buffer[APP_tx_ptr_tail + i] != '\n'
			&& APP_Tx_Buffer[APP_tx_ptr_tail + i] != '\r');
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01b      	beq.n	80084f4 <VCP_get_string+0x174>
			i = -APP_tx_ptr_tail;
		if (APP_tx_ptr_head == (APP_tx_ptr_tail + i))
			return 0;

	} while (APP_Tx_Buffer[APP_tx_ptr_tail + i]
			&& APP_Tx_Buffer[APP_tx_ptr_tail + i] != '\n'
 80084bc:	f241 2354 	movw	r3, #4692	; 0x1254
 80084c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	441a      	add	r2, r3
 80084ca:	f241 13d4 	movw	r3, #4564	; 0x11d4
 80084ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084d2:	5c9b      	ldrb	r3, [r3, r2]
 80084d4:	2b0a      	cmp	r3, #10
 80084d6:	d00d      	beq.n	80084f4 <VCP_get_string+0x174>
			&& APP_Tx_Buffer[APP_tx_ptr_tail + i] != '\r');
 80084d8:	f241 2354 	movw	r3, #4692	; 0x1254
 80084dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	441a      	add	r2, r3
 80084e6:	f241 13d4 	movw	r3, #4564	; 0x11d4
 80084ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80084ee:	5c9b      	ldrb	r3, [r3, r2]
 80084f0:	2b0d      	cmp	r3, #13
 80084f2:	d1a2      	bne.n	800843a <VCP_get_string+0xba>

	*(buf + i) = 0;
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	9a01      	ldr	r2, [sp, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	2200      	movs	r2, #0
 80084fc:	701a      	strb	r2, [r3, #0]
	APP_tx_ptr_tail += i;
 80084fe:	f241 2354 	movw	r3, #4692	; 0x1254
 8008502:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	441a      	add	r2, r3
 800850c:	f241 2354 	movw	r3, #4692	; 0x1254
 8008510:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008514:	601a      	str	r2, [r3, #0]
	if (APP_tx_ptr_tail >= APP_TX_BUF_SIZE)
 8008516:	f241 2354 	movw	r3, #4692	; 0x1254
 800851a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b7f      	cmp	r3, #127	; 0x7f
 8008522:	d90b      	bls.n	800853c <VCP_get_string+0x1bc>
		APP_tx_ptr_tail -= APP_TX_BUF_SIZE;
 8008524:	f241 2354 	movw	r3, #4692	; 0x1254
 8008528:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8008532:	f241 2354 	movw	r3, #4692	; 0x1254
 8008536:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800853a:	601a      	str	r2, [r3, #0]
	return i;
 800853c:	9b03      	ldr	r3, [sp, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	b004      	add	sp, #16
 8008542:	4770      	bx	lr

08008544 <EVAL_COM_IRQHandler>:
 * @param  None.
 * @retval None.
 */
void EVAL_COM_IRQHandler(void) {

}
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop

08008548 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 8008548:	b082      	sub	sp, #8
 800854a:	4603      	mov	r3, r0
 800854c:	9100      	str	r1, [sp, #0]
 800854e:	f88d 3007 	strb.w	r3, [sp, #7]
  *length = sizeof(USBD_DeviceDesc);
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	2212      	movs	r2, #18
 8008556:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8008558:	f240 0380 	movw	r3, #128	; 0x80
 800855c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8008560:	4618      	mov	r0, r3
 8008562:	b002      	add	sp, #8
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop

08008568 <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 8008568:	b082      	sub	sp, #8
 800856a:	4603      	mov	r3, r0
 800856c:	9100      	str	r1, [sp, #0]
 800856e:	f88d 3007 	strb.w	r3, [sp, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8008572:	9b00      	ldr	r3, [sp, #0]
 8008574:	2204      	movs	r2, #4
 8008576:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008578:	f240 03a0 	movw	r3, #160	; 0xa0
 800857c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8008580:	4618      	mov	r0, r3
 8008582:	b002      	add	sp, #8
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8008588:	b500      	push	{lr}
 800858a:	b083      	sub	sp, #12
 800858c:	4603      	mov	r3, r0
 800858e:	9100      	str	r1, [sp, #0]
 8008590:	f88d 3007 	strb.w	r3, [sp, #7]
 
  
  if(speed == 0)
 8008594:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <USBD_USR_ProductStrDescriptor+0x2c>
  {   
    USBD_GetString ((uint8_t*)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800859c:	f643 705c 	movw	r0, #16220	; 0x3f5c
 80085a0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80085a4:	f241 216c 	movw	r1, #4716	; 0x126c
 80085a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80085ac:	9a00      	ldr	r2, [sp, #0]
 80085ae:	f001 f9ff 	bl	80099b0 <USBD_GetString>
 80085b2:	e00a      	b.n	80085ca <USBD_USR_ProductStrDescriptor+0x42>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80085b4:	f643 7080 	movw	r0, #16256	; 0x3f80
 80085b8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80085bc:	f241 216c 	movw	r1, #4716	; 0x126c
 80085c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80085c4:	9a00      	ldr	r2, [sp, #0]
 80085c6:	f001 f9f3 	bl	80099b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085ca:	f241 236c 	movw	r3, #4716	; 0x126c
 80085ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	b003      	add	sp, #12
 80085d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80085da:	bf00      	nop

080085dc <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 80085dc:	b500      	push	{lr}
 80085de:	b083      	sub	sp, #12
 80085e0:	4603      	mov	r3, r0
 80085e2:	9100      	str	r1, [sp, #0]
 80085e4:	f88d 3007 	strb.w	r3, [sp, #7]
  USBD_GetString ((uint8_t*)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085e8:	f643 70a4 	movw	r0, #16292	; 0x3fa4
 80085ec:	f6c0 0001 	movt	r0, #2049	; 0x801
 80085f0:	f241 216c 	movw	r1, #4716	; 0x126c
 80085f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80085f8:	9a00      	ldr	r2, [sp, #0]
 80085fa:	f001 f9d9 	bl	80099b0 <USBD_GetString>
  return USBD_StrDesc;
 80085fe:	f241 236c 	movw	r3, #4716	; 0x126c
 8008602:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8008606:	4618      	mov	r0, r3
 8008608:	b003      	add	sp, #12
 800860a:	f85d fb04 	ldr.w	pc, [sp], #4
 800860e:	bf00      	nop

08008610 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 8008610:	b500      	push	{lr}
 8008612:	b083      	sub	sp, #12
 8008614:	4603      	mov	r3, r0
 8008616:	9100      	str	r1, [sp, #0]
 8008618:	f88d 3007 	strb.w	r3, [sp, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 800861c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10b      	bne.n	800863c <USBD_USR_SerialStrDescriptor+0x2c>
  {    
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8008624:	f643 70b8 	movw	r0, #16312	; 0x3fb8
 8008628:	f6c0 0001 	movt	r0, #2049	; 0x801
 800862c:	f241 216c 	movw	r1, #4716	; 0x126c
 8008630:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	f001 f9bb 	bl	80099b0 <USBD_GetString>
 800863a:	e00a      	b.n	8008652 <USBD_USR_SerialStrDescriptor+0x42>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800863c:	f643 70c8 	movw	r0, #16328	; 0x3fc8
 8008640:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008644:	f241 216c 	movw	r1, #4716	; 0x126c
 8008648:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800864c:	9a00      	ldr	r2, [sp, #0]
 800864e:	f001 f9af 	bl	80099b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008652:	f241 236c 	movw	r3, #4716	; 0x126c
 8008656:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800865a:	4618      	mov	r0, r3
 800865c:	b003      	add	sp, #12
 800865e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008662:	bf00      	nop

08008664 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 8008664:	b500      	push	{lr}
 8008666:	b083      	sub	sp, #12
 8008668:	4603      	mov	r3, r0
 800866a:	9100      	str	r1, [sp, #0]
 800866c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(speed  == USB_OTG_SPEED_HIGH)
 8008670:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10b      	bne.n	8008690 <USBD_USR_ConfigStrDescriptor+0x2c>
  {  
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8008678:	f643 70d8 	movw	r0, #16344	; 0x3fd8
 800867c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008680:	f241 216c 	movw	r1, #4716	; 0x126c
 8008684:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8008688:	9a00      	ldr	r2, [sp, #0]
 800868a:	f001 f991 	bl	80099b0 <USBD_GetString>
 800868e:	e00a      	b.n	80086a6 <USBD_USR_ConfigStrDescriptor+0x42>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8008690:	f643 70d8 	movw	r0, #16344	; 0x3fd8
 8008694:	f6c0 0001 	movt	r0, #2049	; 0x801
 8008698:	f241 216c 	movw	r1, #4716	; 0x126c
 800869c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80086a0:	9a00      	ldr	r2, [sp, #0]
 80086a2:	f001 f985 	bl	80099b0 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80086a6:	f241 236c 	movw	r3, #4716	; 0x126c
 80086aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	b003      	add	sp, #12
 80086b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80086b6:	bf00      	nop

080086b8 <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 80086b8:	b500      	push	{lr}
 80086ba:	b083      	sub	sp, #12
 80086bc:	4603      	mov	r3, r0
 80086be:	9100      	str	r1, [sp, #0]
 80086c0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(speed == 0)
 80086c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10b      	bne.n	80086e4 <USBD_USR_InterfaceStrDescriptor+0x2c>
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80086cc:	f643 70e4 	movw	r0, #16356	; 0x3fe4
 80086d0:	f6c0 0001 	movt	r0, #2049	; 0x801
 80086d4:	f241 216c 	movw	r1, #4716	; 0x126c
 80086d8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80086dc:	9a00      	ldr	r2, [sp, #0]
 80086de:	f001 f967 	bl	80099b0 <USBD_GetString>
 80086e2:	e00a      	b.n	80086fa <USBD_USR_InterfaceStrDescriptor+0x42>
  }
  else
  {
    USBD_GetString ((uint8_t*)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80086e4:	f643 70e4 	movw	r0, #16356	; 0x3fe4
 80086e8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80086ec:	f241 216c 	movw	r1, #4716	; 0x126c
 80086f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80086f4:	9a00      	ldr	r2, [sp, #0]
 80086f6:	f001 f95b 	bl	80099b0 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80086fa:	f241 236c 	movw	r3, #4716	; 0x126c
 80086fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8008702:	4618      	mov	r0, r3
 8008704:	b003      	add	sp, #12
 8008706:	f85d fb04 	ldr.w	pc, [sp], #4
 800870a:	bf00      	nop

0800870c <USB_OTG_BSP_ConfigVBUS>:
#include "usb_bsp.h"
#include "usbd_conf.h"
#include "stm32f4xx_conf.h"


void USB_OTG_BSP_ConfigVBUS(USB_OTG_CORE_HANDLE *pdev) {
 800870c:	b082      	sub	sp, #8
 800870e:	9001      	str	r0, [sp, #4]

}
 8008710:	b002      	add	sp, #8
 8008712:	4770      	bx	lr

08008714 <USB_OTG_BSP_DriveVBUS>:

void USB_OTG_BSP_DriveVBUS(USB_OTG_CORE_HANDLE *pdev,uint8_t state) {
 8008714:	b082      	sub	sp, #8
 8008716:	9001      	str	r0, [sp, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	f88d 3003 	strb.w	r3, [sp, #3]

}
 800871e:	b002      	add	sp, #8
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop

08008724 <USB_OTG_BSP_Init>:
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev)
{
 8008724:	b500      	push	{lr}
 8008726:	b085      	sub	sp, #20
 8008728:	9001      	str	r0, [sp, #4]
#endif


 #ifdef USE_USB_OTG_FS

  RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);
 800872a:	2001      	movs	r0, #1
 800872c:	2101      	movs	r1, #1
 800872e:	f000 fa93 	bl	8008c58 <RCC_AHB1PeriphClockCmd>

  /* Configure SOF VBUS ID DM DP Pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8  |
 8008732:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8008736:	9302      	str	r3, [sp, #8]
    GPIO_Pin_9  |
      GPIO_Pin_11 |
        GPIO_Pin_12;

  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8008738:	2303      	movs	r3, #3
 800873a:	f88d 300d 	strb.w	r3, [sp, #13]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800873e:	2302      	movs	r3, #2
 8008740:	f88d 300c 	strb.w	r3, [sp, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008744:	2300      	movs	r3, #0
 8008746:	f88d 300e 	strb.w	r3, [sp, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800874a:	2300      	movs	r3, #0
 800874c:	f88d 300f 	strb.w	r3, [sp, #15]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8008750:	ab02      	add	r3, sp, #8
 8008752:	2000      	movs	r0, #0
 8008754:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008758:	4619      	mov	r1, r3
 800875a:	f000 fcaf 	bl	80090bc <GPIO_Init>

  GPIO_PinAFConfig(GPIOA,GPIO_PinSource8,GPIO_AF_OTG1_FS) ;
 800875e:	2000      	movs	r0, #0
 8008760:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008764:	2108      	movs	r1, #8
 8008766:	220a      	movs	r2, #10
 8008768:	f000 fd48 	bl	80091fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_OTG1_FS) ;
 800876c:	2000      	movs	r0, #0
 800876e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008772:	2109      	movs	r1, #9
 8008774:	220a      	movs	r2, #10
 8008776:	f000 fd41 	bl	80091fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource11,GPIO_AF_OTG1_FS) ;
 800877a:	2000      	movs	r0, #0
 800877c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008780:	210b      	movs	r1, #11
 8008782:	220a      	movs	r2, #10
 8008784:	f000 fd3a 	bl	80091fc <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource12,GPIO_AF_OTG1_FS) ;
 8008788:	2000      	movs	r0, #0
 800878a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800878e:	210c      	movs	r1, #12
 8008790:	220a      	movs	r2, #10
 8008792:	f000 fd33 	bl	80091fc <GPIO_PinAFConfig>

  /* this for ID line debug */


  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10;
 8008796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879a:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800879c:	2301      	movs	r3, #1
 800879e:	f88d 300e 	strb.w	r3, [sp, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80087a2:	2301      	movs	r3, #1
 80087a4:	f88d 300f 	strb.w	r3, [sp, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80087a8:	2303      	movs	r3, #3
 80087aa:	f88d 300d 	strb.w	r3, [sp, #13]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80087ae:	ab02      	add	r3, sp, #8
 80087b0:	2000      	movs	r0, #0
 80087b2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80087b6:	4619      	mov	r1, r3
 80087b8:	f000 fc80 	bl	80090bc <GPIO_Init>
  GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_OTG1_FS) ;
 80087bc:	2000      	movs	r0, #0
 80087be:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80087c2:	210a      	movs	r1, #10
 80087c4:	220a      	movs	r2, #10
 80087c6:	f000 fd19 	bl	80091fc <GPIO_PinAFConfig>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80087ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80087ce:	2101      	movs	r1, #1
 80087d0:	f000 fa7a 	bl	8008cc8 <RCC_APB2PeriphClockCmd>
  RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE) ;
 80087d4:	2080      	movs	r0, #128	; 0x80
 80087d6:	2101      	movs	r1, #1
 80087d8:	f000 fa4c 	bl	8008c74 <RCC_AHB2PeriphClockCmd>

 #endif //USB_OTG_HS


  /* enable the PWR clock */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 80087dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80087e0:	2101      	movs	r1, #1
 80087e2:	f000 faa9 	bl	8008d38 <RCC_APB1PeriphResetCmd>
  NVIC_Init(&NVIC_InitStructure);

  EXTI_ClearITPendingBit(EXTI_Line20);
#endif

  EXTI_ClearITPendingBit(EXTI_Line0);
 80087e6:	2001      	movs	r0, #1
 80087e8:	f000 fbce 	bl	8008f88 <EXTI_ClearITPendingBit>
}
 80087ec:	b005      	add	sp, #20
 80087ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80087f2:	bf00      	nop

080087f4 <USB_OTG_BSP_EnableInterrupt>:
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev)
{
 80087f4:	b500      	push	{lr}
 80087f6:	b085      	sub	sp, #20
 80087f8:	9001      	str	r0, [sp, #4]
  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 80087fa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80087fe:	f000 f84b 	bl	8008898 <NVIC_PriorityGroupConfig>
#ifdef USE_USB_OTG_HS
  NVIC_InitStructure.NVIC_IRQChannel = OTG_HS_IRQn;
#else
  NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;
 8008802:	2343      	movs	r3, #67	; 0x43
 8008804:	f88d 300c 	strb.w	r3, [sp, #12]
#endif
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8008808:	2301      	movs	r3, #1
 800880a:	f88d 300d 	strb.w	r3, [sp, #13]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 800880e:	2303      	movs	r3, #3
 8008810:	f88d 300e 	strb.w	r3, [sp, #14]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8008814:	2301      	movs	r3, #1
 8008816:	f88d 300f 	strb.w	r3, [sp, #15]
  NVIC_Init(&NVIC_InitStructure);
 800881a:	ab03      	add	r3, sp, #12
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f845 	bl	80088ac <NVIC_Init>
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);
#endif
}
 8008822:	b005      	add	sp, #20
 8008824:	f85d fb04 	ldr.w	pc, [sp], #4

08008828 <USB_OTG_BSP_uDelay>:
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec)
{
 8008828:	b084      	sub	sp, #16
 800882a:	9001      	str	r0, [sp, #4]
  uint32_t count = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	9303      	str	r3, [sp, #12]
  const uint32_t utime = (120 * usec / 7);
 8008830:	9a01      	ldr	r2, [sp, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	461a      	mov	r2, r3
 800883c:	f644 1325 	movw	r3, #18725	; 0x4925
 8008840:	f2c2 4392 	movt	r3, #9362	; 0x2492
 8008844:	fba3 1302 	umull	r1, r3, r3, r2
 8008848:	1ad2      	subs	r2, r2, r3
 800884a:	0852      	lsrs	r2, r2, #1
 800884c:	4413      	add	r3, r2
 800884e:	089b      	lsrs	r3, r3, #2
 8008850:	9302      	str	r3, [sp, #8]
  do
  {
    if ( ++count > utime )
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	9a03      	ldr	r2, [sp, #12]
 800885a:	9b02      	ldr	r3, [sp, #8]
 800885c:	429a      	cmp	r2, r3
 800885e:	d900      	bls.n	8008862 <USB_OTG_BSP_uDelay+0x3a>
    {
      return ;
 8008860:	e000      	b.n	8008864 <USB_OTG_BSP_uDelay+0x3c>
    }
  }
  while (1);
 8008862:	e7f6      	b.n	8008852 <USB_OTG_BSP_uDelay+0x2a>
}
 8008864:	b004      	add	sp, #16
 8008866:	4770      	bx	lr

08008868 <USB_OTG_BSP_mDelay>:
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec)
{
 8008868:	b500      	push	{lr}
 800886a:	b083      	sub	sp, #12
 800886c:	9001      	str	r0, [sp, #4]
  USB_OTG_BSP_uDelay(msec * 1000);
 800886e:	9b01      	ldr	r3, [sp, #4]
 8008870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008874:	fb02 f303 	mul.w	r3, r2, r3
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff ffd5 	bl	8008828 <USB_OTG_BSP_uDelay>
}
 800887e:	b003      	add	sp, #12
 8008880:	f85d fb04 	ldr.w	pc, [sp], #4
 8008884:	0801464c 	.word	0x0801464c
 8008888:	20000000 	.word	0x20000000
 800888c:	20000a1c 	.word	0x20000a1c
 8008890:	20000a1c 	.word	0x20000a1c
 8008894:	20001b30 	.word	0x20001b30

08008898 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8008898:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800889c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80088a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80088a4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80088a8:	60d8      	str	r0, [r3, #12]
 80088aa:	4770      	bx	lr

080088ac <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80088ac:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80088ae:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80088b0:	b97b      	cbnz	r3, 80088d2 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80088b2:	7802      	ldrb	r2, [r0, #0]
 80088b4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80088b8:	0951      	lsrs	r1, r2, #5
 80088ba:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80088bc:	f002 021f 	and.w	r2, r2, #31
 80088c0:	2001      	movs	r0, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80088c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80088c6:	fa00 f202 	lsl.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80088ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80088ce:	bc70      	pop	{r4, r5, r6}
 80088d0:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80088d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80088d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80088da:	7846      	ldrb	r6, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80088dc:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80088de:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80088e0:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80088e2:	43d2      	mvns	r2, r2
 80088e4:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80088e8:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;
 80088ec:	250f      	movs	r5, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80088ee:	b2c9      	uxtb	r1, r1
 80088f0:	fa06 f101 	lsl.w	r1, r6, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80088f4:	fa45 f202 	asr.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80088f8:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80088fa:	4022      	ands	r2, r4
 80088fc:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80088fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8008902:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8008906:	0112      	lsls	r2, r2, #4
 8008908:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800890a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800890e:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8008910:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8008914:	f002 011f 	and.w	r1, r2, #31
 8008918:	2001      	movs	r0, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800891a:	0952      	lsrs	r2, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800891c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8008920:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8008924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8008928:	bc70      	pop	{r4, r5, r6}
 800892a:	4770      	bx	lr

0800892c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800892c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8008930:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8008934:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8008938:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800893c:	4308      	orrs	r0, r1
 800893e:	6098      	str	r0, [r3, #8]
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8008944:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8008948:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800894c:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800894e:	b919      	cbnz	r1, 8008958 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8008950:	ea22 0000 	bic.w	r0, r2, r0
 8008954:	6118      	str	r0, [r3, #16]
 8008956:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8008958:	4310      	orrs	r0, r2
 800895a:	6118      	str	r0, [r3, #16]
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop

08008960 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8008960:	f24e 0310 	movw	r3, #57360	; 0xe010
 8008964:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8008968:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	bf0c      	ite	eq
 800896e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8008972:	f022 0204 	bicne.w	r2, r2, #4
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800897c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008980:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008984:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008986:	6819      	ldr	r1, [r3, #0]
 8008988:	f041 0101 	orr.w	r1, r1, #1
 800898c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800898e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008990:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008992:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008996:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800899a:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800899e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80089a2:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80089a4:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80089a6:	6819      	ldr	r1, [r3, #0]
 80089a8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80089ac:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80089ae:	60da      	str	r2, [r3, #12]
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop

080089b4 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80089b4:	f643 0302 	movw	r3, #14338	; 0x3802
 80089b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80089c0:	7018      	strb	r0, [r3, #0]
 80089c2:	4770      	bx	lr

080089c4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80089c4:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 80089c6:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80089c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 80089cc:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80089ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80089d2:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80089d4:	039b      	lsls	r3, r3, #14
 80089d6:	d40f      	bmi.n	80089f8 <RCC_WaitForHSEStartUp+0x34>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	3301      	adds	r3, #1
 80089dc:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80089e4:	d1f5      	bne.n	80089d2 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80089e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80089ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089ee:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 80089f0:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 80089f4:	b002      	add	sp, #8
 80089f6:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 80089f8:	9b01      	ldr	r3, [sp, #4]
 80089fa:	3301      	adds	r3, #1
 80089fc:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	e7f1      	b.n	80089e6 <RCC_WaitForHSEStartUp+0x22>
 8008a02:	bf00      	nop

08008a04 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8008a04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a0c:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8008a0e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8008a12:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8008a16:	6018      	str	r0, [r3, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop

08008a1c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008a22:	6018      	str	r0, [r3, #0]
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop

08008a28 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008a28:	f643 0370 	movw	r3, #14448	; 0x3870
 8008a2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a30:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8008a32:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008a34:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8008a36:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8008a38:	d005      	beq.n	8008a46 <RCC_LSEConfig+0x1e>
 8008a3a:	2804      	cmp	r0, #4
 8008a3c:	d102      	bne.n	8008a44 <RCC_LSEConfig+0x1c>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8008a3e:	2205      	movs	r2, #5
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	4770      	bx	lr
 8008a44:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8008a46:	7018      	strb	r0, [r3, #0]
      break;
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop

08008a4c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8008a4c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8008a50:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008a54:	6018      	str	r0, [r3, #0]
 8008a56:	4770      	bx	lr

08008a58 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8008a58:	b410      	push	{r4}
 8008a5a:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8008a5c:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8008a60:	085b      	lsrs	r3, r3, #1
 8008a62:	4301      	orrs	r1, r0
 8008a64:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8008a68:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8008a72:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8008a76:	6063      	str	r3, [r4, #4]
                 (PLLQ << 24);
}
 8008a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop

08008a80 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8008a80:	2360      	movs	r3, #96	; 0x60
 8008a82:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008a86:	6018      	str	r0, [r3, #0]
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop

08008a8c <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8008a8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008a90:	0709      	lsls	r1, r1, #28
 8008a92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a96:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8008a9a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8008a9e:	4770      	bx	lr

08008aa0 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8008aa0:	2368      	movs	r3, #104	; 0x68
 8008aa2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008aa6:	6018      	str	r0, [r3, #0]
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop

08008aac <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8008aac:	234c      	movs	r3, #76	; 0x4c
 8008aae:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008ab2:	6018      	str	r0, [r3, #0]
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8008ab8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008abc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ac0:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8008ac2:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8008ac6:	4311      	orrs	r1, r2
 8008ac8:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8008aca:	6098      	str	r0, [r3, #8]
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop

08008ad0 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8008ad0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ad4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ad8:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8008ada:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8008ade:	4311      	orrs	r1, r2
 8008ae0:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8008ae2:	6098      	str	r0, [r3, #8]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop

08008ae8 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8008ae8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008aec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008af0:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8008af2:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8008af6:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008af8:	6098      	str	r0, [r3, #8]
 8008afa:	4770      	bx	lr

08008afc <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8008afc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b04:	6898      	ldr	r0, [r3, #8]
}
 8008b06:	f000 000c 	and.w	r0, r0, #12
 8008b0a:	4770      	bx	lr

08008b0c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8008b0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b14:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8008b16:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8008b1a:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008b1c:	6098      	str	r0, [r3, #8]
 8008b1e:	4770      	bx	lr

08008b20 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008b20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b28:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8008b2a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8008b2e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008b30:	6098      	str	r0, [r3, #8]
 8008b32:	4770      	bx	lr

08008b34 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8008b34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b3c:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8008b3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8008b42:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8008b46:	6098      	str	r0, [r3, #8]
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop

08008b4c <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008b4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8008b54:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8008b5c:	2a04      	cmp	r2, #4
 8008b5e:	d024      	beq.n	8008baa <RCC_GetClocksFreq+0x5e>
 8008b60:	2a08      	cmp	r2, #8
 8008b62:	d028      	beq.n	8008bb6 <RCC_GetClocksFreq+0x6a>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008b64:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8008b68:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8008b6c:	6001      	str	r1, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8008b6e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008b72:	f2c4 0202 	movt	r2, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8008b76:	f240 03a4 	movw	r3, #164	; 0xa4
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8008b7a:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8008b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 8008b80:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8008b84:	5d1c      	ldrb	r4, [r3, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8008b86:	40e1      	lsrs	r1, r4
 8008b88:	6041      	str	r1, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8008b8a:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8008b8c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8008b90:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008b92:	fa21 f404 	lsr.w	r4, r1, r4
 8008b96:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8008b98:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8008b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8008b9e:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8008ba2:	5c9b      	ldrb	r3, [r3, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8008ba4:	40d9      	lsrs	r1, r3
 8008ba6:	60c1      	str	r1, [r0, #12]
}
 8008ba8:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8008baa:	f647 0140 	movw	r1, #30784	; 0x7840
 8008bae:	f2c0 117d 	movt	r1, #381	; 0x17d
 8008bb2:	6001      	str	r1, [r0, #0]
      break;
 8008bb4:	e7db      	b.n	8008b6e <RCC_GetClocksFreq+0x22>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8008bb6:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bb8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 8008bba:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8008bbe:	685c      	ldr	r4, [r3, #4]
 8008bc0:	bf15      	itete	ne
 8008bc2:	f647 0340 	movwne	r3, #30784	; 0x7840
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8008bc6:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8008bca:	f2c0 137d 	movtne	r3, #381	; 0x17d
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8008bce:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8008bd6:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8008bda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008bde:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8008be2:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008bec:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8008bee:	fb01 f104 	mul.w	r1, r1, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8008bf2:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8008bf4:	fbb1 f1f3 	udiv	r1, r1, r3
 8008bf8:	6001      	str	r1, [r0, #0]
      break;
 8008bfa:	e7b8      	b.n	8008b6e <RCC_GetClocksFreq+0x22>

08008bfc <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8008bfc:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8008c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c04:	d10c      	bne.n	8008c20 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8008c06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8008c0e:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8008c12:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8008c14:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8008c18:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8008c1c:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8008c1e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8008c20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c28:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008c2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c2e:	4310      	orrs	r0, r2
 8008c30:	6718      	str	r0, [r3, #112]	; 0x70
 8008c32:	4770      	bx	lr

08008c34 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8008c34:	f640 633c 	movw	r3, #3644	; 0xe3c
 8008c38:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008c3c:	6018      	str	r0, [r3, #0]
 8008c3e:	4770      	bx	lr

08008c40 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8008c40:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8008c44:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008c48:	6018      	str	r0, [r3, #0]
 8008c4a:	4770      	bx	lr

08008c4c <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8008c4c:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8008c50:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8008c54:	6018      	str	r0, [r3, #0]
 8008c56:	4770      	bx	lr

08008c58 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8008c58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008c62:	b919      	cbnz	r1, 8008c6c <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8008c64:	ea22 0000 	bic.w	r0, r2, r0
 8008c68:	6318      	str	r0, [r3, #48]	; 0x30
 8008c6a:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8008c6c:	4310      	orrs	r0, r2
 8008c6e:	6318      	str	r0, [r3, #48]	; 0x30
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop

08008c74 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8008c74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008c7e:	b919      	cbnz	r1, 8008c88 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8008c80:	ea22 0000 	bic.w	r0, r2, r0
 8008c84:	6358      	str	r0, [r3, #52]	; 0x34
 8008c86:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8008c88:	4310      	orrs	r0, r2
 8008c8a:	6358      	str	r0, [r3, #52]	; 0x34
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop

08008c90 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8008c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008c9a:	b919      	cbnz	r1, 8008ca4 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8008c9c:	ea22 0000 	bic.w	r0, r2, r0
 8008ca0:	6398      	str	r0, [r3, #56]	; 0x38
 8008ca2:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8008ca4:	4310      	orrs	r0, r2
 8008ca6:	6398      	str	r0, [r3, #56]	; 0x38
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop

08008cac <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8008cac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008cb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008cb6:	b919      	cbnz	r1, 8008cc0 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8008cb8:	ea22 0000 	bic.w	r0, r2, r0
 8008cbc:	6418      	str	r0, [r3, #64]	; 0x40
 8008cbe:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8008cc0:	4310      	orrs	r0, r2
 8008cc2:	6418      	str	r0, [r3, #64]	; 0x40
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop

08008cc8 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8008cc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ccc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008cd2:	b919      	cbnz	r1, 8008cdc <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8008cd4:	ea22 0000 	bic.w	r0, r2, r0
 8008cd8:	6458      	str	r0, [r3, #68]	; 0x44
 8008cda:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8008cdc:	4310      	orrs	r0, r2
 8008cde:	6458      	str	r0, [r3, #68]	; 0x44
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop

08008ce4 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8008ce4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008ce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cec:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008cee:	b919      	cbnz	r1, 8008cf8 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8008cf0:	ea22 0000 	bic.w	r0, r2, r0
 8008cf4:	6118      	str	r0, [r3, #16]
 8008cf6:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8008cf8:	4310      	orrs	r0, r2
 8008cfa:	6118      	str	r0, [r3, #16]
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop

08008d00 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8008d00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d08:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008d0a:	b919      	cbnz	r1, 8008d14 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8008d0c:	ea22 0000 	bic.w	r0, r2, r0
 8008d10:	6158      	str	r0, [r3, #20]
 8008d12:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8008d14:	4310      	orrs	r0, r2
 8008d16:	6158      	str	r0, [r3, #20]
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop

08008d1c <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8008d1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d24:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008d26:	b919      	cbnz	r1, 8008d30 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8008d28:	ea22 0000 	bic.w	r0, r2, r0
 8008d2c:	6198      	str	r0, [r3, #24]
 8008d2e:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8008d30:	4310      	orrs	r0, r2
 8008d32:	6198      	str	r0, [r3, #24]
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop

08008d38 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8008d38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d40:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d42:	b919      	cbnz	r1, 8008d4c <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8008d44:	ea22 0000 	bic.w	r0, r2, r0
 8008d48:	6218      	str	r0, [r3, #32]
 8008d4a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8008d4c:	4310      	orrs	r0, r2
 8008d4e:	6218      	str	r0, [r3, #32]
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop

08008d54 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8008d54:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d5e:	b919      	cbnz	r1, 8008d68 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8008d60:	ea22 0000 	bic.w	r0, r2, r0
 8008d64:	6258      	str	r0, [r3, #36]	; 0x24
 8008d66:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8008d68:	4310      	orrs	r0, r2
 8008d6a:	6258      	str	r0, [r3, #36]	; 0x24
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop

08008d70 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8008d70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d7a:	b919      	cbnz	r1, 8008d84 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8008d7c:	ea22 0000 	bic.w	r0, r2, r0
 8008d80:	6518      	str	r0, [r3, #80]	; 0x50
 8008d82:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8008d84:	4310      	orrs	r0, r2
 8008d86:	6518      	str	r0, [r3, #80]	; 0x50
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop

08008d8c <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8008d8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008d90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008d96:	b919      	cbnz	r1, 8008da0 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8008d98:	ea22 0000 	bic.w	r0, r2, r0
 8008d9c:	6558      	str	r0, [r3, #84]	; 0x54
 8008d9e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8008da0:	4310      	orrs	r0, r2
 8008da2:	6558      	str	r0, [r3, #84]	; 0x54
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop

08008da8 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8008da8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008dac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008db2:	b919      	cbnz	r1, 8008dbc <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8008db4:	ea22 0000 	bic.w	r0, r2, r0
 8008db8:	6598      	str	r0, [r3, #88]	; 0x58
 8008dba:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8008dbc:	4310      	orrs	r0, r2
 8008dbe:	6598      	str	r0, [r3, #88]	; 0x58
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop

08008dc4 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8008dc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008dc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008dce:	b919      	cbnz	r1, 8008dd8 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8008dd0:	ea22 0000 	bic.w	r0, r2, r0
 8008dd4:	6618      	str	r0, [r3, #96]	; 0x60
 8008dd6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8008dd8:	4310      	orrs	r0, r2
 8008dda:	6618      	str	r0, [r3, #96]	; 0x60
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop

08008de0 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8008de0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008de4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008de8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008dea:	b919      	cbnz	r1, 8008df4 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8008dec:	ea22 0000 	bic.w	r0, r2, r0
 8008df0:	6658      	str	r0, [r3, #100]	; 0x64
 8008df2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8008df4:	4310      	orrs	r0, r2
 8008df6:	6658      	str	r0, [r3, #100]	; 0x64
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop

08008dfc <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8008dfc:	f643 030d 	movw	r3, #14349	; 0x380d
 8008e00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e04:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008e06:	b919      	cbnz	r1, 8008e10 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8008e08:	ea22 0000 	bic.w	r0, r2, r0
 8008e0c:	7018      	strb	r0, [r3, #0]
 8008e0e:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8008e10:	4310      	orrs	r0, r2
 8008e12:	7018      	strb	r0, [r3, #0]
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop

08008e18 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8008e18:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d00e      	beq.n	8008e3c <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8008e1e:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8008e20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e24:	f2c4 0302 	movt	r3, #16386	; 0x4002
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008e28:	f000 001f 	and.w	r0, r0, #31
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8008e2c:	bf0c      	ite	eq
 8008e2e:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8008e30:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008e32:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8008e36:	f000 0001 	and.w	r0, r0, #1
 8008e3a:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8008e3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008e44:	f000 001f 	and.w	r0, r0, #31

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8008e48:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8008e4a:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8008e4e:	f000 0001 	and.w	r0, r0, #1
 8008e52:	4770      	bx	lr

08008e54 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8008e54:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008e5e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008e62:	675a      	str	r2, [r3, #116]	; 0x74
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop

08008e68 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8008e68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008e6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8008e74:	bf0c      	ite	eq
 8008e76:	2000      	moveq	r0, #0
 8008e78:	2001      	movne	r0, #1
 8008e7a:	4770      	bx	lr

08008e7c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8008e7c:	f643 030e 	movw	r3, #14350	; 0x380e
 8008e80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e84:	7018      	strb	r0, [r3, #0]
 8008e86:	4770      	bx	lr

08008e88 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8008e88:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 8008e90:	f64f 71ff 	movw	r1, #65535	; 0xffff
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8008e94:	2200      	movs	r2, #0
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 8008e96:	f2c0 017f 	movt	r1, #127	; 0x7f
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8008e9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8008e9c:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8008e9e:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8008ea0:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8008ea2:	6159      	str	r1, [r3, #20]
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop

08008ea8 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8008ea8:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8008eaa:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8008eac:	b343      	cbz	r3, 8008f00 <EXTI_Init+0x58>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8008eae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008eb2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008eb6:	6801      	ldr	r1, [r0, #0]
 8008eb8:	681e      	ldr	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8008eba:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8008ebc:	7945      	ldrb	r5, [r0, #5]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8008ebe:	43cc      	mvns	r4, r1
 8008ec0:	4026      	ands	r6, r4
 8008ec2:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8008ec4:	685e      	ldr	r6, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8008ec6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008eca:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8008ece:	4034      	ands	r4, r6
 8008ed0:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8008ed2:	6814      	ldr	r4, [r2, #0]
 8008ed4:	4321      	orrs	r1, r4
 8008ed6:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8008ed8:	6802      	ldr	r2, [r0, #0]
 8008eda:	6898      	ldr	r0, [r3, #8]
 8008edc:	43d1      	mvns	r1, r2
 8008ede:	4008      	ands	r0, r1
 8008ee0:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8008ee2:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8008ee4:	2d10      	cmp	r5, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8008ee6:	ea01 0100 	and.w	r1, r1, r0
 8008eea:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8008eec:	d014      	beq.n	8008f18 <EXTI_Init+0x70>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8008eee:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008ef2:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	602a      	str	r2, [r5, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8008efc:	bc70      	pop	{r4, r5, r6}
 8008efe:	4770      	bx	lr
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8008f00:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8008f02:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8008f04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f08:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8008f0c:	bc70      	pop	{r4, r5, r6}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	ea22 0201 	bic.w	r2, r2, r1
 8008f14:	601a      	str	r2, [r3, #0]
  }
}
 8008f16:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8008f18:	6899      	ldr	r1, [r3, #8]
 8008f1a:	4311      	orrs	r1, r2
 8008f1c:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8008f1e:	68d9      	ldr	r1, [r3, #12]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8008f24:	bc70      	pop	{r4, r5, r6}
 8008f26:	4770      	bx	lr

08008f28 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8008f28:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8008f2a:	220c      	movs	r2, #12
 8008f2c:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8008f2e:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8008f30:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8008f32:	7183      	strb	r3, [r0, #6]
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop

08008f38 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8008f38:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008f40:	691a      	ldr	r2, [r3, #16]
 8008f42:	4310      	orrs	r0, r2
 8008f44:	6118      	str	r0, [r3, #16]
 8008f46:	4770      	bx	lr

08008f48 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8008f48:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8008f54:	bf0c      	ite	eq
 8008f56:	2000      	moveq	r0, #0
 8008f58:	2001      	movne	r0, #1
 8008f5a:	4770      	bx	lr

08008f5c <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8008f5c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008f64:	6158      	str	r0, [r3, #20]
 8008f66:	4770      	bx	lr

08008f68 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8008f68:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f6c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008f70:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	4003      	ands	r3, r0
 8008f76:	d004      	beq.n	8008f82 <EXTI_GetITStatus+0x1a>
 8008f78:	4210      	tst	r0, r2
  {
    bitstatus = SET;
 8008f7a:	bf0c      	ite	eq
 8008f7c:	2000      	moveq	r0, #0
 8008f7e:	2001      	movne	r0, #1
 8008f80:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8008f82:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop

08008f88 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8008f88:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008f90:	6158      	str	r0, [r3, #20]
 8008f92:	4770      	bx	lr

08008f94 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8008f94:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8008f96:	2300      	movs	r3, #0
 8008f98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f9c:	4298      	cmp	r0, r3
 8008f9e:	d03c      	beq.n	800901a <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8008fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fa8:	4298      	cmp	r0, r3
 8008faa:	d040      	beq.n	800902e <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8008fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fb4:	4298      	cmp	r0, r3
 8008fb6:	d044      	beq.n	8009042 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8008fb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008fbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fc0:	4298      	cmp	r0, r3
 8008fc2:	d048      	beq.n	8009056 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8008fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fcc:	4298      	cmp	r0, r3
 8008fce:	d04c      	beq.n	800906a <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8008fd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008fd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fd8:	4298      	cmp	r0, r3
 8008fda:	d050      	beq.n	800907e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8008fdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008fe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fe4:	4298      	cmp	r0, r3
 8008fe6:	d054      	beq.n	8009092 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8008fe8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ff0:	4298      	cmp	r0, r3
 8008ff2:	d058      	beq.n	80090a6 <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8008ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ff8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ffc:	4298      	cmp	r0, r3
 8008ffe:	d000      	beq.n	8009002 <GPIO_DeInit+0x6e>
 8009000:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8009002:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009006:	2101      	movs	r1, #1
 8009008:	f7ff fe6c 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800900c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009010:	2100      	movs	r1, #0
    }
  }
}
 8009012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8009016:	f7ff be65 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800901a:	2001      	movs	r0, #1
 800901c:	4601      	mov	r1, r0
 800901e:	f7ff fe61 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8009022:	2001      	movs	r0, #1
 8009024:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8009026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800902a:	f7ff be5b 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800902e:	2002      	movs	r0, #2
 8009030:	2101      	movs	r1, #1
 8009032:	f7ff fe57 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8009036:	2002      	movs	r0, #2
 8009038:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800903a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800903e:	f7ff be51 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8009042:	2004      	movs	r0, #4
 8009044:	2101      	movs	r1, #1
 8009046:	f7ff fe4d 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800904a:	2004      	movs	r0, #4
 800904c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800904e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8009052:	f7ff be47 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8009056:	2008      	movs	r0, #8
 8009058:	2101      	movs	r1, #1
 800905a:	f7ff fe43 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800905e:	2008      	movs	r0, #8
 8009060:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8009062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8009066:	f7ff be3d 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800906a:	2010      	movs	r0, #16
 800906c:	2101      	movs	r1, #1
 800906e:	f7ff fe39 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8009072:	2010      	movs	r0, #16
 8009074:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8009076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800907a:	f7ff be33 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800907e:	2020      	movs	r0, #32
 8009080:	2101      	movs	r1, #1
 8009082:	f7ff fe2f 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8009086:	2020      	movs	r0, #32
 8009088:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800908a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800908e:	f7ff be29 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8009092:	2040      	movs	r0, #64	; 0x40
 8009094:	2101      	movs	r1, #1
 8009096:	f7ff fe25 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800909a:	2040      	movs	r0, #64	; 0x40
 800909c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800909e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80090a2:	f7ff be1f 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80090a6:	2080      	movs	r0, #128	; 0x80
 80090a8:	2101      	movs	r1, #1
 80090aa:	f7ff fe1b 	bl	8008ce4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80090ae:	2080      	movs	r0, #128	; 0x80
 80090b0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 80090b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80090b6:	f7ff be15 	b.w	8008ce4 <RCC_AHB1PeriphResetCmd>
 80090ba:	bf00      	nop

080090bc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80090bc:	2200      	movs	r2, #0
 80090be:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80090c2:	4613      	mov	r3, r2
 80090c4:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80090c6:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80090c8:	f04f 0803 	mov.w	r8, #3
 80090cc:	e004      	b.n	80090d8 <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80090ce:	3301      	adds	r3, #1
 80090d0:	2b10      	cmp	r3, #16
 80090d2:	f102 0202 	add.w	r2, r2, #2
 80090d6:	d02e      	beq.n	8009136 <GPIO_Init+0x7a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80090d8:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80090dc:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 80090e0:	42a5      	cmp	r5, r4
 80090e2:	d1f4      	bne.n	80090ce <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80090e4:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80090e8:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80090ec:	fa08 f402 	lsl.w	r4, r8, r2
 80090f0:	43e4      	mvns	r4, r4
 80090f2:	ea04 0909 	and.w	r9, r4, r9
 80090f6:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80090fa:	f8d0 9000 	ldr.w	r9, [r0]
 80090fe:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8009102:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009106:	fa5f fc8c 	uxtb.w	ip, ip
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800910a:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800910e:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8009112:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8009116:	d911      	bls.n	800913c <GPIO_Init+0x80>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8009118:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800911a:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800911e:	402c      	ands	r4, r5
 8009120:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8009122:	68c5      	ldr	r5, [r0, #12]
 8009124:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009128:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800912a:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800912c:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800912e:	60c4      	str	r4, [r0, #12]
 8009130:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009134:	d1d0      	bne.n	80090d8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8009136:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800913a:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800913c:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8009140:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8009144:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8009148:	ea04 0a0a 	and.w	sl, r4, sl
 800914c:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8009150:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8009154:	fa09 f902 	lsl.w	r9, r9, r2
 8009158:	ea49 090a 	orr.w	r9, r9, sl
 800915c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8009160:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009164:	ea29 0505 	bic.w	r5, r9, r5
 8009168:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800916a:	6845      	ldr	r5, [r0, #4]
 800916c:	fa0c fc03 	lsl.w	ip, ip, r3
 8009170:	fa1f fc8c 	uxth.w	ip, ip
 8009174:	ea4c 0505 	orr.w	r5, ip, r5
 8009178:	6045      	str	r5, [r0, #4]
 800917a:	e7cd      	b.n	8009118 <GPIO_Init+0x5c>

0800917c <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800917c:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800917e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009182:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8009184:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8009186:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8009188:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800918a:	71c3      	strb	r3, [r0, #7]
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop

08009190 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009190:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8009192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009196:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8009198:	9b01      	ldr	r3, [sp, #4]
 800919a:	430b      	orrs	r3, r1
 800919c:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80091a2:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80091a8:	69c3      	ldr	r3, [r0, #28]
 80091aa:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80091ac:	69c3      	ldr	r3, [r0, #28]
 80091ae:	9301      	str	r3, [sp, #4]
}
 80091b0:	b002      	add	sp, #8
 80091b2:	4770      	bx	lr

080091b4 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80091b4:	6903      	ldr	r3, [r0, #16]
 80091b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80091b8:	bf0c      	ite	eq
 80091ba:	2000      	moveq	r0, #0
 80091bc:	2001      	movne	r0, #1
 80091be:	4770      	bx	lr

080091c0 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80091c0:	6900      	ldr	r0, [r0, #16]
}
 80091c2:	b280      	uxth	r0, r0
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop

080091c8 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80091c8:	6943      	ldr	r3, [r0, #20]
 80091ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80091cc:	bf0c      	ite	eq
 80091ce:	2000      	moveq	r0, #0
 80091d0:	2001      	movne	r0, #1
 80091d2:	4770      	bx	lr

080091d4 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80091d4:	6940      	ldr	r0, [r0, #20]
}
 80091d6:	b280      	uxth	r0, r0
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop

080091dc <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80091dc:	8301      	strh	r1, [r0, #24]
 80091de:	4770      	bx	lr

080091e0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80091e0:	8341      	strh	r1, [r0, #26]
 80091e2:	4770      	bx	lr

080091e4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80091e4:	b90a      	cbnz	r2, 80091ea <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80091e6:	8341      	strh	r1, [r0, #26]
 80091e8:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80091ea:	8301      	strh	r1, [r0, #24]
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop

080091f0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80091f0:	6141      	str	r1, [r0, #20]
 80091f2:	4770      	bx	lr

080091f4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80091f4:	6943      	ldr	r3, [r0, #20]
 80091f6:	4059      	eors	r1, r3
 80091f8:	6141      	str	r1, [r0, #20]
 80091fa:	4770      	bx	lr

080091fc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80091fc:	08cb      	lsrs	r3, r1, #3
 80091fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009202:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8009206:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009208:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800920a:	6a04      	ldr	r4, [r0, #32]
 800920c:	230f      	movs	r3, #15
 800920e:	408b      	lsls	r3, r1
 8009210:	ea24 0303 	bic.w	r3, r4, r3
 8009214:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8009216:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8009218:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800921c:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800921e:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8009220:	6203      	str	r3, [r0, #32]
}
 8009222:	4770      	bx	lr

08009224 <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8009224:	b510      	push	{r4, lr}
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8009226:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 800922a:	4604      	mov	r4, r0
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	4798      	blx	r3
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8009230:	2303      	movs	r3, #3
 8009232:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
  return USBD_OK;
}
 8009236:	2000      	movs	r0, #0
 8009238:	bd10      	pop	{r4, pc}
 800923a:	bf00      	nop

0800923c <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 800923c:	b508      	push	{r3, lr}
  
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 800923e:	2204      	movs	r2, #4
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8009240:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
  
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 8009244:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	4798      	blx	r3
  return USBD_OK;
}
 800924c:	2000      	movs	r0, #0
 800924e:	bd08      	pop	{r3, pc}

08009250 <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 8009250:	b508      	push	{r3, lr}
  if(pdev->dev.class_cb->SOF)
 8009252:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	b103      	cbz	r3, 800925c <USBD_SOF+0xc>
  {
    pdev->dev.class_cb->SOF(pdev); 
 800925a:	4798      	blx	r3
  }
  return USBD_OK;
}
 800925c:	2000      	movs	r0, #0
 800925e:	bd08      	pop	{r3, pc}

08009260 <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8009260:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 8009262:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	4798      	blx	r3
  return USBD_OK;
}
 800926a:	2000      	movs	r0, #0
 800926c:	bd08      	pop	{r3, pc}
 800926e:	bf00      	nop

08009270 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 8009270:	b508      	push	{r3, lr}
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 8009272:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	4798      	blx	r3
  return USBD_OK;
}
 800927a:	2000      	movs	r0, #0
 800927c:	bd08      	pop	{r3, pc}
 800927e:	bf00      	nop

08009280 <USBD_Reset>:
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8009280:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8009282:	b510      	push	{r4, lr}
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8009284:	460b      	mov	r3, r1
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8009286:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8009288:	2240      	movs	r2, #64	; 0x40
 800928a:	f001 fae7 	bl	800a85c <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 800928e:	2180      	movs	r1, #128	; 0x80
 8009290:	4620      	mov	r0, r4
 8009292:	2240      	movs	r2, #64	; 0x40
 8009294:	2300      	movs	r3, #0
 8009296:	f001 fae1 	bl	800a85c <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 800929a:	2201      	movs	r2, #1
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 800929c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 80092a0:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 80092a4:	78a0      	ldrb	r0, [r4, #2]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4798      	blx	r3
  
  return USBD_OK;
}
 80092aa:	2000      	movs	r0, #0
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop

080092b0 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80092b0:	b510      	push	{r4, lr}
 80092b2:	b082      	sub	sp, #8
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80092b4:	4669      	mov	r1, sp
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 80092b6:	4604      	mov	r4, r0
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 80092b8:	f000 f93a 	bl	8009530 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 80092bc:	f89d 1000 	ldrb.w	r1, [sp]
 80092c0:	f001 031f 	and.w	r3, r1, #31
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d018      	beq.n	80092fa <USBD_SetupStage+0x4a>
 80092c8:	d310      	bcc.n	80092ec <USBD_SetupStage+0x3c>
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d007      	beq.n	80092de <USBD_SetupStage+0x2e>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
    break;
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 80092ce:	4620      	mov	r0, r4
 80092d0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80092d4:	f001 fb3c 	bl	800a950 <DCD_EP_Stall>
    break;
  }  
  return USBD_OK;
}
 80092d8:	2000      	movs	r0, #0
 80092da:	b002      	add	sp, #8
 80092dc:	bd10      	pop	{r4, pc}
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 80092de:	4620      	mov	r0, r4
 80092e0:	4669      	mov	r1, sp
 80092e2:	f000 faf9 	bl	80098d8 <USBD_StdEPReq>
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;
}
 80092e6:	2000      	movs	r0, #0
 80092e8:	b002      	add	sp, #8
 80092ea:	bd10      	pop	{r4, pc}
  USBD_ParseSetupRequest(pdev , &req);
  
  switch (req.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 80092ec:	4620      	mov	r0, r4
 80092ee:	4669      	mov	r1, sp
 80092f0:	f000 f95a 	bl	80095a8 <USBD_StdDevReq>
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;
}
 80092f4:	2000      	movs	r0, #0
 80092f6:	b002      	add	sp, #8
 80092f8:	bd10      	pop	{r4, pc}
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
    break;
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 80092fa:	4620      	mov	r0, r4
 80092fc:	4669      	mov	r1, sp
 80092fe:	f000 fad1 	bl	80098a4 <USBD_StdItfReq>
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;
}
 8009302:	2000      	movs	r0, #0
 8009304:	b002      	add	sp, #8
 8009306:	bd10      	pop	{r4, pc}

08009308 <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 800930c:	b929      	cbnz	r1, 800931a <USBD_DataInStage+0x12>
  {
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 800930e:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 8009312:	2b02      	cmp	r3, #2
 8009314:	d00c      	beq.n	8009330 <USBD_DataInStage+0x28>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8009316:	2000      	movs	r0, #0
 8009318:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 800931a:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0f8      	beq.n	8009316 <USBD_DataInStage+0xe>
 8009324:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8009328:	2a03      	cmp	r2, #3
 800932a:	d1f4      	bne.n	8009316 <USBD_DataInStage+0xe>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 800932c:	4798      	blx	r3
 800932e:	e7f2      	b.n	8009316 <USBD_DataInStage+0xe>
  if(epnum == 0) 
  {
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
    {
      if(ep->rem_data_len > ep->maxpacket)
 8009330:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
 8009334:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8009338:	429a      	cmp	r2, r3
 800933a:	d910      	bls.n	800935e <USBD_DataInStage+0x56>
      {
        ep->rem_data_len -=  ep->maxpacket;
        if(pdev->cfg.dma_enable == 1)
 800933c:	78c1      	ldrb	r1, [r0, #3]
 800933e:	2901      	cmp	r1, #1
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8009340:	f8d0 1124 	ldr.w	r1, [r0, #292]	; 0x124
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
 8009344:	ebc3 0202 	rsb	r2, r3, r2
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8009348:	bf08      	it	eq
 800934a:	18c9      	addeq	r1, r1, r3
    ep = &pdev->dev.in_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
 800934c:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8009350:	bf08      	it	eq
 8009352:	f8c0 1124 	streq.w	r1, [r0, #292]	; 0x124
        }
        USBD_CtlContinueSendData (pdev, 
 8009356:	b292      	uxth	r2, r2
 8009358:	f000 f8a2 	bl	80094a0 <USBD_CtlContinueSendData>
 800935c:	e7db      	b.n	8009316 <USBD_DataInStage+0xe>
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 800935e:	f8d0 5138 	ldr.w	r5, [r0, #312]	; 0x138
 8009362:	fbb5 f6f3 	udiv	r6, r5, r3
 8009366:	fb03 5616 	mls	r6, r3, r6, r5
 800936a:	b95e      	cbnz	r6, 8009384 <USBD_DataInStage+0x7c>
 800936c:	42ab      	cmp	r3, r5
 800936e:	d809      	bhi.n	8009384 <USBD_DataInStage+0x7c>
           (ep->total_data_len >= ep->maxpacket) &&
 8009370:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 8009374:	429d      	cmp	r5, r3
 8009376:	d205      	bcs.n	8009384 <USBD_DataInStage+0x7c>
             (ep->total_data_len < ep->ctl_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8009378:	4632      	mov	r2, r6
 800937a:	f000 f891 	bl	80094a0 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 800937e:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
 8009382:	e7c8      	b.n	8009316 <USBD_DataInStage+0xe>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8009384:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	b11b      	cbz	r3, 8009394 <USBD_DataInStage+0x8c>
 800938c:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
 8009390:	2a03      	cmp	r2, #3
 8009392:	d003      	beq.n	800939c <USBD_DataInStage+0x94>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
          }          
          USBD_CtlReceiveStatus(pdev);
 8009394:	4620      	mov	r0, r4
 8009396:	f000 f8b3 	bl	8009500 <USBD_CtlReceiveStatus>
 800939a:	e7bc      	b.n	8009316 <USBD_DataInStage+0xe>
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 800939c:	4620      	mov	r0, r4
 800939e:	4798      	blx	r3
 80093a0:	e7f8      	b.n	8009394 <USBD_DataInStage+0x8c>
 80093a2:	bf00      	nop

080093a4 <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 80093a4:	b510      	push	{r4, lr}
 80093a6:	4604      	mov	r4, r0
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 80093a8:	b929      	cbnz	r1, 80093b6 <USBD_DataOutStage+0x12>
  {
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 80093aa:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d00c      	beq.n	80093cc <USBD_DataOutStage+0x28>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80093b2:	2000      	movs	r0, #0
 80093b4:	bd10      	pop	{r4, pc}
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 80093b6:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0f8      	beq.n	80093b2 <USBD_DataOutStage+0xe>
 80093c0:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80093c4:	2a03      	cmp	r2, #3
 80093c6:	d1f4      	bne.n	80093b2 <USBD_DataOutStage+0xe>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 80093c8:	4798      	blx	r3
 80093ca:	e7f2      	b.n	80093b2 <USBD_DataOutStage+0xe>
  if(epnum == 0) 
  {
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
    {
      if(ep->rem_data_len > ep->maxpacket)
 80093cc:	f8d0 238c 	ldr.w	r2, [r0, #908]	; 0x38c
 80093d0:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d912      	bls.n	80093fe <USBD_DataOutStage+0x5a>
      {
        ep->rem_data_len -=  ep->maxpacket;
        
        if(pdev->cfg.dma_enable == 1)
 80093d8:	78c1      	ldrb	r1, [r0, #3]
 80093da:	2901      	cmp	r1, #1
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 80093dc:	f8d0 137c 	ldr.w	r1, [r0, #892]	; 0x37c
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
 80093e0:	ebc3 0202 	rsb	r2, r3, r2
        
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 80093e4:	bf04      	itt	eq
 80093e6:	18c9      	addeq	r1, r1, r3
 80093e8:	f8c0 137c 	streq.w	r1, [r0, #892]	; 0x37c
    ep = &pdev->dev.out_ep[0];
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
    {
      if(ep->rem_data_len > ep->maxpacket)
      {
        ep->rem_data_len -=  ep->maxpacket;
 80093ec:	f8c0 238c 	str.w	r2, [r0, #908]	; 0x38c
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 80093f0:	429a      	cmp	r2, r3
 80093f2:	bf28      	it	cs
 80093f4:	461a      	movcs	r2, r3
        if(pdev->cfg.dma_enable == 1)
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
        }        
        USBD_CtlContinueRx (pdev, 
 80093f6:	b292      	uxth	r2, r2
 80093f8:	f000 f86a 	bl	80094d0 <USBD_CtlContinueRx>
 80093fc:	e7d9      	b.n	80093b2 <USBD_DataOutStage+0xe>
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 80093fe:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	b11b      	cbz	r3, 800940e <USBD_DataOutStage+0x6a>
 8009406:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 800940a:	2a03      	cmp	r2, #3
 800940c:	d003      	beq.n	8009416 <USBD_DataOutStage+0x72>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
        }
        USBD_CtlSendStatus(pdev);
 800940e:	4620      	mov	r0, r4
 8009410:	f000 f866 	bl	80094e0 <USBD_CtlSendStatus>
 8009414:	e7cd      	b.n	80093b2 <USBD_DataOutStage+0xe>
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8009416:	4798      	blx	r3
 8009418:	e7f9      	b.n	800940e <USBD_DataOutStage+0x6a>
 800941a:	bf00      	nop

0800941c <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 800941c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009420:	9d06      	ldr	r5, [sp, #24]
 8009422:	4604      	mov	r4, r0
 8009424:	4617      	mov	r7, r2
 8009426:	4698      	mov	r8, r3
 8009428:	460e      	mov	r6, r1
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 800942a:	f7ff f97b 	bl	8008724 <USB_OTG_BSP_Init>
  pdev->dev.class_cb = class_cb;
  pdev->dev.usr_cb = usr_cb;  
  pdev->dev.usr_device = pDevice;    
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 800942e:	4620      	mov	r0, r4
 8009430:	4631      	mov	r1, r6
  USB_OTG_BSP_Init(pdev);  
  
  USBD_DeInit(pdev);
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8009432:	f8c4 85e0 	str.w	r8, [r4, #1504]	; 0x5e0
  pdev->dev.usr_cb = usr_cb;  
 8009436:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
  pdev->dev.usr_device = pDevice;    
 800943a:	f8c4 75e8 	str.w	r7, [r4, #1512]	; 0x5e8
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 800943e:	f001 f9bf 	bl	800a7c0 <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8009442:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 800944a:	4620      	mov	r0, r4
}
 800944c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8009450:	f7ff b9d0 	b.w	80087f4 <USB_OTG_BSP_EnableInterrupt>

08009454 <USBD_DeInit>:
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
  /* Software Init */
  
  return USBD_OK;
}
 8009454:	2000      	movs	r0, #0
 8009456:	4770      	bx	lr

08009458 <USBD_SetCfg>:
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8009458:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 800945c:	b510      	push	{r4, lr}
 800945e:	4604      	mov	r4, r0
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8009464:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	4798      	blx	r3
  return USBD_OK; 
}
 800946c:	2000      	movs	r0, #0
 800946e:	bd10      	pop	{r4, pc}

08009470 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8009470:	b508      	push	{r3, lr}
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 8009472:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	4798      	blx	r3
  return USBD_OK;
}
 800947a:	2000      	movs	r0, #0
 800947c:	bd08      	pop	{r3, pc}
 800947e:	bf00      	nop

08009480 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
  pdev->dev.in_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8009484:	2502      	movs	r5, #2

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8009486:	460a      	mov	r2, r1
                               uint8_t *pbuf,
                               uint16_t len)
{
  USBD_Status ret = USBD_OK;
  
  pdev->dev.in_ep[0].total_data_len = len;
 8009488:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
  pdev->dev.in_ep[0].rem_data_len   = len;
 800948c:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 8009490:	f880 5111 	strb.w	r5, [r0, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8009494:	2100      	movs	r1, #0
 8009496:	f001 fa3f 	bl	800a918 <DCD_EP_Tx>
 
  return ret;
}
 800949a:	2000      	movs	r0, #0
 800949c:	bd38      	pop	{r3, r4, r5, pc}
 800949e:	bf00      	nop

080094a0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80094a0:	b508      	push	{r3, lr}
 80094a2:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 80094a4:	460a      	mov	r2, r1
 80094a6:	2100      	movs	r1, #0
 80094a8:	f001 fa36 	bl	800a918 <DCD_EP_Tx>
  
  
  return ret;
}
 80094ac:	2000      	movs	r0, #0
 80094ae:	bd08      	pop	{r3, pc}

080094b0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  pdev->dev.out_ep[0].total_data_len = len;
  pdev->dev.out_ep[0].rem_data_len   = len;
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 80094b4:	2503      	movs	r5, #3
  
  DCD_EP_PrepareRx (pdev,
 80094b6:	460a      	mov	r2, r1
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
  USBD_Status ret = USBD_OK;
  
  pdev->dev.out_ep[0].total_data_len = len;
 80094b8:	f8c0 3390 	str.w	r3, [r0, #912]	; 0x390
  pdev->dev.out_ep[0].rem_data_len   = len;
 80094bc:	f8c0 338c 	str.w	r3, [r0, #908]	; 0x38c
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 80094c0:	f880 5111 	strb.w	r5, [r0, #273]	; 0x111
  
  DCD_EP_PrepareRx (pdev,
 80094c4:	2100      	movs	r1, #0
 80094c6:	f001 fa0b 	bl	800a8e0 <DCD_EP_PrepareRx>
                    pbuf,
                    len);
  

  return ret;
}
 80094ca:	2000      	movs	r0, #0
 80094cc:	bd38      	pop	{r3, r4, r5, pc}
 80094ce:	bf00      	nop

080094d0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80094d0:	b508      	push	{r3, lr}
 80094d2:	4613      	mov	r3, r2
  USBD_Status ret = USBD_OK;
  
  DCD_EP_PrepareRx (pdev,
 80094d4:	460a      	mov	r2, r1
 80094d6:	2100      	movs	r1, #0
 80094d8:	f001 fa02 	bl	800a8e0 <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
}
 80094dc:	2000      	movs	r0, #0
 80094de:	bd08      	pop	{r3, pc}

080094e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80094e0:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 80094e2:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80094e4:	2304      	movs	r3, #4
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80094e6:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
  DCD_EP_Tx (pdev,
 80094e8:	460a      	mov	r2, r1
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80094ea:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_Tx (pdev,
 80094ee:	460b      	mov	r3, r1
 80094f0:	f001 fa12 	bl	800a918 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 80094f4:	4620      	mov	r0, r4
 80094f6:	f001 f869 	bl	800a5cc <USB_OTG_EP0_OutStart>
  
  return ret;
}
 80094fa:	2000      	movs	r0, #0
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	bf00      	nop

08009500 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8009500:	b510      	push	{r4, lr}
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 8009502:	2100      	movs	r1, #0
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8009504:	2305      	movs	r3, #5
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8009506:	4604      	mov	r4, r0
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
  DCD_EP_PrepareRx ( pdev,
 8009508:	460a      	mov	r2, r1
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
  USBD_Status ret = USBD_OK;
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 800950a:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 800950e:	460b      	mov	r3, r1
 8009510:	f001 f9e6 	bl	800a8e0 <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8009514:	4620      	mov	r0, r4
 8009516:	f001 f859 	bl	800a5cc <USB_OTG_EP0_OutStart>
  
  return ret;
}
 800951a:	2000      	movs	r0, #0
 800951c:	bd10      	pop	{r4, pc}
 800951e:	bf00      	nop

08009520 <USBD_GetRxCount>:
*         epnum: endpoint index
* @retval Rx Data blength
*/
uint16_t  USBD_GetRxCount (USB_OTG_CORE_HANDLE  *pdev , uint8_t epnum)
{
  return pdev->dev.out_ep[epnum].xfer_count;
 8009520:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009524:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8009528:	f8b0 0388 	ldrh.w	r0, [r0, #904]	; 0x388
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop

08009530 <USBD_ParseSetupRequest>:
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8009530:	f890 35c8 	ldrb.w	r3, [r0, #1480]	; 0x5c8
 8009534:	700b      	strb	r3, [r1, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8009536:	f890 35c9 	ldrb.w	r3, [r0, #1481]	; 0x5c9
 800953a:	704b      	strb	r3, [r1, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 800953c:	f890 25cb 	ldrb.w	r2, [r0, #1483]	; 0x5cb
 8009540:	f890 35ca 	ldrb.w	r3, [r0, #1482]	; 0x5ca
 8009544:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009548:	804b      	strh	r3, [r1, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 800954a:	f890 25cd 	ldrb.w	r2, [r0, #1485]	; 0x5cd
 800954e:	f890 35cc 	ldrb.w	r3, [r0, #1484]	; 0x5cc
 8009552:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009556:	808b      	strh	r3, [r1, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8009558:	f890 25cf 	ldrb.w	r2, [r0, #1487]	; 0x5cf
 800955c:	f890 35ce 	ldrb.w	r3, [r0, #1486]	; 0x5ce
 8009560:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009564:	b29b      	uxth	r3, r3
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8009566:	2201      	movs	r2, #1
{
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8009568:	80cb      	strh	r3, [r1, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 800956a:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 800956e:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111
 8009572:	4770      	bx	lr

08009574 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8009574:	b510      	push	{r4, lr}
  if((req->bmRequest & 0x80) == 0x80)
 8009576:	f991 3000 	ldrsb.w	r3, [r1]
 800957a:	2b00      	cmp	r3, #0
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 800957c:	4604      	mov	r4, r0
  if((req->bmRequest & 0x80) == 0x80)
 800957e:	db09      	blt.n	8009594 <USBD_CtlError+0x20>
  {
    DCD_EP_Stall(pdev , 0x80);
  }
  else 
  {
    if(req->wLength == 0)
 8009580:	88cb      	ldrh	r3, [r1, #6]
 8009582:	b13b      	cbz	r3, 8009594 <USBD_CtlError+0x20>
    {
       DCD_EP_Stall(pdev , 0x80);
    }
    else
    {
      DCD_EP_Stall(pdev , 0);
 8009584:	2100      	movs	r1, #0
 8009586:	f001 f9e3 	bl	800a950 <DCD_EP_Stall>
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 800958a:	4620      	mov	r0, r4
}
 800958c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else
    {
      DCD_EP_Stall(pdev , 0);
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 8009590:	f001 b81c 	b.w	800a5cc <USB_OTG_EP0_OutStart>
void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
  if((req->bmRequest & 0x80) == 0x80)
  {
    DCD_EP_Stall(pdev , 0x80);
 8009594:	4620      	mov	r0, r4
 8009596:	2180      	movs	r1, #128	; 0x80
 8009598:	f001 f9da 	bl	800a950 <DCD_EP_Stall>
    else
    {
      DCD_EP_Stall(pdev , 0);
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 800959c:	4620      	mov	r0, r4
}
 800959e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else
    {
      DCD_EP_Stall(pdev , 0);
    }
  }
  USB_OTG_EP0_OutStart(pdev);  
 80095a2:	f001 b813 	b.w	800a5cc <USB_OTG_EP0_OutStart>
 80095a6:	bf00      	nop

080095a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80095a8:	b570      	push	{r4, r5, r6, lr}
  USBD_Status ret = USBD_OK;  
  
  switch (req->bRequest) 
 80095aa:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80095ac:	b082      	sub	sp, #8
 80095ae:	460c      	mov	r4, r1
 80095b0:	4605      	mov	r5, r0
  USBD_Status ret = USBD_OK;  
  
  switch (req->bRequest) 
 80095b2:	2b09      	cmp	r3, #9
 80095b4:	d80c      	bhi.n	80095d0 <USBD_StdDevReq+0x28>
 80095b6:	e8df f003 	tbb	[pc, r3]
 80095ba:	4c35      	.short	0x4c35
 80095bc:	050b600b 	.word	0x050b600b
 80095c0:	128d0b77 	.word	0x128d0b77
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80095c4:	88a3      	ldrh	r3, [r4, #4]
 80095c6:	b91b      	cbnz	r3, 80095d0 <USBD_StdDevReq+0x28>
 80095c8:	88e3      	ldrh	r3, [r4, #6]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8098 	beq.w	8009700 <USBD_StdDevReq+0x158>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80095d0:	4628      	mov	r0, r5
 80095d2:	4621      	mov	r1, r4
 80095d4:	f7ff ffce 	bl	8009574 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80095d8:	2000      	movs	r0, #0
 80095da:	b002      	add	sp, #8
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80095de:	78a1      	ldrb	r1, [r4, #2]
 80095e0:	f640 2624 	movw	r6, #2596	; 0xa24
 80095e4:	f2c2 0600 	movt	r6, #8192	; 0x2000
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 80095e8:	2901      	cmp	r1, #1
                           USB_SETUP_REQ *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80095ea:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 80095ec:	d8f0      	bhi.n	80095d0 <USBD_StdDevReq+0x28>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev.device_status) 
 80095ee:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	f000 809f 	beq.w	8009736 <USBD_StdDevReq+0x18e>
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d1e9      	bne.n	80095d0 <USBD_StdDevReq+0x28>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
 80095fc:	2900      	cmp	r1, #0
 80095fe:	f000 813f 	beq.w	8009880 <USBD_StdDevReq+0x2d8>
        pdev->dev.device_config = cfgidx;          
        USBD_ClrCfg(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev.device_config) 
 8009602:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
 8009606:	2901      	cmp	r1, #1
 8009608:	f000 8132 	beq.w	8009870 <USBD_StdDevReq+0x2c8>
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 800960c:	f7ff ff30 	bl	8009470 <USBD_ClrCfg>
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8009610:	7831      	ldrb	r1, [r6, #0]
        USBD_SetCfg(pdev , cfgidx);
 8009612:	4628      	mov	r0, r5
      {
        /* Clear old configuration */
        USBD_ClrCfg(pdev , pdev->dev.device_config);
        
        /* set new configuration */
        pdev->dev.device_config = cfgidx;
 8009614:	f885 1110 	strb.w	r1, [r5, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 8009618:	f7ff ff1e 	bl	8009458 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 800961c:	4628      	mov	r0, r5
 800961e:	f7ff ff5f 	bl	80094e0 <USBD_CtlSendStatus>
 8009622:	e7d9      	b.n	80095d8 <USBD_StdDevReq+0x30>
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
  
  switch (pdev->dev.device_status) 
 8009624:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8009628:	2201      	movs	r2, #1
 800962a:	3b02      	subs	r3, #2
 800962c:	4293      	cmp	r3, r2
 800962e:	f04f 0103 	mov.w	r1, #3
 8009632:	d8cd      	bhi.n	80095d0 <USBD_StdDevReq+0x28>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
    if (pdev->dev.DevRemoteWakeup) 
 8009634:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009638:	2b00      	cmp	r3, #0
 800963a:	d15b      	bne.n	80096f4 <USBD_StdDevReq+0x14c>
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED | USB_CONFIG_REMOTE_WAKEUP;                                
    }
    else
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED;   
 800963c:	f640 2324 	movw	r3, #2596	; 0xa24
 8009640:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009644:	609a      	str	r2, [r3, #8]
    }
    
    USBD_CtlSendData (pdev, 
 8009646:	4628      	mov	r0, r5
 8009648:	4994      	ldr	r1, [pc, #592]	; (800989c <USBD_StdDevReq+0x2f4>)
 800964a:	2201      	movs	r2, #1
 800964c:	f7ff ff18 	bl	8009480 <USBD_CtlSendData>
 8009650:	e7c2      	b.n	80095d8 <USBD_StdDevReq+0x30>
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
  switch (pdev->dev.device_status)
 8009652:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8009656:	3b02      	subs	r3, #2
 8009658:	2b01      	cmp	r3, #1
 800965a:	d8b9      	bhi.n	80095d0 <USBD_StdDevReq+0x28>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800965c:	8863      	ldrh	r3, [r4, #2]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d1ba      	bne.n	80095d8 <USBD_StdDevReq+0x30>
    {
      pdev->dev.DevRemoteWakeup = 0; 
      pdev->dev.class_cb->Setup (pdev, req);   
 8009662:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8009666:	2200      	movs	r2, #0
      pdev->dev.class_cb->Setup (pdev, req);   
 8009668:	689b      	ldr	r3, [r3, #8]
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev.DevRemoteWakeup = 0; 
 800966a:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
      pdev->dev.class_cb->Setup (pdev, req);   
 800966e:	4621      	mov	r1, r4
 8009670:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8009672:	4628      	mov	r0, r5
 8009674:	f7ff ff34 	bl	80094e0 <USBD_CtlSendStatus>
 8009678:	e7ae      	b.n	80095d8 <USBD_StdDevReq+0x30>
{

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800967a:	8863      	ldrh	r3, [r4, #2]
 800967c:	2b01      	cmp	r3, #1
 800967e:	f000 80f0 	beq.w	8009862 <USBD_StdDevReq+0x2ba>
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8009682:	2b02      	cmp	r3, #2
 8009684:	d1a8      	bne.n	80095d8 <USBD_StdDevReq+0x30>
           ((req->wIndex & 0xFF) == 0))
 8009686:	88a3      	ldrh	r3, [r4, #4]
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
    USBD_CtlSendStatus(pdev);
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8009688:	f013 0fff 	tst.w	r3, #255	; 0xff
 800968c:	d1a4      	bne.n	80095d8 <USBD_StdDevReq+0x30>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 800968e:	6902      	ldr	r2, [r0, #16]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8009690:	0a1b      	lsrs	r3, r3, #8
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8009692:	6850      	ldr	r0, [r2, #4]
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8009694:	3b01      	subs	r3, #1
  }

  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8009696:	4601      	mov	r1, r0
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8009698:	2b04      	cmp	r3, #4
 800969a:	f200 80fc 	bhi.w	8009896 <USBD_StdDevReq+0x2ee>
 800969e:	e8df f003 	tbb	[pc, r3]
 80096a2:	9a9e      	.short	0x9a9e
 80096a4:	a692      	.short	0xa692
 80096a6:	a2          	.byte	0xa2
 80096a7:	00          	.byte	0x00
                               USB_SETUP_REQ *req)
{
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
 80096a8:	8862      	ldrh	r2, [r4, #2]
 80096aa:	0a13      	lsrs	r3, r2, #8
 80096ac:	3b01      	subs	r3, #1
 80096ae:	2b06      	cmp	r3, #6
 80096b0:	d88e      	bhi.n	80095d0 <USBD_StdDevReq+0x28>
 80096b2:	a101      	add	r1, pc, #4	; (adr r1, 80096b8 <USBD_StdDevReq+0x110>)
 80096b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096b8:	080097a5 	.word	0x080097a5
 80096bc:	08009767 	.word	0x08009767
 80096c0:	08009755 	.word	0x08009755
 80096c4:	080095d1 	.word	0x080095d1
 80096c8:	080095d1 	.word	0x080095d1
 80096cc:	080095d1 	.word	0x080095d1
 80096d0:	080095d1 	.word	0x080095d1
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 
  if (req->wLength != 1) 
 80096d4:	88e2      	ldrh	r2, [r4, #6]
 80096d6:	2a01      	cmp	r2, #1
 80096d8:	f47f af7a 	bne.w	80095d0 <USBD_StdDevReq+0x28>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev.device_status )  
 80096dc:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d024      	beq.n	800972e <USBD_StdDevReq+0x186>
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	f47f af73 	bne.w	80095d0 <USBD_StdDevReq+0x28>
                        1);
      break;
      
    case USB_OTG_CONFIGURED:                   
      
      USBD_CtlSendData (pdev, 
 80096ea:	f500 7188 	add.w	r1, r0, #272	; 0x110
 80096ee:	f7ff fec7 	bl	8009480 <USBD_CtlSendData>
 80096f2:	e771      	b.n	80095d8 <USBD_StdDevReq+0x30>
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
    if (pdev->dev.DevRemoteWakeup) 
    {
      USBD_cfg_status = USB_CONFIG_SELF_POWERED | USB_CONFIG_REMOTE_WAKEUP;                                
 80096f4:	f640 2324 	movw	r3, #2596	; 0xa24
 80096f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80096fc:	6099      	str	r1, [r3, #8]
 80096fe:	e7a2      	b.n	8009646 <USBD_StdDevReq+0x9e>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8009700:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8009704:	78a6      	ldrb	r6, [r4, #2]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8009706:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8009708:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 800970c:	f43f af60 	beq.w	80095d0 <USBD_StdDevReq+0x28>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 8009710:	f880 6113 	strb.w	r6, [r0, #275]	; 0x113
      DCD_EP_SetAddress(pdev, dev_addr);               
 8009714:	4631      	mov	r1, r6
 8009716:	f001 f965 	bl	800a9e4 <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 800971a:	4628      	mov	r0, r5
 800971c:	f7ff fee0 	bl	80094e0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8009720:	2e00      	cmp	r6, #0
 8009722:	f000 80a9 	beq.w	8009878 <USBD_StdDevReq+0x2d0>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8009726:	2302      	movs	r3, #2
 8009728:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
 800972c:	e754      	b.n	80095d8 <USBD_StdDevReq+0x30>
  {
    switch (pdev->dev.device_status )  
    {
    case USB_OTG_ADDRESSED:                     
      
      USBD_CtlSendData (pdev, 
 800972e:	495c      	ldr	r1, [pc, #368]	; (80098a0 <USBD_StdDevReq+0x2f8>)
 8009730:	f7ff fea6 	bl	8009480 <USBD_CtlSendData>
 8009734:	e750      	b.n	80095d8 <USBD_StdDevReq+0x30>
  else 
  {
    switch (pdev->dev.device_status) 
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
 8009736:	2900      	cmp	r1, #0
 8009738:	f000 809a 	beq.w	8009870 <USBD_StdDevReq+0x2c8>
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 800973c:	2101      	movs	r1, #1
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 800973e:	2303      	movs	r3, #3
    switch (pdev->dev.device_status) 
    {
    case USB_OTG_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev.device_config = cfgidx;
 8009740:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 8009744:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 8009748:	f7ff fe86 	bl	8009458 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 800974c:	4628      	mov	r0, r5
 800974e:	f7ff fec7 	bl	80094e0 <USBD_CtlSendStatus>
 8009752:	e741      	b.n	80095d8 <USBD_StdDevReq+0x30>
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    pdev->dev.pConfig_descriptor = pbuf;    
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009754:	b2d2      	uxtb	r2, r2
 8009756:	2a05      	cmp	r2, #5
 8009758:	f63f af3a 	bhi.w	80095d0 <USBD_StdDevReq+0x28>
 800975c:	e8df f002 	tbb	[pc, r2]
 8009760:	5d666f78 	.word	0x5d666f78
 8009764:	4b54      	.short	0x4b54
      len = 8;
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8009766:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 800976a:	7880      	ldrb	r0, [r0, #2]
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	f10d 0106 	add.w	r1, sp, #6
 8009772:	4798      	blx	r3
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009774:	2302      	movs	r3, #2
 8009776:	7043      	strb	r3, [r0, #1]
      len = 8;
    }
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 8009778:	4601      	mov	r1, r0
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    pdev->dev.pConfig_descriptor = pbuf;    
 800977a:	f8c5 05ec 	str.w	r0, [r5, #1516]	; 0x5ec
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 800977e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009782:	2b00      	cmp	r3, #0
 8009784:	f43f af28 	beq.w	80095d8 <USBD_StdDevReq+0x30>
 8009788:	88e2      	ldrh	r2, [r4, #6]
 800978a:	2a00      	cmp	r2, #0
 800978c:	f43f af24 	beq.w	80095d8 <USBD_StdDevReq+0x30>
  {
    
    len = MIN(len , req->wLength);
 8009790:	4293      	cmp	r3, r2
 8009792:	bf28      	it	cs
 8009794:	4613      	movcs	r3, r2
    
    USBD_CtlSendData (pdev, 
 8009796:	461a      	mov	r2, r3
 8009798:	4628      	mov	r0, r5
  }
  
  if((len != 0)&& (req->wLength != 0))
  {
    
    len = MIN(len , req->wLength);
 800979a:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 800979e:	f7ff fe6f 	bl	8009480 <USBD_CtlSendData>
 80097a2:	e719      	b.n	80095d8 <USBD_StdDevReq+0x30>
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 80097a4:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 80097a8:	7880      	ldrb	r0, [r0, #2]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f10d 0106 	add.w	r1, sp, #6
 80097b0:	4798      	blx	r3
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 80097b2:	88e2      	ldrh	r2, [r4, #6]
 80097b4:	2a40      	cmp	r2, #64	; 0x40
  uint8_t *pbuf;
  
  switch (req->wValue >> 8)
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 80097b6:	4601      	mov	r1, r0
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 80097b8:	d003      	beq.n	80097c2 <USBD_StdDevReq+0x21a>
 80097ba:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d1dd      	bne.n	800977e <USBD_StdDevReq+0x1d6>
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 80097c2:	2308      	movs	r3, #8
 80097c4:	e7e1      	b.n	800978a <USBD_StdDevReq+0x1e2>
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
      break;
      
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
 80097c6:	2303      	movs	r3, #3
 80097c8:	f363 1106 	bfi	r1, r3, #4, #3
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
      break;
    }
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 80097cc:	6051      	str	r1, [r2, #4]
    USBD_CtlSendStatus(pdev);
 80097ce:	4628      	mov	r0, r5
 80097d0:	f7ff fe86 	bl	80094e0 <USBD_CtlSendStatus>
 80097d4:	e700      	b.n	80095d8 <USBD_StdDevReq+0x30>
    case 1: // TEST_J
      dctl.b.tstctl = 1;
      break;
      
    case 2: // TEST_K	
      dctl.b.tstctl = 2;
 80097d6:	2302      	movs	r3, #2
 80097d8:	f363 1106 	bfi	r1, r3, #4, #3
 80097dc:	e7f6      	b.n	80097cc <USBD_StdDevReq+0x224>
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
    {
    case 1: // TEST_J
      dctl.b.tstctl = 1;
 80097de:	2301      	movs	r3, #1
 80097e0:	f363 1106 	bfi	r1, r3, #4, #3
 80097e4:	e7f2      	b.n	80097cc <USBD_StdDevReq+0x224>
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
      break;
      
    case 5: // TEST_FORCE_ENABLE
      dctl.b.tstctl = 5;
 80097e6:	2305      	movs	r3, #5
 80097e8:	f363 1106 	bfi	r1, r3, #4, #3
 80097ec:	e7ee      	b.n	80097cc <USBD_StdDevReq+0x224>
    case 3: // TEST_SE0_NAK
      dctl.b.tstctl = 3;
      break;
      
    case 4: // TEST_PACKET
      dctl.b.tstctl = 4;
 80097ee:	2304      	movs	r3, #4
 80097f0:	f363 1106 	bfi	r1, r3, #4, #3
 80097f4:	e7ea      	b.n	80097cc <USBD_StdDevReq+0x224>
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 80097f6:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 80097fa:	7880      	ldrb	r0, [r0, #2]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f10d 0106 	add.w	r1, sp, #6
 8009802:	4798      	blx	r3
 8009804:	4601      	mov	r1, r0
 8009806:	e7ba      	b.n	800977e <USBD_StdDevReq+0x1d6>
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 8009808:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 800980c:	7880      	ldrb	r0, [r0, #2]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	f10d 0106 	add.w	r1, sp, #6
 8009814:	4798      	blx	r3
 8009816:	4601      	mov	r1, r0
 8009818:	e7b1      	b.n	800977e <USBD_StdDevReq+0x1d6>
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 800981a:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 800981e:	7880      	ldrb	r0, [r0, #2]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	f10d 0106 	add.w	r1, sp, #6
 8009826:	4798      	blx	r3
 8009828:	4601      	mov	r1, r0
 800982a:	e7a8      	b.n	800977e <USBD_StdDevReq+0x1d6>
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 800982c:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 8009830:	7880      	ldrb	r0, [r0, #2]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f10d 0106 	add.w	r1, sp, #6
 8009838:	4798      	blx	r3
 800983a:	4601      	mov	r1, r0
 800983c:	e79f      	b.n	800977e <USBD_StdDevReq+0x1d6>
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 800983e:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 8009842:	7880      	ldrb	r0, [r0, #2]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f10d 0106 	add.w	r1, sp, #6
 800984a:	4798      	blx	r3
 800984c:	4601      	mov	r1, r0
 800984e:	e796      	b.n	800977e <USBD_StdDevReq+0x1d6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 8009850:	f8d0 35e8 	ldr.w	r3, [r0, #1512]	; 0x5e8
 8009854:	7880      	ldrb	r0, [r0, #2]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f10d 0106 	add.w	r1, sp, #6
 800985c:	4798      	blx	r3
 800985e:	4601      	mov	r1, r0
 8009860:	e78d      	b.n	800977e <USBD_StdDevReq+0x1d6>
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
  {
    pdev->dev.DevRemoteWakeup = 1;  
    pdev->dev.class_cb->Setup (pdev, req);   
 8009862:	f8d0 25e0 	ldr.w	r2, [r0, #1504]	; 0x5e0
  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
  {
    pdev->dev.DevRemoteWakeup = 1;  
 8009866:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    pdev->dev.class_cb->Setup (pdev, req);   
 800986a:	4621      	mov	r1, r4
 800986c:	6893      	ldr	r3, [r2, #8]
 800986e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8009870:	4628      	mov	r0, r5
 8009872:	f7ff fe35 	bl	80094e0 <USBD_CtlSendStatus>
 8009876:	e6af      	b.n	80095d8 <USBD_StdDevReq+0x30>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 8009878:	2301      	movs	r3, #1
 800987a:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
 800987e:	e6ab      	b.n	80095d8 <USBD_StdDevReq+0x30>
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8009880:	2302      	movs	r3, #2
        pdev->dev.device_config = cfgidx;          
 8009882:	f880 1110 	strb.w	r1, [r0, #272]	; 0x110
      break;
      
    case USB_OTG_CONFIGURED:
      if (cfgidx == 0) 
      {                           
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8009886:	f880 3112 	strb.w	r3, [r0, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
        USBD_ClrCfg(pdev , cfgidx);
 800988a:	f7ff fdf1 	bl	8009470 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 800988e:	4628      	mov	r0, r5
 8009890:	f7ff fe26 	bl	80094e0 <USBD_CtlSendStatus>
 8009894:	e6a0      	b.n	80095d8 <USBD_StdDevReq+0x30>
           ((req->wIndex & 0xFF) == 0))
  {
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
    
    test_mode = req->wIndex >> 8;
    switch (test_mode) 
 8009896:	4601      	mov	r1, r0
 8009898:	e798      	b.n	80097cc <USBD_StdDevReq+0x224>
 800989a:	bf00      	nop
 800989c:	20000a2c 	.word	0x20000a2c
 80098a0:	20000a28 	.word	0x20000a28

080098a4 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80098a4:	b538      	push	{r3, r4, r5, lr}
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 80098a6:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80098aa:	2b03      	cmp	r3, #3
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80098ac:	4604      	mov	r4, r0
 80098ae:	460d      	mov	r5, r1
  USBD_Status ret = USBD_OK; 
  
  switch (pdev->dev.device_status) 
 80098b0:	d102      	bne.n	80098b8 <USBD_StdItfReq+0x14>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 80098b2:	790b      	ldrb	r3, [r1, #4]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d903      	bls.n	80098c0 <USBD_StdItfReq+0x1c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80098b8:	f7ff fe5c 	bl	8009574 <USBD_CtlError>
    break;
  }
  return ret;
}
 80098bc:	2000      	movs	r0, #0
 80098be:	bd38      	pop	{r3, r4, r5, pc}
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 80098c0:	f8d0 35e0 	ldr.w	r3, [r0, #1504]	; 0x5e0
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80098c8:	88eb      	ldrh	r3, [r5, #6]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1f6      	bne.n	80098bc <USBD_StdItfReq+0x18>
      {
         USBD_CtlSendStatus(pdev);
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7ff fe06 	bl	80094e0 <USBD_CtlSendStatus>
 80098d4:	e7f2      	b.n	80098bc <USBD_StdItfReq+0x18>
 80098d6:	bf00      	nop

080098d8 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80098d8:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 80098da:	784b      	ldrb	r3, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 80098dc:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 80098de:	2b01      	cmp	r3, #1
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80098e0:	460c      	mov	r4, r1
 80098e2:	4605      	mov	r5, r0
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
  
  ep_addr  = LOBYTE(req->wIndex);   
 80098e4:	b2d6      	uxtb	r6, r2
  
  switch (req->bRequest) 
 80098e6:	d021      	beq.n	800992c <USBD_StdEPReq+0x54>
 80098e8:	d316      	bcc.n	8009918 <USBD_StdEPReq+0x40>
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d112      	bne.n	8009914 <USBD_StdEPReq+0x3c>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev.device_status) 
 80098ee:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d014      	beq.n	8009920 <USBD_StdEPReq+0x48>
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d13e      	bne.n	8009978 <USBD_StdEPReq+0xa0>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80098fa:	884b      	ldrh	r3, [r1, #2]
 80098fc:	b90b      	cbnz	r3, 8009902 <USBD_StdEPReq+0x2a>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80098fe:	0673      	lsls	r3, r6, #25
 8009900:	d14f      	bne.n	80099a2 <USBD_StdEPReq+0xca>
      if (req->wValue == USB_FEATURE_EP_HALT)
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
          pdev->dev.class_cb->Setup (pdev, req);
 8009902:	f8d5 35e0 	ldr.w	r3, [r5, #1504]	; 0x5e0
 8009906:	4621      	mov	r1, r4
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	4628      	mov	r0, r5
 800990c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800990e:	4628      	mov	r0, r5
 8009910:	f7ff fde6 	bl	80094e0 <USBD_CtlSendStatus>
    
  default:
    break;
  }
  return ret;
}
 8009914:	2000      	movs	r0, #0
 8009916:	bd70      	pop	{r4, r5, r6, pc}
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 8009918:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 800991c:	2b02      	cmp	r3, #2
 800991e:	d114      	bne.n	800994a <USBD_StdEPReq+0x72>
    {
    case USB_OTG_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009920:	0672      	lsls	r2, r6, #25
 8009922:	d0f7      	beq.n	8009914 <USBD_StdEPReq+0x3c>
      {
        DCD_EP_Stall(pdev , ep_addr);
 8009924:	4631      	mov	r1, r6
 8009926:	f001 f813 	bl	800a950 <DCD_EP_Stall>
 800992a:	e7f3      	b.n	8009914 <USBD_StdEPReq+0x3c>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev.device_status) 
 800992c:	f890 3112 	ldrb.w	r3, [r0, #274]	; 0x112
 8009930:	2b02      	cmp	r3, #2
 8009932:	d0f5      	beq.n	8009920 <USBD_StdEPReq+0x48>
 8009934:	2b03      	cmp	r3, #3
 8009936:	d11f      	bne.n	8009978 <USBD_StdEPReq+0xa0>
        DCD_EP_Stall(pdev , ep_addr);
      }
      break;	
      
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009938:	884b      	ldrh	r3, [r1, #2]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1ea      	bne.n	8009914 <USBD_StdEPReq+0x3c>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800993e:	0671      	lsls	r1, r6, #25
 8009940:	d0e5      	beq.n	800990e <USBD_StdEPReq+0x36>
        {        
          DCD_EP_ClrStall(pdev , ep_addr);
 8009942:	4631      	mov	r1, r6
 8009944:	f001 f822 	bl	800a98c <DCD_EP_ClrStall>
 8009948:	e7db      	b.n	8009902 <USBD_StdEPReq+0x2a>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev.device_status) 
 800994a:	2b03      	cmp	r3, #3
 800994c:	d114      	bne.n	8009978 <USBD_StdEPReq+0xa0>
      break;	
      
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
 800994e:	0613      	lsls	r3, r2, #24
 8009950:	d416      	bmi.n	8009980 <USBD_StdEPReq+0xa8>
          USBD_ep_status = 0x0000;  
        }
      }
      else if ((ep_addr & 0x80)== 0x00)
      {
        if(pdev->dev.out_ep[ep_addr].is_stall)
 8009952:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8009956:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800995a:	f896 3372 	ldrb.w	r3, [r6, #882]	; 0x372
 800995e:	b9cb      	cbnz	r3, 8009994 <USBD_StdEPReq+0xbc>
        {
          USBD_ep_status = 0x0001;     
        }
        else
        {
          USBD_ep_status = 0x0000;  
 8009960:	f640 2324 	movw	r3, #2596	; 0xa24
 8009964:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009968:	2200      	movs	r2, #0
 800996a:	60da      	str	r2, [r3, #12]
        else 
        {
          USBD_ep_status = 0x0000;     
        }      
      }
      USBD_CtlSendData (pdev,
 800996c:	4628      	mov	r0, r5
 800996e:	490f      	ldr	r1, [pc, #60]	; (80099ac <USBD_StdEPReq+0xd4>)
 8009970:	2202      	movs	r2, #2
 8009972:	f7ff fd85 	bl	8009480 <USBD_CtlSendData>
                        (uint8_t *)&USBD_ep_status,
                        2);
      break;
 8009976:	e7cd      	b.n	8009914 <USBD_StdEPReq+0x3c>
      
    default:                         
       USBD_CtlError(pdev , req);
 8009978:	f7ff fdfc 	bl	8009574 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 800997c:	2000      	movs	r0, #0
 800997e:	bd70      	pop	{r4, r5, r6, pc}
    case USB_OTG_CONFIGURED:         
      
      
      if ((ep_addr & 0x80)== 0x80)
      {
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 8009980:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8009984:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8009988:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800998c:	f896 311a 	ldrb.w	r3, [r6, #282]	; 0x11a
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0e5      	beq.n	8009960 <USBD_StdEPReq+0x88>
        {
          USBD_ep_status = 0x0001;     
 8009994:	f640 2324 	movw	r3, #2596	; 0xa24
 8009998:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800999c:	2201      	movs	r2, #1
 800999e:	60da      	str	r2, [r3, #12]
 80099a0:	e7e4      	b.n	800996c <USBD_StdEPReq+0x94>
    case USB_OTG_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
        { 
          DCD_EP_Stall(pdev , ep_addr);
 80099a2:	4631      	mov	r1, r6
 80099a4:	f000 ffd4 	bl	800a950 <DCD_EP_Stall>
 80099a8:	e7ab      	b.n	8009902 <USBD_StdEPReq+0x2a>
 80099aa:	bf00      	nop
 80099ac:	20000a30 	.word	0x20000a30

080099b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099b0:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80099b2:	b1f0      	cbz	r0, 80099f2 <USBD_GetString+0x42>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 80099b4:	7803      	ldrb	r3, [r0, #0]
 80099b6:	b1f3      	cbz	r3, 80099f6 <USBD_GetString+0x46>
 80099b8:	4604      	mov	r4, r0
 80099ba:	2300      	movs	r3, #0
 80099bc:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    {
        len++;
 80099c0:	3301      	adds	r3, #1
 80099c2:	b2db      	uxtb	r3, r3
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	d1f9      	bne.n	80099bc <USBD_GetString+0xc>
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	3302      	adds	r3, #2
 80099cc:	b2dc      	uxtb	r4, r3
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80099ce:	2503      	movs	r5, #3
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80099d0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80099d2:	700c      	strb	r4, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80099d4:	704d      	strb	r5, [r1, #1]
    
    while (*desc != NULL) 
 80099d6:	7802      	ldrb	r2, [r0, #0]
 80099d8:	b15a      	cbz	r2, 80099f2 <USBD_GetString+0x42>
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80099da:	2302      	movs	r3, #2
    
    while (*desc != NULL) 
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
 80099dc:	2500      	movs	r5, #0
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
    {
      unicode[idx++] = *desc++;
 80099de:	1c5c      	adds	r4, r3, #1
 80099e0:	b2e4      	uxtb	r4, r4
 80099e2:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 80099e4:	550d      	strb	r5, [r1, r4]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 80099e6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
 80099ea:	3302      	adds	r3, #2
 80099ec:	b2db      	uxtb	r3, r3
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != NULL) 
 80099ee:	2a00      	cmp	r2, #0
 80099f0:	d1f5      	bne.n	80099de <USBD_GetString+0x2e>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 80099f2:	bc30      	pop	{r4, r5}
 80099f4:	4770      	bx	lr
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != NULL) 
 80099f6:	2402      	movs	r4, #2
 80099f8:	4623      	mov	r3, r4
 80099fa:	e7e8      	b.n	80099ce <USBD_GetString+0x1e>

080099fc <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 80099fc:	b538      	push	{r3, r4, r5, lr}
  if (cdcCmd != NO_CMD)
 80099fe:	f240 04e4 	movw	r4, #228	; 0xe4
 8009a02:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009a06:	6820      	ldr	r0, [r4, #0]
 8009a08:	28ff      	cmp	r0, #255	; 0xff
 8009a0a:	d010      	beq.n	8009a2e <usbd_cdc_EP0_RxReady+0x32>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 8009a0c:	f240 0250 	movw	r2, #80	; 0x50
 8009a10:	f640 2334 	movw	r3, #2612	; 0xa34
 8009a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009a18:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009a1c:	f241 3124 	movw	r1, #4900	; 0x1324
 8009a20:	6895      	ldr	r5, [r2, #8]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009a28:	47a8      	blx	r5
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 8009a2a:	23ff      	movs	r3, #255	; 0xff
 8009a2c:	6023      	str	r3, [r4, #0]
  }
  
  return USBD_OK;
}
 8009a2e:	2000      	movs	r0, #0
 8009a30:	bd38      	pop	{r3, r4, r5, pc}
 8009a32:	bf00      	nop

08009a34 <USBD_cdc_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
  *length = sizeof (usbd_cdc_CfgDesc);
 8009a34:	2343      	movs	r3, #67	; 0x43
 8009a36:	800b      	strh	r3, [r1, #0]
  return usbd_cdc_CfgDesc;
}
 8009a38:	4800      	ldr	r0, [pc, #0]	; (8009a3c <USBD_cdc_GetCfgDesc+0x8>)
 8009a3a:	4770      	bx	lr
 8009a3c:	200000e8 	.word	0x200000e8

08009a40 <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_SOF (void *pdev)
{      
 8009a40:	b570      	push	{r4, r5, r6, lr}
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 8009a42:	f640 2434 	movw	r4, #2612	; 0xa34
 8009a46:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009a4a:	6863      	ldr	r3, [r4, #4]
 8009a4c:	1c5a      	adds	r2, r3, #1
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	6062      	str	r2, [r4, #4]
 8009a52:	d001      	beq.n	8009a58 <usbd_cdc_SOF+0x18>
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
  }
  
  return USBD_OK;
}
 8009a54:	2000      	movs	r0, #0
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
static void Handle_USBAsynchXfer (void *pdev)
{
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8009a58:	7a22      	ldrb	r2, [r4, #8]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
  {
    /* Reset the frame counter */
    FrameCount = 0;
 8009a5a:	2300      	movs	r3, #0
static void Handle_USBAsynchXfer (void *pdev)
{
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8009a5c:	2a01      	cmp	r2, #1
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
  {
    /* Reset the frame counter */
    FrameCount = 0;
 8009a5e:	6063      	str	r3, [r4, #4]
static void Handle_USBAsynchXfer (void *pdev)
{
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 8009a60:	d0f8      	beq.n	8009a54 <usbd_cdc_SOF+0x14>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 8009a62:	68e1      	ldr	r1, [r4, #12]
    {
      APP_Rx_ptr_out = 0;
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8009a64:	6925      	ldr	r5, [r4, #16]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 8009a66:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009a6a:	d029      	beq.n	8009ac0 <usbd_cdc_SOF+0x80>
    {
      APP_Rx_ptr_out = 0;
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8009a6c:	42a9      	cmp	r1, r5
 8009a6e:	d02c      	beq.n	8009aca <usbd_cdc_SOF+0x8a>
 8009a70:	bf98      	it	ls
 8009a72:	b28e      	uxthls	r6, r1
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 8009a74:	d921      	bls.n	8009aba <usbd_cdc_SOF+0x7a>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8009a76:	f5c1 6500 	rsb	r5, r1, #2048	; 0x800
 8009a7a:	6165      	str	r5, [r4, #20]
 8009a7c:	b28e      	uxth	r6, r1
    }
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     APP_Rx_length &= ~0x03;
#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8009a7e:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
 8009a82:	f8b3 3039 	ldrh.w	r3, [r3, #57]	; 0x39
 8009a86:	42ab      	cmp	r3, r5
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
      USB_Tx_length = APP_Rx_length;
      
      APP_Rx_ptr_out += APP_Rx_length;
      APP_Rx_length = 0;
 8009a88:	bf24      	itt	cs
 8009a8a:	2200      	movcs	r2, #0
 8009a8c:	6162      	strcs	r2, [r4, #20]
    }
    USB_Tx_State = 1; 

    DCD_EP_Tx (pdev,
 8009a8e:	f241 322c 	movw	r2, #4908	; 0x132c
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
      USB_Tx_length = APP_Rx_length;
      
      APP_Rx_ptr_out += APP_Rx_length;
 8009a92:	bf2e      	itee	cs
 8009a94:	1949      	addcs	r1, r1, r5
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8009a96:	18c9      	addcc	r1, r1, r3
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8009a98:	ebc3 0505 	rsbcc	r5, r3, r5
      APP_Rx_ptr_out += APP_Rx_length;
      APP_Rx_length = 0;
    }
    USB_Tx_State = 1; 

    DCD_EP_Tx (pdev,
 8009a9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8009aa0:	bf39      	ittee	cc
 8009aa2:	60e1      	strcc	r1, [r4, #12]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8009aa4:	6165      	strcc	r5, [r4, #20]
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
      USB_Tx_length = APP_Rx_length;
      
      APP_Rx_ptr_out += APP_Rx_length;
 8009aa6:	60e1      	strcs	r1, [r4, #12]
 8009aa8:	b2ab      	uxthcs	r3, r5
      APP_Rx_length = 0;
    }
    USB_Tx_State = 1; 

    DCD_EP_Tx (pdev,
 8009aaa:	4432      	add	r2, r6
      USB_Tx_length = APP_Rx_length;
      
      APP_Rx_ptr_out += APP_Rx_length;
      APP_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8009aac:	2501      	movs	r5, #1

    DCD_EP_Tx (pdev,
 8009aae:	2181      	movs	r1, #129	; 0x81
      USB_Tx_length = APP_Rx_length;
      
      APP_Rx_ptr_out += APP_Rx_length;
      APP_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8009ab0:	7225      	strb	r5, [r4, #8]

    DCD_EP_Tx (pdev,
 8009ab2:	f000 ff31 	bl	800a918 <DCD_EP_Tx>
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
  }
  
  return USBD_OK;
}
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
    
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8009aba:	1a6d      	subs	r5, r5, r1
 8009abc:	6165      	str	r5, [r4, #20]
 8009abe:	e7de      	b.n	8009a7e <usbd_cdc_SOF+0x3e>
  
  if(USB_Tx_State != 1)
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
    {
      APP_Rx_ptr_out = 0;
 8009ac0:	60e3      	str	r3, [r4, #12]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 8009ac2:	461e      	mov	r6, r3
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	2d00      	cmp	r5, #0
 8009ac8:	d1f7      	bne.n	8009aba <usbd_cdc_SOF+0x7a>
    {
      USB_Tx_State = 0; 
 8009aca:	2300      	movs	r3, #0
 8009acc:	7223      	strb	r3, [r4, #8]
 8009ace:	e7c1      	b.n	8009a54 <usbd_cdc_SOF+0x14>

08009ad0 <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8009ad0:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8009ad2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8009ad6:	f240 0350 	movw	r3, #80	; 0x50
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8009ada:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8009ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009ae2:	f241 24e4 	movw	r4, #4836	; 0x12e4
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 8009ae6:	4605      	mov	r5, r0
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 8009ae8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009aec:	f8b1 1388 	ldrh.w	r1, [r1, #904]	; 0x388
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	4620      	mov	r0, r4
 8009af4:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8009af6:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
 8009afa:	4622      	mov	r2, r4
 8009afc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009b00:	4628      	mov	r0, r5
 8009b02:	2101      	movs	r1, #1
 8009b04:	f000 feec 	bl	800a8e0 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
}
 8009b08:	2000      	movs	r0, #0
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}

08009b0c <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8009b0c:	b570      	push	{r4, r5, r6, lr}
  uint16_t len;
  uint8_t  *pbuf;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b0e:	780b      	ldrb	r3, [r1, #0]
 8009b10:	f013 0560 	ands.w	r5, r3, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 8009b14:	460c      	mov	r4, r1
 8009b16:	4606      	mov	r6, r0
  uint16_t len;
  uint8_t  *pbuf;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b18:	d01e      	beq.n	8009b58 <usbd_cdc_Setup+0x4c>
 8009b1a:	2d20      	cmp	r5, #32
 8009b1c:	d118      	bne.n	8009b50 <usbd_cdc_Setup+0x44>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 8009b1e:	88cd      	ldrh	r5, [r1, #6]
 8009b20:	2d00      	cmp	r5, #0
 8009b22:	d054      	beq.n	8009bce <usbd_cdc_Setup+0xc2>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 8009b24:	061b      	lsls	r3, r3, #24
 8009b26:	d436      	bmi.n	8009b96 <usbd_cdc_Setup+0x8a>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8009b28:	f240 06e4 	movw	r6, #228	; 0xe4
          cdcLen = req->wLength;
 8009b2c:	f640 2334 	movw	r3, #2612	; 0xa34
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8009b30:	784c      	ldrb	r4, [r1, #1]
 8009b32:	f2c2 0600 	movt	r6, #8192	; 0x2000
          cdcLen = req->wLength;
 8009b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 8009b3a:	f241 3124 	movw	r1, #4900	; 0x1324
 8009b3e:	462a      	mov	r2, r5
 8009b40:	f2c2 0100 	movt	r1, #8192	; 0x2000
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8009b44:	6034      	str	r4, [r6, #0]
          cdcLen = req->wLength;
 8009b46:	601d      	str	r5, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 8009b48:	f7ff fcb2 	bl	80094b0 <USBD_CtlPrepareRx>
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
      }
      
      return USBD_OK;
 8009b4c:	2000      	movs	r0, #0
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
      
    default:
      USBD_CtlError (pdev, req);
 8009b50:	f7ff fd10 	bl	8009574 <USBD_CtlError>
      return USBD_FAIL;
 8009b54:	2002      	movs	r0, #2
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009b58:	784b      	ldrb	r3, [r1, #1]
 8009b5a:	2b0a      	cmp	r3, #10
 8009b5c:	d031      	beq.n	8009bc2 <usbd_cdc_Setup+0xb6>
 8009b5e:	2b0b      	cmp	r3, #11
 8009b60:	d00f      	beq.n	8009b82 <usbd_cdc_Setup+0x76>
 8009b62:	2b06      	cmp	r3, #6
 8009b64:	d1f2      	bne.n	8009b4c <usbd_cdc_Setup+0x40>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 8009b66:	884b      	ldrh	r3, [r1, #2]
 8009b68:	0a1b      	lsrs	r3, r3, #8
 8009b6a:	2b21      	cmp	r3, #33	; 0x21
 8009b6c:	d103      	bne.n	8009b76 <usbd_cdc_Setup+0x6a>
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = usbd_cdc_Desc;   
#else
        pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
#endif 
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 8009b6e:	88ca      	ldrh	r2, [r1, #6]
 8009b70:	2a3a      	cmp	r2, #58	; 0x3a
 8009b72:	bf28      	it	cs
 8009b74:	223a      	movcs	r2, #58	; 0x3a
      }
      
      USBD_CtlSendData (pdev, 
 8009b76:	4630      	mov	r0, r6
 8009b78:	491c      	ldr	r1, [pc, #112]	; (8009bec <usbd_cdc_Setup+0xe0>)
 8009b7a:	f7ff fc81 	bl	8009480 <USBD_CtlSendData>
        USBD_CtlError (pdev, req);
      }
      break;
    }
  }
  return USBD_OK;
 8009b7e:	2000      	movs	r0, #0
      }
      
      USBD_CtlSendData (pdev, 
                        pbuf,
                        len);
      break;
 8009b80:	bd70      	pop	{r4, r5, r6, pc}
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 8009b82:	788b      	ldrb	r3, [r1, #2]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d12d      	bne.n	8009be4 <usbd_cdc_Setup+0xd8>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8009b88:	f640 2234 	movw	r2, #2612	; 0xa34
 8009b8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
        USBD_CtlError (pdev, req);
      }
      break;
    }
  }
  return USBD_OK;
 8009b90:	4618      	mov	r0, r3
      break;
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8009b92:	6193      	str	r3, [r2, #24]
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 8009b96:	f240 0350 	movw	r3, #80	; 0x50
 8009b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009b9e:	f241 3124 	movw	r1, #4900	; 0x1324
 8009ba2:	462a      	mov	r2, r5
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	7860      	ldrb	r0, [r4, #1]
 8009ba8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009bac:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 8009bae:	f241 3124 	movw	r1, #4900	; 0x1324
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	88e2      	ldrh	r2, [r4, #6]
 8009bb6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009bba:	f7ff fc61 	bl	8009480 <USBD_CtlSendData>
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
      }
      
      return USBD_OK;
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
                        pbuf,
                        len);
      break;
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8009bc2:	490b      	ldr	r1, [pc, #44]	; (8009bf0 <usbd_cdc_Setup+0xe4>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f7ff fc5b 	bl	8009480 <USBD_CtlSendData>
        USBD_CtlError (pdev, req);
      }
      break;
    }
  }
  return USBD_OK;
 8009bca:	4628      	mov	r0, r5
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 8009bcc:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 8009bce:	f240 0350 	movw	r3, #80	; 0x50
 8009bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009bd6:	7848      	ldrb	r0, [r1, #1]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	4629      	mov	r1, r5
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4798      	blx	r3
      }
      
      return USBD_OK;
 8009be0:	4628      	mov	r0, r5
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
      }
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
 8009be4:	f7ff fcc6 	bl	8009574 <USBD_CtlError>
      }
      break;
    }
  }
  return USBD_OK;
 8009be8:	4628      	mov	r0, r5
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	200000fa 	.word	0x200000fa
 8009bf0:	20000a4c 	.word	0x20000a4c

08009bf4 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8009bf4:	b510      	push	{r4, lr}
  /* Open EP IN */
  DCD_EP_Close(pdev,
 8009bf6:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8009bf8:	4604      	mov	r4, r0
  /* Open EP IN */
  DCD_EP_Close(pdev,
 8009bfa:	f000 fe55 	bl	800a8a8 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8009bfe:	4620      	mov	r0, r4
 8009c00:	2101      	movs	r1, #1
 8009c02:	f000 fe51 	bl	800a8a8 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 8009c06:	2182      	movs	r1, #130	; 0x82
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 fe4d 	bl	800a8a8 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8009c0e:	f240 0350 	movw	r3, #80	; 0x50
 8009c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	4798      	blx	r3
  
  return USBD_OK;
}
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	bf00      	nop

08009c20 <usbd_cdc_Init>:
                               uint8_t cfgidx)
{
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 8009c20:	f8d0 25ec 	ldr.w	r2, [r0, #1516]	; 0x5ec
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4604      	mov	r4, r0
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 8009c28:	2181      	movs	r1, #129	; 0x81
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	f8b2 2039 	ldrh.w	r2, [r2, #57]	; 0x39
 8009c30:	f000 fe14 	bl	800a85c <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 8009c34:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009c3e:	2101      	movs	r1, #1
 8009c40:	2302      	movs	r3, #2
 8009c42:	f000 fe0b 	bl	800a85c <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 8009c46:	4620      	mov	r0, r4
 8009c48:	2182      	movs	r1, #130	; 0x82
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	f000 fe05 	bl	800a85c <DCD_EP_Open>
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
  pbuf[4] = DEVICE_CLASS_CDC;
 8009c52:	f240 0380 	movw	r3, #128	; 0x80
  pbuf[5] = DEVICE_SUBCLASS_CDC;
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 8009c56:	f240 0250 	movw	r2, #80	; 0x50
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
  pbuf[4] = DEVICE_CLASS_CDC;
 8009c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  pbuf[5] = DEVICE_SUBCLASS_CDC;
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 8009c5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
  pbuf[4] = DEVICE_CLASS_CDC;
 8009c62:	2102      	movs	r1, #2
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 8009c64:	2500      	movs	r5, #0
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
  pbuf[4] = DEVICE_CLASS_CDC;
 8009c66:	7119      	strb	r1, [r3, #4]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 8009c68:	715d      	strb	r5, [r3, #5]
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 8009c6e:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
 8009c72:	f241 22e4 	movw	r2, #4836	; 0x12e4
 8009c76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009c80:	2101      	movs	r1, #1
 8009c82:	f000 fe2d 	bl	800a8e0 <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
}
 8009c86:	4628      	mov	r0, r5
 8009c88:	bd38      	pop	{r3, r4, r5, pc}
 8009c8a:	bf00      	nop

08009c8c <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 8009c8c:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
 8009c8e:	f640 2134 	movw	r1, #2612	; 0xa34
 8009c92:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8009c96:	7a0b      	ldrb	r3, [r1, #8]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d001      	beq.n	8009ca0 <usbd_cdc_DataIn+0x14>
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
}
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
  {
    if (APP_Rx_length == 0) 
 8009ca0:	694c      	ldr	r4, [r1, #20]
 8009ca2:	b1e4      	cbz	r4, 8009cde <usbd_cdc_DataIn+0x52>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8009ca4:	f8d0 35ec 	ldr.w	r3, [r0, #1516]	; 0x5ec
        USB_Tx_ptr = APP_Rx_ptr_out;
 8009ca8:	68cd      	ldr	r5, [r1, #12]
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 8009caa:	f8b3 3039 	ldrh.w	r3, [r3, #57]	; 0x39
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d80f      	bhi.n	8009cd2 <usbd_cdc_DataIn+0x46>
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
        USB_Tx_length = APP_Rx_length;
        
        APP_Rx_ptr_out += APP_Rx_length;
 8009cb2:	192b      	adds	r3, r5, r4
        APP_Rx_length = 0;
 8009cb4:	2200      	movs	r2, #0
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
        USB_Tx_length = APP_Rx_length;
        
        APP_Rx_ptr_out += APP_Rx_length;
 8009cb6:	60cb      	str	r3, [r1, #12]
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 8009cb8:	b2ad      	uxth	r5, r5
        USB_Tx_length = APP_Rx_length;
        
        APP_Rx_ptr_out += APP_Rx_length;
        APP_Rx_length = 0;
 8009cba:	4623      	mov	r3, r4
 8009cbc:	614a      	str	r2, [r1, #20]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
 8009cbe:	f241 322c 	movw	r2, #4908	; 0x132c
 8009cc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8009cc6:	442a      	add	r2, r5
 8009cc8:	2181      	movs	r1, #129	; 0x81
 8009cca:	f000 fe25 	bl	800a918 <DCD_EP_Tx>
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
}
 8009cce:	2000      	movs	r0, #0
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
        USB_Tx_ptr = APP_Rx_ptr_out;
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 8009cd2:	195a      	adds	r2, r3, r5
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 8009cd4:	1ae4      	subs	r4, r4, r3
 8009cd6:	614c      	str	r4, [r1, #20]
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
        USB_Tx_ptr = APP_Rx_ptr_out;
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 8009cd8:	60ca      	str	r2, [r1, #12]
      USB_Tx_State = 0;
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
        USB_Tx_ptr = APP_Rx_ptr_out;
 8009cda:	b2ad      	uxth	r5, r5
 8009cdc:	e7ef      	b.n	8009cbe <usbd_cdc_DataIn+0x32>

  if (USB_Tx_State == 1)
  {
    if (APP_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8009cde:	720c      	strb	r4, [r1, #8]
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
}
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}

08009ce4 <USB_OTG_CoreReset.isra.1>:
/**
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
 8009ce4:	b530      	push	{r4, r5, lr}
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	b083      	sub	sp, #12
{
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 8009cea:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8009cec:	2003      	movs	r0, #3
{
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 8009cee:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8009cf0:	f7fe fd9a 	bl	8008828 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	691a      	ldr	r2, [r3, #16]
 8009cf8:	f44f 6454 	mov.w	r4, #3392	; 0xd40
 8009cfc:	9201      	str	r2, [sp, #4]
 8009cfe:	f2c0 0403 	movt	r4, #3
 8009d02:	e006      	b.n	8009d12 <USB_OTG_CoreReset.isra.1+0x2e>
  
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8009d04:	f7fe fd90 	bl	8008828 <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	691a      	ldr	r2, [r3, #16]
    if (++count > 200000)
 8009d0c:	3c01      	subs	r4, #1
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8009d0e:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 8009d10:	d01b      	beq.n	8009d4a <USB_OTG_CoreReset.isra.1+0x66>
    {
      return USB_OTG_OK;
    }
  }
  while (greset.b.ahbidle == 0);
 8009d12:	9a01      	ldr	r2, [sp, #4]
 8009d14:	2a00      	cmp	r2, #0
  
  greset.d32 = 0;
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 8009d16:	f04f 0003 	mov.w	r0, #3
    if (++count > 200000)
    {
      return USB_OTG_OK;
    }
  }
  while (greset.b.ahbidle == 0);
 8009d1a:	daf3      	bge.n	8009d04 <USB_OTG_CoreReset.isra.1+0x20>
  /* Core Soft Reset */
  count = 0;
  greset.b.csftrst = 1;
 8009d1c:	9a01      	ldr	r2, [sp, #4]
 8009d1e:	f042 0201 	orr.w	r2, r2, #1
 8009d22:	9201      	str	r2, [sp, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8009d24:	9a01      	ldr	r2, [sp, #4]
 8009d26:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8009d28:	6919      	ldr	r1, [r3, #16]
 8009d2a:	f44f 6254 	mov.w	r2, #3392	; 0xd40
 8009d2e:	9101      	str	r1, [sp, #4]
 8009d30:	f2c0 0203 	movt	r2, #3
 8009d34:	e003      	b.n	8009d3e <USB_OTG_CoreReset.isra.1+0x5a>
 8009d36:	6919      	ldr	r1, [r3, #16]
    if (++count > 200000)
 8009d38:	3a01      	subs	r2, #1
  count = 0;
  greset.b.csftrst = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 8009d3a:	9101      	str	r1, [sp, #4]
    if (++count > 200000)
 8009d3c:	d002      	beq.n	8009d44 <USB_OTG_CoreReset.isra.1+0x60>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 8009d3e:	9901      	ldr	r1, [sp, #4]
 8009d40:	07c9      	lsls	r1, r1, #31
 8009d42:	d4f8      	bmi.n	8009d36 <USB_OTG_CoreReset.isra.1+0x52>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8009d44:	2003      	movs	r0, #3
 8009d46:	f7fe fd6f 	bl	8008828 <USB_OTG_BSP_uDelay>
  return status;
}
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	b003      	add	sp, #12
 8009d4e:	bd30      	pop	{r4, r5, pc}

08009d50 <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 8009d50:	b430      	push	{r4, r5}
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 8009d52:	78c5      	ldrb	r5, [r0, #3]
 8009d54:	b96d      	cbnz	r5, 8009d72 <USB_OTG_WritePacket+0x22>
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8009d56:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8009d5a:	3303      	adds	r3, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 8009d5c:	109b      	asrs	r3, r3, #2
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8009d5e:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
    for (i = 0; i < count32b; i++, src+=4)
 8009d62:	d006      	beq.n	8009d72 <USB_OTG_WritePacket+0x22>
 8009d64:	462a      	mov	r2, r5
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8009d66:	f851 0b04 	ldr.w	r0, [r1], #4
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 8009d6a:	3201      	adds	r2, #1
 8009d6c:	4293      	cmp	r3, r2
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8009d6e:	6020      	str	r0, [r4, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 8009d70:	d1f9      	bne.n	8009d66 <USB_OTG_WritePacket+0x16>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
    }
  }
  return status;
}
 8009d72:	2000      	movs	r0, #0
 8009d74:	bc30      	pop	{r4, r5}
 8009d76:	4770      	bx	lr

08009d78 <USB_OTG_ReadPacket>:
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 8009d78:	3203      	adds	r2, #3
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8009d7a:	b470      	push	{r4, r5, r6}
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8009d7c:	1095      	asrs	r5, r2, #2
                         uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 8009d7e:	f8d0 60d0 	ldr.w	r6, [r0, #208]	; 0xd0
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8009d82:	d009      	beq.n	8009d98 <USB_OTG_ReadPacket+0x20>
 8009d84:	460a      	mov	r2, r1
 8009d86:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8009d88:	6834      	ldr	r4, [r6, #0]
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	429d      	cmp	r5, r3
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 8009d8e:	f842 4b04 	str.w	r4, [r2], #4
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 8009d92:	d1f9      	bne.n	8009d88 <USB_OTG_ReadPacket+0x10>
 8009d94:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
    
  }
  return ((void *)dest);
}
 8009d98:	4608      	mov	r0, r1
 8009d9a:	bc70      	pop	{r4, r5, r6}
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop

08009da0 <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 8009da0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8009da4:	2401      	movs	r4, #1
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8009da6:	2240      	movs	r2, #64	; 0x40
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 8009da8:	2300      	movs	r3, #0
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8009daa:	42a1      	cmp	r1, r4
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8009dac:	7084      	strb	r4, [r0, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 8009dae:	8082      	strh	r2, [r0, #4]
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
  USB_OTG_STS status = USB_OTG_OK;
  
  pdev->cfg.dma_enable       = 0;
 8009db0:	70c3      	strb	r3, [r0, #3]
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8009db2:	d069      	beq.n	8009e88 <USB_OTG_SelectCore+0xe8>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d046      	beq.n	8009e46 <USB_OTG_SelectCore+0xa6>
 8009db8:	7842      	ldrb	r2, [r0, #1]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8009dba:	60c3      	str	r3, [r0, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8009dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009dc0:	6101      	str	r1, [r0, #16]
 8009dc2:	f890 8000 	ldrb.w	r8, [r0]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	d07e      	beq.n	8009ec8 <USB_OTG_SelectCore+0x128>
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
 8009dca:	469c      	mov	ip, r3
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8009dcc:	f44f 6660 	mov.w	r6, #3584	; 0xe00
 8009dd0:	f44f 6b88 	mov.w	fp, #1088	; 0x440
 8009dd4:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8009dd8:	ea4f 1942 	mov.w	r9, r2, lsl #5
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4602      	mov	r2, r0
 8009de0:	f50c 6710 	add.w	r7, ip, #2304	; 0x900
 8009de4:	f50c 6530 	add.w	r5, ip, #2816	; 0xb00
 8009de8:	18fc      	adds	r4, r7, r3
 8009dea:	18e9      	adds	r1, r5, r3
 8009dec:	3320      	adds	r3, #32
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8009dee:	454b      	cmp	r3, r9
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8009df0:	6194      	str	r4, [r2, #24]
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 8009df2:	6551      	str	r1, [r2, #84]	; 0x54
 8009df4:	f102 0204 	add.w	r2, r2, #4
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8009df8:	d1f6      	bne.n	8009de8 <USB_OTG_SelectCore+0x48>
 8009dfa:	f50c 62a0 	add.w	r2, ip, #1280	; 0x500
        (i * USB_OTG_EP_REG_OFFSET));
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 8009dfe:	f8c0 a014 	str.w	sl, [r0, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 8009e02:	f8c0 b0cc 	str.w	fp, [r0, #204]	; 0xcc
 8009e06:	eb02 1448 	add.w	r4, r2, r8, lsl #5
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	f1b8 0f00 	cmp.w	r8, #0
 8009e10:	d013      	beq.n	8009e3a <USB_OTG_SelectCore+0x9a>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 8009e12:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8009e16:	3220      	adds	r2, #32
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8009e18:	42a2      	cmp	r2, r4
 8009e1a:	f101 0104 	add.w	r1, r1, #4
 8009e1e:	d1f8      	bne.n	8009e12 <USB_OTG_SelectCore+0x72>
 8009e20:	f50c 5380 	add.w	r3, ip, #4096	; 0x1000
 8009e24:	eb03 3108 	add.w	r1, r3, r8, lsl #12
 8009e28:	4602      	mov	r2, r0
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8009e2a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
 8009e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 8009e32:	428b      	cmp	r3, r1
 8009e34:	f102 0204 	add.w	r2, r2, #4
 8009e38:	d1f7      	bne.n	8009e2a <USB_OTG_SelectCore+0x8a>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8009e3a:	f8c0 610c 	str.w	r6, [r0, #268]	; 0x10c
  
  return status;
}
 8009e3e:	2000      	movs	r0, #0
 8009e40:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e44:	4770      	bx	lr
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
    pdev->cfg.dev_endpoints    = 6 ;
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8009e46:	2300      	movs	r3, #0
 8009e48:	f2c4 0304 	movt	r3, #16388	; 0x4004
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
 8009e4c:	f04f 080c 	mov.w	r8, #12
    pdev->cfg.dev_endpoints    = 6 ;
 8009e50:	2206      	movs	r2, #6
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8009e52:	f44f 65a0 	mov.w	r5, #1280	; 0x500
 8009e56:	f44f 6660 	mov.w	r6, #3584	; 0xe00
 8009e5a:	f44f 6b88 	mov.w	fp, #1088	; 0x440
 8009e5e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8009e62:	f44f 6400 	mov.w	r4, #2048	; 0x800
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 8009e66:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8009e68:	469c      	mov	ip, r3
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
    pdev->cfg.host_channels    = 12 ;
 8009e6a:	f880 8000 	strb.w	r8, [r0]
    pdev->cfg.dev_endpoints    = 6 ;
 8009e6e:	7042      	strb	r2, [r0, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 8009e70:	80c5      	strh	r5, [r0, #6]
 8009e72:	f2c4 0604 	movt	r6, #16388	; 0x4004
 8009e76:	f2c4 0b04 	movt	fp, #16388	; 0x4004
 8009e7a:	f2c4 0a04 	movt	sl, #16388	; 0x4004
 8009e7e:	f2c4 0404 	movt	r4, #16388	; 0x4004
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8009e82:	60c3      	str	r3, [r0, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 8009e84:	6104      	str	r4, [r0, #16]
 8009e86:	e7a7      	b.n	8009dd8 <USB_OTG_SelectCore+0x38>
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
    pdev->cfg.host_channels    = 8 ;
 8009e88:	f04f 0808 	mov.w	r8, #8
    pdev->cfg.dev_endpoints    = 4 ;
 8009e8c:	2204      	movs	r2, #4
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8009e8e:	f44f 77a0 	mov.w	r7, #320	; 0x140
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8009e92:	2502      	movs	r5, #2
 8009e94:	f44f 6660 	mov.w	r6, #3584	; 0xe00
 8009e98:	f44f 6b88 	mov.w	fp, #1088	; 0x440
 8009e9c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8009ea0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8009ea4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 8009ea8:	72c1      	strb	r1, [r0, #11]
    pdev->cfg.host_channels    = 8 ;
 8009eaa:	f880 8000 	strb.w	r8, [r0]
    pdev->cfg.dev_endpoints    = 4 ;
 8009eae:	7042      	strb	r2, [r0, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8009eb0:	80c7      	strh	r7, [r0, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8009eb2:	7205      	strb	r5, [r0, #8]
 8009eb4:	f2c5 0600 	movt	r6, #20480	; 0x5000
 8009eb8:	f2c5 0b00 	movt	fp, #20480	; 0x5000
 8009ebc:	f2c5 0a00 	movt	sl, #20480	; 0x5000
 8009ec0:	f2c5 0400 	movt	r4, #20480	; 0x5000
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
    
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8009ec4:	469c      	mov	ip, r3
 8009ec6:	e7dc      	b.n	8009e82 <USB_OTG_SelectCore+0xe2>
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
  uint32_t i , baseAddress = 0;
 8009ec8:	4694      	mov	ip, r2
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8009eca:	f44f 6660 	mov.w	r6, #3584	; 0xe00
 8009ece:	f44f 6b88 	mov.w	fp, #1088	; 0x440
 8009ed2:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8009ed6:	e790      	b.n	8009dfa <USB_OTG_SelectCore+0x5a>

08009ed8 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8009ed8:	b538      	push	{r3, r4, r5, lr}
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009eda:	7a03      	ldrb	r3, [r0, #8]
 8009edc:	2b01      	cmp	r3, #1
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8009ede:	4604      	mov	r4, r0
  USB_OTG_GI2CCTL_TypeDef  i2cctl;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
  gccfg.d32 = 0;
  ahbcfg.d32 = 0;
 8009ee0:	f04f 0500 	mov.w	r5, #0
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ee4:	d030      	beq.n	8009f48 <USB_OTG_CoreInit+0x70>
    }    
  }
  else /* FS interface (embedded Phy or I2C Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8009ee6:	f850 2f0c 	ldr.w	r2, [r0, #12]!
 8009eea:	68d3      	ldr	r3, [r2, #12]
    usbcfg.b.physel  = 1; /* FS Interface */
 8009eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8009ef0:	60d3      	str	r3, [r2, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8009ef2:	f7ff fef7 	bl	8009ce4 <USB_OTG_CoreReset.isra.1>
    /* Enable the I2C interface and deactivate the power down*/
    gccfg.d32 = 0;
    gccfg.b.pwdn = 1;
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8009ef6:	7a23      	ldrb	r3, [r4, #8]
    gccfg.b.vbussensingB = 1 ;     
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
#endif    
    
    if(pdev->cfg.Sof_output)
 8009ef8:	7a62      	ldrb	r2, [r4, #9]
      gccfg.b.i2cifen = 1;
    }   
    gccfg.b.vbussensingA = 1 ;
    gccfg.b.vbussensingB = 1 ;     
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	bf14      	ite	ne
 8009efe:	f44f 1334 	movne.w	r3, #2949120	; 0x2d0000
 8009f02:	f44f 133c 	moveq.w	r3, #3080192	; 0x2f0000
#endif    
    
    if(pdev->cfg.Sof_output)
 8009f06:	b10a      	cbz	r2, 8009f0c <USB_OTG_CoreInit+0x34>
    {
      gccfg.b.sofouten = 1;  
 8009f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8009f0c:	68e2      	ldr	r2, [r4, #12]
    USB_OTG_BSP_mDelay(20);
 8009f0e:	2014      	movs	r0, #20
    if(pdev->cfg.Sof_output)
    {
      gccfg.b.sofouten = 1;  
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8009f10:	6393      	str	r3, [r2, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8009f12:	f7fe fca9 	bl	8008868 <USB_OTG_BSP_mDelay>
    /* Program GUSBCFG.OtgUtmifsSel to I2C*/
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8009f16:	68e3      	ldr	r3, [r4, #12]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8009f18:	7a22      	ldrb	r2, [r4, #8]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
    USB_OTG_BSP_mDelay(20);
    /* Program GUSBCFG.OtgUtmifsSel to I2C*/
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8009f1a:	68d9      	ldr	r1, [r3, #12]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8009f1c:	2a03      	cmp	r2, #3
    {
      usbcfg.b.otgutmifssel = 1;
 8009f1e:	bf0c      	ite	eq
 8009f20:	f441 3280 	orreq.w	r2, r1, #65536	; 0x10000
 8009f24:	460a      	movne	r2, r1
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8009f26:	60da      	str	r2, [r3, #12]
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
 8009f28:	7a22      	ldrb	r2, [r4, #8]
 8009f2a:	2a03      	cmp	r2, #3
 8009f2c:	d037      	beq.n	8009f9e <USB_OTG_CoreInit+0xc6>
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
      USB_OTG_BSP_mDelay(200);
    }
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8009f2e:	78e3      	ldrb	r3, [r4, #3]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d107      	bne.n	8009f44 <USB_OTG_CoreInit+0x6c>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8009f34:	68e3      	ldr	r3, [r4, #12]
 8009f36:	689d      	ldr	r5, [r3, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8009f38:	2205      	movs	r2, #5
 8009f3a:	f362 0544 	bfi	r5, r2, #1, #4
    ahbcfg.b.dmaenable = 1;
 8009f3e:	f045 0520 	orr.w	r5, r5, #32
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8009f42:	609d      	str	r5, [r3, #8]
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
}
 8009f44:	2000      	movs	r0, #0
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8009f48:	68c2      	ldr	r2, [r0, #12]
    gccfg.b.pwdn = 0;
    
    if (pdev->cfg.Sof_output)
 8009f4a:	7a41      	ldrb	r1, [r0, #9]
  

  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8009f4c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    gccfg.b.pwdn = 0;
 8009f4e:	f365 4310 	bfi	r3, r5, #16, #1
    
    if (pdev->cfg.Sof_output)
 8009f52:	b109      	cbz	r1, 8009f58 <USB_OTG_CoreInit+0x80>
    {
      gccfg.b.sofouten = 1;   
 8009f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8009f58:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8009f5a:	68d3      	ldr	r3, [r2, #12]
#else
 #ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
 #endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 8009f5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009f60:	f023 0350 	bic.w	r3, r3, #80	; 0x50
    usbcfg.b.ulpi_utmi_sel     = 1; /* ULPI seleInterfacect */
 8009f64:	f043 0310 	orr.w	r3, r3, #16
    
    usbcfg.b.phyif             = 0; /* 8 bits */
 8009f68:	f36f 03c3 	bfc	r3, #3, #1
    usbcfg.b.ddrsel            = 0; /* single data rate */
 8009f6c:	f36f 13c7 	bfc	r3, #7, #1
    
    usbcfg.b.ulpi_fsls = 0;
 8009f70:	f36f 4351 	bfc	r3, #17, #1
    usbcfg.b.ulpi_clk_sus_m = 0;
 8009f74:	f36f 43d3 	bfc	r3, #19, #1
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8009f78:	60d3      	str	r3, [r2, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 8009f7a:	f104 000c 	add.w	r0, r4, #12
 8009f7e:	f7ff feb1 	bl	8009ce4 <USB_OTG_CoreReset.isra.1>
    
    if(pdev->cfg.dma_enable == 1)
 8009f82:	78e3      	ldrb	r3, [r4, #3]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d1dd      	bne.n	8009f44 <USB_OTG_CoreInit+0x6c>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8009f88:	2305      	movs	r3, #5
 8009f8a:	f363 0544 	bfi	r5, r3, #1, #4
      ahbcfg.b.dmaenable = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8009f8e:	68e3      	ldr	r3, [r4, #12]
    
    if(pdev->cfg.dma_enable == 1)
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
      ahbcfg.b.dmaenable = 1;
 8009f90:	f045 0520 	orr.w	r5, r5, #32
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8009f94:	609d      	str	r5, [r3, #8]
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
      USB_OTG_BSP_mDelay(200);
    }
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8009f96:	78e3      	ldrb	r3, [r4, #3]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d0cb      	beq.n	8009f34 <USB_OTG_CoreInit+0x5c>
 8009f9c:	e7d2      	b.n	8009f44 <USB_OTG_CoreInit+0x6c>
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
    
    if(pdev->cfg.phy_itface == USB_OTG_I2C_PHY)
    {
      /*Program GI2CCTL.I2CEn*/
      i2cctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GI2CCTL);
 8009f9e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      i2cctl.b.i2cdevaddr = 1;
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f362 659b 	bfi	r5, r2, #26, #2
      i2cctl.b.i2cen = 0;
 8009fa6:	f36f 55d7 	bfc	r5, #23, #1
      i2cctl.b.dat_se0 = 1;
      i2cctl.b.addr = 0x2D;
 8009faa:	222d      	movs	r2, #45	; 0x2d
    {
      /*Program GI2CCTL.I2CEn*/
      i2cctl.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GI2CCTL);
      i2cctl.b.i2cdevaddr = 1;
      i2cctl.b.i2cen = 0;
      i2cctl.b.dat_se0 = 1;
 8009fac:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
      i2cctl.b.addr = 0x2D;
 8009fb0:	f362 4516 	bfi	r5, r2, #16, #7
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8009fb4:	631d      	str	r5, [r3, #48]	; 0x30
      
      USB_OTG_BSP_mDelay(200);
 8009fb6:	20c8      	movs	r0, #200	; 0xc8
 8009fb8:	f7fe fc56 	bl	8008868 <USB_OTG_BSP_mDelay>
      
      i2cctl.b.i2cen = 1;
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8009fbc:	68e3      	ldr	r3, [r4, #12]
      i2cctl.b.addr = 0x2D;
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
      
      USB_OTG_BSP_mDelay(200);
      
      i2cctl.b.i2cen = 1;
 8009fbe:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
      USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GI2CCTL, i2cctl.d32);
 8009fc2:	631d      	str	r5, [r3, #48]	; 0x30
      USB_OTG_BSP_mDelay(200);
 8009fc4:	20c8      	movs	r0, #200	; 0xc8
 8009fc6:	f7fe fc4f 	bl	8008868 <USB_OTG_BSP_mDelay>
 8009fca:	e7b0      	b.n	8009f2e <USB_OTG_CoreInit+0x56>

08009fcc <USB_OTG_EnableGlobalInt>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8009fcc:	68c3      	ldr	r3, [r0, #12]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	f042 0201 	orr.w	r2, r2, #1
 8009fd4:	609a      	str	r2, [r3, #8]
  return status;
}
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop

08009fdc <USB_OTG_DisableGlobalInt>:
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8009fdc:	68c3      	ldr	r3, [r0, #12]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	f022 0201 	bic.w	r2, r2, #1
 8009fe4:	609a      	str	r2, [r3, #8]
  return status;
}
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop

08009fec <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8009fec:	b500      	push	{lr}
 8009fee:	b083      	sub	sp, #12
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
  greset.d32 = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9301      	str	r3, [sp, #4]
  greset.b.txfflsh = 1;
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	f043 0320 	orr.w	r3, r3, #32
 8009ffa:	9301      	str	r3, [sp, #4]
  greset.b.txfnum  = num;
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	f361 138a 	bfi	r3, r1, #6, #5
 800a002:	9301      	str	r3, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800a004:	9b01      	ldr	r3, [sp, #4]
 800a006:	68c1      	ldr	r1, [r0, #12]
 800a008:	610b      	str	r3, [r1, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 800a00a:	690a      	ldr	r2, [r1, #16]
 800a00c:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800a010:	9201      	str	r2, [sp, #4]
 800a012:	f2c0 0303 	movt	r3, #3
 800a016:	e003      	b.n	800a020 <USB_OTG_FlushTxFifo+0x34>
 800a018:	690a      	ldr	r2, [r1, #16]
    if (++count > 200000)
 800a01a:	3b01      	subs	r3, #1
  greset.b.txfflsh = 1;
  greset.b.txfnum  = num;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 800a01c:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 800a01e:	d002      	beq.n	800a026 <USB_OTG_FlushTxFifo+0x3a>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 800a020:	9a01      	ldr	r2, [sp, #4]
 800a022:	0690      	lsls	r0, r2, #26
 800a024:	d4f8      	bmi.n	800a018 <USB_OTG_FlushTxFifo+0x2c>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 800a026:	2003      	movs	r0, #3
 800a028:	f7fe fbfe 	bl	8008828 <USB_OTG_BSP_uDelay>
  return status;
}
 800a02c:	2000      	movs	r0, #0
 800a02e:	b003      	add	sp, #12
 800a030:	f85d fb04 	ldr.w	pc, [sp], #4

0800a034 <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 800a034:	b500      	push	{lr}
 800a036:	b083      	sub	sp, #12
  USB_OTG_STS status = USB_OTG_OK;
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
  
  greset.d32 = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	9301      	str	r3, [sp, #4]
  greset.b.rxfflsh = 1;
 800a03c:	9b01      	ldr	r3, [sp, #4]
 800a03e:	f043 0310 	orr.w	r3, r3, #16
 800a042:	9301      	str	r3, [sp, #4]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	68c1      	ldr	r1, [r0, #12]
 800a048:	610b      	str	r3, [r1, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 800a04a:	690a      	ldr	r2, [r1, #16]
 800a04c:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 800a050:	9201      	str	r2, [sp, #4]
 800a052:	f2c0 0303 	movt	r3, #3
 800a056:	e003      	b.n	800a060 <USB_OTG_FlushRxFifo+0x2c>
 800a058:	690a      	ldr	r2, [r1, #16]
    if (++count > 200000)
 800a05a:	3b01      	subs	r3, #1
  greset.d32 = 0;
  greset.b.rxfflsh = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 800a05c:	9201      	str	r2, [sp, #4]
    if (++count > 200000)
 800a05e:	d002      	beq.n	800a066 <USB_OTG_FlushRxFifo+0x32>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 800a060:	9a01      	ldr	r2, [sp, #4]
 800a062:	06d2      	lsls	r2, r2, #27
 800a064:	d4f8      	bmi.n	800a058 <USB_OTG_FlushRxFifo+0x24>
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 800a066:	2003      	movs	r0, #3
 800a068:	f7fe fbde 	bl	8008828 <USB_OTG_BSP_uDelay>
  return status;
}
 800a06c:	2000      	movs	r0, #0
 800a06e:	b003      	add	sp, #12
 800a070:	f85d fb04 	ldr.w	pc, [sp], #4

0800a074 <USB_OTG_SetCurrentMode>:
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800a074:	68c2      	ldr	r2, [r0, #12]
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 800a076:	b508      	push	{r3, lr}
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800a078:	68d3      	ldr	r3, [r2, #12]
  
  usbcfg.b.force_host = 0;
 800a07a:	f36f 735d 	bfc	r3, #29, #1
  usbcfg.b.force_dev = 0;
 800a07e:	f36f 739e 	bfc	r3, #30, #1
  
  if ( mode == HOST_MODE)
 800a082:	2901      	cmp	r1, #1
  {
    usbcfg.b.force_host = 1;
 800a084:	bf08      	it	eq
 800a086:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  usbcfg.b.force_host = 0;
  usbcfg.b.force_dev = 0;
  
  if ( mode == HOST_MODE)
 800a08a:	d002      	beq.n	800a092 <USB_OTG_SetCurrentMode+0x1e>
  {
    usbcfg.b.force_host = 1;
  }
  else if ( mode == DEVICE_MODE)
 800a08c:	b909      	cbnz	r1, 800a092 <USB_OTG_SetCurrentMode+0x1e>
  {
    usbcfg.b.force_dev = 1;
 800a08e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 800a092:	60d3      	str	r3, [r2, #12]
  USB_OTG_BSP_mDelay(50);
 800a094:	2032      	movs	r0, #50	; 0x32
 800a096:	f7fe fbe7 	bl	8008868 <USB_OTG_BSP_mDelay>
  return status;
}
 800a09a:	2000      	movs	r0, #0
 800a09c:	bd08      	pop	{r3, pc}
 800a09e:	bf00      	nop

0800a0a0 <USB_OTG_GetMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 800a0a0:	68c3      	ldr	r3, [r0, #12]
 800a0a2:	6958      	ldr	r0, [r3, #20]
}
 800a0a4:	f000 0001 	and.w	r0, r0, #1
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop

0800a0ac <USB_OTG_IsDeviceMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 800a0ac:	68c3      	ldr	r3, [r0, #12]
 800a0ae:	6958      	ldr	r0, [r3, #20]
 800a0b0:	f000 0001 	and.w	r0, r0, #1
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
}
 800a0b4:	f080 0001 	eor.w	r0, r0, #1
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop

0800a0bc <USB_OTG_IsHostMode>:
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 800a0bc:	68c3      	ldr	r3, [r0, #12]
 800a0be:	6958      	ldr	r0, [r3, #20]
* @retval num_in_ep
*/
uint8_t USB_OTG_IsHostMode(USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_GetMode(pdev) == HOST_MODE);
}
 800a0c0:	f000 0001 	and.w	r0, r0, #1
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop

0800a0c8 <USB_OTG_ReadCoreItr>:
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v = 0;
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 800a0c8:	68c3      	ldr	r3, [r0, #12]
 800a0ca:	695a      	ldr	r2, [r3, #20]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 800a0cc:	6998      	ldr	r0, [r3, #24]
  return v;
}
 800a0ce:	4010      	ands	r0, r2
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop

0800a0d4 <USB_OTG_ReadOtgItr>:
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadOtgItr (USB_OTG_CORE_HANDLE *pdev)
{
  return (USB_OTG_READ_REG32 (&pdev->regs.GREGS->GOTGINT));
 800a0d4:	68c3      	ldr	r3, [r0, #12]
 800a0d6:	6858      	ldr	r0, [r3, #4]
}
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop

0800a0dc <USB_OTG_InitDevSpeed>:
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 800a0dc:	6903      	ldr	r3, [r0, #16]
 800a0de:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devspd = speed;
 800a0e0:	f361 0201 	bfi	r2, r1, #0, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	4770      	bx	lr

0800a0e8 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 800a0e8:	b410      	push	{r4}
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 800a0ea:	68c2      	ldr	r2, [r0, #12]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
  int_mask.b.usbsuspend = 1; 
 800a0ec:	f44f 6400 	mov.w	r4, #2048	; 0x800
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 800a0f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 800a0f4:	2300      	movs	r3, #0
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
  int_mask.b.usbsuspend = 1; 
 800a0f6:	f2c8 0400 	movt	r4, #32768	; 0x8000
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 800a0fa:	6193      	str	r3, [r2, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 800a0fc:	6151      	str	r1, [r2, #20]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 800a0fe:	6051      	str	r1, [r2, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
 800a100:	6151      	str	r1, [r2, #20]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 800a102:	6194      	str	r4, [r2, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
  
  if (pdev->cfg.dma_enable == 0)
 800a104:	78c0      	ldrb	r0, [r0, #3]
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 800a106:	6991      	ldr	r1, [r2, #24]
  return status;
}
 800a108:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xFFFFFFFF);
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
  
  if (pdev->cfg.dma_enable == 0)
 800a10c:	4298      	cmp	r0, r3
  {
    intmsk.b.rxstsqlvl = 1;
 800a10e:	bf08      	it	eq
 800a110:	2310      	moveq	r3, #16
  intmsk.b.inepintr   = 1;
  intmsk.b.outepintr  = 1;
  intmsk.b.sofintr    = 1; 

  intmsk.b.incomplisoin    = 1; 
  intmsk.b.incomplisoout    = 1;   
 800a112:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 800a116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a11a:	f043 0308 	orr.w	r3, r3, #8
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 800a11e:	430b      	orrs	r3, r1
  return status;
}
 800a120:	2000      	movs	r0, #0
  intmsk.b.incomplisoout    = 1;   
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 800a122:	6193      	str	r3, [r2, #24]
  return status;
}
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop

0800a128 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	4604      	mov	r4, r0
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 800a12c:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 800a130:	6922      	ldr	r2, [r4, #16]
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
 800a132:	2100      	movs	r1, #0
  txfifosize.d32 = 0;
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 800a134:	6001      	str	r1, [r0, #0]
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
  dcfg.d32 = 0;
  nptxfifosize.d32 = 0;
  txfifosize.d32 = 0;
 800a136:	460b      	mov	r3, r1
  msk.d32 = 0;
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 800a138:	6811      	ldr	r1, [r2, #0]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 800a13a:	f363 21cc 	bfi	r1, r3, #11, #2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 800a13e:	6011      	str	r1, [r2, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 800a140:	7ae1      	ldrb	r1, [r4, #11]
 800a142:	2901      	cmp	r1, #1
 800a144:	d04d      	beq.n	800a1e2 <USB_OTG_CoreInitDev+0xba>
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 800a146:	2110      	movs	r1, #16
 800a148:	4620      	mov	r0, r4
 800a14a:	f7ff ff4f 	bl	8009fec <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff ff70 	bl	800a034 <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 800a154:	6925      	ldr	r5, [r4, #16]
 800a156:	2200      	movs	r2, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 800a158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
  USB_OTG_FlushRxFifo(pdev);
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 800a15c:	612a      	str	r2, [r5, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 800a15e:	616a      	str	r2, [r5, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 800a160:	61ab      	str	r3, [r5, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 800a162:	61ea      	str	r2, [r5, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800a164:	7863      	ldrb	r3, [r4, #1]
 800a166:	b33b      	cbz	r3, 800a1b8 <USB_OTG_CoreInitDev+0x90>
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 800a168:	4617      	mov	r7, r2
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800a16a:	4621      	mov	r1, r4
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 800a16c:	26ff      	movs	r6, #255	; 0xff
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 800a16e:	698b      	ldr	r3, [r1, #24]
 800a170:	6818      	ldr	r0, [r3, #0]
    if (depctl.b.epena)
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 800a172:	2800      	cmp	r0, #0
 800a174:	bfb4      	ite	lt
 800a176:	f04f 4090 	movlt.w	r0, #1207959552	; 0x48000000
 800a17a:	2000      	movge	r0, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 800a17c:	6018      	str	r0, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 800a17e:	611f      	str	r7, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 800a180:	609e      	str	r6, [r3, #8]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800a182:	7863      	ldrb	r3, [r4, #1]
 800a184:	3201      	adds	r2, #1
 800a186:	4293      	cmp	r3, r2
 800a188:	f101 0104 	add.w	r1, r1, #4
 800a18c:	d8ef      	bhi.n	800a16e <USB_OTG_CoreInitDev+0x46>
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 800a18e:	b19b      	cbz	r3, 800a1b8 <USB_OTG_CoreInitDev+0x90>
 800a190:	2200      	movs	r2, #0
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 800a192:	4617      	mov	r7, r2
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 800a194:	4621      	mov	r1, r4
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 800a196:	26ff      	movs	r6, #255	; 0xff
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 800a198:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a19a:	6818      	ldr	r0, [r3, #0]
    if (depctl.b.epena)
    {
      depctl.d32 = 0;
      depctl.b.epdis = 1;
      depctl.b.snak = 1;
 800a19c:	2800      	cmp	r0, #0
 800a19e:	bfb4      	ite	lt
 800a1a0:	f04f 4090 	movlt.w	r0, #1207959552	; 0x48000000
 800a1a4:	2000      	movge	r0, #0
    }
    else
    {
      depctl.d32 = 0;
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 800a1a6:	6018      	str	r0, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 800a1a8:	611f      	str	r7, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 800a1aa:	609e      	str	r6, [r3, #8]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 800a1ac:	7863      	ldrb	r3, [r4, #1]
 800a1ae:	3201      	adds	r2, #1
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	f101 0104 	add.w	r1, r1, #4
 800a1b6:	d8ef      	bhi.n	800a198 <USB_OTG_CoreInitDev+0x70>
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  msk.d32 = 0;
  msk.b.txfifoundrn = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 800a1b8:	692b      	ldr	r3, [r5, #16]
 800a1ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1be:	612b      	str	r3, [r5, #16]
  
  if (pdev->cfg.dma_enable == 1)
 800a1c0:	78e3      	ldrb	r3, [r4, #3]
 800a1c2:	2b01      	cmp	r3, #1
  {
    dthrctl.d32 = 0;
    dthrctl.b.non_iso_thr_en = 1;
    dthrctl.b.iso_thr_en = 1;
    dthrctl.b.tx_thr_len = 64;
    dthrctl.b.rx_thr_en = 1;
 800a1c4:	bf01      	itttt	eq
 800a1c6:	f503 7381 	addeq.w	r3, r3, #258	; 0x102
 800a1ca:	f2c0 0301 	movteq	r3, #1
  if (pdev->cfg.dma_enable == 1)
  {
    dthrctl.d32 = 0;
    dthrctl.b.non_iso_thr_en = 1;
    dthrctl.b.iso_thr_en = 1;
    dthrctl.b.tx_thr_len = 64;
 800a1ce:	2240      	moveq	r2, #64	; 0x40
    dthrctl.b.rx_thr_en = 1;
    dthrctl.b.rx_thr_len = 64;
 800a1d0:	f362 4359 	bfieq	r3, r2, #17, #9
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 800a1d4:	bf08      	it	eq
 800a1d6:	632b      	streq	r3, [r5, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f7ff ff85 	bl	800a0e8 <USB_OTG_EnableDevInt>
  return status;
}
 800a1de:	2000      	movs	r0, #0
 800a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 800a1e2:	6817      	ldr	r7, [r2, #0]
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 800a1e4:	68e0      	ldr	r0, [r4, #12]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 800a1e6:	21c0      	movs	r1, #192	; 0xc0
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 800a1e8:	2580      	movs	r5, #128	; 0x80
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 800a1ea:	f361 030f 	bfi	r3, r1, #0, #16
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 800a1ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 800a1f2:	f365 431f 	bfi	r3, r5, #16, #16
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
  dcfg.b.devspd = speed;
 800a1f6:	f047 0703 	orr.w	r7, r7, #3
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 800a1fa:	f365 010f 	bfi	r1, r5, #0, #16
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 800a1fe:	f44f 76a0 	mov.w	r6, #320	; 0x140
{
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
  dcfg.b.devspd = speed;
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 800a202:	6017      	str	r7, [r2, #0]
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 800a204:	6245      	str	r5, [r0, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 800a206:	6281      	str	r1, [r0, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 800a208:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 800a20c:	f366 030f 	bfi	r3, r6, #0, #16
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 800a210:	f36f 431f 	bfc	r3, #16, #16
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 800a214:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 800a218:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 800a21c:	e793      	b.n	800a146 <USB_OTG_CoreInitDev+0x1e>
 800a21e:	bf00      	nop

0800a220 <USB_OTG_GetDeviceSpeed>:
{
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800a220:	6903      	ldr	r3, [r0, #16]
 800a222:	689b      	ldr	r3, [r3, #8]
  
  switch (dsts.b.enumspd)
 800a224:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d007      	beq.n	800a23c <USB_OTG_GetDeviceSpeed+0x1c>
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d003      	beq.n	800a238 <USB_OTG_GetDeviceSpeed+0x18>
 800a230:	2b01      	cmp	r3, #1
 800a232:	d001      	beq.n	800a238 <USB_OTG_GetDeviceSpeed+0x18>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 800a234:	2003      	movs	r0, #3
 800a236:	4770      	bx	lr
    break;
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 800a238:	2002      	movs	r0, #2
    speed = USB_SPEED_LOW;
    break;
  }
  
  return speed;
}
 800a23a:	4770      	bx	lr
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
    break;
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 800a23c:	2001      	movs	r0, #1
    break;
 800a23e:	4770      	bx	lr

0800a240 <USB_OTG_EP0Activate>:
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800a240:	6903      	ldr	r3, [r0, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 800a242:	6982      	ldr	r2, [r0, #24]
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800a244:	6898      	ldr	r0, [r3, #8]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 800a246:	6811      	ldr	r1, [r2, #0]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 800a248:	f3c0 0041 	ubfx	r0, r0, #1, #2
 800a24c:	2802      	cmp	r0, #2
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
    break;
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 800a24e:	bf06      	itte	eq
 800a250:	2003      	moveq	r0, #3
 800a252:	f360 010a 	bfieq	r1, r0, #0, #11
  switch (dsts.b.enumspd)
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 800a256:	f36f 010a 	bfcne	r1, #0, #11
    break;
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
    break;
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 800a25a:	6011      	str	r1, [r2, #0]
  dctl.b.cgnpinnak = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a262:	605a      	str	r2, [r3, #4]
  return status;
}
 800a264:	2000      	movs	r0, #0
 800a266:	4770      	bx	lr

0800a268 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800a268:	b470      	push	{r4, r5, r6}
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800a26a:	784b      	ldrb	r3, [r1, #1]
 800a26c:	2b01      	cmp	r3, #1
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;
 800a26e:	f04f 0200 	mov.w	r2, #0
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800a272:	d020      	beq.n	800a2b6 <USB_OTG_EPActivate+0x4e>
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 800a274:	780b      	ldrb	r3, [r1, #0]
 800a276:	eb00 0483 	add.w	r4, r0, r3, lsl #2
    daintmsk.ep.out = 1 << ep->num;
 800a27a:	2501      	movs	r5, #1
 800a27c:	fa05 f303 	lsl.w	r3, r5, r3
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 800a280:	6d64      	ldr	r4, [r4, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 800a282:	f363 421f 	bfi	r2, r3, #16, #16
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 800a286:	6823      	ldr	r3, [r4, #0]
  if (!depctl.b.usbactep)
 800a288:	041d      	lsls	r5, r3, #16
 800a28a:	d40d      	bmi.n	800a2a8 <USB_OTG_EPActivate+0x40>
  {
    depctl.b.mps    = ep->maxpacket;
 800a28c:	688e      	ldr	r6, [r1, #8]
    depctl.b.eptype = ep->type;
 800a28e:	78cd      	ldrb	r5, [r1, #3]
    depctl.b.txfnum = ep->tx_fifo_num;
 800a290:	88c9      	ldrh	r1, [r1, #6]
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
  if (!depctl.b.usbactep)
  {
    depctl.b.mps    = ep->maxpacket;
 800a292:	f366 030a 	bfi	r3, r6, #0, #11
    depctl.b.eptype = ep->type;
 800a296:	f365 4393 	bfi	r3, r5, #18, #2
    depctl.b.txfnum = ep->tx_fifo_num;
 800a29a:	f361 5399 	bfi	r3, r1, #22, #4
    depctl.b.setd0pid = 1;
 800a29e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    depctl.b.usbactep = 1;
 800a2a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 800a2a6:	6023      	str	r3, [r4, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 800a2a8:	6903      	ldr	r3, [r0, #16]
 800a2aa:	69d9      	ldr	r1, [r3, #28]
 800a2ac:	430a      	orrs	r2, r1
  return status;
}
 800a2ae:	2000      	movs	r0, #0
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 800a2b0:	61da      	str	r2, [r3, #28]
  return status;
}
 800a2b2:	bc70      	pop	{r4, r5, r6}
 800a2b4:	4770      	bx	lr
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 800a2b6:	780c      	ldrb	r4, [r1, #0]
 800a2b8:	eb00 0584 	add.w	r5, r0, r4, lsl #2
    daintmsk.ep.in = 1 << ep->num;
 800a2bc:	40a3      	lsls	r3, r4
 800a2be:	f363 020f 	bfi	r2, r3, #0, #16
  depctl.d32 = 0;
  daintmsk.d32 = 0;
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 800a2c2:	69ac      	ldr	r4, [r5, #24]
 800a2c4:	e7df      	b.n	800a286 <USB_OTG_EPActivate+0x1e>
 800a2c6:	bf00      	nop

0800a2c8 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800a2c8:	b430      	push	{r4, r5}
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800a2ca:	784a      	ldrb	r2, [r1, #1]
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 800a2cc:	2300      	movs	r3, #0
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800a2ce:	2a01      	cmp	r2, #1
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
 800a2d0:	461c      	mov	r4, r3
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800a2d2:	d013      	beq.n	800a2fc <USB_OTG_EPDeactivate+0x34>
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 800a2d4:	780a      	ldrb	r2, [r1, #0]
 800a2d6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
    daintmsk.ep.out = 1 << ep->num;
 800a2da:	2501      	movs	r5, #1
 800a2dc:	fa05 f202 	lsl.w	r2, r5, r2
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
    daintmsk.ep.in = 1 << ep->num;
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 800a2e0:	6d49      	ldr	r1, [r1, #84]	; 0x54
    daintmsk.ep.out = 1 << ep->num;
 800a2e2:	f362 441f 	bfi	r4, r2, #16, #16
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 800a2e6:	6902      	ldr	r2, [r0, #16]
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
    daintmsk.ep.out = 1 << ep->num;
  }
  depctl.b.usbactep = 0;
 800a2e8:	f36f 33cf 	bfc	r3, #15, #1
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 800a2ec:	600b      	str	r3, [r1, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 800a2ee:	69d3      	ldr	r3, [r2, #28]
 800a2f0:	ea23 0404 	bic.w	r4, r3, r4
 800a2f4:	61d4      	str	r4, [r2, #28]
  return status;
}
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	bc30      	pop	{r4, r5}
 800a2fa:	4770      	bx	lr
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 800a2fc:	7809      	ldrb	r1, [r1, #0]
 800a2fe:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    daintmsk.ep.in = 1 << ep->num;
 800a302:	408a      	lsls	r2, r1
 800a304:	f362 040f 	bfi	r4, r2, #0, #16
  depctl.d32 = 0;
  daintmsk.d32 = 0;  
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 800a308:	69a9      	ldr	r1, [r5, #24]
 800a30a:	e7ec      	b.n	800a2e6 <USB_OTG_EPDeactivate+0x1e>

0800a30c <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800a30c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 800a30e:	784c      	ldrb	r4, [r1, #1]
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 800a310:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800a312:	694d      	ldr	r5, [r1, #20]
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 800a314:	2c01      	cmp	r4, #1
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 800a316:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  uint32_t fifoemptymsk = 0;  
  
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 800a31a:	d02f      	beq.n	800a37c <USB_OTG_EPStartXfer+0x70>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 800a31c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800a31e:	6823      	ldr	r3, [r4, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 800a320:	6922      	ldr	r2, [r4, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 800a322:	b325      	cbz	r5, 800a36e <USB_OTG_EPStartXfer+0x62>
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 800a324:	688e      	ldr	r6, [r1, #8]
 800a326:	4435      	add	r5, r6
 800a328:	3d01      	subs	r5, #1
 800a32a:	fbb5 f5f6 	udiv	r5, r5, r6
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 800a32e:	f3c5 0709 	ubfx	r7, r5, #0, #10
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 800a332:	f365 42dc 	bfi	r2, r5, #19, #10
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 800a336:	fb06 f607 	mul.w	r6, r6, r7
 800a33a:	f366 0212 	bfi	r2, r6, #0, #19
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 800a33e:	6122      	str	r2, [r4, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800a340:	78c2      	ldrb	r2, [r0, #3]
 800a342:	2a01      	cmp	r2, #1
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800a344:	bf01      	itttt	eq
 800a346:	780c      	ldrbeq	r4, [r1, #0]
 800a348:	690a      	ldreq	r2, [r1, #16]
 800a34a:	eb00 0484 	addeq.w	r4, r0, r4, lsl #2
 800a34e:	6d64      	ldreq	r4, [r4, #84]	; 0x54
 800a350:	bf08      	it	eq
 800a352:	6162      	streq	r2, [r4, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 800a354:	78ca      	ldrb	r2, [r1, #3]
 800a356:	2a01      	cmp	r2, #1
 800a358:	d056      	beq.n	800a408 <USB_OTG_EPStartXfer+0xfc>
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 800a35a:	780a      	ldrb	r2, [r1, #0]
 800a35c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        depctl.b.setd0pid = 1;
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 800a360:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 800a364:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a366:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 800a368:	2000      	movs	r0, #0
 800a36a:	bcf0      	pop	{r4, r5, r6, r7}
 800a36c:	4770      	bx	lr
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = ep->maxpacket;
 800a36e:	688d      	ldr	r5, [r1, #8]
      deptsiz.b.pktcnt = 1;
 800a370:	2601      	movs	r6, #1
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = ep->maxpacket;
 800a372:	f365 0212 	bfi	r2, r5, #0, #19
      deptsiz.b.pktcnt = 1;
 800a376:	f366 42dc 	bfi	r2, r6, #19, #10
 800a37a:	e7e0      	b.n	800a33e <USB_OTG_EPStartXfer+0x32>
  depctl.d32 = 0;
  deptsiz.d32 = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 800a37c:	699e      	ldr	r6, [r3, #24]
 800a37e:	6833      	ldr	r3, [r6, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 800a380:	6932      	ldr	r2, [r6, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800a382:	2d00      	cmp	r5, #0
 800a384:	d045      	beq.n	800a412 <USB_OTG_EPStartXfer+0x106>
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 800a386:	688c      	ldr	r4, [r1, #8]

      if (ep->type == EP_TYPE_ISOC)
 800a388:	78cf      	ldrb	r7, [r1, #3]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 800a38a:	eb05 0c04 	add.w	ip, r5, r4
 800a38e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 800a392:	f365 0212 	bfi	r2, r5, #0, #19
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 800a396:	fbbc f4f4 	udiv	r4, ip, r4
 800a39a:	f364 42dc 	bfi	r2, r4, #19, #10

      if (ep->type == EP_TYPE_ISOC)
 800a39e:	2f01      	cmp	r7, #1
      {
        deptsiz.b.mc = 1;
 800a3a0:	bf08      	it	eq
 800a3a2:	f367 725e 	bfieq	r2, r7, #29, #2
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 800a3a6:	6132      	str	r2, [r6, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800a3a8:	78c2      	ldrb	r2, [r0, #3]
 800a3aa:	2a01      	cmp	r2, #1
 800a3ac:	d043      	beq.n	800a436 <USB_OTG_EPStartXfer+0x12a>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 800a3ae:	78ca      	ldrb	r2, [r1, #3]
 800a3b0:	2a01      	cmp	r2, #1
 800a3b2:	d036      	beq.n	800a422 <USB_OTG_EPStartXfer+0x116>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 800a3b4:	b155      	cbz	r5, 800a3cc <USB_OTG_EPStartXfer+0xc0>
        {
          fifoemptymsk = 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800a3b6:	6902      	ldr	r2, [r0, #16]
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 800a3b8:	780c      	ldrb	r4, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800a3ba:	6b56      	ldr	r6, [r2, #52]	; 0x34
      if (ep->type != EP_TYPE_ISOC)
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
        {
          fifoemptymsk = 1 << ep->num;
 800a3bc:	2701      	movs	r7, #1
 800a3be:	fa07 f404 	lsl.w	r4, r7, r4
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800a3c2:	4334      	orrs	r4, r6
 800a3c4:	6354      	str	r4, [r2, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 800a3c6:	78ca      	ldrb	r2, [r1, #3]
 800a3c8:	2a01      	cmp	r2, #1
 800a3ca:	d02a      	beq.n	800a422 <USB_OTG_EPStartXfer+0x116>
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 800a3cc:	780a      	ldrb	r2, [r1, #0]
 800a3ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 800a3d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 800a3d6:	6992      	ldr	r2, [r2, #24]
 800a3d8:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 800a3da:	78cb      	ldrb	r3, [r1, #3]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d1c3      	bne.n	800a368 <USB_OTG_EPStartXfer+0x5c>
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 800a3e0:	78c3      	ldrb	r3, [r0, #3]
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);

    if (ep->type == EP_TYPE_ISOC)
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 800a3e2:	68ca      	ldr	r2, [r1, #12]
 800a3e4:	7809      	ldrb	r1, [r1, #0]
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
  USB_OTG_STS status = USB_OTG_OK;
  if (pdev->cfg.dma_enable == 0)
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1be      	bne.n	800a368 <USB_OTG_EPStartXfer+0x5c>
 800a3ea:	b2ad      	uxth	r5, r5
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 800a3ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  if (pdev->cfg.dma_enable == 0)
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 800a3f0:	3503      	adds	r5, #3
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 800a3f2:	10ad      	asrs	r5, r5, #2
  {
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
 800a3f4:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
    for (i = 0; i < count32b; i++, src+=4)
 800a3f8:	d0b6      	beq.n	800a368 <USB_OTG_EPStartXfer+0x5c>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 800a3fa:	f852 1b04 	ldr.w	r1, [r2], #4
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 800a3fe:	3301      	adds	r3, #1
 800a400:	429d      	cmp	r5, r3
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 800a402:	6001      	str	r1, [r0, #0]
    uint32_t count32b= 0 , i= 0;
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
    fifo = pdev->regs.DFIFO[ch_ep_num];
    for (i = 0; i < count32b; i++, src+=4)
 800a404:	d1f9      	bne.n	800a3fa <USB_OTG_EPStartXfer+0xee>
 800a406:	e7af      	b.n	800a368 <USB_OTG_EPStartXfer+0x5c>
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
    }
    
    if (ep->type == EP_TYPE_ISOC)
    {
      if (ep->even_odd_frame)
 800a408:	794a      	ldrb	r2, [r1, #5]
 800a40a:	b13a      	cbz	r2, 800a41c <USB_OTG_EPStartXfer+0x110>
      {
        depctl.b.setd1pid = 1;
 800a40c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a410:	e7a3      	b.n	800a35a <USB_OTG_EPStartXfer+0x4e>
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 800a412:	f365 0212 	bfi	r2, r5, #0, #19
      deptsiz.b.pktcnt = 1;
 800a416:	f364 42dc 	bfi	r2, r4, #19, #10
 800a41a:	e7c4      	b.n	800a3a6 <USB_OTG_EPStartXfer+0x9a>
      {
        depctl.b.setd1pid = 1;
      }
      else
      {
        depctl.b.setd0pid = 1;
 800a41c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a420:	e79b      	b.n	800a35a <USB_OTG_EPStartXfer+0x4e>
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800a422:	6902      	ldr	r2, [r0, #16]
 800a424:	6892      	ldr	r2, [r2, #8]
      
      if (((dsts.b.soffn)&0x1) == 0)
 800a426:	05d6      	lsls	r6, r2, #23
      {
        depctl.b.setd1pid = 1;
 800a428:	bf58      	it	pl
 800a42a:	f043 5300 	orrpl.w	r3, r3, #536870912	; 0x20000000
    
    if (ep->type == EP_TYPE_ISOC)
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
      
      if (((dsts.b.soffn)&0x1) == 0)
 800a42e:	d5cd      	bpl.n	800a3cc <USB_OTG_EPStartXfer+0xc0>
      {
        depctl.b.setd1pid = 1;
      }
      else
      {
        depctl.b.setd0pid = 1;
 800a430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a434:	e7ca      	b.n	800a3cc <USB_OTG_EPStartXfer+0xc0>
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
    
    if (pdev->cfg.dma_enable == 1)
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 800a436:	780c      	ldrb	r4, [r1, #0]
 800a438:	690a      	ldr	r2, [r1, #16]
 800a43a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800a43e:	69a4      	ldr	r4, [r4, #24]
 800a440:	6162      	str	r2, [r4, #20]
 800a442:	e7c0      	b.n	800a3c6 <USB_OTG_EPStartXfer+0xba>

0800a444 <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800a444:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 800a446:	784a      	ldrb	r2, [r1, #1]
 800a448:	2a01      	cmp	r2, #1
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800a44a:	b082      	sub	sp, #8
  uint32_t fifoemptymsk = 0;
  
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
 800a44c:	d031      	beq.n	800a4b2 <USB_OTG_EP0StartXfer+0x6e>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800a44e:	780b      	ldrb	r3, [r1, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 800a450:	694c      	ldr	r4, [r1, #20]
    {
      deptsiz.b.xfersize = ep->maxpacket;
 800a452:	688e      	ldr	r6, [r1, #8]
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800a454:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a45a:	6813      	ldr	r3, [r2, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 800a45c:	6915      	ldr	r5, [r2, #16]
 800a45e:	9500      	str	r5, [sp, #0]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = ep->maxpacket;
 800a460:	f89d 5000 	ldrb.w	r5, [sp]
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 800a464:	b314      	cbz	r4, 800a4ac <USB_OTG_EP0StartXfer+0x68>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
 800a466:	f89d 4002 	ldrb.w	r4, [sp, #2]
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 800a46a:	614e      	str	r6, [r1, #20]
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
 800a46c:	2701      	movs	r7, #1
 800a46e:	f367 04c4 	bfi	r4, r7, #3, #2
      deptsiz.b.pktcnt = 1;
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
      deptsiz.b.xfersize = ep->maxpacket;
 800a472:	f366 0506 	bfi	r5, r6, #0, #7
 800a476:	f88d 5000 	strb.w	r5, [sp]
      deptsiz.b.pktcnt = 1;
 800a47a:	f88d 4002 	strb.w	r4, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 800a47e:	9c00      	ldr	r4, [sp, #0]
 800a480:	6114      	str	r4, [r2, #16]
    if (pdev->cfg.dma_enable == 1)
 800a482:	78c2      	ldrb	r2, [r0, #3]
 800a484:	2a01      	cmp	r2, #1
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800a486:	bf02      	ittt	eq
 800a488:	780c      	ldrbeq	r4, [r1, #0]
 800a48a:	690a      	ldreq	r2, [r1, #16]
 800a48c:	eb00 0484 	addeq.w	r4, r0, r4, lsl #2
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 800a490:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
      deptsiz.b.pktcnt = 1;
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
    if (pdev->cfg.dma_enable == 1)
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800a494:	bf04      	itt	eq
 800a496:	6d64      	ldreq	r4, [r4, #84]	; 0x54
 800a498:	6162      	streq	r2, [r4, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 800a49a:	780a      	ldrb	r2, [r1, #0]
 800a49c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800a4a0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a4a2:	6013      	str	r3, [r2, #0]
    
  }
  return status;
}
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	b002      	add	sp, #8
 800a4a8:	bcf0      	pop	{r4, r5, r6, r7}
 800a4aa:	4770      	bx	lr
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = ep->maxpacket;
      deptsiz.b.pktcnt = 1;
 800a4ac:	f89d 4002 	ldrb.w	r4, [sp, #2]
 800a4b0:	e7dc      	b.n	800a46c <USB_OTG_EP0StartXfer+0x28>
  depctl.d32   = 0;
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    in_regs = pdev->regs.INEP_REGS[0];
 800a4b2:	6984      	ldr	r4, [r0, #24]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800a4b4:	694d      	ldr	r5, [r1, #20]
  deptsiz.d32  = 0;
  /* IN endpoint */
  if (ep->is_in == 1)
  {
    in_regs = pdev->regs.INEP_REGS[0];
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 800a4b6:	6823      	ldr	r3, [r4, #0]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 800a4b8:	6926      	ldr	r6, [r4, #16]
 800a4ba:	9600      	str	r6, [sp, #0]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800a4bc:	2d00      	cmp	r5, #0
 800a4be:	d036      	beq.n	800a52e <USB_OTG_EP0StartXfer+0xea>
      deptsiz.b.pktcnt = 1;
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 800a4c0:	688a      	ldr	r2, [r1, #8]
 800a4c2:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 800a4c4:	bf93      	iteet	ls
 800a4c6:	f89d 2000 	ldrbls.w	r2, [sp]
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 800a4ca:	f89d 5000 	ldrbhi.w	r5, [sp]
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
 800a4ce:	614a      	strhi	r2, [r1, #20]
        deptsiz.b.xfersize = ep->maxpacket;
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 800a4d0:	f365 0206 	bfils	r2, r5, #0, #7
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 800a4d4:	bf8c      	ite	hi
 800a4d6:	f362 0506 	bfihi	r5, r2, #0, #7
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 800a4da:	f88d 2000 	strbls.w	r2, [sp]
      }
      deptsiz.b.pktcnt = 1;
 800a4de:	f89d 2002 	ldrb.w	r2, [sp, #2]
    else
    {
      if (ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
        deptsiz.b.xfersize = ep->maxpacket;
 800a4e2:	bf88      	it	hi
 800a4e4:	f88d 5000 	strbhi.w	r5, [sp]
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
      }
      deptsiz.b.pktcnt = 1;
 800a4e8:	2501      	movs	r5, #1
 800a4ea:	f365 02c4 	bfi	r2, r5, #3, #2
 800a4ee:	f88d 2002 	strb.w	r2, [sp, #2]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 800a4f2:	9a00      	ldr	r2, [sp, #0]
 800a4f4:	6122      	str	r2, [r4, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800a4f6:	78c2      	ldrb	r2, [r0, #3]
 800a4f8:	2a01      	cmp	r2, #1
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 800a4fa:	bf02      	ittt	eq
 800a4fc:	780d      	ldrbeq	r5, [r1, #0]
 800a4fe:	690a      	ldreq	r2, [r1, #16]
 800a500:	eb00 0585 	addeq.w	r5, r0, r5, lsl #2
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
 800a504:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
    
    if (pdev->cfg.dma_enable == 1)
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 800a508:	bf04      	itt	eq
 800a50a:	69ad      	ldreq	r5, [r5, #24]
 800a50c:	616a      	streq	r2, [r5, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
    depctl.b.epena = 1;
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 800a50e:	6023      	str	r3, [r4, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 800a510:	78c3      	ldrb	r3, [r0, #3]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1c6      	bne.n	800a4a4 <USB_OTG_EP0StartXfer+0x60>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 800a516:	694b      	ldr	r3, [r1, #20]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d0c3      	beq.n	800a4a4 <USB_OTG_EP0StartXfer+0x60>
      {
        {
          fifoemptymsk |= 1 << ep->num;
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800a51c:	6903      	ldr	r3, [r0, #16]
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 800a51e:	780a      	ldrb	r2, [r1, #0]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800a520:	6b59      	ldr	r1, [r3, #52]	; 0x34
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
      {
        {
          fifoemptymsk |= 1 << ep->num;
 800a522:	2001      	movs	r0, #1
 800a524:	fa00 f202 	lsl.w	r2, r0, r2
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 800a528:	430a      	orrs	r2, r1
 800a52a:	635a      	str	r2, [r3, #52]	; 0x34
 800a52c:	e7ba      	b.n	800a4a4 <USB_OTG_EP0StartXfer+0x60>
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 800a52e:	f89d 7000 	ldrb.w	r7, [sp]
      deptsiz.b.pktcnt = 1;
 800a532:	f89d 6002 	ldrb.w	r6, [sp, #2]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 800a536:	f365 0706 	bfi	r7, r5, #0, #7
      deptsiz.b.pktcnt = 1;
 800a53a:	f362 06c4 	bfi	r6, r2, #3, #2
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      deptsiz.b.xfersize = 0;
 800a53e:	f88d 7000 	strb.w	r7, [sp]
      deptsiz.b.pktcnt = 1;
 800a542:	f88d 6002 	strb.w	r6, [sp, #2]
 800a546:	e7d4      	b.n	800a4f2 <USB_OTG_EP0StartXfer+0xae>

0800a548 <USB_OTG_EPSetStall>:
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 800a548:	784b      	ldrb	r3, [r1, #1]
 800a54a:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a54c:	780b      	ldrb	r3, [r1, #0]
 800a54e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  USB_OTG_STS status = USB_OTG_OK;
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 800a552:	d006      	beq.n	800a562 <USB_OTG_EPSetStall+0x1a>
    depctl.b.stall = 1;
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800a554:	6d42      	ldr	r2, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800a556:	6813      	ldr	r3, [r2, #0]
    /* set the stall bit */
    depctl.b.stall = 1;
 800a558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800a55c:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 800a55e:	2000      	movs	r0, #0
 800a560:	4770      	bx	lr
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a562:	6982      	ldr	r2, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800a564:	6813      	ldr	r3, [r2, #0]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 800a566:	2b00      	cmp	r3, #0
    {
      depctl.b.epdis = 1;
 800a568:	bfb8      	it	lt
 800a56a:	f043 4380 	orrlt.w	r3, r3, #1073741824	; 0x40000000
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
    /* set the stall bit */
    depctl.b.stall = 1;
 800a56e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800a572:	6013      	str	r3, [r2, #0]
  }
  return status;
}
 800a574:	2000      	movs	r0, #0
 800a576:	4770      	bx	lr

0800a578 <USB_OTG_EPClearStall>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
 800a578:	784b      	ldrb	r3, [r1, #1]
 800a57a:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a57c:	780b      	ldrb	r3, [r1, #0]
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800a57e:	78c9      	ldrb	r1, [r1, #3]
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a580:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800a584:	f1a1 0102 	sub.w	r1, r1, #2
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a588:	bf0c      	ite	eq
 800a58a:	6982      	ldreq	r2, [r0, #24]
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800a58c:	6d42      	ldrne	r2, [r0, #84]	; 0x54
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800a58e:	6813      	ldr	r3, [r2, #0]
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800a590:	b2c9      	uxtb	r1, r1
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
 800a592:	f36f 5355 	bfc	r3, #21, #1
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800a596:	2901      	cmp	r1, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 800a598:	bf98      	it	ls
 800a59a:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800a59e:	6013      	str	r3, [r2, #0]
  return status;
}
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_OTG_ReadDevAllOutEp_itr>:
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 800a5a4:	6903      	ldr	r3, [r0, #16]
 800a5a6:	699a      	ldr	r2, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 800a5a8:	69d8      	ldr	r0, [r3, #28]
 800a5aa:	4010      	ands	r0, r2
  return ((v & 0xffff0000) >> 16);
}
 800a5ac:	0c00      	lsrs	r0, r0, #16
 800a5ae:	4770      	bx	lr

0800a5b0 <USB_OTG_ReadDevOutEP_itr>:
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 800a5b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 800a5b4:	6902      	ldr	r2, [r0, #16]
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 800a5b6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a5b8:	689b      	ldr	r3, [r3, #8]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 800a5ba:	6950      	ldr	r0, [r2, #20]
  return v;
}
 800a5bc:	4018      	ands	r0, r3
 800a5be:	4770      	bx	lr

0800a5c0 <USB_OTG_ReadDevAllInEPItr>:
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 800a5c0:	6903      	ldr	r3, [r0, #16]
 800a5c2:	6998      	ldr	r0, [r3, #24]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	4018      	ands	r0, r3
  return (v & 0xffff);
}
 800a5c8:	b280      	uxth	r0, r0
 800a5ca:	4770      	bx	lr

0800a5cc <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 800a5cc:	b410      	push	{r4}
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 800a5ce:	2201      	movs	r2, #1
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 800a5d0:	b083      	sub	sp, #12
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 800a5d2:	f04f 0300 	mov.w	r3, #0
 800a5d6:	f362 03c4 	bfi	r3, r2, #3, #2
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
 800a5da:	21c0      	movs	r1, #192	; 0xc0
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 800a5dc:	2400      	movs	r4, #0
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
  doeptsize0.b.xfersize = 8 * 3;
 800a5de:	2218      	movs	r2, #24
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 800a5e0:	9400      	str	r4, [sp, #0]
  doeptsize0.b.supcnt = 3;
  doeptsize0.b.pktcnt = 1;
 800a5e2:	f88d 3002 	strb.w	r3, [sp, #2]
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
  doeptsize0.b.supcnt = 3;
 800a5e6:	f88d 1003 	strb.w	r1, [sp, #3]
  doeptsize0.b.pktcnt = 1;
  doeptsize0.b.xfersize = 8 * 3;
 800a5ea:	f88d 2000 	strb.w	r2, [sp]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 800a5ee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a5f0:	9a00      	ldr	r2, [sp, #0]
 800a5f2:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 800a5f4:	78c2      	ldrb	r2, [r0, #3]
 800a5f6:	2a01      	cmp	r2, #1
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 800a5f8:	bf01      	itttt	eq
 800a5fa:	f500 60b9 	addeq.w	r0, r0, #1480	; 0x5c8
 800a5fe:	6158      	streq	r0, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 800a600:	6819      	ldreq	r1, [r3, #0]
    doepctl.b.epena = 1;
    doepctl.d32 = 0x80008000;
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 800a602:	f04f 2280 	moveq.w	r2, #2147516416	; 0x80008000
 800a606:	bf08      	it	eq
 800a608:	601a      	streq	r2, [r3, #0]
  }
}
 800a60a:	b003      	add	sp, #12
 800a60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop

0800a614 <USB_OTG_ActiveRemoteWakeup>:
  
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_DSTS_TypeDef     dsts;
  USB_OTG_PCGCCTL_TypeDef  power;  
  
  if (pdev->dev.DevRemoteWakeup) 
 800a614:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
* @brief  USB_OTG_RemoteWakeup : active remote wakeup signalling
* @param  None
* @retval : None
*/
void USB_OTG_ActiveRemoteWakeup(USB_OTG_CORE_HANDLE *pdev)
{
 800a618:	b510      	push	{r4, lr}
 800a61a:	4604      	mov	r4, r0
  
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_DSTS_TypeDef     dsts;
  USB_OTG_PCGCCTL_TypeDef  power;  
  
  if (pdev->dev.DevRemoteWakeup) 
 800a61c:	b11b      	cbz	r3, 800a626 <USB_OTG_ActiveRemoteWakeup+0x12>
  {
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800a61e:	6903      	ldr	r3, [r0, #16]
 800a620:	689a      	ldr	r2, [r3, #8]
    if(dsts.b.suspsts == 1)
 800a622:	07d2      	lsls	r2, r2, #31
 800a624:	d400      	bmi.n	800a628 <USB_OTG_ActiveRemoteWakeup+0x14>
 800a626:	bd10      	pop	{r4, pc}
    {
      if(pdev->cfg.low_power)
 800a628:	7a82      	ldrb	r2, [r0, #10]
 800a62a:	b142      	cbz	r2, 800a63e <USB_OTG_ActiveRemoteWakeup+0x2a>
      {
        /* un-gate USB Core clock */
        power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 800a62c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
        power.b.gatehclk = 0;
        power.b.stoppclk = 0;
        USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800a630:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    {
      if(pdev->cfg.low_power)
      {
        /* un-gate USB Core clock */
        power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
        power.b.gatehclk = 0;
 800a634:	f36f 0241 	bfc	r2, #1, #1
        power.b.stoppclk = 0;
 800a638:	f36f 0200 	bfc	r2, #0, #1
        USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800a63c:	600a      	str	r2, [r1, #0]
      }   
      /* active Remote wakeup signaling */
      dctl.d32 = 0;
      dctl.b.rmtwkupsig = 1;
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, 0, dctl.d32);
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	f042 0201 	orr.w	r2, r2, #1
 800a644:	605a      	str	r2, [r3, #4]
      USB_OTG_BSP_mDelay(5);
 800a646:	2005      	movs	r0, #5
 800a648:	f7fe f90e 	bl	8008868 <USB_OTG_BSP_mDelay>
      USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	f022 0201 	bic.w	r2, r2, #1
 800a654:	605a      	str	r2, [r3, #4]
 800a656:	bd10      	pop	{r4, pc}

0800a658 <USB_OTG_UngateClock>:
* @param  None
* @retval : None
*/
void USB_OTG_UngateClock(USB_OTG_CORE_HANDLE *pdev)
{
  if(pdev->cfg.low_power)
 800a658:	7a83      	ldrb	r3, [r0, #10]
 800a65a:	b16b      	cbz	r3, 800a678 <USB_OTG_UngateClock+0x20>
  {
    
    USB_OTG_DSTS_TypeDef     dsts;
    USB_OTG_PCGCCTL_TypeDef  power; 
    
    dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800a65c:	6903      	ldr	r3, [r0, #16]
 800a65e:	689b      	ldr	r3, [r3, #8]
    
    if(dsts.b.suspsts == 1)
 800a660:	07d9      	lsls	r1, r3, #31
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 800a662:	bf41      	itttt	mi
 800a664:	f8d0 310c 	ldrmi.w	r3, [r0, #268]	; 0x10c
      power.b.gatehclk = 0;
      power.b.stoppclk = 0;
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800a668:	f8d0 210c 	ldrmi.w	r2, [r0, #268]	; 0x10c
    
    if(dsts.b.suspsts == 1)
    {
      /* un-gate USB Core clock */
      power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
      power.b.gatehclk = 0;
 800a66c:	f36f 0341 	bfcmi	r3, #1, #1
      power.b.stoppclk = 0;
 800a670:	f36f 0300 	bfcmi	r3, #0, #1
      USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800a674:	bf48      	it	mi
 800a676:	6013      	strmi	r3, [r2, #0]
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop

0800a67c <USB_OTG_StopDevice>:
* @brief  Stop the device and clean up fifo's
* @param  None
* @retval : None
*/
void USB_OTG_StopDevice(USB_OTG_CORE_HANDLE *pdev)
{
 800a67c:	b538      	push	{r3, r4, r5, lr}
  uint32_t i;
  
  pdev->dev.device_status = 1;
    
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800a67e:	7843      	ldrb	r3, [r0, #1]
*/
void USB_OTG_StopDevice(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t i;
  
  pdev->dev.device_status = 1;
 800a680:	2201      	movs	r2, #1
* @brief  Stop the device and clean up fifo's
* @param  None
* @retval : None
*/
void USB_OTG_StopDevice(USB_OTG_CORE_HANDLE *pdev)
{
 800a682:	4605      	mov	r5, r0
  uint32_t i;
  
  pdev->dev.device_status = 1;
 800a684:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
    
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800a688:	b163      	cbz	r3, 800a6a4 <USB_OTG_StopDevice+0x28>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2200      	movs	r2, #0
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 800a68e:	21ff      	movs	r1, #255	; 0xff
 800a690:	699c      	ldr	r4, [r3, #24]
 800a692:	60a1      	str	r1, [r4, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 800a694:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800a696:	60a1      	str	r1, [r4, #8]
{
  uint32_t i;
  
  pdev->dev.device_status = 1;
    
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800a698:	786c      	ldrb	r4, [r5, #1]
 800a69a:	3201      	adds	r2, #1
 800a69c:	4294      	cmp	r4, r2
 800a69e:	f103 0304 	add.w	r3, r3, #4
 800a6a2:	d8f5      	bhi.n	800a690 <USB_OTG_StopDevice+0x14>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 800a6a4:	692b      	ldr	r3, [r5, #16]
 800a6a6:	2200      	movs	r2, #0
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );  
 800a6a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 800a6ac:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );  
  
  /* Flush the FIFO */
  USB_OTG_FlushRxFifo(pdev);
 800a6ae:	4628      	mov	r0, r5
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 800a6b0:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 800a6b2:	61da      	str	r2, [r3, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );  
 800a6b4:	6199      	str	r1, [r3, #24]
  
  /* Flush the FIFO */
  USB_OTG_FlushRxFifo(pdev);
 800a6b6:	f7ff fcbd 	bl	800a034 <USB_OTG_FlushRxFifo>
  USB_OTG_FlushTxFifo(pdev ,  0x10 );  
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	2110      	movs	r1, #16
}
 800a6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );  
  
  /* Flush the FIFO */
  USB_OTG_FlushRxFifo(pdev);
  USB_OTG_FlushTxFifo(pdev ,  0x10 );  
 800a6c2:	f7ff bc93 	b.w	8009fec <USB_OTG_FlushTxFifo>
 800a6c6:	bf00      	nop

0800a6c8 <USB_OTG_GetEPStatus>:
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  uint32_t Status = 0;  
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 800a6c8:	784b      	ldrb	r3, [r1, #1]
 800a6ca:	2b01      	cmp	r3, #1
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a6cc:	780b      	ldrb	r3, [r1, #0]
 800a6ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  uint32_t Status = 0;  
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
 800a6d2:	d00b      	beq.n	800a6ec <USB_OTG_GetEPStatus+0x24>
      Status = USB_OTG_EP_TX_VALID;     

  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800a6d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800a6d6:	681b      	ldr	r3, [r3, #0]
    if (depctl.b.stall == 1)  
 800a6d8:	0298      	lsls	r0, r3, #10
 800a6da:	d411      	bmi.n	800a700 <USB_OTG_GetEPStatus+0x38>
      Status = USB_OTG_EP_RX_STALL;
    else if (depctl.b.naksts == 1)
 800a6dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      Status = USB_OTG_EP_RX_NAK;
 800a6e0:	bf0c      	ite	eq
 800a6e2:	f44f 5040 	moveq.w	r0, #12288	; 0x3000
 800a6e6:	f44f 5000 	movne.w	r0, #8192	; 0x2000
 800a6ea:	4770      	bx	lr
  uint32_t Status = 0;  
  
  depctl.d32 = 0;
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a6ec:	6983      	ldr	r3, [r0, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800a6ee:	681b      	ldr	r3, [r3, #0]
    
    if (depctl.b.stall == 1)  
 800a6f0:	029a      	lsls	r2, r3, #10
 800a6f2:	d408      	bmi.n	800a706 <USB_OTG_GetEPStatus+0x3e>
      Status = USB_OTG_EP_TX_STALL;
    else if (depctl.b.naksts == 1)
 800a6f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      Status = USB_OTG_EP_TX_NAK;
 800a6f8:	bf0c      	ite	eq
 800a6fa:	2030      	moveq	r0, #48	; 0x30
 800a6fc:	2020      	movne	r0, #32
 800a6fe:	4770      	bx	lr
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
    if (depctl.b.stall == 1)  
      Status = USB_OTG_EP_RX_STALL;
 800a700:	f44f 5080 	mov.w	r0, #4096	; 0x1000
      Status = USB_OTG_EP_RX_VALID; 
  } 
  
  /* Return the current status */
  return Status;
}
 800a704:	4770      	bx	lr
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
    
    if (depctl.b.stall == 1)  
      Status = USB_OTG_EP_TX_STALL;
 800a706:	2010      	movs	r0, #16
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop

0800a70c <USB_OTG_SetEPStatus>:
*         Status : new Status
*         ep : EP structure
* @retval : None
*/
void USB_OTG_SetEPStatus (USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep , uint32_t Status)
{
 800a70c:	b4f0      	push	{r4, r5, r6, r7}
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;

  /* Process for IN endpoint */
  if (ep->is_in == 1)
 800a70e:	784d      	ldrb	r5, [r1, #1]
 800a710:	2d01      	cmp	r5, #1
*         Status : new Status
*         ep : EP structure
* @retval : None
*/
void USB_OTG_SetEPStatus (USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep , uint32_t Status)
{
 800a712:	460b      	mov	r3, r1
 800a714:	4604      	mov	r4, r0
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;

  /* Process for IN endpoint */
  if (ep->is_in == 1)
 800a716:	d01b      	beq.n	800a750 <USB_OTG_SetEPStatus+0x44>
 800a718:	7808      	ldrb	r0, [r1, #0]
 800a71a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  else /* Process for OUT endpoint */
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);    
    
    if (Status == USB_OTG_EP_RX_STALL)  {
 800a71e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    else if (Status == USB_OTG_EP_TX_DIS)
      depctl.b.usbactep = 0;
  } 
  else /* Process for OUT endpoint */
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800a722:	6d44      	ldr	r4, [r0, #84]	; 0x54
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);    
 800a724:	6821      	ldr	r1, [r4, #0]
 800a726:	460d      	mov	r5, r1
    
    if (Status == USB_OTG_EP_RX_STALL)  {
      depctl.b.stall = 1;
 800a728:	bf08      	it	eq
 800a72a:	f441 1100 	orreq.w	r1, r1, #2097152	; 0x200000
  else /* Process for OUT endpoint */
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);    
    
    if (Status == USB_OTG_EP_RX_STALL)  {
 800a72e:	d00c      	beq.n	800a74a <USB_OTG_SetEPStatus+0x3e>
      depctl.b.stall = 1;
    }
    else if (Status == USB_OTG_EP_RX_NAK)
 800a730:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      depctl.b.snak = 1;
 800a734:	bf08      	it	eq
 800a736:	f041 6100 	orreq.w	r1, r1, #134217728	; 0x8000000
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);    
    
    if (Status == USB_OTG_EP_RX_STALL)  {
      depctl.b.stall = 1;
    }
    else if (Status == USB_OTG_EP_RX_NAK)
 800a73a:	d006      	beq.n	800a74a <USB_OTG_SetEPStatus+0x3e>
      depctl.b.snak = 1;
    else if (Status == USB_OTG_EP_RX_VALID)
 800a73c:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800a740:	d019      	beq.n	800a776 <USB_OTG_SetEPStatus+0x6a>
      }  
      depctl.b.cnak = 1;
      depctl.b.usbactep = 1;    
      depctl.b.epena = 1;
    }
    else if (Status == USB_OTG_EP_RX_DIS)
 800a742:	b912      	cbnz	r2, 800a74a <USB_OTG_SetEPStatus+0x3e>
    {
      depctl.b.usbactep = 0;    
 800a744:	f362 35cf 	bfi	r5, r2, #15, #1
 800a748:	4629      	mov	r1, r5
    }
  }

  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32); 
 800a74a:	6021      	str	r1, [r4, #0]
}
 800a74c:	bcf0      	pop	{r4, r5, r6, r7}
 800a74e:	4770      	bx	lr
 800a750:	780f      	ldrb	r7, [r1, #0]
 800a752:	eb00 0787 	add.w	r7, r0, r7, lsl #2
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
    
    if (Status == USB_OTG_EP_TX_STALL)  
 800a756:	2a10      	cmp	r2, #16
  depctl.d32 = 0;

  /* Process for IN endpoint */
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a758:	69bc      	ldr	r4, [r7, #24]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800a75a:	6826      	ldr	r6, [r4, #0]
 800a75c:	4635      	mov	r5, r6
    
    if (Status == USB_OTG_EP_TX_STALL)  
 800a75e:	d02b      	beq.n	800a7b8 <USB_OTG_SetEPStatus+0xac>
    {
      USB_OTG_EPSetStall(pdev, ep); return;
    }
    else if (Status == USB_OTG_EP_TX_NAK)
 800a760:	2a20      	cmp	r2, #32
      depctl.b.snak = 1;
 800a762:	bf08      	it	eq
 800a764:	f046 6100 	orreq.w	r1, r6, #134217728	; 0x8000000
    
    if (Status == USB_OTG_EP_TX_STALL)  
    {
      USB_OTG_EPSetStall(pdev, ep); return;
    }
    else if (Status == USB_OTG_EP_TX_NAK)
 800a768:	d0ef      	beq.n	800a74a <USB_OTG_SetEPStatus+0x3e>
      depctl.b.snak = 1;
    else if (Status == USB_OTG_EP_TX_VALID)
 800a76a:	2a30      	cmp	r2, #48	; 0x30
 800a76c:	d019      	beq.n	800a7a2 <USB_OTG_SetEPStatus+0x96>
 800a76e:	4631      	mov	r1, r6
      }      
      depctl.b.cnak = 1;
      depctl.b.usbactep = 1; 
      depctl.b.epena = 1;
    }
    else if (Status == USB_OTG_EP_TX_DIS)
 800a770:	2a00      	cmp	r2, #0
 800a772:	d0e7      	beq.n	800a744 <USB_OTG_SetEPStatus+0x38>
 800a774:	e7e9      	b.n	800a74a <USB_OTG_SetEPStatus+0x3e>
    }
    else if (Status == USB_OTG_EP_RX_NAK)
      depctl.b.snak = 1;
    else if (Status == USB_OTG_EP_RX_VALID)
    {
      if (depctl.b.stall == 1)
 800a776:	028d      	lsls	r5, r1, #10
      {  
        ep->even_odd_frame = 0;
        USB_OTG_EPClearStall(pdev, ep);
        return;
      }  
      depctl.b.cnak = 1;
 800a778:	bf5c      	itt	pl
 800a77a:	f041 6580 	orrpl.w	r5, r1, #67108864	; 0x4000000
      depctl.b.usbactep = 1;    
      depctl.b.epena = 1;
 800a77e:	f045 2180 	orrpl.w	r1, r5, #2147516416	; 0x80008000
    }
    else if (Status == USB_OTG_EP_RX_NAK)
      depctl.b.snak = 1;
    else if (Status == USB_OTG_EP_RX_VALID)
    {
      if (depctl.b.stall == 1)
 800a782:	d5e2      	bpl.n	800a74a <USB_OTG_SetEPStatus+0x3e>
      {  
        ep->even_odd_frame = 0;
 800a784:	2100      	movs	r1, #0
 800a786:	7159      	strb	r1, [r3, #5]
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 800a788:	6d42      	ldr	r2, [r0, #84]	; 0x54
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800a78a:	78d8      	ldrb	r0, [r3, #3]
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800a78c:	6813      	ldr	r3, [r2, #0]
  /* clear the stall bits */
  depctl.b.stall = 0;
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800a78e:	3802      	subs	r0, #2
 800a790:	b2c0      	uxtb	r0, r0
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
  /* clear the stall bits */
  depctl.b.stall = 0;
 800a792:	f361 5355 	bfi	r3, r1, #21, #1
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800a796:	2801      	cmp	r0, #1
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 800a798:	bf98      	it	ls
 800a79a:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	e7d4      	b.n	800a74c <USB_OTG_SetEPStatus+0x40>
    }
    else if (Status == USB_OTG_EP_TX_NAK)
      depctl.b.snak = 1;
    else if (Status == USB_OTG_EP_TX_VALID)
    {
      if (depctl.b.stall == 1)
 800a7a2:	02b2      	lsls	r2, r6, #10
      {  
        ep->even_odd_frame = 0;
        USB_OTG_EPClearStall(pdev, ep);
        return;
      }      
      depctl.b.cnak = 1;
 800a7a4:	bf5c      	itt	pl
 800a7a6:	f046 6580 	orrpl.w	r5, r6, #67108864	; 0x4000000
      depctl.b.usbactep = 1; 
      depctl.b.epena = 1;
 800a7aa:	f045 2180 	orrpl.w	r1, r5, #2147516416	; 0x80008000
    }
    else if (Status == USB_OTG_EP_TX_NAK)
      depctl.b.snak = 1;
    else if (Status == USB_OTG_EP_TX_VALID)
    {
      if (depctl.b.stall == 1)
 800a7ae:	d5cc      	bpl.n	800a74a <USB_OTG_SetEPStatus+0x3e>
      {  
        ep->even_odd_frame = 0;
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	7159      	strb	r1, [r3, #5]
  
  depctl.d32 = 0;
  
  if (ep->is_in == 1)
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	e7e8      	b.n	800a78a <USB_OTG_SetEPStatus+0x7e>
      depctl.b.usbactep = 0;    
    }
  }

  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32); 
}
 800a7b8:	bcf0      	pop	{r4, r5, r6, r7}
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
    
    if (Status == USB_OTG_EP_TX_STALL)  
    {
      USB_OTG_EPSetStall(pdev, ep); return;
 800a7ba:	f7ff bec5 	b.w	800a548 <USB_OTG_EPSetStall>
 800a7be:	bf00      	nop

0800a7c0 <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	4604      	mov	r4, r0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 800a7c4:	f7ff faec 	bl	8009da0 <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800a7c8:	7863      	ldrb	r3, [r4, #1]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 800a7ca:	2601      	movs	r6, #1
  pdev->dev.device_address = 0;
 800a7cc:	2200      	movs	r2, #0
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 800a7ce:	f884 6112 	strb.w	r6, [r4, #274]	; 0x112
  pdev->dev.device_address = 0;
 800a7d2:	f884 2113 	strb.w	r2, [r4, #275]	; 0x113
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800a7d6:	b37b      	cbz	r3, 800a838 <DCD_Init+0x78>
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 800a7d8:	4611      	mov	r1, r2
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800a7da:	4623      	mov	r3, r4
    ep->is_in = 1;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 800a7dc:	2540      	movs	r5, #64	; 0x40
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    ep = &pdev->dev.in_ep[i];
    /* Init ep structure */
    ep->is_in = 1;
    ep->num = i;
 800a7de:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    ep->tx_fifo_num = i;
 800a7e2:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    ep = &pdev->dev.in_ep[i];
    /* Init ep structure */
    ep->is_in = 1;
 800a7e6:	f883 6119 	strb.w	r6, [r3, #281]	; 0x119
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 800a7ea:	f883 111b 	strb.w	r1, [r3, #283]	; 0x11b
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 800a7ee:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
    ep->xfer_buff = 0;
 800a7f2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    ep->xfer_len = 0;
 800a7f6:	f8c3 112c 	str.w	r1, [r3, #300]	; 0x12c
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
  pdev->dev.device_address = 0;
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800a7fa:	7860      	ldrb	r0, [r4, #1]
 800a7fc:	3201      	adds	r2, #1
 800a7fe:	4290      	cmp	r0, r2
 800a800:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800a804:	d8eb      	bhi.n	800a7de <DCD_Init+0x1e>
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800a806:	b1b8      	cbz	r0, 800a838 <DCD_Init+0x78>
 800a808:	2200      	movs	r2, #0
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 800a80a:	4611      	mov	r1, r2
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800a80c:	4623      	mov	r3, r4
    ep->is_in = 0;
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 800a80e:	2540      	movs	r5, #64	; 0x40
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
    ep->num = i;
 800a810:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    ep->tx_fifo_num = i;
 800a814:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
  {
    ep = &pdev->dev.out_ep[i];
    /* Init ep structure */
    ep->is_in = 0;
 800a818:	f883 1371 	strb.w	r1, [r3, #881]	; 0x371
    ep->num = i;
    ep->tx_fifo_num = i;
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 800a81c:	f883 1373 	strb.w	r1, [r3, #883]	; 0x373
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 800a820:	f8c3 5378 	str.w	r5, [r3, #888]	; 0x378
    ep->xfer_buff = 0;
 800a824:	f8c3 137c 	str.w	r1, [r3, #892]	; 0x37c
    ep->xfer_len = 0;
 800a828:	f8c3 1384 	str.w	r1, [r3, #900]	; 0x384
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800a82c:	7860      	ldrb	r0, [r4, #1]
 800a82e:	3201      	adds	r2, #1
 800a830:	4290      	cmp	r0, r2
 800a832:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800a836:	d8eb      	bhi.n	800a810 <DCD_Init+0x50>
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
    ep->xfer_buff = 0;
    ep->xfer_len = 0;
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 800a838:	4620      	mov	r0, r4
 800a83a:	f7ff fbcf 	bl	8009fdc <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 800a83e:	4620      	mov	r0, r4
 800a840:	f7ff fb4a 	bl	8009ed8 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 800a844:	4620      	mov	r0, r4
 800a846:	2100      	movs	r1, #0
 800a848:	f7ff fc14 	bl	800a074 <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 800a84c:	4620      	mov	r0, r4
 800a84e:	f7ff fc6b 	bl	800a128 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 800a852:	4620      	mov	r0, r4
}
 800a854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 800a858:	f7ff bbb8 	b.w	8009fcc <USB_OTG_EnableGlobalInt>

0800a85c <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 800a85c:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800a85e:	060c      	lsls	r4, r1, #24
 800a860:	d413      	bmi.n	800a88a <DCD_EP_Open+0x2e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800a862:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a866:	00ed      	lsls	r5, r5, #3
 800a868:	f505 755c 	add.w	r5, r5, #880	; 0x370
 800a86c:	1944      	adds	r4, r0, r5
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800a86e:	2600      	movs	r6, #0
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800a870:	5541      	strb	r1, [r0, r5]
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 800a872:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 800a874:	70e3      	strb	r3, [r4, #3]
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800a876:	7066      	strb	r6, [r4, #1]
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 800a878:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0;
 800a87a:	bf04      	itt	eq
 800a87c:	2300      	moveq	r3, #0
 800a87e:	7123      	strbeq	r3, [r4, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 800a880:	4621      	mov	r1, r4
 800a882:	f7ff fcf1 	bl	800a268 <USB_OTG_EPActivate>
  return 0;
}
 800a886:	2000      	movs	r0, #0
 800a888:	bd70      	pop	{r4, r5, r6, pc}
{
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800a88a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a88e:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800a892:	00ed      	lsls	r5, r5, #3
 800a894:	f505 758c 	add.w	r5, r5, #280	; 0x118
 800a898:	1944      	adds	r4, r0, r5
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800a89a:	2601      	movs	r6, #1
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800a89c:	5541      	strb	r1, [r0, r5]
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 800a89e:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 800a8a0:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a8a2:	80e1      	strh	r1, [r4, #6]
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800a8a4:	7066      	strb	r6, [r4, #1]
 800a8a6:	e7e7      	b.n	800a878 <DCD_EP_Open+0x1c>

0800a8a8 <DCD_EP_Close>:
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 800a8a8:	b2ca      	uxtb	r2, r1
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 800a8aa:	b508      	push	{r3, lr}
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 800a8ac:	0613      	lsls	r3, r2, #24
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800a8ae:	bf45      	ittet	mi
 800a8b0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800a8b4:	eb01 0381 	addmi.w	r3, r1, r1, lsl #2
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800a8b8:	eb01 0381 	addpl.w	r3, r1, r1, lsl #2
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800a8bc:	eb00 03c3 	addmi.w	r3, r0, r3, lsl #3
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800a8c0:	bf56      	itet	pl
 800a8c2:	eb00 03c3 	addpl.w	r3, r0, r3, lsl #3
{
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800a8c6:	f503 738c 	addmi.w	r3, r3, #280	; 0x118
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800a8ca:	f503 735c 	addpl.w	r3, r3, #880	; 0x370
  }
  ep->num   = ep_addr & 0x7F;
  ep->is_in = (0x80 & ep_addr) != 0;
 800a8ce:	09d2      	lsrs	r2, r2, #7
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800a8d0:	7019      	strb	r1, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800a8d2:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f7ff fcf7 	bl	800a2c8 <USB_OTG_EPDeactivate>
  return 0;
}
 800a8da:	2000      	movs	r0, #0
 800a8dc:	bd08      	pop	{r3, pc}
 800a8de:	bf00      	nop

0800a8e0 <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 800a8e0:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 800a8e2:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800a8e6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800a8ea:	00ed      	lsls	r5, r5, #3
 800a8ec:	f505 755c 	add.w	r5, r5, #880	; 0x370
 800a8f0:	1941      	adds	r1, r0, r5
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
  ep->xfer_len = buf_len;
  ep->xfer_count = 0;
 800a8f2:	2600      	movs	r6, #0
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 800a8f4:	60ca      	str	r2, [r1, #12]
  ep->xfer_len = buf_len;
 800a8f6:	614b      	str	r3, [r1, #20]
  ep->xfer_count = 0;
 800a8f8:	618e      	str	r6, [r1, #24]
  ep->is_in = 0;
 800a8fa:	704e      	strb	r6, [r1, #1]
  ep->num = ep_addr & 0x7F;
 800a8fc:	5544      	strb	r4, [r0, r5]
  
  if (pdev->cfg.dma_enable == 1)
 800a8fe:	78c3      	ldrb	r3, [r0, #3]
 800a900:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pbuf;  
 800a902:	bf08      	it	eq
 800a904:	610a      	streq	r2, [r1, #16]
  }
  
  if ( ep->num == 0 )
 800a906:	b11c      	cbz	r4, 800a910 <DCD_EP_PrepareRx+0x30>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 800a908:	f7ff fd00 	bl	800a30c <USB_OTG_EPStartXfer>
  }
  return 0;
}
 800a90c:	2000      	movs	r0, #0
 800a90e:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pbuf;  
  }
  
  if ( ep->num == 0 )
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 800a910:	f7ff fd98 	bl	800a444 <USB_OTG_EP0StartXfer>
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
  }
  return 0;
}
 800a914:	2000      	movs	r0, #0
 800a916:	bd70      	pop	{r4, r5, r6, pc}

0800a918 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 800a91a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800a91e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800a922:	00ed      	lsls	r5, r5, #3
 800a924:	f505 758c 	add.w	r5, r5, #280	; 0x118
 800a928:	1941      	adds	r1, r0, r5
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 800a92a:	f04f 0e01 	mov.w	lr, #1
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 800a92e:	2700      	movs	r7, #0
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 800a930:	f881 e001 	strb.w	lr, [r1, #1]
  ep->num = ep_addr & 0x7F;  
 800a934:	5544      	strb	r4, [r0, r5]
  ep->xfer_buff = pbuf;
 800a936:	60ca      	str	r2, [r1, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 800a938:	610a      	str	r2, [r1, #16]
  ep->xfer_count = 0;
  ep->xfer_len  = buf_len;
 800a93a:	614b      	str	r3, [r1, #20]
  /* Setup and start the Transfer */
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;  
  ep->xfer_buff = pbuf;
  ep->dma_addr = (uint32_t)pbuf;  
  ep->xfer_count = 0;
 800a93c:	618f      	str	r7, [r1, #24]
  ep->xfer_len  = buf_len;
  
  if ( ep->num == 0 )
 800a93e:	b11c      	cbz	r4, 800a948 <DCD_EP_Tx+0x30>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 800a940:	f7ff fce4 	bl	800a30c <USB_OTG_EPStartXfer>
  }
  return 0;
}
 800a944:	2000      	movs	r0, #0
 800a946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_count = 0;
  ep->xfer_len  = buf_len;
  
  if ( ep->num == 0 )
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 800a948:	f7ff fd7c 	bl	800a444 <USB_OTG_EP0StartXfer>
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
  }
  return 0;
}
 800a94c:	2000      	movs	r0, #0
 800a94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a950 <DCD_EP_Stall>:
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800a950:	b2ca      	uxtb	r2, r1
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 800a952:	b510      	push	{r4, lr}
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800a954:	0614      	lsls	r4, r2, #24
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 800a956:	bf45      	ittet	mi
 800a958:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800a95c:	eb01 0381 	addmi.w	r3, r1, r1, lsl #2
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800a960:	eb01 0381 	addpl.w	r3, r1, r1, lsl #2
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 800a964:	eb00 03c3 	addmi.w	r3, r0, r3, lsl #3
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800a968:	bf56      	itet	pl
 800a96a:	eb00 03c3 	addpl.w	r3, r0, r3, lsl #3
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 800a96e:	f503 738c 	addmi.w	r3, r3, #280	; 0x118
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800a972:	f503 735c 	addpl.w	r3, r3, #880	; 0x370
  }

  ep->is_stall = 1;
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 800a976:	09d2      	lsrs	r2, r2, #7
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 800a978:	2401      	movs	r4, #1
  ep->num   = epnum & 0x7F;
 800a97a:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 800a97c:	705a      	strb	r2, [r3, #1]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }

  ep->is_stall = 1;
 800a97e:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
  
  USB_OTG_EPSetStall(pdev , ep);
 800a980:	4619      	mov	r1, r3
 800a982:	f7ff fde1 	bl	800a548 <USB_OTG_EPSetStall>
  return (0);
}
 800a986:	2000      	movs	r0, #0
 800a988:	bd10      	pop	{r4, pc}
 800a98a:	bf00      	nop

0800a98c <DCD_EP_ClrStall>:
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 800a98c:	b2ca      	uxtb	r2, r1
 800a98e:	0613      	lsls	r3, r2, #24
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800a990:	bf46      	itte	mi
 800a992:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800a996:	eb01 0381 	addmi.w	r3, r1, r1, lsl #2
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800a99a:	eb01 0381 	addpl.w	r3, r1, r1, lsl #2
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 800a99e:	b510      	push	{r4, lr}
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800a9a0:	bf4b      	itete	mi
 800a9a2:	eb00 03c3 	addmi.w	r3, r0, r3, lsl #3
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800a9a6:	eb00 03c3 	addpl.w	r3, r0, r3, lsl #3
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800a9aa:	f503 738c 	addmi.w	r3, r3, #280	; 0x118
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800a9ae:	f503 735c 	addpl.w	r3, r3, #880	; 0x370
  }
  
  ep->is_stall = 0;  
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
 800a9b2:	09d2      	lsrs	r2, r2, #7
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
 800a9b4:	2400      	movs	r4, #0
  ep->num   = epnum & 0x7F;
 800a9b6:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 800a9b8:	705a      	strb	r2, [r3, #1]
  else
  {
    ep = &pdev->dev.out_ep[epnum];
  }
  
  ep->is_stall = 0;  
 800a9ba:	709c      	strb	r4, [r3, #2]
  ep->num   = epnum & 0x7F;
  ep->is_in = ((epnum & 0x80) == 0x80);
  
  USB_OTG_EPClearStall(pdev , ep);
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f7ff fddb 	bl	800a578 <USB_OTG_EPClearStall>
  return (0);
}
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	bd10      	pop	{r4, pc}
 800a9c6:	bf00      	nop

0800a9c8 <DCD_EP_Flush>:
* @retval : status
*/
uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{

  if ((epnum & 0x80) == 0x80)
 800a9c8:	060a      	lsls	r2, r1, #24
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 800a9ca:	b508      	push	{r3, lr}

  if ((epnum & 0x80) == 0x80)
 800a9cc:	d403      	bmi.n	800a9d6 <DCD_EP_Flush+0xe>
  {
    USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
  }
  else
  {
    USB_OTG_FlushRxFifo(pdev);
 800a9ce:	f7ff fb31 	bl	800a034 <USB_OTG_FlushRxFifo>
  }

  return (0);
}
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	bd08      	pop	{r3, pc}
uint32_t  DCD_EP_Flush (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{

  if ((epnum & 0x80) == 0x80)
  {
    USB_OTG_FlushTxFifo(pdev, epnum & 0x7F);
 800a9d6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a9da:	f7ff fb07 	bl	8009fec <USB_OTG_FlushTxFifo>
  {
    USB_OTG_FlushRxFifo(pdev);
  }

  return (0);
}
 800a9de:	2000      	movs	r0, #0
 800a9e0:	bd08      	pop	{r3, pc}
 800a9e2:	bf00      	nop

0800a9e4 <DCD_EP_SetAddress>:
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 800a9e4:	6903      	ldr	r3, [r0, #16]
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 800a9e6:	2200      	movs	r2, #0
  dcfg.b.devaddr = address;
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 800a9e8:	6818      	ldr	r0, [r3, #0]
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
  dcfg.b.devaddr = address;
 800a9ea:	f361 120a 	bfi	r2, r1, #4, #7
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 800a9ee:	4302      	orrs	r2, r0
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	4770      	bx	lr

0800a9f4 <DCD_DevConnect>:
*/
void  DCD_DevConnect (USB_OTG_CORE_HANDLE *pdev)
{
#ifndef USE_OTG_MODE
  USB_OTG_DCTL_TypeDef  dctl;
  dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 800a9f4:	6903      	ldr	r3, [r0, #16]
 800a9f6:	685a      	ldr	r2, [r3, #4]
  /* Connect device */
  dctl.b.sftdiscon  = 0;
 800a9f8:	f36f 0241 	bfc	r2, #1, #1
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 800a9fc:	605a      	str	r2, [r3, #4]
  USB_OTG_BSP_mDelay(3);
 800a9fe:	2003      	movs	r0, #3
 800aa00:	f7fd bf32 	b.w	8008868 <USB_OTG_BSP_mDelay>

0800aa04 <DCD_DevDisconnect>:
*/
void  DCD_DevDisconnect (USB_OTG_CORE_HANDLE *pdev)
{
#ifndef USE_OTG_MODE
  USB_OTG_DCTL_TypeDef  dctl;
  dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 800aa04:	6903      	ldr	r3, [r0, #16]
 800aa06:	685a      	ldr	r2, [r3, #4]
  /* Disconnect device for 3ms */
  dctl.b.sftdiscon  = 1;
 800aa08:	f042 0202 	orr.w	r2, r2, #2
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, dctl.d32);
 800aa0c:	605a      	str	r2, [r3, #4]
  USB_OTG_BSP_mDelay(3);
 800aa0e:	2003      	movs	r0, #3
 800aa10:	f7fd bf2a 	b.w	8008868 <USB_OTG_BSP_mDelay>

0800aa14 <DCD_GetEPStatus>:
uint32_t DCD_GetEPStatus(USB_OTG_CORE_HANDLE *pdev ,uint8_t epnum)
{
  USB_OTG_EP *ep;
  uint32_t Status = 0;  
  
  if ((0x80 & epnum) == 0x80)
 800aa14:	060b      	lsls	r3, r1, #24
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800aa16:	bf45      	ittet	mi
 800aa18:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800aa1c:	eb01 0181 	addmi.w	r1, r1, r1, lsl #2
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800aa20:	eb01 0181 	addpl.w	r1, r1, r1, lsl #2
  USB_OTG_EP *ep;
  uint32_t Status = 0;  
  
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800aa24:	eb00 01c1 	addmi.w	r1, r0, r1, lsl #3
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800aa28:	bf56      	itet	pl
 800aa2a:	eb00 01c1 	addpl.w	r1, r0, r1, lsl #3
  USB_OTG_EP *ep;
  uint32_t Status = 0;  
  
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800aa2e:	f501 718c 	addmi.w	r1, r1, #280	; 0x118
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800aa32:	f501 715c 	addpl.w	r1, r1, #880	; 0x370
  }
  
  Status = USB_OTG_GetEPStatus(pdev ,ep);
 800aa36:	f7ff be47 	b.w	800a6c8 <USB_OTG_GetEPStatus>
 800aa3a:	bf00      	nop

0800aa3c <DCD_SetEPStatus>:
*/
void DCD_SetEPStatus (USB_OTG_CORE_HANDLE *pdev , uint8_t epnum , uint32_t Status)
{
  USB_OTG_EP *ep;
  
  if ((0x80 & epnum) == 0x80)
 800aa3c:	060b      	lsls	r3, r1, #24
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800aa3e:	bf45      	ittet	mi
 800aa40:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800aa44:	eb01 0181 	addmi.w	r1, r1, r1, lsl #2
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800aa48:	eb01 0181 	addpl.w	r1, r1, r1, lsl #2
{
  USB_OTG_EP *ep;
  
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800aa4c:	eb00 01c1 	addmi.w	r1, r0, r1, lsl #3
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800aa50:	bf56      	itet	pl
 800aa52:	eb00 01c1 	addpl.w	r1, r0, r1, lsl #3
{
  USB_OTG_EP *ep;
  
  if ((0x80 & epnum) == 0x80)
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 800aa56:	f501 718c 	addmi.w	r1, r1, #280	; 0x118
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 800aa5a:	f501 715c 	addpl.w	r1, r1, #880	; 0x370
  }
  
   USB_OTG_SetEPStatus(pdev ,ep , Status);
 800aa5e:	f7ff be55 	b.w	800a70c <USB_OTG_SetEPStatus>
 800aa62:	bf00      	nop

0800aa64 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 800aa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	4604      	mov	r4, r0
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 800aa6c:	f7ff fb1e 	bl	800a0ac <USB_OTG_IsDeviceMode>
 800aa70:	b918      	cbnz	r0, 800aa7a <USBD_OTG_ISR_Handler+0x16>
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 800aa72:	2000      	movs	r0, #0
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
}
 800aa74:	b003      	add	sp, #12
 800aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7ff fb24 	bl	800a0c8 <USB_OTG_ReadCoreItr>
    if (!gintr_status.d32) /* avoid spurious interrupt */
 800aa80:	4605      	mov	r5, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d0f5      	beq.n	800aa72 <USBD_OTG_ISR_Handler+0xe>
    {
      return 0;
    }
    
    if (gintr_status.b.outepintr)
 800aa86:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d12a      	bne.n	800aae4 <USBD_OTG_ISR_Handler+0x80>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
    }    
    
    if (gintr_status.b.inepint)
 800aa8e:	036e      	lsls	r6, r5, #13
 800aa90:	f100 8165 	bmi.w	800ad5e <USBD_OTG_ISR_Handler+0x2fa>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
    }
    
    if (gintr_status.b.modemismatch)
 800aa94:	07ae      	lsls	r6, r5, #30
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
      gintsts.b.modemismatch = 1;
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800aa96:	bf42      	ittt	mi
 800aa98:	68e3      	ldrmi	r3, [r4, #12]
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
      gintsts.b.modemismatch = 1;
 800aa9a:	2202      	movmi	r2, #2
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800aa9c:	615a      	strmi	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	f2c0 813f 	blt.w	800ad22 <USBD_OTG_ISR_Handler+0x2be>
    {
      retval |= DCD_HandleResume_ISR(pdev);
    }
    
    if (gintr_status.b.usbsuspend)
 800aaa4:	0529      	lsls	r1, r5, #20
 800aaa6:	f100 8116 	bmi.w	800acd6 <USBD_OTG_ISR_Handler+0x272>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
    }
    if (gintr_status.b.sofintr)
 800aaaa:	072b      	lsls	r3, r5, #28
 800aaac:	f100 8106 	bmi.w	800acbc <USBD_OTG_ISR_Handler+0x258>
    {
      retval |= DCD_HandleSof_ISR(pdev);
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 800aab0:	06ef      	lsls	r7, r5, #27
 800aab2:	f100 80dc 	bmi.w	800ac6e <USBD_OTG_ISR_Handler+0x20a>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
      
    }
    
    if (gintr_status.b.usbreset)
 800aab6:	04ee      	lsls	r6, r5, #19
 800aab8:	f100 809d 	bmi.w	800abf6 <USBD_OTG_ISR_Handler+0x192>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
      
    }
    if (gintr_status.b.enumdone)
 800aabc:	04a9      	lsls	r1, r5, #18
 800aabe:	d47d      	bmi.n	800abbc <USBD_OTG_ISR_Handler+0x158>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
 800aac0:	02ea      	lsls	r2, r5, #11
 800aac2:	d46d      	bmi.n	800aba0 <USBD_OTG_ISR_Handler+0x13c>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
    }

    if (gintr_status.b.incomplisoout)
 800aac4:	02ab      	lsls	r3, r5, #10
 800aac6:	d5d5      	bpl.n	800aa74 <USBD_OTG_ISR_Handler+0x10>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 800aac8:	f240 03b4 	movw	r3, #180	; 0xb4
 800aacc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aad0:	4620      	mov	r0, r4
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800aad8:	68e3      	ldr	r3, [r4, #12]
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 800aada:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800aade:	615a      	str	r2, [r3, #20]
      retval |= DCD_IsoINIncomplete_ISR(pdev);
    }

    if (gintr_status.b.incomplisoout)
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 800aae0:	2001      	movs	r0, #1
 800aae2:	e7c7      	b.n	800aa74 <USBD_OTG_ISR_Handler+0x10>
  uint32_t epnum = 0;
  
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 800aae4:	4620      	mov	r0, r4
 800aae6:	f7ff fd5d 	bl	800a5a4 <USB_OTG_ReadDevAllOutEp_itr>
  
  while ( ep_intr )
 800aaea:	4606      	mov	r6, r0
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d055      	beq.n	800ab9c <USBD_OTG_ISR_Handler+0x138>
      if ( doepint.b.setup )
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 800aaf0:	f240 09b4 	movw	r9, #180	; 0xb4
 800aaf4:	f2c2 0900 	movt	r9, #8192	; 0x2000
 800aaf8:	4627      	mov	r7, r4
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 800aafa:	46a2      	mov	sl, r4
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 800aafc:	f04f 0800 	mov.w	r8, #0
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 800ab00:	9500      	str	r5, [sp, #0]
 800ab02:	e007      	b.n	800ab14 <USBD_OTG_ISR_Handler+0xb0>
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 800ab04:	0876      	lsrs	r6, r6, #1
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
        CLEAR_OUT_EP_INTR(epnum, setup);
      }
    }
    epnum++;
 800ab06:	f108 0801 	add.w	r8, r8, #1
 800ab0a:	f107 0704 	add.w	r7, r7, #4
 800ab0e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
  doepint.d32 = 0;
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
  
  while ( ep_intr )
 800ab12:	d042      	beq.n	800ab9a <USBD_OTG_ISR_Handler+0x136>
  {
    if (ep_intr&0x1)
 800ab14:	07f3      	lsls	r3, r6, #31
 800ab16:	d5f5      	bpl.n	800ab04 <USBD_OTG_ISR_Handler+0xa0>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 800ab18:	fa5f f588 	uxtb.w	r5, r8
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7ff fd46 	bl	800a5b0 <USB_OTG_ReadDevOutEP_itr>
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 800ab24:	f010 0f01 	tst.w	r0, #1
  while ( ep_intr )
  {
    if (ep_intr&0x1)
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 800ab28:	4683      	mov	fp, r0
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 800ab2a:	d01a      	beq.n	800ab62 <USBD_OTG_ISR_Handler+0xfe>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 800ab2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab2e:	2001      	movs	r0, #1
 800ab30:	6090      	str	r0, [r2, #8]
        if (pdev->cfg.dma_enable == 1)
 800ab32:	78e1      	ldrb	r1, [r4, #3]
 800ab34:	4281      	cmp	r1, r0
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 800ab36:	bf01      	itttt	eq
 800ab38:	6911      	ldreq	r1, [r2, #16]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 800ab3a:	f8da 2378 	ldreq.w	r2, [sl, #888]	; 0x378
            deptsiz.b.xfersize;
 800ab3e:	f3c1 0112 	ubfxeq	r1, r1, #0, #19
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
        if (pdev->cfg.dma_enable == 1)
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 800ab42:	ebc1 0202 	rsbeq	r2, r1, r2
 800ab46:	bf08      	it	eq
 800ab48:	f8ca 2388 	streq.w	r2, [sl, #904]	; 0x388
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 800ab4c:	f8d9 2000 	ldr.w	r2, [r9]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 800ab50:	4683      	mov	fp, r0
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
            deptsiz.b.xfersize;
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 800ab52:	6813      	ldr	r3, [r2, #0]
 800ab54:	4629      	mov	r1, r5
 800ab56:	4620      	mov	r0, r4
 800ab58:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 800ab5a:	78e3      	ldrb	r3, [r4, #3]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	f000 81c1 	beq.w	800aee4 <USBD_OTG_ISR_Handler+0x480>
            USB_OTG_EP0_OutStart(pdev);
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 800ab62:	f01b 0f02 	tst.w	fp, #2
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 800ab66:	bf1f      	itttt	ne
 800ab68:	f04f 0b02 	movne.w	fp, #2
 800ab6c:	6d7b      	ldrne	r3, [r7, #84]	; 0x54
 800ab6e:	465a      	movne	r2, fp
 800ab70:	609a      	strne	r2, [r3, #8]
      }
      /* AHB Error */
      if ( doepint.b.ahberr )
 800ab72:	f01b 0f04 	tst.w	fp, #4
      {
        CLEAR_OUT_EP_INTR(epnum, ahberr);
 800ab76:	bf1f      	itttt	ne
 800ab78:	6d7b      	ldrne	r3, [r7, #84]	; 0x54
 800ab7a:	f04f 0b04 	movne.w	fp, #4
 800ab7e:	4658      	movne	r0, fp
 800ab80:	6098      	strne	r0, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 800ab82:	f01b 0f08 	tst.w	fp, #8
 800ab86:	d0bd      	beq.n	800ab04 <USBD_OTG_ISR_Handler+0xa0>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 800ab88:	f8d9 3000 	ldr.w	r3, [r9]
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 800ab92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab94:	2208      	movs	r2, #8
 800ab96:	609a      	str	r2, [r3, #8]
 800ab98:	e7b4      	b.n	800ab04 <USBD_OTG_ISR_Handler+0xa0>
 800ab9a:	9d00      	ldr	r5, [sp, #0]
      return 0;
    }
    
    if (gintr_status.b.outepintr)
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 800ab9c:	2001      	movs	r0, #1
 800ab9e:	e776      	b.n	800aa8e <USBD_OTG_ISR_Handler+0x2a>
{
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 800aba0:	f240 03b4 	movw	r3, #180	; 0xb4
 800aba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800aba8:	4620      	mov	r0, r4
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800abb0:	68e3      	ldr	r3, [r4, #12]
  gintsts.d32 = 0;

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 800abb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800abb6:	615a      	str	r2, [r3, #20]
      retval |= DCD_HandleEnumDone_ISR(pdev);
    }
    
    if (gintr_status.b.incomplisoin)
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 800abb8:	2001      	movs	r0, #1
 800abba:	e783      	b.n	800aac4 <USBD_OTG_ISR_Handler+0x60>
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 800abbc:	4620      	mov	r0, r4
 800abbe:	f7ff fb3f 	bl	800a240 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800abc2:	68e3      	ldr	r3, [r4, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 800abc4:	4620      	mov	r0, r4
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 800abc6:	68de      	ldr	r6, [r3, #12]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 800abc8:	f7ff fb2a 	bl	800a220 <USB_OTG_GetDeviceSpeed>
 800abcc:	2803      	cmp	r0, #3
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
 800abce:	bf0b      	itete	eq
 800abd0:	2309      	moveq	r3, #9
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
 800abd2:	2305      	movne	r3, #5
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 800abd4:	f44f 7200 	moveq.w	r2, #512	; 0x200
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 800abd8:	2240      	movne	r2, #64	; 0x40
    gusbcfg.b.usbtrdtim = 5;
 800abda:	f363 268d 	bfi	r6, r3, #10, #4
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 800abde:	68e3      	ldr	r3, [r4, #12]
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 800abe0:	80a2      	strh	r2, [r4, #4]
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 800abe2:	bf0c      	ite	eq
 800abe4:	2100      	moveq	r1, #0
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 800abe6:	2101      	movne	r1, #1
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
 800abe8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
    gusbcfg.b.usbtrdtim = 9;
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 800abec:	70a1      	strb	r1, [r4, #2]
      retval |= DCD_HandleUsbReset_ISR(pdev);
      
    }
    if (gintr_status.b.enumdone)
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 800abee:	2001      	movs	r0, #1
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
    gusbcfg.b.usbtrdtim = 5;
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 800abf0:	60de      	str	r6, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.enumdone = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 800abf2:	615a      	str	r2, [r3, #20]
 800abf4:	e764      	b.n	800aac0 <USBD_OTG_ISR_Handler+0x5c>
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 800abf6:	6923      	ldr	r3, [r4, #16]
 800abf8:	685a      	ldr	r2, [r3, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 800abfa:	2700      	movs	r7, #0
  dcfg.d32 = 0;
  gintsts.d32 = 0;
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 800abfc:	f022 0201 	bic.w	r2, r2, #1
 800ac00:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 800ac02:	4639      	mov	r1, r7
 800ac04:	4620      	mov	r0, r4
 800ac06:	f7ff f9f1 	bl	8009fec <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800ac0a:	7863      	ldrb	r3, [r4, #1]
 800ac0c:	b163      	cbz	r3, 800ac28 <USBD_OTG_ISR_Handler+0x1c4>
 800ac0e:	4623      	mov	r3, r4
 800ac10:	463a      	mov	r2, r7
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 800ac12:	20ff      	movs	r0, #255	; 0xff
 800ac14:	6999      	ldr	r1, [r3, #24]
 800ac16:	6088      	str	r0, [r1, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 800ac18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac1a:	6088      	str	r0, [r1, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800ac1c:	7861      	ldrb	r1, [r4, #1]
 800ac1e:	3201      	adds	r2, #1
 800ac20:	428a      	cmp	r2, r1
 800ac22:	f103 0304 	add.w	r3, r3, #4
 800ac26:	d3f5      	bcc.n	800ac14 <USBD_OTG_ISR_Handler+0x1b0>
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
 800ac28:	2601      	movs	r6, #1
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 800ac2a:	6923      	ldr	r3, [r4, #16]
  
  daintmsk.ep.in = 1;
 800ac2c:	f366 070f 	bfi	r7, r6, #0, #16
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.ahberr = 1;
  doepmsk.b.epdisabled = 1;
 800ac30:	210f      	movs	r1, #15
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 800ac32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;
  diepmsk.b.ahberr = 1;
  diepmsk.b.intknepmis = 1;
 800ac36:	222f      	movs	r2, #47	; 0x2f
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
 800ac38:	f366 471f 	bfi	r7, r6, #16, #16
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 800ac3c:	6198      	str	r0, [r3, #24]
  
  daintmsk.ep.in = 1;
  daintmsk.ep.out = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 800ac3e:	61df      	str	r7, [r3, #28]
  
  doepmsk.b.setup = 1;
  doepmsk.b.xfercompl = 1;
  doepmsk.b.ahberr = 1;
  doepmsk.b.epdisabled = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 800ac40:	6159      	str	r1, [r3, #20]
  diepmsk.b.xfercompl = 1;
  diepmsk.b.timeout = 1;
  diepmsk.b.epdisabled = 1;
  diepmsk.b.ahberr = 1;
  diepmsk.b.intknepmis = 1;
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 800ac42:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 800ac44:	681a      	ldr	r2, [r3, #0]
  dcfg.b.devaddr = 0;
 800ac46:	f36f 120a 	bfc	r2, #4, #7
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 800ac4a:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f7ff fcbd 	bl	800a5cc <USB_OTG_EP0_OutStart>
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 800ac52:	f240 03b4 	movw	r3, #180	; 0xb4
 800ac56:	f2c2 0300 	movt	r3, #8192	; 0x2000
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800ac5a:	68e2      	ldr	r2, [r4, #12]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 800ac5c:	681b      	ldr	r3, [r3, #0]
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
 800ac5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 800ac62:	691b      	ldr	r3, [r3, #16]
  USB_OTG_EP0_OutStart(pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbreset = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800ac64:	6151      	str	r1, [r2, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 800ac66:	4620      	mov	r0, r4
 800ac68:	4798      	blx	r3
      
    }
    
    if (gintr_status.b.usbreset)
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	e726      	b.n	800aabc <USBD_OTG_ISR_Handler+0x58>
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
  int_mask.b.rxstsqlvl = 1;
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 800ac6e:	68e3      	ldr	r3, [r4, #12]
 800ac70:	699a      	ldr	r2, [r3, #24]
 800ac72:	f022 0210 	bic.w	r2, r2, #16
 800ac76:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 800ac78:	6a1e      	ldr	r6, [r3, #32]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 800ac7a:	f006 020f 	and.w	r2, r6, #15
 800ac7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  
  switch (status.b.pktsts)
 800ac82:	f3c6 4143 	ubfx	r1, r6, #17, #4
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 800ac86:	eb04 07c2 	add.w	r7, r4, r2, lsl #3
  
  switch (status.b.pktsts)
 800ac8a:	2902      	cmp	r1, #2
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 800ac8c:	f507 775c 	add.w	r7, r7, #880	; 0x370
  
  switch (status.b.pktsts)
 800ac90:	f000 80d7 	beq.w	800ae42 <USBD_OTG_ISR_Handler+0x3de>
 800ac94:	2906      	cmp	r1, #6
 800ac96:	d10b      	bne.n	800acb0 <USBD_OTG_ISR_Handler+0x24c>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 800ac98:	2208      	movs	r2, #8
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f504 61b9 	add.w	r1, r4, #1480	; 0x5c8
 800aca0:	f7ff f86a 	bl	8009d78 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	68e3      	ldr	r3, [r4, #12]
 800aca8:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800acac:	4432      	add	r2, r6
 800acae:	61ba      	str	r2, [r7, #24]
  default:
    break;
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 800acb0:	699a      	ldr	r2, [r3, #24]
 800acb2:	f042 0210 	orr.w	r2, r2, #16
 800acb6:	619a      	str	r2, [r3, #24]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 800acb8:	2001      	movs	r0, #1
 800acba:	e6fc      	b.n	800aab6 <USBD_OTG_ISR_Handler+0x52>
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 800acbc:	f240 03b4 	movw	r3, #180	; 0xb4
 800acc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acc4:	4620      	mov	r0, r4
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 800accc:	68e3      	ldr	r3, [r4, #12]
  
  USBD_DCD_INT_fops->SOF(pdev);
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
  GINTSTS.b.sofintr = 1;
 800acce:	2208      	movs	r2, #8
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 800acd0:	615a      	str	r2, [r3, #20]
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
    }
    if (gintr_status.b.sofintr)
    {
      retval |= DCD_HandleSof_ISR(pdev);
 800acd2:	2001      	movs	r0, #1
 800acd4:	e6ec      	b.n	800aab0 <USBD_OTG_ISR_Handler+0x4c>
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  
  USBD_DCD_INT_fops->Suspend (pdev);      
 800acd6:	f240 03b4 	movw	r3, #180	; 0xb4
 800acda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800acde:	4620      	mov	r0, r4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800ace6:	6922      	ldr	r2, [r4, #16]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800ace8:	68e3      	ldr	r3, [r4, #12]
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  
  USBD_DCD_INT_fops->Suspend (pdev);      
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800acea:	6891      	ldr	r1, [r2, #8]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.usbsuspend = 1;
 800acec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800acf0:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1))
 800acf2:	7aa3      	ldrb	r3, [r4, #10]
 800acf4:	b19b      	cbz	r3, 800ad1e <USBD_OTG_ISR_Handler+0x2ba>
 800acf6:	07ca      	lsls	r2, r1, #31
 800acf8:	d511      	bpl.n	800ad1e <USBD_OTG_ISR_Handler+0x2ba>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
    power.b.stoppclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 800acfa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	f042 0201 	orr.w	r2, r2, #1
 800ad04:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 800ad06:	6819      	ldr	r1, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 800ad08:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800ad0c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    power.d32 = 0;
    power.b.stoppclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
    
    power.b.gatehclk = 1;
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 800ad10:	f041 0103 	orr.w	r1, r1, #3
 800ad14:	6019      	str	r1, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 800ad16:	6913      	ldr	r3, [r2, #16]
 800ad18:	f043 0306 	orr.w	r3, r3, #6
 800ad1c:	6113      	str	r3, [r2, #16]
      retval |= DCD_HandleResume_ISR(pdev);
    }
    
    if (gintr_status.b.usbsuspend)
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 800ad1e:	2001      	movs	r0, #1
 800ad20:	e6c3      	b.n	800aaaa <USBD_OTG_ISR_Handler+0x46>
{
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 800ad22:	7aa3      	ldrb	r3, [r4, #10]
 800ad24:	b143      	cbz	r3, 800ad38 <USBD_OTG_ISR_Handler+0x2d4>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 800ad26:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    power.b.gatehclk = 0;
    power.b.stoppclk = 0;
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800ad2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  
  if(pdev->cfg.low_power)
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
    power.b.gatehclk = 0;
 800ad2e:	f36f 0341 	bfc	r3, #1, #1
    power.b.stoppclk = 0;
 800ad32:	f36f 0300 	bfc	r3, #0, #1
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 800ad36:	6013      	str	r3, [r2, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 800ad38:	6922      	ldr	r2, [r4, #16]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 800ad3a:	f240 03b4 	movw	r3, #180	; 0xb4
 800ad3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 800ad42:	6851      	ldr	r1, [r2, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 800ad44:	681b      	ldr	r3, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
  devctl.b.rmtwkupsig = 1;
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 800ad46:	f021 0101 	bic.w	r1, r1, #1
 800ad4a:	6051      	str	r1, [r2, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.wkupintr = 1;
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800ad52:	68e3      	ldr	r3, [r4, #12]
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
  
  /* Clear interrupt */
  gintsts.d32 = 0;
  gintsts.b.wkupintr = 1;
 800ad54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 800ad58:	615a      	str	r2, [r3, #20]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
    }
    
    if (gintr_status.b.wkupintr)
    {
      retval |= DCD_HandleResume_ISR(pdev);
 800ad5a:	2001      	movs	r0, #1
 800ad5c:	e6a2      	b.n	800aaa4 <USBD_OTG_ISR_Handler+0x40>
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f7ff fc2e 	bl	800a5c0 <USB_OTG_ReadDevAllInEPItr>
  
  while ( ep_intr )
 800ad64:	4680      	mov	r8, r0
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d069      	beq.n	800ae3e <USBD_OTG_ISR_Handler+0x3da>
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 800ad6a:	f240 03b4 	movw	r3, #180	; 0xb4
 800ad6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	4627      	mov	r7, r4
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 800ad76:	4626      	mov	r6, r4
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 800ad78:	f04f 0b00 	mov.w	fp, #0
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
      }
      if (diepint.b.intktxfemp)
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 800ad7c:	9501      	str	r5, [sp, #4]
 800ad7e:	e02c      	b.n	800adda <USBD_OTG_ISR_Handler+0x376>
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
          }
        }           
      }
      if ( diepint.b.ahberr )
 800ad80:	0769      	lsls	r1, r5, #29
      {
        CLEAR_IN_EP_INTR(epnum, ahberr);
 800ad82:	bf42      	ittt	mi
 800ad84:	69bb      	ldrmi	r3, [r7, #24]
 800ad86:	2504      	movmi	r5, #4
 800ad88:	609d      	strmi	r5, [r3, #8]
      }
      if ( diepint.b.timeout )
 800ad8a:	072a      	lsls	r2, r5, #28
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 800ad8c:	bf42      	ittt	mi
 800ad8e:	69bb      	ldrmi	r3, [r7, #24]
 800ad90:	2508      	movmi	r5, #8
 800ad92:	609d      	strmi	r5, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 800ad94:	06eb      	lsls	r3, r5, #27
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 800ad96:	bf41      	itttt	mi
 800ad98:	69bb      	ldrmi	r3, [r7, #24]
 800ad9a:	2210      	movmi	r2, #16
 800ad9c:	4615      	movmi	r5, r2
 800ad9e:	609a      	strmi	r2, [r3, #8]
      }
      if (diepint.b.intknepmis)
 800ada0:	06a8      	lsls	r0, r5, #26
      {
        CLEAR_IN_EP_INTR(epnum, intknepmis);
 800ada2:	bf41      	itttt	mi
 800ada4:	69bb      	ldrmi	r3, [r7, #24]
 800ada6:	2020      	movmi	r0, #32
 800ada8:	4605      	movmi	r5, r0
 800adaa:	6098      	strmi	r0, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 800adac:	0669      	lsls	r1, r5, #25
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 800adae:	bf41      	itttt	mi
 800adb0:	69bb      	ldrmi	r3, [r7, #24]
 800adb2:	2240      	movmi	r2, #64	; 0x40
 800adb4:	4615      	movmi	r5, r2
 800adb6:	609a      	strmi	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 800adb8:	07aa      	lsls	r2, r5, #30
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 800adba:	bf41      	itttt	mi
 800adbc:	2002      	movmi	r0, #2
 800adbe:	69bb      	ldrmi	r3, [r7, #24]
 800adc0:	4605      	movmi	r5, r0
 800adc2:	6098      	strmi	r0, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 800adc4:	062b      	lsls	r3, r5, #24
 800adc6:	d44e      	bmi.n	800ae66 <USBD_OTG_ISR_Handler+0x402>
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 800adc8:	ea5f 0858 	movs.w	r8, r8, lsr #1
        DCD_WriteEmptyTxFifo(pdev , epnum);
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
      }
    }
    epnum++;
 800adcc:	f10b 0b01 	add.w	fp, fp, #1
 800add0:	f107 0704 	add.w	r7, r7, #4
 800add4:	f106 0628 	add.w	r6, r6, #40	; 0x28
  uint32_t epnum = 0;
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
  
  while ( ep_intr )
 800add8:	d030      	beq.n	800ae3c <USBD_OTG_ISR_Handler+0x3d8>
  {
    if (ep_intr&0x1) /* In ITR */
 800adda:	f018 0f01 	tst.w	r8, #1
 800adde:	d0f3      	beq.n	800adc8 <USBD_OTG_ISR_Handler+0x364>
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	fa5f f98b 	uxtb.w	r9, fp
 800ade6:	6919      	ldr	r1, [r3, #16]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 800ade8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800adea:	eb04 0289 	add.w	r2, r4, r9, lsl #2
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 800adee:	fa25 f509 	lsr.w	r5, r5, r9
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800adf2:	6992      	ldr	r2, [r2, #24]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 800adf4:	01ed      	lsls	r5, r5, #7
 800adf6:	b2ed      	uxtb	r5, r5
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800adf8:	6892      	ldr	r2, [r2, #8]
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
  msk |= ((emp >> epnum) & 0x1) << 7;
 800adfa:	430d      	orrs	r5, r1
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 800adfc:	4015      	ands	r5, r2
  while ( ep_intr )
  {
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
 800adfe:	07e8      	lsls	r0, r5, #31
 800ae00:	d5be      	bpl.n	800ad80 <USBD_OTG_ISR_Handler+0x31c>
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 800ae02:	9800      	ldr	r0, [sp, #0]
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 800ae04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 800ae06:	6801      	ldr	r1, [r0, #0]
    if (ep_intr&0x1) /* In ITR */
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
 800ae08:	2501      	movs	r5, #1
 800ae0a:	fa05 f00b 	lsl.w	r0, r5, fp
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 800ae0e:	ea22 0200 	bic.w	r2, r2, r0
 800ae12:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 800ae14:	69ba      	ldr	r2, [r7, #24]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 800ae16:	684b      	ldr	r3, [r1, #4]
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
      if ( diepint.b.xfercompl )
      {
        fifoemptymsk = 0x1 << epnum;
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 800ae18:	6095      	str	r5, [r2, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 800ae20:	78e3      	ldrb	r3, [r4, #3]
 800ae22:	42ab      	cmp	r3, r5
 800ae24:	d1ac      	bne.n	800ad80 <USBD_OTG_ISR_Handler+0x31c>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 800ae26:	f1bb 0f00 	cmp.w	fp, #0
 800ae2a:	d1a9      	bne.n	800ad80 <USBD_OTG_ISR_Handler+0x31c>
 800ae2c:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 800ae30:	2b04      	cmp	r3, #4
 800ae32:	d1a5      	bne.n	800ad80 <USBD_OTG_ISR_Handler+0x31c>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 800ae34:	4620      	mov	r0, r4
 800ae36:	f7ff fbc9 	bl	800a5cc <USB_OTG_EP0_OutStart>
 800ae3a:	e7a1      	b.n	800ad80 <USBD_OTG_ISR_Handler+0x31c>
 800ae3c:	9d01      	ldr	r5, [sp, #4]
      retval |= DCD_HandleOutEP_ISR(pdev);
    }    
    
    if (gintr_status.b.inepint)
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 800ae3e:	2001      	movs	r0, #1
 800ae40:	e628      	b.n	800aa94 <USBD_OTG_ISR_Handler+0x30>
  switch (status.b.pktsts)
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 800ae42:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800ae46:	2e00      	cmp	r6, #0
 800ae48:	f43f af32 	beq.w	800acb0 <USBD_OTG_ISR_Handler+0x24c>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 800ae4c:	68f9      	ldr	r1, [r7, #12]
 800ae4e:	4632      	mov	r2, r6
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7fe ff91 	bl	8009d78 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 800ae56:	68f9      	ldr	r1, [r7, #12]
      ep->xfer_count += status.b.bcnt;
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	68e3      	ldr	r3, [r4, #12]
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 800ae5c:	4431      	add	r1, r6
      ep->xfer_count += status.b.bcnt;
 800ae5e:	4432      	add	r2, r6
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
      ep->xfer_buff += status.b.bcnt;
 800ae60:	60f9      	str	r1, [r7, #12]
      ep->xfer_count += status.b.bcnt;
 800ae62:	61ba      	str	r2, [r7, #24]
 800ae64:	e724      	b.n	800acb0 <USBD_OTG_ISR_Handler+0x24c>
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 800ae66:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
 800ae6a:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 800ae6e:	69b9      	ldr	r1, [r7, #24]
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
  
  if (len > ep->maxpacket)
 800ae70:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 800ae74:	f8d1 c018 	ldr.w	ip, [r1, #24]
  uint32_t len32b;
  txstatus.d32 = 0;
  
  ep = &pdev->dev.in_ep[epnum];    
  
  len = ep->xfer_len - ep->xfer_count;
 800ae78:	1a13      	subs	r3, r2, r0
 800ae7a:	42ab      	cmp	r3, r5
 800ae7c:	bf34      	ite	cc
 800ae7e:	469a      	movcc	sl, r3
 800ae80:	46aa      	movcs	sl, r5
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }
  
  len32b = (len + 3) / 4;
 800ae82:	f10a 0a03 	add.w	sl, sl, #3
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 800ae86:	fa1f fc8c 	uxth.w	ip, ip
 800ae8a:	ebbc 0f9a 	cmp.w	ip, sl, lsr #2
 800ae8e:	d926      	bls.n	800aede <USBD_OTG_ISR_Handler+0x47a>
 800ae90:	4282      	cmp	r2, r0
 800ae92:	d924      	bls.n	800aede <USBD_OTG_ISR_Handler+0x47a>
          ep->xfer_count < ep->xfer_len &&
 800ae94:	b31a      	cbz	r2, 800aede <USBD_OTG_ISR_Handler+0x47a>
 800ae96:	f8d6 1124 	ldr.w	r1, [r6, #292]	; 0x124
 800ae9a:	e006      	b.n	800aeaa <USBD_OTG_ISR_Handler+0x446>
 800ae9c:	f8d6 512c 	ldr.w	r5, [r6, #300]	; 0x12c
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 800aea0:	429d      	cmp	r5, r3
 800aea2:	d91b      	bls.n	800aedc <USBD_OTG_ISR_Handler+0x478>
 800aea4:	1aeb      	subs	r3, r5, r3
 800aea6:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 800aeaa:	429d      	cmp	r5, r3
 800aeac:	bf28      	it	cs
 800aeae:	461d      	movcs	r5, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 800aeb0:	b2ab      	uxth	r3, r5
 800aeb2:	464a      	mov	r2, r9
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f7fe ff4b 	bl	8009d50 <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 800aeba:	f8d6 1124 	ldr.w	r1, [r6, #292]	; 0x124
    ep->xfer_count += len;
 800aebe:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 800aec2:	4429      	add	r1, r5
    ep->xfer_count += len;
 800aec4:	442b      	add	r3, r5
    }
    len32b = (len + 3) / 4;
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
    
    ep->xfer_buff  += len;
 800aec6:	f8c6 1124 	str.w	r1, [r6, #292]	; 0x124
    ep->xfer_count += len;
 800aeca:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 800aece:	69b8      	ldr	r0, [r7, #24]
 800aed0:	6982      	ldr	r2, [r0, #24]
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3) / 4;
 800aed2:	3503      	adds	r5, #3
  len32b = (len + 3) / 4;
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 800aed4:	b292      	uxth	r2, r2
 800aed6:	ebb2 0f95 	cmp.w	r2, r5, lsr #2
 800aeda:	d8df      	bhi.n	800ae9c <USBD_OTG_ISR_Handler+0x438>
 800aedc:	4601      	mov	r1, r0
      if (diepint.b.emptyintr)
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 800aede:	2280      	movs	r2, #128	; 0x80
 800aee0:	608a      	str	r2, [r1, #8]
 800aee2:	e771      	b.n	800adc8 <USBD_OTG_ISR_Handler+0x364>
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
        
        if (pdev->cfg.dma_enable == 1)
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 800aee4:	f1b8 0f00 	cmp.w	r8, #0
 800aee8:	f47f ae3b 	bne.w	800ab62 <USBD_OTG_ISR_Handler+0xfe>
 800aeec:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 800aef0:	2b05      	cmp	r3, #5
 800aef2:	f47f ae36 	bne.w	800ab62 <USBD_OTG_ISR_Handler+0xfe>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 800aef6:	4620      	mov	r0, r4
 800aef8:	f7ff fb68 	bl	800a5cc <USB_OTG_EP0_OutStart>
 800aefc:	e631      	b.n	800ab62 <USBD_OTG_ISR_Handler+0xfe>
 800aefe:	bf00      	nop

0800af00 <private_AES_set_encrypt_key>:

/**
 * Expand the cipher key into the encryption key schedule.
 */
int private_AES_set_encrypt_key(const unsigned char *userKey, const int bits,
			AES_KEY *key) {
 800af00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	u32 *rk;
   	int i = 0;
	u32 temp;

	if (!userKey || !key)
 800af04:	2a00      	cmp	r2, #0
 800af06:	bf18      	it	ne
 800af08:	2800      	cmpne	r0, #0

/**
 * Expand the cipher key into the encryption key schedule.
 */
int private_AES_set_encrypt_key(const unsigned char *userKey, const int bits,
			AES_KEY *key) {
 800af0a:	b082      	sub	sp, #8

	u32 *rk;
   	int i = 0;
	u32 temp;

	if (!userKey || !key)
 800af0c:	f000 8184 	beq.w	800b218 <private_AES_set_encrypt_key+0x318>
		return -1;
	if (bits != 128 && bits != 192 && bits != 256)
 800af10:	f021 0340 	bic.w	r3, r1, #64	; 0x40
 800af14:	2b80      	cmp	r3, #128	; 0x80
 800af16:	d07f      	beq.n	800b018 <private_AES_set_encrypt_key+0x118>
 800af18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800af1c:	f040 8179 	bne.w	800b212 <private_AES_set_encrypt_key+0x312>
	if (bits==128)
		key->rounds = 10;
	else if (bits==192)
		key->rounds = 12;
	else
		key->rounds = 14;
 800af20:	230e      	movs	r3, #14
 800af22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	rk[0] = GETU32(userKey     );
 800af26:	7844      	ldrb	r4, [r0, #1]
 800af28:	7806      	ldrb	r6, [r0, #0]
 800af2a:	78c5      	ldrb	r5, [r0, #3]
 800af2c:	7883      	ldrb	r3, [r0, #2]
 800af2e:	0424      	lsls	r4, r4, #16
 800af30:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 800af34:	406c      	eors	r4, r5
 800af36:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800af3a:	6014      	str	r4, [r2, #0]
	rk[1] = GETU32(userKey +  4);
 800af3c:	7945      	ldrb	r5, [r0, #5]
 800af3e:	7907      	ldrb	r7, [r0, #4]
 800af40:	79c6      	ldrb	r6, [r0, #7]
 800af42:	7983      	ldrb	r3, [r0, #6]
 800af44:	042d      	lsls	r5, r5, #16
 800af46:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 800af4a:	4075      	eors	r5, r6
 800af4c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800af50:	6055      	str	r5, [r2, #4]
	rk[2] = GETU32(userKey +  8);
 800af52:	7a46      	ldrb	r6, [r0, #9]
 800af54:	f890 c008 	ldrb.w	ip, [r0, #8]
 800af58:	7ac7      	ldrb	r7, [r0, #11]
 800af5a:	7a83      	ldrb	r3, [r0, #10]
 800af5c:	0436      	lsls	r6, r6, #16
 800af5e:	ea46 660c 	orr.w	r6, r6, ip, lsl #24
 800af62:	407e      	eors	r6, r7
 800af64:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800af68:	6096      	str	r6, [r2, #8]
	rk[3] = GETU32(userKey + 12);
 800af6a:	7b47      	ldrb	r7, [r0, #13]
 800af6c:	f890 800c 	ldrb.w	r8, [r0, #12]
 800af70:	f890 c00f 	ldrb.w	ip, [r0, #15]
 800af74:	7b83      	ldrb	r3, [r0, #14]
 800af76:	043f      	lsls	r7, r7, #16
 800af78:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 800af7c:	ea87 070c 	eor.w	r7, r7, ip
 800af80:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (bits == 128) {
 800af84:	2980      	cmp	r1, #128	; 0x80
		key->rounds = 14;

	rk[0] = GETU32(userKey     );
	rk[1] = GETU32(userKey +  4);
	rk[2] = GETU32(userKey +  8);
	rk[3] = GETU32(userKey + 12);
 800af86:	60d7      	str	r7, [r2, #12]
	if (bits == 128) {
 800af88:	d053      	beq.n	800b032 <private_AES_set_encrypt_key+0x132>
				return 0;
			}
			rk += 4;
		}
	}
	rk[4] = GETU32(userKey + 16);
 800af8a:	7c43      	ldrb	r3, [r0, #17]
 800af8c:	f890 9010 	ldrb.w	r9, [r0, #16]
 800af90:	f890 8013 	ldrb.w	r8, [r0, #19]
 800af94:	f890 c012 	ldrb.w	ip, [r0, #18]
 800af98:	041b      	lsls	r3, r3, #16
 800af9a:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 800af9e:	ea83 0308 	eor.w	r3, r3, r8
 800afa2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800afa6:	6113      	str	r3, [r2, #16]
	rk[5] = GETU32(userKey + 20);
 800afa8:	7d43      	ldrb	r3, [r0, #21]
 800afaa:	f890 9014 	ldrb.w	r9, [r0, #20]
 800afae:	f890 8017 	ldrb.w	r8, [r0, #23]
 800afb2:	f890 c016 	ldrb.w	ip, [r0, #22]
 800afb6:	041b      	lsls	r3, r3, #16
 800afb8:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 800afbc:	ea83 0308 	eor.w	r3, r3, r8
 800afc0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
	if (bits == 192) {
 800afc4:	29c0      	cmp	r1, #192	; 0xc0
			}
			rk += 4;
		}
	}
	rk[4] = GETU32(userKey + 16);
	rk[5] = GETU32(userKey + 20);
 800afc6:	6153      	str	r3, [r2, #20]
	if (bits == 192) {
 800afc8:	d06b      	beq.n	800b0a2 <private_AES_set_encrypt_key+0x1a2>
			rk[10] = rk[ 4] ^ rk[ 9];
			rk[11] = rk[ 5] ^ rk[10];
			rk += 6;
		}
	}
	rk[6] = GETU32(userKey + 24);
 800afca:	7e43      	ldrb	r3, [r0, #25]
 800afcc:	f890 9018 	ldrb.w	r9, [r0, #24]
 800afd0:	f890 801b 	ldrb.w	r8, [r0, #27]
 800afd4:	f890 c01a 	ldrb.w	ip, [r0, #26]
 800afd8:	041b      	lsls	r3, r3, #16
 800afda:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 800afde:	ea83 0308 	eor.w	r3, r3, r8
 800afe2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800afe6:	6193      	str	r3, [r2, #24]
	rk[7] = GETU32(userKey + 28);
 800afe8:	f890 801d 	ldrb.w	r8, [r0, #29]
 800afec:	f890 c01c 	ldrb.w	ip, [r0, #28]
 800aff0:	7fc3      	ldrb	r3, [r0, #31]
 800aff2:	f890 901e 	ldrb.w	r9, [r0, #30]
 800aff6:	ea4f 4008 	mov.w	r0, r8, lsl #16
 800affa:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
 800affe:	4058      	eors	r0, r3
 800b000:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
	if (bits == 256) {
 800b004:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
			rk[11] = rk[ 5] ^ rk[10];
			rk += 6;
		}
	}
	rk[6] = GETU32(userKey + 24);
	rk[7] = GETU32(userKey + 28);
 800b008:	61d0      	str	r0, [r2, #28]
	if (bits == 256) {
 800b00a:	f000 8090 	beq.w	800b12e <private_AES_set_encrypt_key+0x22e>
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
			rk[6] = rk[2] ^ rk[5];
			rk[7] = rk[3] ^ rk[6];
			if (++i == 10) {
				return 0;
 800b00e:	2000      	movs	r0, #0

			rk += 8;
        	}
	}
	return 0;
}
 800b010:	b002      	add	sp, #8
 800b012:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b016:	4770      	bx	lr
	if (bits != 128 && bits != 192 && bits != 256)
		return -2;

	rk = key->rd_key;

	if (bits==128)
 800b018:	2980      	cmp	r1, #128	; 0x80
		key->rounds = 10;
 800b01a:	bf04      	itt	eq
 800b01c:	230a      	moveq	r3, #10
 800b01e:	f8c2 30f0 	streq.w	r3, [r2, #240]	; 0xf0
	if (bits != 128 && bits != 192 && bits != 256)
		return -2;

	rk = key->rd_key;

	if (bits==128)
 800b022:	d080      	beq.n	800af26 <private_AES_set_encrypt_key+0x26>
		key->rounds = 10;
	else if (bits==192)
 800b024:	29c0      	cmp	r1, #192	; 0xc0
 800b026:	f47f af7b 	bne.w	800af20 <private_AES_set_encrypt_key+0x20>
		key->rounds = 12;
 800b02a:	230c      	movs	r3, #12
 800b02c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800b030:	e779      	b.n	800af26 <private_AES_set_encrypt_key+0x26>
 800b032:	497b      	ldr	r1, [pc, #492]	; (800b220 <private_AES_set_encrypt_key+0x320>)
 800b034:	f102 0c90 	add.w	ip, r2, #144	; 0x90
 800b038:	1d0b      	adds	r3, r1, #4
 800b03a:	e000      	b.n	800b03e <private_AES_set_encrypt_key+0x13e>
 800b03c:	3210      	adds	r2, #16
		while (1) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b03e:	fa5f f887 	uxtb.w	r8, r7
 800b042:	eb03 0888 	add.w	r8, r3, r8, lsl #2
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b046:	0e38      	lsrs	r0, r7, #24
 800b048:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		while (1) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b04c:	f3c7 4907 	ubfx	r9, r7, #16, #8
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b050:	f8d8 a028 	ldr.w	sl, [r8, #40]	; 0x28
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b054:	f890 b428 	ldrb.w	fp, [r0, #1064]	; 0x428
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		while (1) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b058:	f851 0f04 	ldr.w	r0, [r1, #4]!
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b05c:	f3c7 2807 	ubfx	r8, r7, #8, #8
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		while (1) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b060:	eb03 0989 	add.w	r9, r3, r9, lsl #2
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b064:	eb03 0888 	add.w	r8, r3, r8, lsl #2
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b068:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		while (1) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b06c:	f8d9 9828 	ldr.w	r9, [r9, #2088]	; 0x828
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b070:	f8d8 8c28 	ldr.w	r8, [r8, #3112]	; 0xc28
	rk[2] = GETU32(userKey +  8);
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		while (1) {
			temp  = rk[3];
			rk[4] = rk[0] ^
 800b074:	ea8a 0a0b 	eor.w	sl, sl, fp
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b078:	ea8a 0000 	eor.w	r0, sl, r0
 800b07c:	f009 497f 	and.w	r9, r9, #4278190080	; 0xff000000
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b080:	ea80 0009 	eor.w	r0, r0, r9
 800b084:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b088:	ea80 0008 	eor.w	r0, r0, r8
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b08c:	4044      	eors	r4, r0
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
 800b08e:	4065      	eors	r5, r4
			rk[6] = rk[2] ^ rk[5];
 800b090:	406e      	eors	r6, r5
			rk[7] = rk[3] ^ rk[6];
 800b092:	4077      	eors	r7, r6
			if (++i == 10) {
 800b094:	4562      	cmp	r2, ip
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
			rk[6] = rk[2] ^ rk[5];
			rk[7] = rk[3] ^ rk[6];
 800b096:	61d7      	str	r7, [r2, #28]
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
			rk[6] = rk[2] ^ rk[5];
 800b098:	6196      	str	r6, [r2, #24]
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
 800b09a:	6155      	str	r5, [r2, #20]
	rk[2] = GETU32(userKey +  8);
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		while (1) {
			temp  = rk[3];
			rk[4] = rk[0] ^
 800b09c:	6114      	str	r4, [r2, #16]
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
			rk[6] = rk[2] ^ rk[5];
			rk[7] = rk[3] ^ rk[6];
			if (++i == 10) {
 800b09e:	d1cd      	bne.n	800b03c <private_AES_set_encrypt_key+0x13c>
 800b0a0:	e7b5      	b.n	800b00e <private_AES_set_encrypt_key+0x10e>
 800b0a2:	485f      	ldr	r0, [pc, #380]	; (800b220 <private_AES_set_encrypt_key+0x320>)
			rk += 4;
		}
	}
	rk[4] = GETU32(userKey + 16);
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f102 03a8 	add.w	r3, r2, #168	; 0xa8
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	46a1      	mov	r9, r4
 800b0ae:	1d03      	adds	r3, r0, #4
 800b0b0:	46aa      	mov	sl, r5
 800b0b2:	46b3      	mov	fp, r6
 800b0b4:	e007      	b.n	800b0c6 <private_AES_set_encrypt_key+0x1c6>
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
			if (++i == 8) {
				return 0;
			}
			rk[10] = rk[ 4] ^ rk[ 9];
 800b0b6:	6915      	ldr	r5, [r2, #16]
 800b0b8:	407d      	eors	r5, r7
			rk[11] = rk[ 5] ^ rk[10];
 800b0ba:	4069      	eors	r1, r5
 800b0bc:	62d1      	str	r1, [r2, #44]	; 0x2c
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
			if (++i == 8) {
				return 0;
			}
			rk[10] = rk[ 4] ^ rk[ 9];
 800b0be:	6295      	str	r5, [r2, #40]	; 0x28
 800b0c0:	46a1      	mov	r9, r4
 800b0c2:	46b3      	mov	fp, r6
 800b0c4:	3218      	adds	r2, #24
		while (1) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b0c6:	b2ce      	uxtb	r6, r1
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b0c8:	0e0c      	lsrs	r4, r1, #24
		while (1) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b0ca:	eb03 0686 	add.w	r6, r3, r6, lsl #2
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b0ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		while (1) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b0d2:	f3c1 4507 	ubfx	r5, r1, #16, #8
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b0d6:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b0da:	f894 c428 	ldrb.w	ip, [r4, #1064]	; 0x428
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		while (1) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b0de:	f850 6f04 	ldr.w	r6, [r0, #4]!
 800b0e2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b0e6:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b0ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b0ee:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		while (1) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b0f2:	f8d5 5828 	ldr.w	r5, [r5, #2088]	; 0x828
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b0f6:	f8d4 4c28 	ldr.w	r4, [r4, #3112]	; 0xc28
	rk[4] = GETU32(userKey + 16);
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		while (1) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
 800b0fa:	ea88 0c0c 	eor.w	ip, r8, ip
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b0fe:	ea8c 0606 	eor.w	r6, ip, r6
 800b102:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b106:	4075      	eors	r5, r6
 800b108:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b10c:	406c      	eors	r4, r5
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b10e:	ea84 0409 	eor.w	r4, r4, r9
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
 800b112:	ea8a 0a04 	eor.w	sl, sl, r4
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
			if (++i == 8) {
 800b116:	9d00      	ldr	r5, [sp, #0]
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
 800b118:	f8c2 a01c 	str.w	sl, [r2, #28]
			rk[ 8] = rk[ 2] ^ rk[ 7];
 800b11c:	ea8b 060a 	eor.w	r6, fp, sl
			rk[ 9] = rk[ 3] ^ rk[ 8];
 800b120:	4077      	eors	r7, r6
			if (++i == 8) {
 800b122:	42aa      	cmp	r2, r5
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
 800b124:	6257      	str	r7, [r2, #36]	; 0x24
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
			rk[ 8] = rk[ 2] ^ rk[ 7];
 800b126:	6216      	str	r6, [r2, #32]
	rk[4] = GETU32(userKey + 16);
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		while (1) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
 800b128:	6194      	str	r4, [r2, #24]
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
			if (++i == 8) {
 800b12a:	d1c4      	bne.n	800b0b6 <private_AES_set_encrypt_key+0x1b6>
 800b12c:	e76f      	b.n	800b00e <private_AES_set_encrypt_key+0x10e>
 800b12e:	493c      	ldr	r1, [pc, #240]	; (800b220 <private_AES_set_encrypt_key+0x320>)
 800b130:	f102 0bc0 	add.w	fp, r2, #192	; 0xc0
 800b134:	1d0b      	adds	r3, r1, #4
 800b136:	9100      	str	r1, [sp, #0]
			rk += 6;
		}
	}
	rk[6] = GETU32(userKey + 24);
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
 800b138:	4681      	mov	r9, r0
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b13a:	469a      	mov	sl, r3
 800b13c:	f8cd b004 	str.w	fp, [sp, #4]
 800b140:	469c      	mov	ip, r3
 800b142:	e021      	b.n	800b188 <private_AES_set_encrypt_key+0x288>
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
 800b144:	f8d8 b828 	ldr.w	fp, [r8, #2088]	; 0x828
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te1[(temp      ) & 0xff] & 0x000000ff);
 800b148:	f890 8428 	ldrb.w	r8, [r0, #1064]	; 0x428
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
 800b14c:	f8d3 0c28 	ldr.w	r0, [r3, #3112]	; 0xc28
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
 800b150:	6913      	ldr	r3, [r2, #16]
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
 800b152:	6a89      	ldr	r1, [r1, #40]	; 0x28
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
 800b154:	f00b 4b7f 	and.w	fp, fp, #4278190080	; 0xff000000
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
 800b158:	ea8b 0b08 	eor.w	fp, fp, r8
				(Te2[(temp >> 24)       ] & 0xff000000) ^
 800b15c:	ea8b 0b03 	eor.w	fp, fp, r3
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
 800b160:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
 800b164:	f401 487f 	and.w	r8, r1, #65280	; 0xff00
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
 800b168:	ea8b 0000 	eor.w	r0, fp, r0
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te1[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
 800b16c:	6951      	ldr	r1, [r2, #20]
			rk[14] = rk[ 6] ^ rk[13];
 800b16e:	6993      	ldr	r3, [r2, #24]
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
 800b170:	ea80 0008 	eor.w	r0, r0, r8
				(Te1[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
 800b174:	4041      	eors	r1, r0
			rk[14] = rk[ 6] ^ rk[13];
 800b176:	404b      	eors	r3, r1
			rk[15] = rk[ 7] ^ rk[14];
 800b178:	ea83 0909 	eor.w	r9, r3, r9
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
 800b17c:	6310      	str	r0, [r2, #48]	; 0x30
				(Te2[(temp >> 24)       ] & 0xff000000) ^
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te1[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
 800b17e:	6351      	str	r1, [r2, #52]	; 0x34
			rk[14] = rk[ 6] ^ rk[13];
			rk[15] = rk[ 7] ^ rk[14];
 800b180:	f8c2 903c 	str.w	r9, [r2, #60]	; 0x3c
				(Te2[(temp >> 24)       ] & 0xff000000) ^
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te1[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
			rk[14] = rk[ 6] ^ rk[13];
 800b184:	6393      	str	r3, [r2, #56]	; 0x38
 800b186:	3220      	adds	r2, #32
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b188:	fa5f f089 	uxtb.w	r0, r9
 800b18c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b190:	ea4f 6319 	mov.w	r3, r9, lsr #24
 800b194:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b198:	6a80      	ldr	r0, [r0, #40]	; 0x28
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b19a:	f893 b428 	ldrb.w	fp, [r3, #1064]	; 0x428
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b19e:	f400 487f 	and.w	r8, r0, #65280	; 0xff00
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b1a2:	f3c9 4107 	ubfx	r1, r9, #16, #8
	rk[6] = GETU32(userKey + 24);
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
 800b1a6:	ea88 080b 	eor.w	r8, r8, fp
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b1aa:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 800b1ae:	f8dd b000 	ldr.w	fp, [sp]
 800b1b2:	f8d1 1828 	ldr.w	r1, [r1, #2088]	; 0x828
 800b1b6:	f85b 0f04 	ldr.w	r0, [fp, #4]!
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b1ba:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800b1be:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b1c2:	ea88 0000 	eor.w	r0, r8, r0
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b1c6:	f8d3 3c28 	ldr.w	r3, [r3, #3112]	; 0xc28
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
 800b1ca:	f8cd b000 	str.w	fp, [sp]
 800b1ce:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
 800b1d2:	4041      	eors	r1, r0
 800b1d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
 800b1d8:	404b      	eors	r3, r1
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
 800b1da:	405c      	eors	r4, r3
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
 800b1dc:	4065      	eors	r5, r4
			rk[10] = rk[ 2] ^ rk[ 9];
 800b1de:	406e      	eors	r6, r5
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
 800b1e0:	f8dd b004 	ldr.w	fp, [sp, #4]
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
			rk[10] = rk[ 2] ^ rk[ 9];
 800b1e4:	6296      	str	r6, [r2, #40]	; 0x28
			rk[11] = rk[ 3] ^ rk[10];
 800b1e6:	4077      	eors	r7, r6
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
 800b1e8:	ea4f 6817 	mov.w	r8, r7, lsr #24
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te1[(temp      ) & 0xff] & 0x000000ff);
 800b1ec:	b2f8      	uxtb	r0, r7
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
 800b1ee:	f3c7 4307 	ubfx	r3, r7, #16, #8
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
 800b1f2:	f3c7 2107 	ubfx	r1, r7, #8, #8
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
			rk[10] = rk[ 2] ^ rk[ 9];
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
 800b1f6:	455a      	cmp	r2, fp
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
 800b1f8:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te1[(temp      ) & 0xff] & 0x000000ff);
 800b1fc:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te2[(temp >> 24)       ] & 0xff000000) ^
				(Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
 800b200:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
				(Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
 800b204:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
			rk[10] = rk[ 2] ^ rk[ 9];
			rk[11] = rk[ 3] ^ rk[10];
 800b208:	62d7      	str	r7, [r2, #44]	; 0x2c
				(Te2[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te0[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
 800b20a:	6255      	str	r5, [r2, #36]	; 0x24
	rk[6] = GETU32(userKey + 24);
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		while (1) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
 800b20c:	6214      	str	r4, [r2, #32]
				(Te1[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
			rk[10] = rk[ 2] ^ rk[ 9];
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
 800b20e:	d199      	bne.n	800b144 <private_AES_set_encrypt_key+0x244>
 800b210:	e6fd      	b.n	800b00e <private_AES_set_encrypt_key+0x10e>
	u32 temp;

	if (!userKey || !key)
		return -1;
	if (bits != 128 && bits != 192 && bits != 256)
		return -2;
 800b212:	f06f 0001 	mvn.w	r0, #1
 800b216:	e6fb      	b.n	800b010 <private_AES_set_encrypt_key+0x110>
	u32 *rk;
   	int i = 0;
	u32 temp;

	if (!userKey || !key)
		return -1;
 800b218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b21c:	e6f8      	b.n	800b010 <private_AES_set_encrypt_key+0x110>
 800b21e:	bf00      	nop
 800b220:	0ffffffc 	.word	0x0ffffffc

0800b224 <private_AES_set_decrypt_key>:

/**
 * Expand the cipher key into the decryption key schedule.
 */
int private_AES_set_decrypt_key(const unsigned char *userKey, const int bits,
			 AES_KEY *key) {
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	b08b      	sub	sp, #44	; 0x2c
 800b22a:	9209      	str	r2, [sp, #36]	; 0x24
        u32 *rk;
	int i, j, status;
	u32 temp;

	/* first, start with an encryption schedule */
	status = private_AES_set_encrypt_key(userKey, bits, key);
 800b22c:	f7ff fe68 	bl	800af00 <private_AES_set_encrypt_key>
	if (status < 0)
 800b230:	2800      	cmp	r0, #0
 800b232:	f2c0 811a 	blt.w	800b46a <private_AES_set_decrypt_key+0x246>
		return status;

	rk = key->rd_key;

	/* invert the order of the round keys: */
	for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
 800b236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b238:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800b23c:	0097      	lsls	r7, r2, #2
 800b23e:	2f00      	cmp	r7, #0
	/* first, start with an encryption schedule */
	status = private_AES_set_encrypt_key(userKey, bits, key);
	if (status < 0)
		return status;

	rk = key->rd_key;
 800b240:	469a      	mov	sl, r3

	/* invert the order of the round keys: */
	for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
 800b242:	dd2b      	ble.n	800b29c <private_AES_set_decrypt_key+0x78>
 800b244:	1c7c      	adds	r4, r7, #1
 800b246:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800b24a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b24e:	1d18      	adds	r0, r3, #4
 800b250:	2100      	movs	r1, #0
 800b252:	46bc      	mov	ip, r7
		temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 800b254:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800b258:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b25c:	f840 5c04 	str.w	r5, [r0, #-4]
 800b260:	f844 6c04 	str.w	r6, [r4, #-4]
		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 800b264:	685e      	ldr	r6, [r3, #4]
 800b266:	6855      	ldr	r5, [r2, #4]
 800b268:	605d      	str	r5, [r3, #4]
 800b26a:	6056      	str	r6, [r2, #4]
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 800b26c:	689e      	ldr	r6, [r3, #8]
 800b26e:	6895      	ldr	r5, [r2, #8]
		return status;

	rk = key->rd_key;

	/* invert the order of the round keys: */
	for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
 800b270:	3104      	adds	r1, #4
		temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 800b272:	609d      	str	r5, [r3, #8]
 800b274:	6096      	str	r6, [r2, #8]
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800b276:	68df      	ldr	r7, [r3, #12]
 800b278:	68d5      	ldr	r5, [r2, #12]
 800b27a:	ebc1 060c 	rsb	r6, r1, ip
		return status;

	rk = key->rd_key;

	/* invert the order of the round keys: */
	for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
 800b27e:	42b1      	cmp	r1, r6
		temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 800b280:	60dd      	str	r5, [r3, #12]
 800b282:	f100 0010 	add.w	r0, r0, #16
 800b286:	60d7      	str	r7, [r2, #12]
 800b288:	f1a4 0410 	sub.w	r4, r4, #16
 800b28c:	f103 0310 	add.w	r3, r3, #16
 800b290:	f1a2 0210 	sub.w	r2, r2, #16
		return status;

	rk = key->rd_key;

	/* invert the order of the round keys: */
	for (i = 0, j = 4*(key->rounds); i < j; i += 4, j -= 4) {
 800b294:	dbde      	blt.n	800b254 <private_AES_set_decrypt_key+0x30>
 800b296:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b298:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
 800b29c:	2a01      	cmp	r2, #1
 800b29e:	f340 80e3 	ble.w	800b468 <private_AES_set_decrypt_key+0x244>
 800b2a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2a4:	f241 03f8 	movw	r3, #4344	; 0x10f8
 800b2a8:	f240 0900 	movw	r9, #0
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
 800b2b2:	f2c1 0900 	movt	r9, #4096	; 0x1000
 800b2b6:	9704      	str	r7, [sp, #16]
 800b2b8:	9103      	str	r1, [sp, #12]
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b2ba:	9d04      	ldr	r5, [sp, #16]
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
 800b2bc:	9f04      	ldr	r7, [sp, #16]
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b2be:	692a      	ldr	r2, [r5, #16]
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
 800b2c0:	b2d4      	uxtb	r4, r2
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b2c2:	0e10      	lsrs	r0, r2, #24
 800b2c4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
 800b2c8:	f3c2 4107 	ubfx	r1, r2, #16, #8
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
 800b2cc:	eb09 0484 	add.w	r4, r9, r4, lsl #2
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
 800b2d0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
 800b2d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b2d8:	f890 5428 	ldrb.w	r5, [r0, #1064]	; 0x428
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
 800b2dc:	f894 4428 	ldrb.w	r4, [r4, #1064]	; 0x428
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
 800b2e0:	f891 0428 	ldrb.w	r0, [r1, #1064]	; 0x428
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
 800b2e4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b2e8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
 800b2ec:	f892 1428 	ldrb.w	r1, [r2, #1064]	; 0x428
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b2f0:	f8d5 2330 	ldr.w	r2, [r5, #816]	; 0x330
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
 800b2f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
 800b2f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b2fc:	f854 4cd0 	ldr.w	r4, [r4, #-208]
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
 800b300:	f8d0 0730 	ldr.w	r0, [r0, #1840]	; 0x730
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
 800b304:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
 800b308:	4062      	eors	r2, r4
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
 800b30a:	f8d1 1b30 	ldr.w	r1, [r1, #2864]	; 0xb30
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
 800b30e:	4042      	eors	r2, r0
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
 800b310:	404a      	eors	r2, r1
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
 800b312:	f10a 0a10 	add.w	sl, sl, #16
		rk[0] =
 800b316:	f847 2f10 	str.w	r2, [r7, #16]!
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b31a:	f8da 4004 	ldr.w	r4, [sl, #4]
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b31e:	f8da 1008 	ldr.w	r1, [sl, #8]
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b322:	f8da 200c 	ldr.w	r2, [sl, #12]
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
		rk += 4;
		rk[0] =
 800b326:	9704      	str	r7, [sp, #16]
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
 800b328:	fa5f f884 	uxtb.w	r8, r4
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
 800b32c:	fa5f fc81 	uxtb.w	ip, r1
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b330:	0e0e      	lsrs	r6, r1, #24
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[3]      ) & 0xff] & 0xff];
 800b332:	b2d5      	uxtb	r5, r2
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
 800b334:	eb09 0888 	add.w	r8, r9, r8, lsl #2
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
 800b338:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b33c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[3]      ) & 0xff] & 0xff];
 800b340:	eb09 0585 	add.w	r5, r9, r5, lsl #2
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
 800b344:	f898 b428 	ldrb.w	fp, [r8, #1064]	; 0x428
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
 800b348:	f89c 8428 	ldrb.w	r8, [ip, #1064]	; 0x428
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b34c:	f896 c428 	ldrb.w	ip, [r6, #1064]	; 0x428
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[3]      ) & 0xff] & 0xff];
 800b350:	f895 6428 	ldrb.w	r6, [r5, #1064]	; 0x428
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b354:	0e27      	lsrs	r7, r4, #24
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b356:	f3c4 4507 	ubfx	r5, r4, #16, #8
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
 800b35a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b35e:	eb09 0484 	add.w	r4, r9, r4, lsl #2
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b362:	eb09 0787 	add.w	r7, r9, r7, lsl #2
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
 800b366:	f894 4428 	ldrb.w	r4, [r4, #1064]	; 0x428
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b36a:	f897 7428 	ldrb.w	r7, [r7, #1064]	; 0x428
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
 800b36e:	9407      	str	r4, [sp, #28]
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b370:	eb09 0585 	add.w	r5, r9, r5, lsl #2
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b374:	f3c1 4407 	ubfx	r4, r1, #16, #8
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
 800b378:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800b37c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b380:	f895 5428 	ldrb.w	r5, [r5, #1064]	; 0x428
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
 800b384:	f891 1428 	ldrb.w	r1, [r1, #1064]	; 0x428
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b388:	9506      	str	r5, [sp, #24]
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b38a:	eb09 0484 	add.w	r4, r9, r4, lsl #2
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
 800b38e:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b392:	eb03 0787 	add.w	r7, r3, r7, lsl #2
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b396:	f894 5428 	ldrb.w	r5, [r4, #1064]	; 0x428
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
 800b39a:	9101      	str	r1, [sp, #4]
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b39c:	0e10      	lsrs	r0, r2, #24
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
 800b39e:	f3c2 4407 	ubfx	r4, r2, #16, #8
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
 800b3a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b3a6:	f85b 1cd0 	ldr.w	r1, [fp, #-208]
 800b3aa:	f8d7 7330 	ldr.w	r7, [r7, #816]	; 0x330
 800b3ae:	9105      	str	r1, [sp, #20]
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
 800b3b0:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b3b4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
 800b3b8:	eb09 0484 	add.w	r4, r9, r4, lsl #2
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
 800b3bc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b3c0:	f890 0428 	ldrb.w	r0, [r0, #1064]	; 0x428
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
 800b3c4:	f894 4428 	ldrb.w	r4, [r4, #1064]	; 0x428
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
 800b3c8:	f892 2428 	ldrb.w	r2, [r2, #1064]	; 0x428
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b3cc:	9702      	str	r7, [sp, #8]
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b3ce:	f858 7cd0 	ldr.w	r7, [r8, #-208]
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b3d2:	9906      	ldr	r1, [sp, #24]
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b3d4:	9708      	str	r7, [sp, #32]
 800b3d6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b3da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
 800b3de:	9f07      	ldr	r7, [sp, #28]
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b3e0:	f8dc b330 	ldr.w	fp, [ip, #816]	; 0x330
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b3e4:	f8d0 c330 	ldr.w	ip, [r0, #816]	; 0x330
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b3e8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[3]      ) & 0xff] & 0xff];
 800b3ec:	eb03 0686 	add.w	r6, r3, r6, lsl #2
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
 800b3f0:	eb03 0087 	add.w	r0, r3, r7, lsl #2
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b3f4:	f8d5 5730 	ldr.w	r5, [r5, #1840]	; 0x730
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
 800b3f8:	9f01      	ldr	r7, [sp, #4]
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b3fa:	f856 8cd0 	ldr.w	r8, [r6, #-208]
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b3fe:	9506      	str	r5, [sp, #24]
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b400:	eb03 0681 	add.w	r6, r3, r1, lsl #2
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b404:	9d05      	ldr	r5, [sp, #20]
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b406:	f8d6 6730 	ldr.w	r6, [r6, #1840]	; 0x730
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
 800b40a:	f8d0 0b30 	ldr.w	r0, [r0, #2864]	; 0xb30
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
 800b40e:	eb03 0187 	add.w	r1, r3, r7, lsl #2
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b412:	9f02      	ldr	r7, [sp, #8]
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
 800b414:	f8d1 1b30 	ldr.w	r1, [r1, #2864]	; 0xb30
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
 800b418:	eb03 0484 	add.w	r4, r3, r4, lsl #2
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
 800b41c:	407d      	eors	r5, r7
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
 800b41e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b422:	9f08      	ldr	r7, [sp, #32]
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
 800b424:	f8d4 4730 	ldr.w	r4, [r4, #1840]	; 0x730
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
 800b428:	f8d2 2b30 	ldr.w	r2, [r2, #2864]	; 0xb30
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
 800b42c:	406e      	eors	r6, r5
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b42e:	9d06      	ldr	r5, [sp, #24]
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
 800b430:	ea87 0b0b 	eor.w	fp, r7, fp
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
 800b434:	ea88 0c0c 	eor.w	ip, r8, ip
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
 800b438:	ea8b 0b05 	eor.w	fp, fp, r5
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
 800b43c:	ea8c 0c04 	eor.w	ip, ip, r4
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
 800b440:	ea8b 0101 	eor.w	r1, fp, r1
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
 800b444:	ea8c 0202 	eor.w	r2, ip, r2
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
 800b448:	4046      	eors	r6, r0
		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
 800b44a:	9f09      	ldr	r7, [sp, #36]	; 0x24
		rk[1] =
			Td0[Te1[(rk[1] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[1] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[1] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[1]      ) & 0xff] & 0xff];
		rk[2] =
 800b44c:	f8ca 1008 	str.w	r1, [sl, #8]
		rk[0] =
			Td0[Te1[(rk[0] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[0] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[0] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[0]      ) & 0xff] & 0xff];
		rk[1] =
 800b450:	f8ca 6004 	str.w	r6, [sl, #4]
		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
 800b454:	9903      	ldr	r1, [sp, #12]
		rk[2] =
			Td0[Te1[(rk[2] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[2] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[2] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[2]      ) & 0xff] & 0xff];
		rk[3] =
 800b456:	f8ca 200c 	str.w	r2, [sl, #12]
		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
	}
	/* apply the inverse MixColumn transform to all round keys but the first and the last: */
	for (i = 1; i < (key->rounds); i++) {
 800b45a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800b45e:	3101      	adds	r1, #1
 800b460:	428a      	cmp	r2, r1
 800b462:	9103      	str	r1, [sp, #12]
 800b464:	f73f af29 	bgt.w	800b2ba <private_AES_set_decrypt_key+0x96>
			Td0[Te1[(rk[3] >> 24)       ] & 0xff] ^
			Td1[Te1[(rk[3] >> 16) & 0xff] & 0xff] ^
			Td2[Te1[(rk[3] >>  8) & 0xff] & 0xff] ^
			Td3[Te1[(rk[3]      ) & 0xff] & 0xff];
	}
	return 0;
 800b468:	2000      	movs	r0, #0
}
 800b46a:	b00b      	add	sp, #44	; 0x2c
 800b46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b470 <AES_encrypt>:
/*
 * Encrypt a single block
 * in and out can overlap
 */
void AES_encrypt(const unsigned char *in, unsigned char *out,
		 const AES_KEY *key) {
 800b470:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b474:	b08a      	sub	sp, #40	; 0x28
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b476:	f890 c005 	ldrb.w	ip, [r0, #5]
 800b47a:	7906      	ldrb	r6, [r0, #4]
	s2 = GETU32(in +  8) ^ rk[2];
 800b47c:	f890 900b 	ldrb.w	r9, [r0, #11]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b480:	f890 b001 	ldrb.w	fp, [r0, #1]
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
 800b484:	f890 a009 	ldrb.w	sl, [r0, #9]
	s3 = GETU32(in + 12) ^ rk[3];
 800b488:	7b44      	ldrb	r4, [r0, #13]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b48a:	f890 8000 	ldrb.w	r8, [r0]
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
	s3 = GETU32(in + 12) ^ rk[3];
 800b48e:	7b03      	ldrb	r3, [r0, #12]
/*
 * Encrypt a single block
 * in and out can overlap
 */
void AES_encrypt(const unsigned char *in, unsigned char *out,
		 const AES_KEY *key) {
 800b490:	9208      	str	r2, [sp, #32]
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b492:	79c5      	ldrb	r5, [r0, #7]
	s2 = GETU32(in +  8) ^ rk[2];
 800b494:	7a02      	ldrb	r2, [r0, #8]
 800b496:	f8cd 900c 	str.w	r9, [sp, #12]
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b49a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800b49e:	ea4c 6c06 	orr.w	ip, ip, r6, lsl #24

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b4a2:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
 800b4a6:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
	s3 = GETU32(in + 12) ^ rk[3];
 800b4aa:	0424      	lsls	r4, r4, #16

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b4ac:	78c7      	ldrb	r7, [r0, #3]
 800b4ae:	7886      	ldrb	r6, [r0, #2]
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
	s3 = GETU32(in + 12) ^ rk[3];
 800b4b0:	f890 900f 	ldrb.w	r9, [r0, #15]
/*
 * Encrypt a single block
 * in and out can overlap
 */
void AES_encrypt(const unsigned char *in, unsigned char *out,
		 const AES_KEY *key) {
 800b4b4:	9107      	str	r1, [sp, #28]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b4b6:	ea4b 6b08 	orr.w	fp, fp, r8, lsl #24
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
 800b4ba:	ea4a 6a02 	orr.w	sl, sl, r2, lsl #24
	s3 = GETU32(in + 12) ^ rk[3];
 800b4be:	f890 800e 	ldrb.w	r8, [r0, #14]
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b4c2:	7982      	ldrb	r2, [r0, #6]
	s2 = GETU32(in +  8) ^ rk[2];
	s3 = GETU32(in + 12) ^ rk[3];
 800b4c4:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b4c8:	ea8c 0505 	eor.w	r5, ip, r5
	s2 = GETU32(in +  8) ^ rk[2];
 800b4cc:	7a83      	ldrb	r3, [r0, #10]
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b4ce:	f8dd c020 	ldr.w	ip, [sp, #32]
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
 800b4d2:	9803      	ldr	r0, [sp, #12]
 800b4d4:	ea8a 0a00 	eor.w	sl, sl, r0

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b4d8:	f8dc 0000 	ldr.w	r0, [ip]
 800b4dc:	9002      	str	r0, [sp, #8]
	s1 = GETU32(in +  4) ^ rk[1];
 800b4de:	f8dc 0004 	ldr.w	r0, [ip, #4]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b4e2:	ea8b 0b07 	eor.w	fp, fp, r7
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b4e6:	f8dc 70f0 	ldr.w	r7, [ip, #240]	; 0xf0
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b4ea:	9001      	str	r0, [sp, #4]
	s2 = GETU32(in +  8) ^ rk[2];
 800b4ec:	f8dc 0008 	ldr.w	r0, [ip, #8]
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b4f0:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b4f4:	107f      	asrs	r7, r7, #1
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
	s3 = GETU32(in + 12) ^ rk[3];
 800b4f6:	f8dc 200c 	ldr.w	r2, [ip, #12]
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
 800b4fa:	9000      	str	r0, [sp, #0]
	s3 = GETU32(in + 12) ^ rk[3];
 800b4fc:	ea84 0409 	eor.w	r4, r4, r9
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
 800b500:	ea4a 2003 	orr.w	r0, sl, r3, lsl #8
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b504:	9709      	str	r7, [sp, #36]	; 0x24

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b506:	9b02      	ldr	r3, [sp, #8]
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
 800b508:	9f00      	ldr	r7, [sp, #0]
	s3 = GETU32(in + 12) ^ rk[3];
 800b50a:	ea44 2408 	orr.w	r4, r4, r8, lsl #8

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b50e:	ea4b 2b06 	orr.w	fp, fp, r6, lsl #8
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
	s3 = GETU32(in + 12) ^ rk[3];
 800b512:	4054      	eors	r4, r2
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
	s1 = GETU32(in +  4) ^ rk[1];
 800b514:	9e01      	ldr	r6, [sp, #4]
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b516:	9a09      	ldr	r2, [sp, #36]	; 0x24

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
 800b518:	ea8b 0b03 	eor.w	fp, fp, r3
 800b51c:	f240 0a00 	movw	sl, #0
 800b520:	f8cd b00c 	str.w	fp, [sp, #12]
 800b524:	f2c1 0a00 	movt	sl, #4096	; 0x1000
	s1 = GETU32(in +  4) ^ rk[1];
 800b528:	4075      	eors	r5, r6
	s2 = GETU32(in +  8) ^ rk[2];
 800b52a:	4078      	eors	r0, r7
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b52c:	9206      	str	r2, [sp, #24]
#ifndef FULL_UNROLL
	int r;
#endif /* ?FULL_UNROLL */

	assert(in && out && key);
	rk = key->rd_key;
 800b52e:	46e3      	mov	fp, ip
 800b530:	e092      	b.n	800b658 <AES_encrypt+0x1e8>
        if (--r == 0) {
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
 800b532:	0e32      	lsrs	r2, r6, #24
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
 800b534:	ea4f 6c19 	mov.w	ip, r9, lsr #24
 800b538:	eb08 0c8c 	add.w	ip, r8, ip, lsl #2
        if (--r == 0) {
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
 800b53c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
 800b540:	b2c3      	uxtb	r3, r0
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
 800b542:	b2f7      	uxtb	r7, r6
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
 800b544:	0e25      	lsrs	r5, r4, #24
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
            Te3[(t2      ) & 0xff] ^
 800b546:	b2e1      	uxtb	r1, r4
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
 800b548:	fa5f f689 	uxtb.w	r6, r9
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
 800b54c:	eb08 0787 	add.w	r7, r8, r7, lsl #2
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
 800b550:	eb08 0686 	add.w	r6, r8, r6, lsl #2

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
 800b554:	eb08 0383 	add.w	r3, r8, r3, lsl #2
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
 800b558:	eb08 0585 	add.w	r5, r8, r5, lsl #2
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
            Te3[(t2      ) & 0xff] ^
 800b55c:	eb08 0181 	add.w	r1, r8, r1, lsl #2
        if (--r == 0) {
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
 800b560:	f8d2 8028 	ldr.w	r8, [r2, #40]	; 0x28
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
 800b564:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800b568:	f8d7 cc28 	ldr.w	ip, [r7, #3112]	; 0xc28
 800b56c:	9204      	str	r2, [sp, #16]
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
 800b56e:	f240 0200 	movw	r2, #0
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
 800b572:	f8d6 7c28 	ldr.w	r7, [r6, #3112]	; 0xc28
 800b576:	6aad      	ldr	r5, [r5, #40]	; 0x28
        if (--r == 0) {
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
 800b578:	f8d3 3c28 	ldr.w	r3, [r3, #3112]	; 0xc28
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
 800b57c:	f8d1 1c28 	ldr.w	r1, [r1, #3112]	; 0xc28
 800b580:	0e06      	lsrs	r6, r0, #24
 800b582:	f2c1 0200 	movt	r2, #4096	; 0x1000
 800b586:	eb02 0686 	add.w	r6, r2, r6, lsl #2
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
 800b58a:	406f      	eors	r7, r5
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
 800b58c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
 800b58e:	9705      	str	r7, [sp, #20]
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
 800b590:	f240 0500 	movw	r5, #0
        if (--r == 0) {
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
 800b594:	ea88 0203 	eor.w	r2, r8, r3
            Te1[(t1 >> 16) & 0xff] ^
 800b598:	f2c1 0500 	movt	r5, #4096	; 0x1000
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
 800b59c:	ea86 0801 	eor.w	r8, r6, r1
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
 800b5a0:	f3c9 4107 	ubfx	r1, r9, #16, #8
 800b5a4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
 800b5a8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800b5ac:	eb05 0989 	add.w	r9, r5, r9, lsl #2
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
 800b5b0:	f240 0600 	movw	r6, #0
 800b5b4:	f2c1 0600 	movt	r6, #4096	; 0x1000
 800b5b8:	f3c4 4507 	ubfx	r5, r4, #16, #8
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
 800b5bc:	f8d1 1428 	ldr.w	r1, [r1, #1064]	; 0x428
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
 800b5c0:	9b04      	ldr	r3, [sp, #16]
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
 800b5c2:	9104      	str	r1, [sp, #16]
 800b5c4:	f3c4 2407 	ubfx	r4, r4, #8, #8
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
 800b5c8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
 800b5cc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
 800b5d0:	f8d9 6828 	ldr.w	r6, [r9, #2088]	; 0x828
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
 800b5d4:	f8db 7000 	ldr.w	r7, [fp]
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
 800b5d8:	f8d5 5428 	ldr.w	r5, [r5, #1064]	; 0x428
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
 800b5dc:	f8d4 4828 	ldr.w	r4, [r4, #2088]	; 0x828
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
 800b5e0:	f240 0900 	movw	r9, #0
 800b5e4:	f2c1 0900 	movt	r9, #4096	; 0x1000
 800b5e8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800b5ec:	eb09 0181 	add.w	r1, r9, r1, lsl #2
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
 800b5f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
 800b5f4:	ea83 0c0c 	eor.w	ip, r3, ip
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
 800b5f8:	ea82 0307 	eor.w	r3, r2, r7
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
 800b5fc:	eb09 0280 	add.w	r2, r9, r0, lsl #2
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
 800b600:	f8d1 0428 	ldr.w	r0, [r1, #1064]	; 0x428
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
 800b604:	f8db 1004 	ldr.w	r1, [fp, #4]
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
 800b608:	f8d2 2828 	ldr.w	r2, [r2, #2088]	; 0x828
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
 800b60c:	ea8c 0c01 	eor.w	ip, ip, r1
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
 800b610:	9903      	ldr	r1, [sp, #12]
 800b612:	f3c1 4707 	ubfx	r7, r1, #16, #8
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
 800b616:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800b61a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
 800b61e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
 800b622:	ea8c 0505 	eor.w	r5, ip, r5
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
 800b626:	f8d7 9428 	ldr.w	r9, [r7, #1064]	; 0x428
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
 800b62a:	f8d1 7828 	ldr.w	r7, [r1, #2088]	; 0x828
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
 800b62e:	9904      	ldr	r1, [sp, #16]
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
 800b630:	f8dd c014 	ldr.w	ip, [sp, #20]
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
 800b634:	404b      	eors	r3, r1
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
 800b636:	f8db 1008 	ldr.w	r1, [fp, #8]
 800b63a:	ea8c 0101 	eor.w	r1, ip, r1
            Te2[(t0 >>  8) & 0xff] ^
 800b63e:	4048      	eors	r0, r1
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
 800b640:	f8db 100c 	ldr.w	r1, [fp, #12]
 800b644:	ea88 0101 	eor.w	r1, r8, r1
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
 800b648:	405c      	eors	r4, r3
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
 800b64a:	ea81 0909 	eor.w	r9, r1, r9
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
 800b64e:	9403      	str	r4, [sp, #12]
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
 800b650:	4055      	eors	r5, r2
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
 800b652:	4078      	eors	r0, r7
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
 800b654:	ea89 0406 	eor.w	r4, r9, r6
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
 800b658:	9e03      	ldr	r6, [sp, #12]
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
 800b65a:	9b03      	ldr	r3, [sp, #12]
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
 800b65c:	ea4f 6815 	mov.w	r8, r5, lsr #24
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
 800b660:	fa5f fc86 	uxtb.w	ip, r6
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
 800b664:	0e07      	lsrs	r7, r0, #24
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
 800b666:	b2ee      	uxtb	r6, r5
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
 800b668:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
 800b66c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
 800b670:	eb0a 0787 	add.w	r7, sl, r7, lsl #2
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
 800b674:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
 800b678:	f8d8 9028 	ldr.w	r9, [r8, #40]	; 0x28
 800b67c:	f8dc 8c28 	ldr.w	r8, [ip, #3112]	; 0xc28
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
 800b680:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 800b684:	f8d6 7c28 	ldr.w	r7, [r6, #3112]	; 0xc28
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
 800b688:	b2c1      	uxtb	r1, r0
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
 800b68a:	0e26      	lsrs	r6, r4, #24
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
 800b68c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
 800b690:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800b694:	f8d1 1c28 	ldr.w	r1, [r1, #3112]	; 0xc28
 800b698:	6ab6      	ldr	r6, [r6, #40]	; 0x28
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
 800b69a:	ea8c 0707 	eor.w	r7, ip, r7
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
 800b69e:	0e1a      	lsrs	r2, r3, #24
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
 800b6a0:	b2e3      	uxtb	r3, r4
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
 800b6a2:	ea86 0c01 	eor.w	ip, r6, r1
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
 800b6a6:	9704      	str	r7, [sp, #16]
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
 800b6a8:	f3c5 4607 	ubfx	r6, r5, #16, #8
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
 800b6ac:	f3c0 4707 	ubfx	r7, r0, #16, #8
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
 800b6b0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
 800b6b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
            Te3[(s3      ) & 0xff] ^
 800b6b8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
 800b6bc:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
 800b6c0:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
 800b6c4:	f8d3 3c28 	ldr.w	r3, [r3, #3112]	; 0xc28
 800b6c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
 800b6ca:	f8d6 0428 	ldr.w	r0, [r6, #1064]	; 0x428
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
 800b6ce:	f8d1 6828 	ldr.w	r6, [r1, #2088]	; 0x828
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
 800b6d2:	f3c4 4107 	ubfx	r1, r4, #16, #8
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
 800b6d6:	405a      	eors	r2, r3
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
 800b6d8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
 800b6dc:	f8db 3010 	ldr.w	r3, [fp, #16]
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
 800b6e0:	f3c4 2407 	ubfx	r4, r4, #8, #8
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
 800b6e4:	f3c5 2507 	ubfx	r5, r5, #8, #8
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
 800b6e8:	4053      	eors	r3, r2
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
 800b6ea:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
 800b6ee:	eb0a 0284 	add.w	r2, sl, r4, lsl #2
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
 800b6f2:	f8d1 4428 	ldr.w	r4, [r1, #1064]	; 0x428
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
 800b6f6:	f8db 1014 	ldr.w	r1, [fp, #20]
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
 800b6fa:	f8d5 5828 	ldr.w	r5, [r5, #2088]	; 0x828
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
 800b6fe:	f8d2 2828 	ldr.w	r2, [r2, #2088]	; 0x828
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
 800b702:	9505      	str	r5, [sp, #20]
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
 800b704:	ea89 0808 	eor.w	r8, r9, r8
            Te1[(s2 >> 16) & 0xff] ^
 800b708:	ea88 0901 	eor.w	r9, r8, r1
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
 800b70c:	f8dd 800c 	ldr.w	r8, [sp, #12]
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
 800b710:	eb0a 0787 	add.w	r7, sl, r7, lsl #2
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
 800b714:	f3c8 4507 	ubfx	r5, r8, #16, #8
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
 800b718:	f3c8 2107 	ubfx	r1, r8, #8, #8
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
 800b71c:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
 800b720:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
 800b724:	f8d7 7428 	ldr.w	r7, [r7, #1064]	; 0x428
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
 800b728:	f8d5 8428 	ldr.w	r8, [r5, #1064]	; 0x428
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
 800b72c:	f8d1 5828 	ldr.w	r5, [r1, #2088]	; 0x828
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
 800b730:	f8db 101c 	ldr.w	r1, [fp, #28]
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
 800b734:	4043      	eors	r3, r0
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
 800b736:	ea89 0907 	eor.w	r9, r9, r7
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
 800b73a:	9804      	ldr	r0, [sp, #16]
 800b73c:	f8db 7018 	ldr.w	r7, [fp, #24]
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
 800b740:	ea8c 0101 	eor.w	r1, ip, r1
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
 800b744:	ea89 0902 	eor.w	r9, r9, r2
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
 800b748:	9a06      	ldr	r2, [sp, #24]
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
 800b74a:	4047      	eors	r7, r0
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
 800b74c:	ea81 0008 	eor.w	r0, r1, r8
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
 800b750:	9905      	ldr	r1, [sp, #20]
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
 800b752:	407c      	eors	r4, r7
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
 800b754:	f240 0800 	movw	r8, #0
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
 800b758:	405e      	eors	r6, r3
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
 800b75a:	3a01      	subs	r2, #1
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
 800b75c:	9603      	str	r6, [sp, #12]
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
 800b75e:	ea84 0405 	eor.w	r4, r4, r5
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
 800b762:	ea80 0001 	eor.w	r0, r0, r1
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
            rk[7];

        rk += 8;
 800b766:	f10b 0b20 	add.w	fp, fp, #32
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
 800b76a:	f2c1 0800 	movt	r8, #4096	; 0x1000
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
 800b76e:	9206      	str	r2, [sp, #24]
 800b770:	f47f aedf 	bne.w	800b532 <AES_encrypt+0xc2>
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
 800b774:	9903      	ldr	r1, [sp, #12]
 800b776:	9e09      	ldr	r6, [sp, #36]	; 0x24
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800b778:	9f08      	ldr	r7, [sp, #32]
	PUTU32(out     , s0);
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
 800b77a:	f8dd a00c 	ldr.w	sl, [sp, #12]
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
 800b77e:	0e0a      	lsrs	r2, r1, #24
 800b780:	eb08 0282 	add.w	r2, r8, r2, lsl #2
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
 800b784:	b2c3      	uxtb	r3, r0
 800b786:	eb08 0383 	add.w	r3, r8, r3, lsl #2
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800b78a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800b78e:	ea4f 1c46 	mov.w	ip, r6, lsl #5
 800b792:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
 800b796:	f8d2 6828 	ldr.w	r6, [r2, #2088]	; 0x828
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
 800b79a:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800b79e:	f8d5 5c28 	ldr.w	r5, [r5, #3112]	; 0xc28
 800b7a2:	f857 300c 	ldr.w	r3, [r7, ip]
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800b7a6:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800b7aa:	eb08 0181 	add.w	r1, r8, r1, lsl #2
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
 800b7ae:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 800b7b2:	4056      	eors	r6, r2
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800b7b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
 800b7b6:	4073      	eors	r3, r6
 800b7b8:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800b7bc:	ea83 0605 	eor.w	r6, r3, r5
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
 800b7c0:	ea4f 6219 	mov.w	r2, r9, lsr #24
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
 800b7c4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800b7c8:	44bc      	add	ip, r7
#endif /* ?FULL_UNROLL */
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
 800b7ca:	404e      	eors	r6, r1
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
 800b7cc:	9f07      	ldr	r7, [sp, #28]
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
 800b7ce:	eb08 0282 	add.w	r2, r8, r2, lsl #2
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
 800b7d2:	fa5f f38a 	uxtb.w	r3, sl
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
 800b7d6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b7da:	70fe      	strb	r6, [r7, #3]
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
 800b7dc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
 800b7e0:	0e31      	lsrs	r1, r6, #24
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800b7e2:	f3c4 4507 	ubfx	r5, r4, #16, #8
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
 800b7e6:	f88a 1000 	strb.w	r1, [sl]
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800b7ea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
 800b7ee:	0c37      	lsrs	r7, r6, #16
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
 800b7f0:	f8d2 2828 	ldr.w	r2, [r2, #2088]	; 0x828
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
 800b7f4:	f88a 7001 	strb.w	r7, [sl, #1]
 800b7f8:	0a36      	lsrs	r6, r6, #8
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800b7fa:	f3c0 2107 	ubfx	r1, r0, #8, #8
		(Te2[(t0 >> 24)       ] & 0xff000000) ^
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
 800b7fe:	f88a 6002 	strb.w	r6, [sl, #2]
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
 800b802:	f893 7428 	ldrb.w	r7, [r3, #1064]	; 0x428
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800b806:	f8d5 6c28 	ldr.w	r6, [r5, #3112]	; 0xc28
 800b80a:	f8dc 3004 	ldr.w	r3, [ip, #4]
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800b80e:	eb08 0181 	add.w	r1, r8, r1, lsl #2
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
 800b812:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b816:	407a      	eors	r2, r7
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800b818:	6a8d      	ldr	r5, [r1, #40]	; 0x28
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
 800b81a:	4053      	eors	r3, r2
 800b81c:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
 800b820:	4073      	eors	r3, r6
 800b822:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
		(Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
 800b826:	406b      	eors	r3, r5
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
 800b828:	0e1d      	lsrs	r5, r3, #24
 800b82a:	f88a 3007 	strb.w	r3, [sl, #7]
 800b82e:	f88a 5004 	strb.w	r5, [sl, #4]
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
 800b832:	0e21      	lsrs	r1, r4, #24
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800b834:	f8dd a00c 	ldr.w	sl, [sp, #12]
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
 800b838:	eb08 0181 	add.w	r1, r8, r1, lsl #2
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
 800b83c:	fa5f f289 	uxtb.w	r2, r9
 800b840:	eb08 0282 	add.w	r2, r8, r2, lsl #2
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800b844:	f3c0 4607 	ubfx	r6, r0, #16, #8
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800b848:	f3ca 2507 	ubfx	r5, sl, #8, #8
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
 800b84c:	f8dd a01c 	ldr.w	sl, [sp, #28]
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
 800b850:	f8d1 1828 	ldr.w	r1, [r1, #2088]	; 0x828
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800b854:	eb08 0686 	add.w	r6, r8, r6, lsl #2
		(Te2[(t1 >> 24)       ] & 0xff000000) ^
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
 800b858:	0c1f      	lsrs	r7, r3, #16
 800b85a:	0a1b      	lsrs	r3, r3, #8
 800b85c:	f88a 7005 	strb.w	r7, [sl, #5]
 800b860:	f88a 3006 	strb.w	r3, [sl, #6]
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
 800b864:	f892 7428 	ldrb.w	r7, [r2, #1064]	; 0x428
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800b868:	f8d6 3c28 	ldr.w	r3, [r6, #3112]	; 0xc28
 800b86c:	f8dc 2008 	ldr.w	r2, [ip, #8]
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800b870:	eb08 0585 	add.w	r5, r8, r5, lsl #2
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
 800b874:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800b878:	4079      	eors	r1, r7
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800b87a:	6aad      	ldr	r5, [r5, #40]	; 0x28
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
 800b87c:	404a      	eors	r2, r1
 800b87e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
 800b882:	0e00      	lsrs	r0, r0, #24
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800b884:	4053      	eors	r3, r2
	PUTU32(out +  8, s2);
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t2      ) & 0xff] & 0x000000ff) ^
 800b886:	b2e4      	uxtb	r4, r4
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800b888:	9a03      	ldr	r2, [sp, #12]
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
 800b88a:	eb08 0180 	add.w	r1, r8, r0, lsl #2
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t2      ) & 0xff] & 0x000000ff) ^
 800b88e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
 800b892:	f405 407f 	and.w	r0, r5, #65280	; 0xff00
		(Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
 800b896:	4043      	eors	r3, r0
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800b898:	f3c2 4007 	ubfx	r0, r2, #16, #8
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
 800b89c:	f8d1 1828 	ldr.w	r1, [r1, #2088]	; 0x828
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t2      ) & 0xff] & 0x000000ff) ^
 800b8a0:	f894 4428 	ldrb.w	r4, [r4, #1064]	; 0x428
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
 800b8a4:	f88a 300b 	strb.w	r3, [sl, #11]
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800b8a8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
 800b8ac:	0e1f      	lsrs	r7, r3, #24
 800b8ae:	0c1e      	lsrs	r6, r3, #16
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800b8b0:	f3c9 2907 	ubfx	r9, r9, #8, #8
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
 800b8b4:	0a1b      	lsrs	r3, r3, #8
 800b8b6:	f88a 300a 	strb.w	r3, [sl, #10]
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800b8ba:	eb08 0889 	add.w	r8, r8, r9, lsl #2
		(Te2[(t2 >> 24)       ] & 0xff000000) ^
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
 800b8be:	f88a 7008 	strb.w	r7, [sl, #8]
 800b8c2:	f88a 6009 	strb.w	r6, [sl, #9]
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
 800b8c6:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800b8ca:	f8d0 1c28 	ldr.w	r1, [r0, #3112]	; 0xc28
 800b8ce:	f8dc 000c 	ldr.w	r0, [ip, #12]
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800b8d2:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
 800b8d6:	4063      	eors	r3, r4
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
 800b8d8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800b8dc:	4043      	eors	r3, r0
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
 800b8de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800b8e2:	404b      	eors	r3, r1
		(Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
 800b8e4:	4053      	eors	r3, r2
		(Te2[(t3 >> 24)       ] & 0xff000000) ^
		(Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te1[(t2      ) & 0xff] & 0x000000ff) ^
		rk[3];
	PUTU32(out + 12, s3);
 800b8e6:	0e18      	lsrs	r0, r3, #24
 800b8e8:	0c19      	lsrs	r1, r3, #16
 800b8ea:	0a1a      	lsrs	r2, r3, #8
 800b8ec:	f88a 000c 	strb.w	r0, [sl, #12]
 800b8f0:	f88a 100d 	strb.w	r1, [sl, #13]
 800b8f4:	f88a 300f 	strb.w	r3, [sl, #15]
 800b8f8:	f88a 200e 	strb.w	r2, [sl, #14]
}
 800b8fc:	b00a      	add	sp, #40	; 0x28
 800b8fe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b902:	4770      	bx	lr

0800b904 <AES_decrypt>:
/*
 * Decrypt a single block
 * in and out can overlap
 */
void AES_decrypt(const unsigned char *in, unsigned char *out,
		 const AES_KEY *key) {
 800b904:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b908:	b08e      	sub	sp, #56	; 0x38

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b90a:	f890 b001 	ldrb.w	fp, [r0, #1]
    s1 = GETU32(in +  4) ^ rk[1];
 800b90e:	f890 a005 	ldrb.w	sl, [r0, #5]
    s2 = GETU32(in +  8) ^ rk[2];
 800b912:	7a46      	ldrb	r6, [r0, #9]
    s3 = GETU32(in + 12) ^ rk[3];
 800b914:	f890 900d 	ldrb.w	r9, [r0, #13]
/*
 * Decrypt a single block
 * in and out can overlap
 */
void AES_decrypt(const unsigned char *in, unsigned char *out,
		 const AES_KEY *key) {
 800b918:	920c      	str	r2, [sp, #48]	; 0x30

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b91a:	f890 c000 	ldrb.w	ip, [r0]
    s1 = GETU32(in +  4) ^ rk[1];
 800b91e:	7905      	ldrb	r5, [r0, #4]
    s2 = GETU32(in +  8) ^ rk[2];
 800b920:	7a02      	ldrb	r2, [r0, #8]
    s3 = GETU32(in + 12) ^ rk[3];
 800b922:	7b03      	ldrb	r3, [r0, #12]
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
 800b924:	f890 800b 	ldrb.w	r8, [r0, #11]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b928:	78c4      	ldrb	r4, [r0, #3]
    s1 = GETU32(in +  4) ^ rk[1];
 800b92a:	79c7      	ldrb	r7, [r0, #7]
    s2 = GETU32(in +  8) ^ rk[2];
 800b92c:	f8cd 8014 	str.w	r8, [sp, #20]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b930:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
    s1 = GETU32(in +  4) ^ rk[1];
 800b934:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
    s2 = GETU32(in +  8) ^ rk[2];
 800b938:	0436      	lsls	r6, r6, #16
    s3 = GETU32(in + 12) ^ rk[3];
 800b93a:	ea4f 4909 	mov.w	r9, r9, lsl #16

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b93e:	ea4b 6b0c 	orr.w	fp, fp, ip, lsl #24
    s1 = GETU32(in +  4) ^ rk[1];
 800b942:	ea4a 6a05 	orr.w	sl, sl, r5, lsl #24
    s2 = GETU32(in +  8) ^ rk[2];
    s3 = GETU32(in + 12) ^ rk[3];
 800b946:	f890 800f 	ldrb.w	r8, [r0, #15]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b94a:	7885      	ldrb	r5, [r0, #2]
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
    s3 = GETU32(in + 12) ^ rk[3];
 800b94c:	f890 c00e 	ldrb.w	ip, [r0, #14]
 800b950:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
 800b954:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 800b958:	7a83      	ldrb	r3, [r0, #10]
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
 800b95a:	7982      	ldrb	r2, [r0, #6]
	rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b95c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b95e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 800b962:	9001      	str	r0, [sp, #4]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b964:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b966:	6800      	ldr	r0, [r0, #0]
 800b968:	9004      	str	r0, [sp, #16]
    s1 = GETU32(in +  4) ^ rk[1];
 800b96a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b96c:	ea8a 0707 	eor.w	r7, sl, r7
 800b970:	6840      	ldr	r0, [r0, #4]
    s2 = GETU32(in +  8) ^ rk[2];
 800b972:	f8dd a014 	ldr.w	sl, [sp, #20]
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
 800b976:	9003      	str	r0, [sp, #12]
    s2 = GETU32(in +  8) ^ rk[2];
 800b978:	ea86 060a 	eor.w	r6, r6, sl
 800b97c:	980c      	ldr	r0, [sp, #48]	; 0x30

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b97e:	ea8b 0404 	eor.w	r4, fp, r4
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
 800b982:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b986:	9b01      	ldr	r3, [sp, #4]
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
 800b988:	6880      	ldr	r0, [r0, #8]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b98a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
    s3 = GETU32(in + 12) ^ rk[3];
 800b98e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
 800b990:	9002      	str	r0, [sp, #8]
	rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b992:	105b      	asrs	r3, r3, #1
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
 800b994:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
    s2 = GETU32(in +  8) ^ rk[2];
    s3 = GETU32(in + 12) ^ rk[3];
 800b998:	68ea      	ldr	r2, [r5, #12]
	rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b99a:	930d      	str	r3, [sp, #52]	; 0x34

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b99c:	9d04      	ldr	r5, [sp, #16]
    s1 = GETU32(in +  4) ^ rk[1];
 800b99e:	9b03      	ldr	r3, [sp, #12]
/*
 * Decrypt a single block
 * in and out can overlap
 */
void AES_decrypt(const unsigned char *in, unsigned char *out,
		 const AES_KEY *key) {
 800b9a0:	910b      	str	r1, [sp, #44]	; 0x2c
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
 800b9a2:	405f      	eors	r7, r3

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
 800b9a4:	406c      	eors	r4, r5
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
 800b9a6:	9d02      	ldr	r5, [sp, #8]
	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
 800b9a8:	9705      	str	r7, [sp, #20]
    s2 = GETU32(in +  8) ^ rk[2];
    s3 = GETU32(in + 12) ^ rk[3];
 800b9aa:	ea89 0808 	eor.w	r8, r9, r8
 800b9ae:	f241 0af8 	movw	sl, #4344	; 0x10f8
	rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b9b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
#ifndef FULL_UNROLL
	int r;
#endif /* ?FULL_UNROLL */

	assert(in && out && key);
	rk = key->rd_key;
 800b9b4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
	rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
 800b9b8:	9709      	str	r7, [sp, #36]	; 0x24
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
    s3 = GETU32(in + 12) ^ rk[3];
 800b9ba:	ea48 200c 	orr.w	r0, r8, ip, lsl #8
 800b9be:	f2c1 0a00 	movt	sl, #4096	; 0x1000
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
    s0 = GETU32(in     ) ^ rk[0];
    s1 = GETU32(in +  4) ^ rk[1];
    s2 = GETU32(in +  8) ^ rk[2];
 800b9c2:	406e      	eors	r6, r5
    s3 = GETU32(in + 12) ^ rk[3];
 800b9c4:	4050      	eors	r0, r2
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800b9c6:	46d1      	mov	r9, sl
#ifndef FULL_UNROLL
	int r;
#endif /* ?FULL_UNROLL */

	assert(in && out && key);
	rk = key->rd_key;
 800b9c8:	46b0      	mov	r8, r6
 800b9ca:	e08b      	b.n	800bae4 <AES_decrypt+0x1e0>

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
 800b9cc:	9905      	ldr	r1, [sp, #20]
        if (--r == 0) {
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
 800b9ce:	ea4f 6c16 	mov.w	ip, r6, lsr #24
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
 800b9d2:	b2ca      	uxtb	r2, r1
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
 800b9d4:	0e0c      	lsrs	r4, r1, #24
        if (--r == 0) {
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
 800b9d6:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
 800b9da:	eb09 0282 	add.w	r2, r9, r2, lsl #2
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
 800b9de:	eb09 0484 	add.w	r4, r9, r4, lsl #2

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
 800b9e2:	9207      	str	r2, [sp, #28]
        if (--r == 0) {
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
 800b9e4:	f8dc 2330 	ldr.w	r2, [ip, #816]	; 0x330
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
 800b9e8:	f8d4 4330 	ldr.w	r4, [r4, #816]	; 0x330
        if (--r == 0) {
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
 800b9ec:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b9f0:	9206      	str	r2, [sp, #24]
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
 800b9f2:	fa5f f788 	uxtb.w	r7, r8
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
 800b9f6:	9407      	str	r4, [sp, #28]
        if (--r == 0) {
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
 800b9f8:	f85c 2cd0 	ldr.w	r2, [ip, #-208]
 800b9fc:	9c06      	ldr	r4, [sp, #24]
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
 800b9fe:	ea4f 6518 	mov.w	r5, r8, lsr #24
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
 800ba02:	b2c1      	uxtb	r1, r0
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
 800ba04:	eb09 0787 	add.w	r7, r9, r7, lsl #2
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
 800ba08:	0e03      	lsrs	r3, r0, #24
            Td1[(t2 >> 16) & 0xff] ^
            Td2[(t1 >>  8) & 0xff] ^
            Td3[(t0      ) & 0xff] ^
 800ba0a:	fa5f fc86 	uxtb.w	ip, r6
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
 800ba0e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
 800ba12:	eb09 0181 	add.w	r1, r9, r1, lsl #2
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
 800ba16:	f857 7cd0 	ldr.w	r7, [r7, #-208]
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
 800ba1a:	f8d5 5330 	ldr.w	r5, [r5, #816]	; 0x330
 800ba1e:	f851 1cd0 	ldr.w	r1, [r1, #-208]
        if (--r == 0) {
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
 800ba22:	4062      	eors	r2, r4
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
 800ba24:	eb09 0383 	add.w	r3, r9, r3, lsl #2
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
 800ba28:	9c07      	ldr	r4, [sp, #28]
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
 800ba2a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
            Td1[(t2 >> 16) & 0xff] ^
            Td2[(t1 >>  8) & 0xff] ^
            Td3[(t0      ) & 0xff] ^
 800ba2e:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
 800ba32:	4067      	eors	r7, r4
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
 800ba34:	f85c ccd0 	ldr.w	ip, [ip, #-208]
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
 800ba38:	f3c0 4407 	ubfx	r4, r0, #16, #8
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
 800ba3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
 800ba40:	4069      	eors	r1, r5
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
 800ba42:	eb09 0080 	add.w	r0, r9, r0, lsl #2
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
 800ba46:	f8db 5000 	ldr.w	r5, [fp]
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
 800ba4a:	9108      	str	r1, [sp, #32]
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
 800ba4c:	ea83 0c0c 	eor.w	ip, r3, ip
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
 800ba50:	f3c6 4107 	ubfx	r1, r6, #16, #8
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
 800ba54:	f8cd c018 	str.w	ip, [sp, #24]
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
 800ba58:	f8d0 0b30 	ldr.w	r0, [r0, #2864]	; 0xb30
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
 800ba5c:	f8dd c014 	ldr.w	ip, [sp, #20]
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
 800ba60:	9007      	str	r0, [sp, #28]
            break;
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
 800ba62:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 800ba66:	406a      	eors	r2, r5
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
 800ba68:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800ba6c:	f8db 5004 	ldr.w	r5, [fp, #4]
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
 800ba70:	f8d4 3730 	ldr.w	r3, [r4, #1840]	; 0x730
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
 800ba74:	f8d1 1730 	ldr.w	r1, [r1, #1840]	; 0x730
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
            Td1[(t2 >> 16) & 0xff] ^
 800ba78:	f3c8 4407 	ubfx	r4, r8, #16, #8
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
 800ba7c:	f3c8 2007 	ubfx	r0, r8, #8, #8
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
 800ba80:	406f      	eors	r7, r5
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
 800ba82:	f3cc 4507 	ubfx	r5, ip, #16, #8
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
            Td1[(t2 >> 16) & 0xff] ^
 800ba86:	eb09 0484 	add.w	r4, r9, r4, lsl #2
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
 800ba8a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
 800ba8e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
        }

        s0 =
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
 800ba92:	405a      	eors	r2, r3
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
 800ba94:	404f      	eors	r7, r1
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
 800ba96:	9b08      	ldr	r3, [sp, #32]
 800ba98:	f8db 1008 	ldr.w	r1, [fp, #8]
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
            Td1[(t2 >> 16) & 0xff] ^
            Td2[(t1 >>  8) & 0xff] ^
 800ba9c:	f8d4 8730 	ldr.w	r8, [r4, #1840]	; 0x730
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
 800baa0:	f8d5 5730 	ldr.w	r5, [r5, #1840]	; 0x730
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
 800baa4:	f8d0 4b30 	ldr.w	r4, [r0, #2864]	; 0xb30
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
 800baa8:	f3c6 2607 	ubfx	r6, r6, #8, #8
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
            Td1[(t2 >> 16) & 0xff] ^
            Td2[(t1 >>  8) & 0xff] ^
 800baac:	f3cc 2007 	ubfx	r0, ip, #8, #8
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
 800bab0:	4059      	eors	r1, r3
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
            Td1[(t2 >> 16) & 0xff] ^
 800bab2:	f8dd c018 	ldr.w	ip, [sp, #24]
 800bab6:	f8db 300c 	ldr.w	r3, [fp, #12]
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
 800baba:	eb09 0686 	add.w	r6, r9, r6, lsl #2
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
            Td0[(t3 >> 24)       ] ^
            Td1[(t2 >> 16) & 0xff] ^
            Td2[(t1 >>  8) & 0xff] ^
 800babe:	eb09 0080 	add.w	r0, r9, r0, lsl #2
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
 800bac2:	404d      	eors	r5, r1
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
 800bac4:	9907      	ldr	r1, [sp, #28]
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
 800bac6:	f8d6 6b30 	ldr.w	r6, [r6, #2864]	; 0xb30
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
 800baca:	f8d0 0b30 	ldr.w	r0, [r0, #2864]	; 0xb30
            Td0[(t3 >> 24)       ] ^
            Td1[(t2 >> 16) & 0xff] ^
 800bace:	ea8c 0303 	eor.w	r3, ip, r3
            Td2[(t1 >>  8) & 0xff] ^
 800bad2:	ea83 0c08 	eor.w	ip, r3, r8
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
 800bad6:	404f      	eors	r7, r1
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
 800bad8:	4054      	eors	r4, r2
            Td0[(t0 >> 24)       ] ^
            Td1[(t3 >> 16) & 0xff] ^
            Td2[(t2 >>  8) & 0xff] ^
            Td3[(t1      ) & 0xff] ^
            rk[0];
        s1 =
 800bada:	9705      	str	r7, [sp, #20]
            Td0[(t1 >> 24)       ] ^
            Td1[(t0 >> 16) & 0xff] ^
            Td2[(t3 >>  8) & 0xff] ^
            Td3[(t2      ) & 0xff] ^
            rk[1];
        s2 =
 800badc:	ea85 0806 	eor.w	r8, r5, r6
            Td0[(t2 >> 24)       ] ^
            Td1[(t1 >> 16) & 0xff] ^
            Td2[(t0 >>  8) & 0xff] ^
            Td3[(t3      ) & 0xff] ^
            rk[2];
        s3 =
 800bae0:	ea8c 0000 	eor.w	r0, ip, r0
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
 800bae4:	9905      	ldr	r1, [sp, #20]
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
 800bae6:	ea4f 6518 	mov.w	r5, r8, lsr #24
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
 800baea:	b2cb      	uxtb	r3, r1
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
 800baec:	0e0f      	lsrs	r7, r1, #24
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
 800baee:	b2c1      	uxtb	r1, r0
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800baf0:	ea4f 6c14 	mov.w	ip, r4, lsr #24
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
 800baf4:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
 800baf8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800bafc:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
 800bb00:	f8d5 5330 	ldr.w	r5, [r5, #816]	; 0x330
 800bb04:	f851 1cd0 	ldr.w	r1, [r1, #-208]
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
 800bb08:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
 800bb0c:	eb0a 0787 	add.w	r7, sl, r7, lsl #2
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
 800bb10:	9307      	str	r3, [sp, #28]
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800bb12:	f8dc 3330 	ldr.w	r3, [ip, #816]	; 0x330
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
 800bb16:	f8d7 7330 	ldr.w	r7, [r7, #816]	; 0x330
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800bb1a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800bb1e:	9306      	str	r3, [sp, #24]
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
 800bb20:	4069      	eors	r1, r5
 800bb22:	9108      	str	r1, [sp, #32]
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
 800bb24:	fa5f f688 	uxtb.w	r6, r8
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
 800bb28:	0e02      	lsrs	r2, r0, #24
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
 800bb2a:	f3c0 4107 	ubfx	r1, r0, #16, #8
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
 800bb2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
 800bb32:	9707      	str	r7, [sp, #28]
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800bb34:	f85c 3cd0 	ldr.w	r3, [ip, #-208]
 800bb38:	9f06      	ldr	r7, [sp, #24]
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
            Td2[(s1 >>  8) & 0xff] ^
            Td3[(s0      ) & 0xff] ^
 800bb3a:	fa5f fc84 	uxtb.w	ip, r4
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
 800bb3e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
 800bb42:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
 800bb46:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
 800bb4a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
            Td1[(s2 >> 16) & 0xff] ^
            Td2[(s1 >>  8) & 0xff] ^
            Td3[(s0      ) & 0xff] ^
 800bb4e:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
 800bb52:	f8d0 0b30 	ldr.w	r0, [r0, #2864]	; 0xb30
            Td0[(s1 >> 24)       ] ^
 800bb56:	f856 6cd0 	ldr.w	r6, [r6, #-208]
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
 800bb5a:	f8d2 2330 	ldr.w	r2, [r2, #816]	; 0x330
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
 800bb5e:	f8d1 5730 	ldr.w	r5, [r1, #1840]	; 0x730
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
 800bb62:	f85c ccd0 	ldr.w	ip, [ip, #-208]
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800bb66:	407b      	eors	r3, r7
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
 800bb68:	9f07      	ldr	r7, [sp, #28]
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
 800bb6a:	9007      	str	r0, [sp, #28]
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
 800bb6c:	f3c8 2107 	ubfx	r1, r8, #8, #8
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
 800bb70:	f8db 0010 	ldr.w	r0, [fp, #16]
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
 800bb74:	407e      	eors	r6, r7
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
 800bb76:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
 800bb7a:	9606      	str	r6, [sp, #24]
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
 800bb7c:	ea82 0c0c 	eor.w	ip, r2, ip
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
 800bb80:	f3c4 4207 	ubfx	r2, r4, #16, #8
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
 800bb84:	f3c4 2407 	ubfx	r4, r4, #8, #8
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
 800bb88:	4043      	eors	r3, r0
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
 800bb8a:	f8d1 6b30 	ldr.w	r6, [r1, #2864]	; 0xb30
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
 800bb8e:	f8db 1014 	ldr.w	r1, [fp, #20]
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
 800bb92:	f3c8 4007 	ubfx	r0, r8, #16, #8
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
 800bb96:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
 800bb9a:	f8dd 8018 	ldr.w	r8, [sp, #24]
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
 800bb9e:	f8d4 4b30 	ldr.w	r4, [r4, #2864]	; 0xb30
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
 800bba2:	ea88 0701 	eor.w	r7, r8, r1
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
 800bba6:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
 800bbaa:	9905      	ldr	r1, [sp, #20]
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
 800bbac:	940a      	str	r4, [sp, #40]	; 0x28
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
 800bbae:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
            Td2[(s1 >>  8) & 0xff] ^
 800bbb2:	f8d0 4730 	ldr.w	r4, [r0, #1840]	; 0x730
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
 800bbb6:	f8d2 2730 	ldr.w	r2, [r2, #1840]	; 0x730
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
 800bbba:	f3c1 4007 	ubfx	r0, r1, #16, #8
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
            Td2[(s1 >>  8) & 0xff] ^
 800bbbe:	f3c1 2107 	ubfx	r1, r1, #8, #8
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
 800bbc2:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
            Td2[(s1 >>  8) & 0xff] ^
 800bbc6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
 800bbca:	f8d0 8730 	ldr.w	r8, [r0, #1840]	; 0x730
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
 800bbce:	f8d1 0b30 	ldr.w	r0, [r1, #2864]	; 0xb30
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
 800bbd2:	f8db 1018 	ldr.w	r1, [fp, #24]
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
 800bbd6:	405d      	eors	r5, r3
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
 800bbd8:	4057      	eors	r7, r2
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
 800bbda:	9b07      	ldr	r3, [sp, #28]
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
 800bbdc:	9a08      	ldr	r2, [sp, #32]
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
 800bbde:	405f      	eors	r7, r3
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
 800bbe0:	4051      	eors	r1, r2
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
 800bbe2:	f8db 201c 	ldr.w	r2, [fp, #28]
            Td0[(s0 >> 24)       ] ^
            Td1[(s3 >> 16) & 0xff] ^
            Td2[(s2 >>  8) & 0xff] ^
            Td3[(s1      ) & 0xff] ^
            rk[4];
        t1 =
 800bbe6:	9705      	str	r7, [sp, #20]
            Td2[(s1 >>  8) & 0xff] ^
            Td3[(s0      ) & 0xff] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
 800bbe8:	9f09      	ldr	r7, [sp, #36]	; 0x24
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
 800bbea:	ea8c 0202 	eor.w	r2, ip, r2
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
 800bbee:	406e      	eors	r6, r5
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
 800bbf0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
            Td0[(s3 >> 24)       ] ^
            Td1[(s2 >> 16) & 0xff] ^
            Td2[(s1 >>  8) & 0xff] ^
 800bbf2:	4062      	eors	r2, r4
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
 800bbf4:	ea81 0108 	eor.w	r1, r1, r8
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800bbf8:	f241 04f8 	movw	r4, #4344	; 0x10f8
            Td2[(s1 >>  8) & 0xff] ^
            Td3[(s0      ) & 0xff] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
 800bbfc:	3f01      	subs	r7, #1
            Td0[(s1 >> 24)       ] ^
            Td1[(s0 >> 16) & 0xff] ^
            Td2[(s3 >>  8) & 0xff] ^
            Td3[(s2      ) & 0xff] ^
            rk[5];
        t2 =
 800bbfe:	ea81 0805 	eor.w	r8, r1, r5
            Td0[(s2 >> 24)       ] ^
            Td1[(s1 >> 16) & 0xff] ^
            Td2[(s0 >>  8) & 0xff] ^
            Td3[(s3      ) & 0xff] ^
            rk[6];
        t3 =
 800bc02:	ea82 0000 	eor.w	r0, r2, r0
            Td1[(s2 >> 16) & 0xff] ^
            Td2[(s1 >>  8) & 0xff] ^
            Td3[(s0      ) & 0xff] ^
            rk[7];

        rk += 8;
 800bc06:	f10b 0b20 	add.w	fp, fp, #32
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Td0[(s0 >> 24)       ] ^
 800bc0a:	f2c1 0400 	movt	r4, #4096	; 0x1000
            Td2[(s1 >>  8) & 0xff] ^
            Td3[(s0      ) & 0xff] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
 800bc0e:	9709      	str	r7, [sp, #36]	; 0x24
 800bc10:	f47f aedc 	bne.w	800b9cc <AES_decrypt+0xc8>
	 */
   	s0 =
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
 800bc14:	9a05      	ldr	r2, [sp, #20]
#endif /* ?FULL_UNROLL */
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
   	s0 =
 800bc16:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc1a:	46a1      	mov	r9, r4
   		(Td4[(t0 >> 24)       ] << 24) ^
 800bc1c:	eb09 6516 	add.w	r5, r9, r6, lsr #24
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
 800bc20:	fa59 f382 	uxtab	r3, r9, r2
	 * apply last round and
	 * map cipher state to byte array block:
	 */
   	s0 =
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
 800bc24:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800bc28:	4449      	add	r1, r9
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
   	s0 =
   		(Td4[(t0 >> 24)       ] << 24) ^
 800bc2a:	f895 5f30 	ldrb.w	r5, [r5, #3888]	; 0xf30
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
 800bc2e:	f893 3f30 	ldrb.w	r3, [r3, #3888]	; 0xf30
	 * apply last round and
	 * map cipher state to byte array block:
	 */
   	s0 =
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
 800bc32:	f891 7f30 	ldrb.w	r7, [r1, #3888]	; 0xf30
 800bc36:	4644      	mov	r4, r8
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
 800bc38:	f3c8 2207 	ubfx	r2, r8, #8, #8
 800bc3c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800bc40:	444a      	add	r2, r9
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
   	s0 =
   		(Td4[(t0 >> 24)       ] << 24) ^
 800bc42:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800bc46:	ea4f 1148 	mov.w	r1, r8, lsl #5
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
 800bc4a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
 800bc4e:	9f05      	ldr	r7, [sp, #20]
	 * map cipher state to byte array block:
	 */
   	s0 =
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
 800bc50:	f892 5f30 	ldrb.w	r5, [r2, #3888]	; 0xf30
#endif /* ?FULL_UNROLL */
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
   	s0 =
 800bc54:	f85a 2001 	ldr.w	r2, [sl, r1]
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
 800bc58:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
 800bc5c:	eb09 6c17 	add.w	ip, r9, r7, lsr #24
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
 800bc60:	fa59 f784 	uxtab	r7, r9, r4
	 * map cipher state to byte array block:
	 */
   	s0 =
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
 800bc64:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
 800bc68:	f3c6 4507 	ubfx	r5, r6, #16, #8
#endif /* ?FULL_UNROLL */
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
   	s0 =
 800bc6c:	4053      	eors	r3, r2
 800bc6e:	4451      	add	r1, sl
   		rk[0];
	PUTU32(out     , s0);
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
 800bc70:	f897 7f30 	ldrb.w	r7, [r7, #3888]	; 0xf30
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
 800bc74:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
 800bc78:	f89c cf30 	ldrb.w	ip, [ip, #3888]	; 0xf30
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
 800bc7c:	f888 3003 	strb.w	r3, [r8, #3]
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
 800bc80:	444d      	add	r5, r9
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
 800bc82:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800bc86:	444a      	add	r2, r9
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
 800bc88:	ea4f 6813 	mov.w	r8, r3, lsr #24
 800bc8c:	f88a 8000 	strb.w	r8, [sl]
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
 800bc90:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
 800bc94:	ea4f 4813 	mov.w	r8, r3, lsr #16
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
 800bc98:	9f05      	ldr	r7, [sp, #20]
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
 800bc9a:	f895 5f30 	ldrb.w	r5, [r5, #3888]	; 0xf30
   		(Td4[(t0 >> 24)       ] << 24) ^
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
 800bc9e:	f88a 8001 	strb.w	r8, [sl, #1]
 800bca2:	0a1b      	lsrs	r3, r3, #8
 800bca4:	f88a 3002 	strb.w	r3, [sl, #2]
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
 800bca8:	f892 bf30 	ldrb.w	fp, [r2, #3888]	; 0xf30
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
   	s1 =
 800bcac:	684b      	ldr	r3, [r1, #4]
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
 800bcae:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
 800bcb2:	f3c7 4807 	ubfx	r8, r7, #16, #8
   		rk[0];
	PUTU32(out     , s0);
   	s1 =
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
 800bcb6:	ea45 250b 	orr.w	r5, r5, fp, lsl #8
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
 800bcba:	44c8      	add	r8, r9
   		(Td4[(t3 >> 16) & 0xff] << 16) ^
   		(Td4[(t2 >>  8) & 0xff] <<  8) ^
   		(Td4[(t1      ) & 0xff])       ^
   		rk[0];
	PUTU32(out     , s0);
   	s1 =
 800bcbc:	406b      	eors	r3, r5
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
 800bcbe:	eb09 6c14 	add.w	ip, r9, r4, lsr #24
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
   		(Td4[(t3      ) & 0xff])       ^
 800bcc2:	fa59 f280 	uxtab	r2, r9, r0
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
 800bcc6:	f898 5f30 	ldrb.w	r5, [r8, #3888]	; 0xf30
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
 800bcca:	f89c cf30 	ldrb.w	ip, [ip, #3888]	; 0xf30
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
 800bcce:	f892 2f30 	ldrb.w	r2, [r2, #3888]	; 0xf30
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
 800bcd2:	f88a 3007 	strb.w	r3, [sl, #7]
 800bcd6:	ea4f 6813 	mov.w	r8, r3, lsr #24
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
 800bcda:	f3c6 2707 	ubfx	r7, r6, #8, #8
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
 800bcde:	f88a 8004 	strb.w	r8, [sl, #4]
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
 800bce2:	444f      	add	r7, r9
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
 800bce4:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800bce8:	f88a 8005 	strb.w	r8, [sl, #5]
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
 800bcec:	eb09 6010 	add.w	r0, r9, r0, lsr #24
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
 800bcf0:	f8dd 8014 	ldr.w	r8, [sp, #20]
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
 800bcf4:	f897 7f30 	ldrb.w	r7, [r7, #3888]	; 0xf30
   		(Td4[(t1 >> 24)       ] << 24) ^
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
 800bcf8:	0a1b      	lsrs	r3, r3, #8
 800bcfa:	f88a 3006 	strb.w	r3, [sl, #6]
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
 800bcfe:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
   		(Td4[(t0      ) & 0xff])       ^
 800bd02:	fa59 f686 	uxtab	r6, r9, r6
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
 800bd06:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
 800bd0a:	f3c4 4407 	ubfx	r4, r4, #16, #8
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
 800bd0e:	f3c8 2507 	ubfx	r5, r8, #8, #8
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
 800bd12:	f890 8f30 	ldrb.w	r8, [r0, #3888]	; 0xf30
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
 800bd16:	6888      	ldr	r0, [r1, #8]
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
 800bd18:	f896 3f30 	ldrb.w	r3, [r6, #3888]	; 0xf30
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
 800bd1c:	444c      	add	r4, r9
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
 800bd1e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
   		(Td4[(t0 >> 16) & 0xff] << 16) ^
   		(Td4[(t3 >>  8) & 0xff] <<  8) ^
   		(Td4[(t2      ) & 0xff])       ^
   		rk[1];
	PUTU32(out +  4, s1);
   	s2 =
 800bd22:	4042      	eors	r2, r0
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
 800bd24:	44a9      	add	r9, r5
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
 800bd26:	f894 4f30 	ldrb.w	r4, [r4, #3888]	; 0xf30
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
 800bd2a:	f899 0f30 	ldrb.w	r0, [r9, #3888]	; 0xf30
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
 800bd2e:	f88a 200b 	strb.w	r2, [sl, #11]
 800bd32:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800bd36:	0c17      	lsrs	r7, r2, #16
 800bd38:	0a16      	lsrs	r6, r2, #8
   	s3 =
   		(Td4[(t3 >> 24)       ] << 24) ^
 800bd3a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
   		(Td4[(t2 >> 24)       ] << 24) ^
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
 800bd3e:	f88a c008 	strb.w	ip, [sl, #8]
 800bd42:	f88a 7009 	strb.w	r7, [sl, #9]
 800bd46:	f88a 600a 	strb.w	r6, [sl, #10]
   	s3 =
 800bd4a:	68ca      	ldr	r2, [r1, #12]
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
 800bd4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
 800bd50:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   		(Td4[(t1 >> 16) & 0xff] << 16) ^
   		(Td4[(t0 >>  8) & 0xff] <<  8) ^
   		(Td4[(t3      ) & 0xff])       ^
   		rk[2];
	PUTU32(out +  8, s2);
   	s3 =
 800bd54:	4053      	eors	r3, r2
   		(Td4[(t3 >> 24)       ] << 24) ^
   		(Td4[(t2 >> 16) & 0xff] << 16) ^
   		(Td4[(t1 >>  8) & 0xff] <<  8) ^
   		(Td4[(t0      ) & 0xff])       ^
   		rk[3];
	PUTU32(out + 12, s3);
 800bd56:	0e18      	lsrs	r0, r3, #24
 800bd58:	0c19      	lsrs	r1, r3, #16
 800bd5a:	0a1a      	lsrs	r2, r3, #8
 800bd5c:	f88a 000c 	strb.w	r0, [sl, #12]
 800bd60:	f88a 100d 	strb.w	r1, [sl, #13]
 800bd64:	f88a 300f 	strb.w	r3, [sl, #15]
 800bd68:	f88a 200e 	strb.w	r2, [sl, #14]
}
 800bd6c:	b00e      	add	sp, #56	; 0x38
 800bd6e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bd72:	4770      	bx	lr

0800bd74 <KeyExpansion>:
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
 800bd74:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800bd78:	f640 2350 	movw	r3, #2640	; 0xa50
 800bd7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bd80:	b083      	sub	sp, #12
 800bd82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800bd86:	f103 0010 	add.w	r0, r3, #16
 800bd8a:	3201      	adds	r2, #1
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 800bd8c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bd90:	7019      	strb	r1, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800bd92:	7811      	ldrb	r1, [r2, #0]
 800bd94:	7059      	strb	r1, [r3, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 800bd96:	7851      	ldrb	r1, [r2, #1]
 800bd98:	7099      	strb	r1, [r3, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 800bd9a:	7891      	ldrb	r1, [r2, #2]
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	f803 1c01 	strb.w	r1, [r3, #-1]
{
  uint32_t i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
 800bda2:	4283      	cmp	r3, r0
 800bda4:	f102 0204 	add.w	r2, r2, #4
 800bda8:	d1f0      	bne.n	800bd8c <KeyExpansion+0x18>
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
 800bdaa:	f643 75f4 	movw	r5, #16372	; 0x3ff4
{
  uint32_t i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
 800bdae:	2004      	movs	r0, #4
 800bdb0:	4a26      	ldr	r2, [pc, #152]	; (800be4c <KeyExpansion+0xd8>)
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
 800bdb2:	f6c0 0501 	movt	r5, #2049	; 0x801
 800bdb6:	eb0d 0400 	add.w	r4, sp, r0
  return rsbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(void)
{
 800bdba:	2300      	movs	r3, #0
  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
 800bdbc:	5cd1      	ldrb	r1, [r2, r3]
 800bdbe:	54e1      	strb	r1, [r4, r3]
  }

  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	d1fa      	bne.n	800bdbc <KeyExpansion+0x48>
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
    }
    if (i % Nk == 0)
 800bdc6:	0783      	lsls	r3, r0, #30
 800bdc8:	d024      	beq.n	800be14 <KeyExpansion+0xa0>
 800bdca:	f89d 7004 	ldrb.w	r7, [sp, #4]
 800bdce:	f89d 6005 	ldrb.w	r6, [sp, #5]
 800bdd2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800bdd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800bdda:	f812 ac0c 	ldrb.w	sl, [r2, #-12]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 800bdde:	f812 9c0b 	ldrb.w	r9, [r2, #-11]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 800bde2:	f812 8c0a 	ldrb.w	r8, [r2, #-10]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800bde6:	f812 cc09 	ldrb.w	ip, [r2, #-9]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
  }

  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
 800bdea:	3001      	adds	r0, #1
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800bdec:	ea87 070a 	eor.w	r7, r7, sl
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 800bdf0:	ea86 0609 	eor.w	r6, r6, r9
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 800bdf4:	ea81 0108 	eor.w	r1, r1, r8
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800bdf8:	ea83 030c 	eor.w	r3, r3, ip
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
  }

  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
 800bdfc:	282c      	cmp	r0, #44	; 0x2c
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800bdfe:	7117      	strb	r7, [r2, #4]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 800be00:	7156      	strb	r6, [r2, #5]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 800be02:	7191      	strb	r1, [r2, #6]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800be04:	71d3      	strb	r3, [r2, #7]
 800be06:	f102 0204 	add.w	r2, r2, #4
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
  }

  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
 800be0a:	d1d6      	bne.n	800bdba <KeyExpansion+0x46>
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
  }
}
 800be0c:	b003      	add	sp, #12
 800be0e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800be12:	4770      	bx	lr
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
 800be14:	f89d 7005 	ldrb.w	r7, [sp, #5]
      // This function rotates the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
 800be18:	f89d 3004 	ldrb.w	r3, [sp, #4]
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
 800be1c:	f815 c007 	ldrb.w	ip, [r5, r7]
      // Function RotWord()
      {
        k = tempa[0];
        tempa[0] = tempa[1];
        tempa[1] = tempa[2];
        tempa[2] = tempa[3];
 800be20:	f89d 1007 	ldrb.w	r1, [sp, #7]
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
 800be24:	f89d 6006 	ldrb.w	r6, [sp, #6]
 800be28:	5ceb      	ldrb	r3, [r5, r3]
 800be2a:	5c69      	ldrb	r1, [r5, r1]
 800be2c:	5dae      	ldrb	r6, [r5, r6]
      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
 800be2e:	f88d 3007 	strb.w	r3, [sp, #7]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800be32:	eb05 0790 	add.w	r7, r5, r0, lsr #2

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
 800be36:	f88d 1006 	strb.w	r1, [sp, #6]
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800be3a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
 800be3e:	f88d 6005 	strb.w	r6, [sp, #5]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800be42:	ea8c 0707 	eor.w	r7, ip, r7
 800be46:	f88d 7004 	strb.w	r7, [sp, #4]
 800be4a:	e7c6      	b.n	800bdda <KeyExpansion+0x66>
 800be4c:	20000a5c 	.word	0x20000a5c

0800be50 <AddRoundKey>:
}

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
 800be50:	f640 2350 	movw	r3, #2640	; 0xa50
 800be54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be58:	b470      	push	{r4, r5, r6}
 800be5a:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
 800be5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800be62:	1d31      	adds	r1, r6, #4
 800be64:	1e45      	subs	r5, r0, #1
 800be66:	3614      	adds	r6, #20
 800be68:	462a      	mov	r2, r5
 800be6a:	1f0b      	subs	r3, r1, #4
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 800be6c:	781c      	ldrb	r4, [r3, #0]
 800be6e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800be72:	4060      	eors	r0, r4
 800be74:	f803 0b01 	strb.w	r0, [r3], #1
static void AddRoundKey(uint8_t round)
{
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j = 0; j < 4; ++j)
 800be78:	4299      	cmp	r1, r3
 800be7a:	d1f7      	bne.n	800be6c <AddRoundKey+0x1c>
 800be7c:	3104      	adds	r1, #4
// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
  uint8_t i,j;
  for(i=0;i<4;++i)
 800be7e:	42b1      	cmp	r1, r6
 800be80:	f105 0504 	add.w	r5, r5, #4
 800be84:	d1f0      	bne.n	800be68 <AddRoundKey+0x18>
    for(j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
    }
  }
}
 800be86:	bc70      	pop	{r4, r5, r6}
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop

0800be8c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(void)
{
 800be8c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 800be90:	f640 2350 	movw	r3, #2640	; 0xa50
 800be94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800be98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be9c:	f893 a001 	ldrb.w	sl, [r3, #1]
  (*state)[0][1] = (*state)[1][1];
 800bea0:	f893 b005 	ldrb.w	fp, [r3, #5]
  (*state)[1][1] = (*state)[2][1];
  (*state)[2][1] = (*state)[3][1];
 800bea4:	f893 900d 	ldrb.w	r9, [r3, #13]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
  (*state)[0][1] = (*state)[1][1];
  (*state)[1][1] = (*state)[2][1];
 800bea8:	f893 8009 	ldrb.w	r8, [r3, #9]
  (*state)[2][1] = (*state)[3][1];
  (*state)[3][1] = temp;

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 800beac:	789f      	ldrb	r7, [r3, #2]
  (*state)[0][2] = (*state)[2][2];
  (*state)[2][2] = temp;

  temp       = (*state)[1][2];
 800beae:	799d      	ldrb	r5, [r3, #6]
  (*state)[1][2] = (*state)[3][2];
 800beb0:	7b9e      	ldrb	r6, [r3, #14]
  (*state)[3][2] = temp;

  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
 800beb2:	7bdc      	ldrb	r4, [r3, #15]
  (*state)[2][1] = (*state)[3][1];
  (*state)[3][1] = temp;

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
 800beb4:	f893 c00a 	ldrb.w	ip, [r3, #10]
  temp       = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
  (*state)[3][2] = temp;

  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
 800beb8:	78d8      	ldrb	r0, [r3, #3]
  (*state)[0][3] = (*state)[3][3];
  (*state)[3][3] = (*state)[2][3];
  (*state)[2][3] = (*state)[1][3];
 800beba:	79d9      	ldrb	r1, [r3, #7]
  (*state)[3][2] = temp;

  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
  (*state)[3][3] = (*state)[2][3];
 800bebc:	7ada      	ldrb	r2, [r3, #11]
{
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
  (*state)[0][1] = (*state)[1][1];
 800bebe:	f883 b001 	strb.w	fp, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
  (*state)[2][1] = (*state)[3][1];
  (*state)[3][1] = temp;
 800bec2:	f883 a00d 	strb.w	sl, [r3, #13]

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
  (*state)[0][1] = (*state)[1][1];
  (*state)[1][1] = (*state)[2][1];
  (*state)[2][1] = (*state)[3][1];
 800bec6:	f883 9009 	strb.w	r9, [r3, #9]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
  (*state)[0][1] = (*state)[1][1];
  (*state)[1][1] = (*state)[2][1];
 800beca:	f883 8005 	strb.w	r8, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
  (*state)[3][1] = temp;

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
 800bece:	f883 c002 	strb.w	ip, [r3, #2]
  (*state)[2][2] = temp;
 800bed2:	729f      	strb	r7, [r3, #10]

  temp       = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
 800bed4:	719e      	strb	r6, [r3, #6]
  (*state)[3][2] = temp;
 800bed6:	739d      	strb	r5, [r3, #14]

  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
 800bed8:	70dc      	strb	r4, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
 800beda:	71d8      	strb	r0, [r3, #7]

  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
  (*state)[3][3] = (*state)[2][3];
  (*state)[2][3] = (*state)[1][3];
 800bedc:	72d9      	strb	r1, [r3, #11]
  (*state)[3][2] = temp;

  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
  (*state)[3][3] = (*state)[2][3];
 800bede:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}
 800bee0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop

0800bee8 <InvShiftRows>:
    }
  }
}

static void InvShiftRows(void)
{
 800bee8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp=(*state)[3][1];
 800beec:	f640 2350 	movw	r3, #2640	; 0xa50
 800bef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bef8:	f893 a00d 	ldrb.w	sl, [r3, #13]
  (*state)[3][1]=(*state)[2][1];
 800befc:	f893 b009 	ldrb.w	fp, [r3, #9]
  (*state)[2][1]=(*state)[1][1];
  (*state)[1][1]=(*state)[0][1];
 800bf00:	f893 9001 	ldrb.w	r9, [r3, #1]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp=(*state)[3][1];
  (*state)[3][1]=(*state)[2][1];
  (*state)[2][1]=(*state)[1][1];
 800bf04:	f893 8005 	ldrb.w	r8, [r3, #5]
  (*state)[1][1]=(*state)[0][1];
  (*state)[0][1]=temp;

  // Rotate second row 2 columns to right 
  temp=(*state)[0][2];
 800bf08:	789f      	ldrb	r7, [r3, #2]
  (*state)[0][2]=(*state)[2][2];
  (*state)[2][2]=temp;

  temp=(*state)[1][2];
 800bf0a:	799d      	ldrb	r5, [r3, #6]
  (*state)[1][2]=(*state)[3][2];
 800bf0c:	7b9e      	ldrb	r6, [r3, #14]
  (*state)[3][2]=temp;

  // Rotate third row 3 columns to right
  temp=(*state)[0][3];
  (*state)[0][3]=(*state)[1][3];
 800bf0e:	79dc      	ldrb	r4, [r3, #7]
  (*state)[1][1]=(*state)[0][1];
  (*state)[0][1]=temp;

  // Rotate second row 2 columns to right 
  temp=(*state)[0][2];
  (*state)[0][2]=(*state)[2][2];
 800bf10:	f893 c00a 	ldrb.w	ip, [r3, #10]
  temp=(*state)[1][2];
  (*state)[1][2]=(*state)[3][2];
  (*state)[3][2]=temp;

  // Rotate third row 3 columns to right
  temp=(*state)[0][3];
 800bf14:	78d8      	ldrb	r0, [r3, #3]
  (*state)[0][3]=(*state)[1][3];
  (*state)[1][3]=(*state)[2][3];
  (*state)[2][3]=(*state)[3][3];
 800bf16:	7bd9      	ldrb	r1, [r3, #15]
  (*state)[3][2]=temp;

  // Rotate third row 3 columns to right
  temp=(*state)[0][3];
  (*state)[0][3]=(*state)[1][3];
  (*state)[1][3]=(*state)[2][3];
 800bf18:	7ada      	ldrb	r2, [r3, #11]
{
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp=(*state)[3][1];
  (*state)[3][1]=(*state)[2][1];
 800bf1a:	f883 b00d 	strb.w	fp, [r3, #13]
  (*state)[2][1]=(*state)[1][1];
  (*state)[1][1]=(*state)[0][1];
  (*state)[0][1]=temp;
 800bf1e:	f883 a001 	strb.w	sl, [r3, #1]

  // Rotate first row 1 columns to right  
  temp=(*state)[3][1];
  (*state)[3][1]=(*state)[2][1];
  (*state)[2][1]=(*state)[1][1];
  (*state)[1][1]=(*state)[0][1];
 800bf22:	f883 9005 	strb.w	r9, [r3, #5]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp=(*state)[3][1];
  (*state)[3][1]=(*state)[2][1];
  (*state)[2][1]=(*state)[1][1];
 800bf26:	f883 8009 	strb.w	r8, [r3, #9]
  (*state)[1][1]=(*state)[0][1];
  (*state)[0][1]=temp;

  // Rotate second row 2 columns to right 
  temp=(*state)[0][2];
  (*state)[0][2]=(*state)[2][2];
 800bf2a:	f883 c002 	strb.w	ip, [r3, #2]
  (*state)[2][2]=temp;
 800bf2e:	729f      	strb	r7, [r3, #10]

  temp=(*state)[1][2];
  (*state)[1][2]=(*state)[3][2];
 800bf30:	719e      	strb	r6, [r3, #6]
  (*state)[3][2]=temp;
 800bf32:	739d      	strb	r5, [r3, #14]

  // Rotate third row 3 columns to right
  temp=(*state)[0][3];
  (*state)[0][3]=(*state)[1][3];
 800bf34:	70dc      	strb	r4, [r3, #3]
  (*state)[1][3]=(*state)[2][3];
  (*state)[2][3]=(*state)[3][3];
  (*state)[3][3]=temp;
 800bf36:	73d8      	strb	r0, [r3, #15]

  // Rotate third row 3 columns to right
  temp=(*state)[0][3];
  (*state)[0][3]=(*state)[1][3];
  (*state)[1][3]=(*state)[2][3];
  (*state)[2][3]=(*state)[3][3];
 800bf38:	72d9      	strb	r1, [r3, #11]
  (*state)[3][2]=temp;

  // Rotate third row 3 columns to right
  temp=(*state)[0][3];
  (*state)[0][3]=(*state)[1][3];
  (*state)[1][3]=(*state)[2][3];
 800bf3a:	71da      	strb	r2, [r3, #7]
  (*state)[2][3]=(*state)[3][3];
  (*state)[3][3]=temp;
}
 800bf3c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop

0800bf44 <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 800bf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
 800bf48:	2000      	movs	r0, #0
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 800bf4a:	b083      	sub	sp, #12
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
 800bf4c:	f7ff ff80 	bl	800be50 <AddRoundKey>
 800bf50:	f640 2350 	movw	r3, #2640	; 0xa50
 800bf54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800bf58:	f643 74f4 	movw	r4, #16372	; 0x3ff4
 800bf5c:	f8d3 90b4 	ldr.w	r9, [r3, #180]	; 0xb4
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
 800bf60:	2301      	movs	r3, #1
 800bf62:	f109 0204 	add.w	r2, r9, #4
 800bf66:	f6c0 0401 	movt	r4, #2049	; 0x801
 800bf6a:	9201      	str	r2, [sp, #4]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	9d01      	ldr	r5, [sp, #4]
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 800bf70:	4649      	mov	r1, r9
 800bf72:	f101 0010 	add.w	r0, r1, #16
 800bf76:	460b      	mov	r3, r1
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
 800bf78:	781a      	ldrb	r2, [r3, #0]
  uint8_t i, j;
  for(i = 0; i < 4; ++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800bf7a:	5ca2      	ldrb	r2, [r4, r2]
 800bf7c:	f803 2b04 	strb.w	r2, [r3], #4
static void SubBytes(void)
{
  uint8_t i, j;
  for(i = 0; i < 4; ++i)
  {
    for(j = 0; j < 4; ++j)
 800bf80:	4283      	cmp	r3, r0
 800bf82:	d1f9      	bne.n	800bf78 <Cipher+0x34>
 800bf84:	3101      	adds	r1, #1
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(void)
{
  uint8_t i, j;
  for(i = 0; i < 4; ++i)
 800bf86:	42a9      	cmp	r1, r5
 800bf88:	d1f3      	bne.n	800bf72 <Cipher+0x2e>
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
  {
    SubBytes();
    ShiftRows();
 800bf8a:	f7ff ff7f 	bl	800be8c <ShiftRows>
 800bf8e:	464b      	mov	r3, r9
 800bf90:	2200      	movs	r2, #0
{
  uint8_t i;
  uint8_t Tmp,Tm,t;
  for(i = 0; i < 4; ++i)
  {  
    t   = (*state)[i][0];
 800bf92:	f819 6002 	ldrb.w	r6, [r9, r2]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800bf96:	7858      	ldrb	r0, [r3, #1]
 800bf98:	78df      	ldrb	r7, [r3, #3]
 800bf9a:	7899      	ldrb	r1, [r3, #2]
 800bf9c:	4070      	eors	r0, r6
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800bf9e:	09c5      	lsrs	r5, r0, #7
 800bfa0:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 800bfa4:	4475      	add	r5, lr
  uint8_t i;
  uint8_t Tmp,Tm,t;
  for(i = 0; i < 4; ++i)
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800bfa6:	4079      	eors	r1, r7
 800bfa8:	4041      	eors	r1, r0
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800bfaa:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800bfae:	ea85 0040 	eor.w	r0, r5, r0, lsl #1
  uint8_t Tmp,Tm,t;
  for(i = 0; i < 4; ++i)
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800bfb2:	ea81 0506 	eor.w	r5, r1, r6
 800bfb6:	4068      	eors	r0, r5
 800bfb8:	f809 0002 	strb.w	r0, [r9, r2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800bfbc:	789d      	ldrb	r5, [r3, #2]
 800bfbe:	f893 a001 	ldrb.w	sl, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800bfc2:	78d8      	ldrb	r0, [r3, #3]
  for(i = 0; i < 4; ++i)
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800bfc4:	ea8a 0805 	eor.w	r8, sl, r5
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800bfc8:	ea4f 1ed8 	mov.w	lr, r8, lsr #7
 800bfcc:	ea4f 0b4e 	mov.w	fp, lr, lsl #1
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800bfd0:	ea85 0700 	eor.w	r7, r5, r0
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800bfd4:	4046      	eors	r6, r0
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800bfd6:	44f3      	add	fp, lr
 800bfd8:	ea4f 1cd7 	mov.w	ip, r7, lsr #7
 800bfdc:	ea4f 1ed6 	mov.w	lr, r6, lsr #7
 800bfe0:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
  for(i = 0; i < 4; ++i)
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800bfe4:	ea81 0a0a 	eor.w	sl, r1, sl
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800bfe8:	ea8b 0848 	eor.w	r8, fp, r8, lsl #1
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800bfec:	404d      	eors	r5, r1
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800bfee:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800bff2:	4041      	eors	r1, r0
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800bff4:	ea4f 004e 	mov.w	r0, lr, lsl #1
 800bff8:	44dc      	add	ip, fp
 800bffa:	4486      	add	lr, r0
 800bffc:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800c000:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800c004:	ea8c 0c47 	eor.w	ip, ip, r7, lsl #1
 800c008:	ea8e 0646 	eor.w	r6, lr, r6, lsl #1
 800c00c:	3204      	adds	r2, #4
  for(i = 0; i < 4; ++i)
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800c00e:	ea8a 0a08 	eor.w	sl, sl, r8
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800c012:	ea85 050c 	eor.w	r5, r5, ip
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800c016:	404e      	eors	r6, r1
// MixColumns function mixes the columns of the state matrix
static void MixColumns(void)
{
  uint8_t i;
  uint8_t Tmp,Tm,t;
  for(i = 0; i < 4; ++i)
 800c018:	2a10      	cmp	r2, #16
  {  
    t   = (*state)[i][0];
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800c01a:	f883 a001 	strb.w	sl, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800c01e:	709d      	strb	r5, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800c020:	70de      	strb	r6, [r3, #3]
 800c022:	f103 0304 	add.w	r3, r3, #4
// MixColumns function mixes the columns of the state matrix
static void MixColumns(void)
{
  uint8_t i;
  uint8_t Tmp,Tm,t;
  for(i = 0; i < 4; ++i)
 800c026:	d1b4      	bne.n	800bf92 <Cipher+0x4e>
  for(round = 1; round < Nr; ++round)
  {
    SubBytes();
    ShiftRows();
    MixColumns();
    AddRoundKey(round);
 800c028:	9800      	ldr	r0, [sp, #0]
 800c02a:	f7ff ff11 	bl	800be50 <AddRoundKey>
  AddRoundKey(0); 
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
 800c02e:	9a00      	ldr	r2, [sp, #0]
 800c030:	1c53      	adds	r3, r2, #1
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b0a      	cmp	r3, #10
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	d199      	bne.n	800bf6e <Cipher+0x2a>
 800c03a:	9801      	ldr	r0, [sp, #4]
 800c03c:	f109 0110 	add.w	r1, r9, #16
 800c040:	464b      	mov	r3, r9
/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
  return sbox[num];
 800c042:	781a      	ldrb	r2, [r3, #0]
  uint8_t i, j;
  for(i = 0; i < 4; ++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800c044:	5ca2      	ldrb	r2, [r4, r2]
 800c046:	f803 2b04 	strb.w	r2, [r3], #4
static void SubBytes(void)
{
  uint8_t i, j;
  for(i = 0; i < 4; ++i)
  {
    for(j = 0; j < 4; ++j)
 800c04a:	428b      	cmp	r3, r1
 800c04c:	d1f9      	bne.n	800c042 <Cipher+0xfe>
 800c04e:	f109 0901 	add.w	r9, r9, #1
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(void)
{
  uint8_t i, j;
  for(i = 0; i < 4; ++i)
 800c052:	4581      	cmp	r9, r0
 800c054:	d1f2      	bne.n	800c03c <Cipher+0xf8>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
  ShiftRows();
 800c056:	f7ff ff19 	bl	800be8c <ShiftRows>
  AddRoundKey(Nr);
 800c05a:	200a      	movs	r0, #10
}
 800c05c:	b003      	add	sp, #12
 800c05e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
  ShiftRows();
  AddRoundKey(Nr);
 800c062:	e6f5      	b.n	800be50 <AddRoundKey>

0800c064 <InvCipher>:
}

static void InvCipher(void)
{
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t round=0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr); 
 800c068:	200a      	movs	r0, #10
  ShiftRows();
  AddRoundKey(Nr);
}

static void InvCipher(void)
{
 800c06a:	b089      	sub	sp, #36	; 0x24
  uint8_t round=0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr); 
 800c06c:	f7ff fef0 	bl	800be50 <AddRoundKey>
 800c070:	f640 2350 	movw	r3, #2640	; 0xa50
 800c074:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c078:	f643 71f4 	movw	r1, #16372	; 0x3ff4
 800c07c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c080:	f6c0 0101 	movt	r1, #2049	; 0x801
 800c084:	1d1a      	adds	r2, r3, #4
 800c086:	9304      	str	r3, [sp, #16]
 800c088:	2309      	movs	r3, #9
 800c08a:	9106      	str	r1, [sp, #24]
 800c08c:	9207      	str	r2, [sp, #28]
 800c08e:	9305      	str	r3, [sp, #20]
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round=Nr-1;round>0;round--)
  {
    InvShiftRows();
 800c090:	f7ff ff2a 	bl	800bee8 <InvShiftRows>
 800c094:	9904      	ldr	r1, [sp, #16]
 800c096:	9c06      	ldr	r4, [sp, #24]
 800c098:	9d07      	ldr	r5, [sp, #28]
 800c09a:	f101 0010 	add.w	r0, r1, #16
static void InvCipher(void)
{
  uint8_t round=0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr); 
 800c09e:	460b      	mov	r3, r1
  return sbox[num];
}

static uint8_t getSBoxInvert(uint8_t num)
{
  return rsbox[num];
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	4422      	add	r2, r4
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j=0;j<4;++j)
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 800c0a4:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
 800c0a8:	f803 2b04 	strb.w	r2, [r3], #4
static void InvSubBytes(void)
{
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j=0;j<4;++j)
 800c0ac:	4283      	cmp	r3, r0
 800c0ae:	d1f7      	bne.n	800c0a0 <InvCipher+0x3c>
 800c0b0:	3101      	adds	r1, #1
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(void)
{
  uint8_t i,j;
  for(i=0;i<4;++i)
 800c0b2:	42a9      	cmp	r1, r5
 800c0b4:	d1f1      	bne.n	800c09a <InvCipher+0x36>
  // These Nr-1 rounds are executed in the loop below.
  for(round=Nr-1;round>0;round--)
  {
    InvShiftRows();
    InvSubBytes();
    AddRoundKey(round);
 800c0b6:	9805      	ldr	r0, [sp, #20]
 800c0b8:	f7ff feca 	bl	800be50 <AddRoundKey>
 800c0bc:	9c04      	ldr	r4, [sp, #16]
 800c0be:	2500      	movs	r5, #0
 800c0c0:	9401      	str	r4, [sp, #4]
 800c0c2:	9502      	str	r5, [sp, #8]
{
  int i;
  uint8_t a,b,c,d;
  for(i=0;i<4;++i)
  { 
    a = (*state)[i][0];
 800c0c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c0c8:	f8dd 9010 	ldr.w	r9, [sp, #16]
    b = (*state)[i][1];
 800c0cc:	9901      	ldr	r1, [sp, #4]
{
  int i;
  uint8_t a,b,c,d;
  for(i=0;i<4;++i)
  { 
    a = (*state)[i][0];
 800c0ce:	f819 e008 	ldrb.w	lr, [r9, r8]
    b = (*state)[i][1];
    c = (*state)[i][2];
 800c0d2:	788b      	ldrb	r3, [r1, #2]
  int i;
  uint8_t a,b,c,d;
  for(i=0;i<4;++i)
  { 
    a = (*state)[i][0];
    b = (*state)[i][1];
 800c0d4:	f891 c001 	ldrb.w	ip, [r1, #1]
    c = (*state)[i][2];
    d = (*state)[i][3];
 800c0d8:	78ca      	ldrb	r2, [r1, #3]
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c0da:	ea4f 10de 	mov.w	r0, lr, lsr #7
 800c0de:	0047      	lsls	r7, r0, #1
 800c0e0:	4407      	add	r7, r0
 800c0e2:	09d8      	lsrs	r0, r3, #7
 800c0e4:	0044      	lsls	r4, r0, #1
 800c0e6:	ea4f 11dc 	mov.w	r1, ip, lsr #7
 800c0ea:	4420      	add	r0, r4
 800c0ec:	004e      	lsls	r6, r1, #1
 800c0ee:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800c0f2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800c0f6:	440e      	add	r6, r1
 800c0f8:	ea87 074e 	eor.w	r7, r7, lr, lsl #1
 800c0fc:	09d1      	lsrs	r1, r2, #7
 800c0fe:	ea80 0043 	eor.w	r0, r0, r3, lsl #1
 800c102:	b2ff      	uxtb	r7, r7
 800c104:	004d      	lsls	r5, r1, #1
 800c106:	b2c0      	uxtb	r0, r0
 800c108:	9003      	str	r0, [sp, #12]
 800c10a:	440d      	add	r5, r1
 800c10c:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800c110:	09f9      	lsrs	r1, r7, #7
 800c112:	ea86 064c 	eor.w	r6, r6, ip, lsl #1
 800c116:	004c      	lsls	r4, r1, #1
 800c118:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c11c:	b2f6      	uxtb	r6, r6
 800c11e:	440c      	add	r4, r1
 800c120:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 800c124:	09f0      	lsrs	r0, r6, #7
 800c126:	ea85 0542 	eor.w	r5, r5, r2, lsl #1
 800c12a:	ea4f 11d8 	mov.w	r1, r8, lsr #7
 800c12e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800c132:	b2ed      	uxtb	r5, r5
 800c134:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800c138:	ea4f 0940 	mov.w	r9, r0, lsl #1
 800c13c:	ea84 0447 	eor.w	r4, r4, r7, lsl #1
 800c140:	ea4f 1ad5 	mov.w	sl, r5, lsr #7
 800c144:	b2e4      	uxtb	r4, r4
 800c146:	4448      	add	r0, r9
 800c148:	4441      	add	r1, r8
 800c14a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c14e:	ea4f 18d4 	mov.w	r8, r4, lsr #7
 800c152:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800c156:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800c15a:	ea81 0149 	eor.w	r1, r1, r9, lsl #1
 800c15e:	44d3      	add	fp, sl
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c160:	ea83 090c 	eor.w	r9, r3, ip
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c164:	ea4f 0a48 	mov.w	sl, r8, lsl #1
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c168:	ea8c 0c0e 	eor.w	ip, ip, lr
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c16c:	ea82 0909 	eor.w	r9, r2, r9
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c170:	44d0      	add	r8, sl
 800c172:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c176:	ea8c 0a02 	eor.w	sl, ip, r2
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c17a:	405a      	eors	r2, r3
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c17c:	ea80 0046 	eor.w	r0, r0, r6, lsl #1
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c180:	ea8e 0202 	eor.w	r2, lr, r2
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c184:	f8dd e00c 	ldr.w	lr, [sp, #12]
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c188:	b2c0      	uxtb	r0, r0
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c18a:	ea8c 0c03 	eor.w	ip, ip, r3
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c18e:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
 800c192:	b2c9      	uxtb	r1, r1
 800c194:	09c3      	lsrs	r3, r0, #7
 800c196:	ea8b 0b45 	eor.w	fp, fp, r5, lsl #1
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c19a:	ea8e 0a0a 	eor.w	sl, lr, sl
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c19e:	ea87 0c0c 	eor.w	ip, r7, ip
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c1a2:	fa5f fb8b 	uxtb.w	fp, fp
 800c1a6:	ea4f 1ed1 	mov.w	lr, r1, lsr #7
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c1aa:	ea87 0909 	eor.w	r9, r7, r9
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c1ae:	ea85 0a0a 	eor.w	sl, r5, sl
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c1b2:	005f      	lsls	r7, r3, #1
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c1b4:	ea85 0c0c 	eor.w	ip, r5, ip
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c1b8:	9d03      	ldr	r5, [sp, #12]
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c1ba:	ea86 0909 	eor.w	r9, r6, r9
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c1be:	4072      	eors	r2, r6
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c1c0:	443b      	add	r3, r7
 800c1c2:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
 800c1c6:	ea4f 17db 	mov.w	r7, fp, lsr #7
 800c1ca:	ea4f 064e 	mov.w	r6, lr, lsl #1
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c1ce:	406a      	eors	r2, r5
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c1d0:	ea88 0844 	eor.w	r8, r8, r4, lsl #1
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c1d4:	ea84 0909 	eor.w	r9, r4, r9
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c1d8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800c1dc:	44b6      	add	lr, r6
 800c1de:	007d      	lsls	r5, r7, #1
 800c1e0:	fa5f f888 	uxtb.w	r8, r8
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c1e4:	ea81 0909 	eor.w	r9, r1, r9
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c1e8:	4042      	eors	r2, r0
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c1ea:	ea80 0c0c 	eor.w	ip, r0, ip
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c1ee:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
 800c1f2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c1f6:	ea84 0a0a 	eor.w	sl, r4, sl
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c1fa:	442f      	add	r7, r5
 800c1fc:	b2db      	uxtb	r3, r3
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c1fe:	ea8b 0002 	eor.w	r0, fp, r2
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c202:	ea88 0909 	eor.w	r9, r8, r9
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c206:	ea81 0a0a 	eor.w	sl, r1, sl
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c20a:	ea8b 0c0c 	eor.w	ip, fp, ip
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c20e:	ea8e 0141 	eor.w	r1, lr, r1, lsl #1
 800c212:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
 800c216:	b2c9      	uxtb	r1, r1
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c218:	ea88 0a0a 	eor.w	sl, r8, sl
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c21c:	ea83 0909 	eor.w	r9, r3, r9
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c220:	ea88 0000 	eor.w	r0, r8, r0
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c224:	ea87 0b4b 	eor.w	fp, r7, fp, lsl #1
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c228:	ea88 080c 	eor.w	r8, r8, ip
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800c22c:	fa5f fb8b 	uxtb.w	fp, fp
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c230:	ea81 0909 	eor.w	r9, r1, r9
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c234:	ea83 020a 	eor.w	r2, r3, sl
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c238:	4058      	eors	r0, r3
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c23a:	ea83 0308 	eor.w	r3, r3, r8
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c23e:	404a      	eors	r2, r1
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c240:	f8dd 8008 	ldr.w	r8, [sp, #8]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c244:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c248:	4048      	eors	r0, r1
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c24a:	4059      	eors	r1, r3
    a = (*state)[i][0];
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800c24c:	ea8b 0309 	eor.w	r3, fp, r9
 800c250:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800c254:	f809 3008 	strb.w	r3, [r9, r8]
 800c258:	f108 0804 	add.w	r8, r8, #4
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c25c:	ea8b 0000 	eor.w	r0, fp, r0
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c260:	ea8b 0202 	eor.w	r2, fp, r2
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c264:	ea8b 0b01 	eor.w	fp, fp, r1
// Please use the references to gain more information.
static void InvMixColumns(void)
{
  int i;
  uint8_t a,b,c,d;
  for(i=0;i<4;++i)
 800c268:	4641      	mov	r1, r8
    b = (*state)[i][1];
    c = (*state)[i][2];
    d = (*state)[i][3];

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800c26a:	f88e 0001 	strb.w	r0, [lr, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800c26e:	f88e 2002 	strb.w	r2, [lr, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800c272:	f88e b003 	strb.w	fp, [lr, #3]
// Please use the references to gain more information.
static void InvMixColumns(void)
{
  int i;
  uint8_t a,b,c,d;
  for(i=0;i<4;++i)
 800c276:	2910      	cmp	r1, #16
 800c278:	f10e 0e04 	add.w	lr, lr, #4
 800c27c:	f8cd 8008 	str.w	r8, [sp, #8]
 800c280:	f8cd e004 	str.w	lr, [sp, #4]
 800c284:	f47f af1e 	bne.w	800c0c4 <InvCipher+0x60>
 800c288:	9a05      	ldr	r2, [sp, #20]
 800c28a:	1e53      	subs	r3, r2, #1
  AddRoundKey(Nr); 

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round=Nr-1;round>0;round--)
 800c28c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	f47f aefd 	bne.w	800c090 <InvCipher+0x2c>
    InvMixColumns();
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows();
 800c296:	f7ff fe27 	bl	800bee8 <InvShiftRows>
 800c29a:	9904      	ldr	r1, [sp, #16]
 800c29c:	9c06      	ldr	r4, [sp, #24]
 800c29e:	9d07      	ldr	r5, [sp, #28]
 800c2a0:	f101 0010 	add.w	r0, r1, #16
  // These Nr-1 rounds are executed in the loop below.
  for(round=Nr-1;round>0;round--)
  {
    InvShiftRows();
    InvSubBytes();
    AddRoundKey(round);
 800c2a4:	460b      	mov	r3, r1
  return sbox[num];
}

static uint8_t getSBoxInvert(uint8_t num)
{
  return rsbox[num];
 800c2a6:	781a      	ldrb	r2, [r3, #0]
 800c2a8:	4422      	add	r2, r4
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j=0;j<4;++j)
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 800c2aa:	f892 2200 	ldrb.w	r2, [r2, #512]	; 0x200
 800c2ae:	f803 2b04 	strb.w	r2, [r3], #4
static void InvSubBytes(void)
{
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j=0;j<4;++j)
 800c2b2:	4283      	cmp	r3, r0
 800c2b4:	d1f7      	bne.n	800c2a6 <InvCipher+0x242>
 800c2b6:	3101      	adds	r1, #1
// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(void)
{
  uint8_t i,j;
  for(i=0;i<4;++i)
 800c2b8:	42a9      	cmp	r1, r5
 800c2ba:	d1f1      	bne.n	800c2a0 <InvCipher+0x23c>
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows();
  InvSubBytes();
  AddRoundKey(0);
 800c2bc:	2000      	movs	r0, #0
}
 800c2be:	b009      	add	sp, #36	; 0x24
 800c2c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows();
  InvSubBytes();
  AddRoundKey(0);
 800c2c4:	e5c4      	b.n	800be50 <AddRoundKey>
 800c2c6:	bf00      	nop

0800c2c8 <AES128_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && ECB


void AES128_ECB_encrypt(uint8_t* input, const uint8_t* key, uint8_t* output)
{
 800c2c8:	b510      	push	{r4, lr}
 800c2ca:	2300      	movs	r3, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c2cc:	5cc4      	ldrb	r4, [r0, r3]
 800c2ce:	54d4      	strb	r4, [r2, r3]
 800c2d0:	3301      	adds	r3, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c2d2:	2b10      	cmp	r3, #16
 800c2d4:	d1fa      	bne.n	800c2cc <AES128_ECB_encrypt+0x4>

void AES128_ECB_encrypt(uint8_t* input, const uint8_t* key, uint8_t* output)
{
  // Copy input to output, and work in-memory on output
  BlockCopy(output, input);
  state = (state_t*)output;
 800c2d6:	f640 2350 	movw	r3, #2640	; 0xa50
 800c2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c2de:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  Key = key;
 800c2e2:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  KeyExpansion();
 800c2e6:	f7ff fd45 	bl	800bd74 <KeyExpansion>

  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher();
}
 800c2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  Key = key;
  KeyExpansion();

  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher();
 800c2ee:	e629      	b.n	800bf44 <Cipher>

0800c2f0 <AES128_ECB_decrypt>:
}

void AES128_ECB_decrypt(uint8_t* input, const uint8_t* key, uint8_t *output)
{
 800c2f0:	b510      	push	{r4, lr}
 800c2f2:	2300      	movs	r3, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c2f4:	5cc4      	ldrb	r4, [r0, r3]
 800c2f6:	54d4      	strb	r4, [r2, r3]
 800c2f8:	3301      	adds	r3, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c2fa:	2b10      	cmp	r3, #16
 800c2fc:	d1fa      	bne.n	800c2f4 <AES128_ECB_decrypt+0x4>

void AES128_ECB_decrypt(uint8_t* input, const uint8_t* key, uint8_t *output)
{
  // Copy input to output, and work in-memory on output
  BlockCopy(output, input);
  state = (state_t*)output;
 800c2fe:	f640 2350 	movw	r3, #2640	; 0xa50
 800c302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c306:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  // The KeyExpansion routine must be called before encryption.
  Key = key;
 800c30a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  KeyExpansion();
 800c30e:	f7ff fd31 	bl	800bd74 <KeyExpansion>

  InvCipher();
}
 800c312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  // The KeyExpansion routine must be called before encryption.
  Key = key;
  KeyExpansion();

  InvCipher();
 800c316:	e6a5      	b.n	800c064 <InvCipher>

0800c318 <AES128_CBC_encrypt_buffer>:
    buf[i] ^= Iv[i];
  }
}

void AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
 800c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31c:	9c08      	ldr	r4, [sp, #32]
 800c31e:	4616      	mov	r6, r2
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 800c320:	f002 090f 	and.w	r9, r2, #15
    buf[i] ^= Iv[i];
  }
}

void AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
 800c324:	4607      	mov	r7, r0
 800c326:	468a      	mov	sl, r1
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 800c328:	2200      	movs	r2, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c32a:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800c32e:	54b9      	strb	r1, [r7, r2]
 800c330:	3201      	adds	r2, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c332:	2a10      	cmp	r2, #16
 800c334:	d1f9      	bne.n	800c32a <AES128_CBC_encrypt_buffer+0x12>
{
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */

  BlockCopy(output, input);
  state = (state_t*)output;
 800c336:	f640 2850 	movw	r8, #2640	; 0xa50
 800c33a:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800c33e:	f8c8 70b4 	str.w	r7, [r8, #180]	; 0xb4

  // Skip the key expansion if key is passed as 0
  if(0 != key)
 800c342:	b11b      	cbz	r3, 800c34c <AES128_CBC_encrypt_buffer+0x34>
  {
    Key = key;
 800c344:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
    KeyExpansion();
 800c348:	f7ff fd14 	bl	800bd74 <KeyExpansion>
  }

  if(iv != 0)
 800c34c:	b10c      	cbz	r4, 800c352 <AES128_CBC_encrypt_buffer+0x3a>
  {
    Iv = (uint8_t*)iv;
 800c34e:	f8c8 40b8 	str.w	r4, [r8, #184]	; 0xb8
  }

  for(i = 0; i < length; i += KEYLEN)
 800c352:	4654      	mov	r4, sl
 800c354:	463d      	mov	r5, r7
 800c356:	b306      	cbz	r6, 800c39a <AES128_CBC_encrypt_buffer+0x82>
 800c358:	f8d8 10b8 	ldr.w	r1, [r8, #184]	; 0xb8
 800c35c:	4654      	mov	r4, sl
}

void AES128_CBC_encrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 800c35e:	2300      	movs	r3, #0
static void XorWithIv(uint8_t* buf)
{
  uint8_t i;
  for(i = 0; i < KEYLEN; ++i)
  {
    buf[i] ^= Iv[i];
 800c360:	5cca      	ldrb	r2, [r1, r3]
 800c362:	5ce5      	ldrb	r5, [r4, r3]
 800c364:	4055      	eors	r5, r2
 800c366:	54e5      	strb	r5, [r4, r3]
 800c368:	3301      	adds	r3, #1


static void XorWithIv(uint8_t* buf)
{
  uint8_t i;
  for(i = 0; i < KEYLEN; ++i)
 800c36a:	2b10      	cmp	r3, #16
 800c36c:	d1f8      	bne.n	800c360 <AES128_CBC_encrypt_buffer+0x48>
 800c36e:	2300      	movs	r3, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c370:	5ce5      	ldrb	r5, [r4, r3]
 800c372:	54fd      	strb	r5, [r7, r3]
 800c374:	3301      	adds	r3, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c376:	2b10      	cmp	r3, #16
 800c378:	d1fa      	bne.n	800c370 <AES128_CBC_encrypt_buffer+0x58>
    XorWithIv(input);
    BlockCopy(output, input);
    state = (state_t*)output;
    Cipher();
    Iv = output;
    input += KEYLEN;
 800c37a:	3410      	adds	r4, #16

  for(i = 0; i < length; i += KEYLEN)
  {
    XorWithIv(input);
    BlockCopy(output, input);
    state = (state_t*)output;
 800c37c:	f8c8 70b4 	str.w	r7, [r8, #180]	; 0xb4
    Cipher();
 800c380:	f7ff fde0 	bl	800bf44 <Cipher>
 800c384:	ebca 0304 	rsb	r3, sl, r4
  if(iv != 0)
  {
    Iv = (uint8_t*)iv;
  }

  for(i = 0; i < length; i += KEYLEN)
 800c388:	429e      	cmp	r6, r3
  {
    XorWithIv(input);
    BlockCopy(output, input);
    state = (state_t*)output;
    Cipher();
    Iv = output;
 800c38a:	f8c8 70b8 	str.w	r7, [r8, #184]	; 0xb8
    input += KEYLEN;
    output += KEYLEN;
 800c38e:	f107 0510 	add.w	r5, r7, #16
  if(iv != 0)
  {
    Iv = (uint8_t*)iv;
  }

  for(i = 0; i < length; i += KEYLEN)
 800c392:	d902      	bls.n	800c39a <AES128_CBC_encrypt_buffer+0x82>
 800c394:	4639      	mov	r1, r7
    BlockCopy(output, input);
    state = (state_t*)output;
    Cipher();
    Iv = output;
    input += KEYLEN;
    output += KEYLEN;
 800c396:	462f      	mov	r7, r5
 800c398:	e7e1      	b.n	800c35e <AES128_CBC_encrypt_buffer+0x46>
  }

  if(remainders)
 800c39a:	f1b9 0f00 	cmp.w	r9, #0
 800c39e:	d011      	beq.n	800c3c4 <AES128_CBC_encrypt_buffer+0xac>
 800c3a0:	2300      	movs	r3, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c3a2:	5ce2      	ldrb	r2, [r4, r3]
 800c3a4:	54ea      	strb	r2, [r5, r3]
 800c3a6:	3301      	adds	r3, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c3a8:	2b10      	cmp	r3, #16
 800c3aa:	d1fa      	bne.n	800c3a2 <AES128_CBC_encrypt_buffer+0x8a>
  }

  if(remainders)
  {
    BlockCopy(output, input);
    memset(output + remainders, 0, KEYLEN - remainders); /* add 0-padding */
 800c3ac:	eb05 0009 	add.w	r0, r5, r9
 800c3b0:	f1c9 0210 	rsb	r2, r9, #16
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	f001 ff5f 	bl	800e278 <memset>
    state = (state_t*)output;
 800c3ba:	f8c8 50b4 	str.w	r5, [r8, #180]	; 0xb4
    Cipher();
  }
}
 800c3be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(remainders)
  {
    BlockCopy(output, input);
    memset(output + remainders, 0, KEYLEN - remainders); /* add 0-padding */
    state = (state_t*)output;
    Cipher();
 800c3c2:	e5bf      	b.n	800bf44 <Cipher>
 800c3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c3c8 <AES128_CBC_decrypt_buffer>:
  }
}

void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	b083      	sub	sp, #12
 800c3ce:	4617      	mov	r7, r2
 800c3d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 800c3d2:	f002 020f 	and.w	r2, r2, #15
 800c3d6:	9201      	str	r2, [sp, #4]
    Cipher();
  }
}

void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
 800c3d8:	4682      	mov	sl, r0
 800c3da:	468b      	mov	fp, r1
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 800c3dc:	2200      	movs	r2, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c3de:	f81b 1002 	ldrb.w	r1, [fp, r2]
 800c3e2:	f80a 1002 	strb.w	r1, [sl, r2]
 800c3e6:	3201      	adds	r2, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c3e8:	2a10      	cmp	r2, #16
 800c3ea:	d1f8      	bne.n	800c3de <AES128_CBC_decrypt_buffer+0x16>
{
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
  
  BlockCopy(output, input);
  state = (state_t*)output;
 800c3ec:	f640 2950 	movw	r9, #2640	; 0xa50
 800c3f0:	f2c2 0900 	movt	r9, #8192	; 0x2000
 800c3f4:	f8c9 a0b4 	str.w	sl, [r9, #180]	; 0xb4

  // Skip the key expansion if key is passed as 0
  if(0 != key)
 800c3f8:	b11b      	cbz	r3, 800c402 <AES128_CBC_decrypt_buffer+0x3a>
  {
    Key = key;
 800c3fa:	f8c9 30b0 	str.w	r3, [r9, #176]	; 0xb0
    KeyExpansion();
 800c3fe:	f7ff fcb9 	bl	800bd74 <KeyExpansion>
  }

  // If iv is passed as 0, we continue to encrypt without re-setting the Iv
  if(iv != 0)
 800c402:	b10c      	cbz	r4, 800c408 <AES128_CBC_decrypt_buffer+0x40>
  {
    Iv = (uint8_t*)iv;
 800c404:	f8c9 40b8 	str.w	r4, [r9, #184]	; 0xb8
  }

  for(i = 0; i < length; i += KEYLEN)
 800c408:	465a      	mov	r2, fp
 800c40a:	4654      	mov	r4, sl
 800c40c:	b317      	cbz	r7, 800c454 <AES128_CBC_decrypt_buffer+0x8c>
 800c40e:	f8d9 80b8 	ldr.w	r8, [r9, #184]	; 0xb8
 800c412:	4654      	mov	r4, sl
}

void AES128_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
  uintptr_t i;
  uint8_t remainders = length % KEYLEN; /* Remaining bytes in the last non-full block */
 800c414:	2300      	movs	r3, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c416:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800c41a:	54e2      	strb	r2, [r4, r3]
 800c41c:	3301      	adds	r3, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c41e:	2b10      	cmp	r3, #16
 800c420:	d1f9      	bne.n	800c416 <AES128_CBC_decrypt_buffer+0x4e>
  }

  for(i = 0; i < length; i += KEYLEN)
  {
    BlockCopy(output, input);
    state = (state_t*)output;
 800c422:	f8c9 40b4 	str.w	r4, [r9, #180]	; 0xb4
    InvCipher();
 800c426:	f7ff fe1d 	bl	800c064 <InvCipher>
 800c42a:	2300      	movs	r3, #0
static void XorWithIv(uint8_t* buf)
{
  uint8_t i;
  for(i = 0; i < KEYLEN; ++i)
  {
    buf[i] ^= Iv[i];
 800c42c:	f818 6003 	ldrb.w	r6, [r8, r3]
 800c430:	5ce5      	ldrb	r5, [r4, r3]
 800c432:	4075      	eors	r5, r6
 800c434:	54e5      	strb	r5, [r4, r3]
 800c436:	3301      	adds	r3, #1


static void XorWithIv(uint8_t* buf)
{
  uint8_t i;
  for(i = 0; i < KEYLEN; ++i)
 800c438:	2b10      	cmp	r3, #16
 800c43a:	d1f7      	bne.n	800c42c <AES128_CBC_decrypt_buffer+0x64>
    state = (state_t*)output;
    InvCipher();
    XorWithIv(output);
    Iv = input;
    input += KEYLEN;
    output += KEYLEN;
 800c43c:	3410      	adds	r4, #16
 800c43e:	ebca 0304 	rsb	r3, sl, r4
  if(iv != 0)
  {
    Iv = (uint8_t*)iv;
  }

  for(i = 0; i < length; i += KEYLEN)
 800c442:	429f      	cmp	r7, r3
  {
    BlockCopy(output, input);
    state = (state_t*)output;
    InvCipher();
    XorWithIv(output);
    Iv = input;
 800c444:	f8c9 b0b8 	str.w	fp, [r9, #184]	; 0xb8
    input += KEYLEN;
 800c448:	f10b 0210 	add.w	r2, fp, #16
  if(iv != 0)
  {
    Iv = (uint8_t*)iv;
  }

  for(i = 0; i < length; i += KEYLEN)
 800c44c:	d902      	bls.n	800c454 <AES128_CBC_decrypt_buffer+0x8c>
 800c44e:	46d8      	mov	r8, fp
    BlockCopy(output, input);
    state = (state_t*)output;
    InvCipher();
    XorWithIv(output);
    Iv = input;
    input += KEYLEN;
 800c450:	4693      	mov	fp, r2
 800c452:	e7df      	b.n	800c414 <AES128_CBC_decrypt_buffer+0x4c>
    output += KEYLEN;
  }

  if(remainders)
 800c454:	9b01      	ldr	r3, [sp, #4]
 800c456:	b19b      	cbz	r3, 800c480 <AES128_CBC_decrypt_buffer+0xb8>
 800c458:	2300      	movs	r3, #0
static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 800c45a:	5cd1      	ldrb	r1, [r2, r3]
 800c45c:	54e1      	strb	r1, [r4, r3]
 800c45e:	3301      	adds	r3, #1
}

static void BlockCopy(uint8_t* output, uint8_t* input)
{
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
 800c460:	2b10      	cmp	r3, #16
 800c462:	d1fa      	bne.n	800c45a <AES128_CBC_decrypt_buffer+0x92>
  }

  if(remainders)
  {
    BlockCopy(output, input);
    memset(output+remainders, 0, KEYLEN - remainders); /* add 0-padding */
 800c464:	9801      	ldr	r0, [sp, #4]
 800c466:	9b01      	ldr	r3, [sp, #4]
 800c468:	4420      	add	r0, r4
 800c46a:	f1c3 0210 	rsb	r2, r3, #16
 800c46e:	2100      	movs	r1, #0
 800c470:	f001 ff02 	bl	800e278 <memset>
    state = (state_t*)output;
 800c474:	f8c9 40b4 	str.w	r4, [r9, #180]	; 0xb4
    InvCipher();
  }
}
 800c478:	b003      	add	sp, #12
 800c47a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(remainders)
  {
    BlockCopy(output, input);
    memset(output+remainders, 0, KEYLEN - remainders); /* add 0-padding */
    state = (state_t*)output;
    InvCipher();
 800c47e:	e5f1      	b.n	800c064 <InvCipher>
  }
}
 800c480:	b003      	add	sp, #12
 800c482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c486:	bf00      	nop

0800c488 <__aeabi_drsub>:
 800c488:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c48c:	e002      	b.n	800c494 <__adddf3>
 800c48e:	bf00      	nop

0800c490 <__aeabi_dsub>:
 800c490:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c494 <__adddf3>:
 800c494:	b530      	push	{r4, r5, lr}
 800c496:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c49a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c49e:	ea94 0f05 	teq	r4, r5
 800c4a2:	bf08      	it	eq
 800c4a4:	ea90 0f02 	teqeq	r0, r2
 800c4a8:	bf1f      	itttt	ne
 800c4aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c4ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c4b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c4b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c4ba:	f000 80e2 	beq.w	800c682 <__adddf3+0x1ee>
 800c4be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c4c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c4c6:	bfb8      	it	lt
 800c4c8:	426d      	neglt	r5, r5
 800c4ca:	dd0c      	ble.n	800c4e6 <__adddf3+0x52>
 800c4cc:	442c      	add	r4, r5
 800c4ce:	ea80 0202 	eor.w	r2, r0, r2
 800c4d2:	ea81 0303 	eor.w	r3, r1, r3
 800c4d6:	ea82 0000 	eor.w	r0, r2, r0
 800c4da:	ea83 0101 	eor.w	r1, r3, r1
 800c4de:	ea80 0202 	eor.w	r2, r0, r2
 800c4e2:	ea81 0303 	eor.w	r3, r1, r3
 800c4e6:	2d36      	cmp	r5, #54	; 0x36
 800c4e8:	bf88      	it	hi
 800c4ea:	bd30      	pophi	{r4, r5, pc}
 800c4ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c4f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c4f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c4f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c4fc:	d002      	beq.n	800c504 <__adddf3+0x70>
 800c4fe:	4240      	negs	r0, r0
 800c500:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c504:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c508:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c50c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c510:	d002      	beq.n	800c518 <__adddf3+0x84>
 800c512:	4252      	negs	r2, r2
 800c514:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c518:	ea94 0f05 	teq	r4, r5
 800c51c:	f000 80a7 	beq.w	800c66e <__adddf3+0x1da>
 800c520:	f1a4 0401 	sub.w	r4, r4, #1
 800c524:	f1d5 0e20 	rsbs	lr, r5, #32
 800c528:	db0d      	blt.n	800c546 <__adddf3+0xb2>
 800c52a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c52e:	fa22 f205 	lsr.w	r2, r2, r5
 800c532:	1880      	adds	r0, r0, r2
 800c534:	f141 0100 	adc.w	r1, r1, #0
 800c538:	fa03 f20e 	lsl.w	r2, r3, lr
 800c53c:	1880      	adds	r0, r0, r2
 800c53e:	fa43 f305 	asr.w	r3, r3, r5
 800c542:	4159      	adcs	r1, r3
 800c544:	e00e      	b.n	800c564 <__adddf3+0xd0>
 800c546:	f1a5 0520 	sub.w	r5, r5, #32
 800c54a:	f10e 0e20 	add.w	lr, lr, #32
 800c54e:	2a01      	cmp	r2, #1
 800c550:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c554:	bf28      	it	cs
 800c556:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c55a:	fa43 f305 	asr.w	r3, r3, r5
 800c55e:	18c0      	adds	r0, r0, r3
 800c560:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c568:	d507      	bpl.n	800c57a <__adddf3+0xe6>
 800c56a:	f04f 0e00 	mov.w	lr, #0
 800c56e:	f1dc 0c00 	rsbs	ip, ip, #0
 800c572:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c576:	eb6e 0101 	sbc.w	r1, lr, r1
 800c57a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c57e:	d31b      	bcc.n	800c5b8 <__adddf3+0x124>
 800c580:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c584:	d30c      	bcc.n	800c5a0 <__adddf3+0x10c>
 800c586:	0849      	lsrs	r1, r1, #1
 800c588:	ea5f 0030 	movs.w	r0, r0, rrx
 800c58c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c590:	f104 0401 	add.w	r4, r4, #1
 800c594:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c598:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c59c:	f080 809a 	bcs.w	800c6d4 <__adddf3+0x240>
 800c5a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c5a4:	bf08      	it	eq
 800c5a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c5aa:	f150 0000 	adcs.w	r0, r0, #0
 800c5ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c5b2:	ea41 0105 	orr.w	r1, r1, r5
 800c5b6:	bd30      	pop	{r4, r5, pc}
 800c5b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c5bc:	4140      	adcs	r0, r0
 800c5be:	eb41 0101 	adc.w	r1, r1, r1
 800c5c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c5c6:	f1a4 0401 	sub.w	r4, r4, #1
 800c5ca:	d1e9      	bne.n	800c5a0 <__adddf3+0x10c>
 800c5cc:	f091 0f00 	teq	r1, #0
 800c5d0:	bf04      	itt	eq
 800c5d2:	4601      	moveq	r1, r0
 800c5d4:	2000      	moveq	r0, #0
 800c5d6:	fab1 f381 	clz	r3, r1
 800c5da:	bf08      	it	eq
 800c5dc:	3320      	addeq	r3, #32
 800c5de:	f1a3 030b 	sub.w	r3, r3, #11
 800c5e2:	f1b3 0220 	subs.w	r2, r3, #32
 800c5e6:	da0c      	bge.n	800c602 <__adddf3+0x16e>
 800c5e8:	320c      	adds	r2, #12
 800c5ea:	dd08      	ble.n	800c5fe <__adddf3+0x16a>
 800c5ec:	f102 0c14 	add.w	ip, r2, #20
 800c5f0:	f1c2 020c 	rsb	r2, r2, #12
 800c5f4:	fa01 f00c 	lsl.w	r0, r1, ip
 800c5f8:	fa21 f102 	lsr.w	r1, r1, r2
 800c5fc:	e00c      	b.n	800c618 <__adddf3+0x184>
 800c5fe:	f102 0214 	add.w	r2, r2, #20
 800c602:	bfd8      	it	le
 800c604:	f1c2 0c20 	rsble	ip, r2, #32
 800c608:	fa01 f102 	lsl.w	r1, r1, r2
 800c60c:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c610:	bfdc      	itt	le
 800c612:	ea41 010c 	orrle.w	r1, r1, ip
 800c616:	4090      	lslle	r0, r2
 800c618:	1ae4      	subs	r4, r4, r3
 800c61a:	bfa2      	ittt	ge
 800c61c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c620:	4329      	orrge	r1, r5
 800c622:	bd30      	popge	{r4, r5, pc}
 800c624:	ea6f 0404 	mvn.w	r4, r4
 800c628:	3c1f      	subs	r4, #31
 800c62a:	da1c      	bge.n	800c666 <__adddf3+0x1d2>
 800c62c:	340c      	adds	r4, #12
 800c62e:	dc0e      	bgt.n	800c64e <__adddf3+0x1ba>
 800c630:	f104 0414 	add.w	r4, r4, #20
 800c634:	f1c4 0220 	rsb	r2, r4, #32
 800c638:	fa20 f004 	lsr.w	r0, r0, r4
 800c63c:	fa01 f302 	lsl.w	r3, r1, r2
 800c640:	ea40 0003 	orr.w	r0, r0, r3
 800c644:	fa21 f304 	lsr.w	r3, r1, r4
 800c648:	ea45 0103 	orr.w	r1, r5, r3
 800c64c:	bd30      	pop	{r4, r5, pc}
 800c64e:	f1c4 040c 	rsb	r4, r4, #12
 800c652:	f1c4 0220 	rsb	r2, r4, #32
 800c656:	fa20 f002 	lsr.w	r0, r0, r2
 800c65a:	fa01 f304 	lsl.w	r3, r1, r4
 800c65e:	ea40 0003 	orr.w	r0, r0, r3
 800c662:	4629      	mov	r1, r5
 800c664:	bd30      	pop	{r4, r5, pc}
 800c666:	fa21 f004 	lsr.w	r0, r1, r4
 800c66a:	4629      	mov	r1, r5
 800c66c:	bd30      	pop	{r4, r5, pc}
 800c66e:	f094 0f00 	teq	r4, #0
 800c672:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c676:	bf06      	itte	eq
 800c678:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c67c:	3401      	addeq	r4, #1
 800c67e:	3d01      	subne	r5, #1
 800c680:	e74e      	b.n	800c520 <__adddf3+0x8c>
 800c682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c686:	bf18      	it	ne
 800c688:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c68c:	d029      	beq.n	800c6e2 <__adddf3+0x24e>
 800c68e:	ea94 0f05 	teq	r4, r5
 800c692:	bf08      	it	eq
 800c694:	ea90 0f02 	teqeq	r0, r2
 800c698:	d005      	beq.n	800c6a6 <__adddf3+0x212>
 800c69a:	ea54 0c00 	orrs.w	ip, r4, r0
 800c69e:	bf04      	itt	eq
 800c6a0:	4619      	moveq	r1, r3
 800c6a2:	4610      	moveq	r0, r2
 800c6a4:	bd30      	pop	{r4, r5, pc}
 800c6a6:	ea91 0f03 	teq	r1, r3
 800c6aa:	bf1e      	ittt	ne
 800c6ac:	2100      	movne	r1, #0
 800c6ae:	2000      	movne	r0, #0
 800c6b0:	bd30      	popne	{r4, r5, pc}
 800c6b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c6b6:	d105      	bne.n	800c6c4 <__adddf3+0x230>
 800c6b8:	0040      	lsls	r0, r0, #1
 800c6ba:	4149      	adcs	r1, r1
 800c6bc:	bf28      	it	cs
 800c6be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c6c2:	bd30      	pop	{r4, r5, pc}
 800c6c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c6c8:	bf3c      	itt	cc
 800c6ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c6ce:	bd30      	popcc	{r4, r5, pc}
 800c6d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c6d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c6d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6dc:	f04f 0000 	mov.w	r0, #0
 800c6e0:	bd30      	pop	{r4, r5, pc}
 800c6e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c6e6:	bf1a      	itte	ne
 800c6e8:	4619      	movne	r1, r3
 800c6ea:	4610      	movne	r0, r2
 800c6ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c6f0:	bf1c      	itt	ne
 800c6f2:	460b      	movne	r3, r1
 800c6f4:	4602      	movne	r2, r0
 800c6f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c6fa:	bf06      	itte	eq
 800c6fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c700:	ea91 0f03 	teqeq	r1, r3
 800c704:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c708:	bd30      	pop	{r4, r5, pc}
 800c70a:	bf00      	nop

0800c70c <__aeabi_ui2d>:
 800c70c:	f090 0f00 	teq	r0, #0
 800c710:	bf04      	itt	eq
 800c712:	2100      	moveq	r1, #0
 800c714:	4770      	bxeq	lr
 800c716:	b530      	push	{r4, r5, lr}
 800c718:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c71c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c720:	f04f 0500 	mov.w	r5, #0
 800c724:	f04f 0100 	mov.w	r1, #0
 800c728:	e750      	b.n	800c5cc <__adddf3+0x138>
 800c72a:	bf00      	nop

0800c72c <__aeabi_i2d>:
 800c72c:	f090 0f00 	teq	r0, #0
 800c730:	bf04      	itt	eq
 800c732:	2100      	moveq	r1, #0
 800c734:	4770      	bxeq	lr
 800c736:	b530      	push	{r4, r5, lr}
 800c738:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c73c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c740:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c744:	bf48      	it	mi
 800c746:	4240      	negmi	r0, r0
 800c748:	f04f 0100 	mov.w	r1, #0
 800c74c:	e73e      	b.n	800c5cc <__adddf3+0x138>
 800c74e:	bf00      	nop

0800c750 <__aeabi_f2d>:
 800c750:	0042      	lsls	r2, r0, #1
 800c752:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c756:	ea4f 0131 	mov.w	r1, r1, rrx
 800c75a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c75e:	bf1f      	itttt	ne
 800c760:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c764:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c768:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c76c:	4770      	bxne	lr
 800c76e:	f092 0f00 	teq	r2, #0
 800c772:	bf14      	ite	ne
 800c774:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c778:	4770      	bxeq	lr
 800c77a:	b530      	push	{r4, r5, lr}
 800c77c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c780:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c788:	e720      	b.n	800c5cc <__adddf3+0x138>
 800c78a:	bf00      	nop

0800c78c <__aeabi_ul2d>:
 800c78c:	ea50 0201 	orrs.w	r2, r0, r1
 800c790:	bf08      	it	eq
 800c792:	4770      	bxeq	lr
 800c794:	b530      	push	{r4, r5, lr}
 800c796:	f04f 0500 	mov.w	r5, #0
 800c79a:	e00a      	b.n	800c7b2 <__aeabi_l2d+0x16>

0800c79c <__aeabi_l2d>:
 800c79c:	ea50 0201 	orrs.w	r2, r0, r1
 800c7a0:	bf08      	it	eq
 800c7a2:	4770      	bxeq	lr
 800c7a4:	b530      	push	{r4, r5, lr}
 800c7a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c7aa:	d502      	bpl.n	800c7b2 <__aeabi_l2d+0x16>
 800c7ac:	4240      	negs	r0, r0
 800c7ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c7b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c7b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c7ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c7be:	f43f aedc 	beq.w	800c57a <__adddf3+0xe6>
 800c7c2:	f04f 0203 	mov.w	r2, #3
 800c7c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c7ca:	bf18      	it	ne
 800c7cc:	3203      	addne	r2, #3
 800c7ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c7d2:	bf18      	it	ne
 800c7d4:	3203      	addne	r2, #3
 800c7d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c7da:	f1c2 0320 	rsb	r3, r2, #32
 800c7de:	fa00 fc03 	lsl.w	ip, r0, r3
 800c7e2:	fa20 f002 	lsr.w	r0, r0, r2
 800c7e6:	fa01 fe03 	lsl.w	lr, r1, r3
 800c7ea:	ea40 000e 	orr.w	r0, r0, lr
 800c7ee:	fa21 f102 	lsr.w	r1, r1, r2
 800c7f2:	4414      	add	r4, r2
 800c7f4:	e6c1      	b.n	800c57a <__adddf3+0xe6>
 800c7f6:	bf00      	nop

0800c7f8 <__aeabi_dmul>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c7fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c806:	bf1d      	ittte	ne
 800c808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c80c:	ea94 0f0c 	teqne	r4, ip
 800c810:	ea95 0f0c 	teqne	r5, ip
 800c814:	f000 f8de 	bleq	800c9d4 <__aeabi_dmul+0x1dc>
 800c818:	442c      	add	r4, r5
 800c81a:	ea81 0603 	eor.w	r6, r1, r3
 800c81e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c822:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c826:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c82a:	bf18      	it	ne
 800c82c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c830:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c838:	d038      	beq.n	800c8ac <__aeabi_dmul+0xb4>
 800c83a:	fba0 ce02 	umull	ip, lr, r0, r2
 800c83e:	f04f 0500 	mov.w	r5, #0
 800c842:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c846:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c84a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c84e:	f04f 0600 	mov.w	r6, #0
 800c852:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c856:	f09c 0f00 	teq	ip, #0
 800c85a:	bf18      	it	ne
 800c85c:	f04e 0e01 	orrne.w	lr, lr, #1
 800c860:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c864:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c868:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c86c:	d204      	bcs.n	800c878 <__aeabi_dmul+0x80>
 800c86e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c872:	416d      	adcs	r5, r5
 800c874:	eb46 0606 	adc.w	r6, r6, r6
 800c878:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c87c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c880:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c884:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c888:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c88c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c890:	bf88      	it	hi
 800c892:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c896:	d81e      	bhi.n	800c8d6 <__aeabi_dmul+0xde>
 800c898:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c89c:	bf08      	it	eq
 800c89e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c8a2:	f150 0000 	adcs.w	r0, r0, #0
 800c8a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c8b0:	ea46 0101 	orr.w	r1, r6, r1
 800c8b4:	ea40 0002 	orr.w	r0, r0, r2
 800c8b8:	ea81 0103 	eor.w	r1, r1, r3
 800c8bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c8c0:	bfc2      	ittt	gt
 800c8c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c8c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c8ca:	bd70      	popgt	{r4, r5, r6, pc}
 800c8cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c8d0:	f04f 0e00 	mov.w	lr, #0
 800c8d4:	3c01      	subs	r4, #1
 800c8d6:	f300 80ab 	bgt.w	800ca30 <__aeabi_dmul+0x238>
 800c8da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c8de:	bfde      	ittt	le
 800c8e0:	2000      	movle	r0, #0
 800c8e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c8e6:	bd70      	pople	{r4, r5, r6, pc}
 800c8e8:	f1c4 0400 	rsb	r4, r4, #0
 800c8ec:	3c20      	subs	r4, #32
 800c8ee:	da35      	bge.n	800c95c <__aeabi_dmul+0x164>
 800c8f0:	340c      	adds	r4, #12
 800c8f2:	dc1b      	bgt.n	800c92c <__aeabi_dmul+0x134>
 800c8f4:	f104 0414 	add.w	r4, r4, #20
 800c8f8:	f1c4 0520 	rsb	r5, r4, #32
 800c8fc:	fa00 f305 	lsl.w	r3, r0, r5
 800c900:	fa20 f004 	lsr.w	r0, r0, r4
 800c904:	fa01 f205 	lsl.w	r2, r1, r5
 800c908:	ea40 0002 	orr.w	r0, r0, r2
 800c90c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c910:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c914:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c918:	fa21 f604 	lsr.w	r6, r1, r4
 800c91c:	eb42 0106 	adc.w	r1, r2, r6
 800c920:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c924:	bf08      	it	eq
 800c926:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c92a:	bd70      	pop	{r4, r5, r6, pc}
 800c92c:	f1c4 040c 	rsb	r4, r4, #12
 800c930:	f1c4 0520 	rsb	r5, r4, #32
 800c934:	fa00 f304 	lsl.w	r3, r0, r4
 800c938:	fa20 f005 	lsr.w	r0, r0, r5
 800c93c:	fa01 f204 	lsl.w	r2, r1, r4
 800c940:	ea40 0002 	orr.w	r0, r0, r2
 800c944:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c948:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c94c:	f141 0100 	adc.w	r1, r1, #0
 800c950:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c954:	bf08      	it	eq
 800c956:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	f1c4 0520 	rsb	r5, r4, #32
 800c960:	fa00 f205 	lsl.w	r2, r0, r5
 800c964:	ea4e 0e02 	orr.w	lr, lr, r2
 800c968:	fa20 f304 	lsr.w	r3, r0, r4
 800c96c:	fa01 f205 	lsl.w	r2, r1, r5
 800c970:	ea43 0302 	orr.w	r3, r3, r2
 800c974:	fa21 f004 	lsr.w	r0, r1, r4
 800c978:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c97c:	fa21 f204 	lsr.w	r2, r1, r4
 800c980:	ea20 0002 	bic.w	r0, r0, r2
 800c984:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c98c:	bf08      	it	eq
 800c98e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c992:	bd70      	pop	{r4, r5, r6, pc}
 800c994:	f094 0f00 	teq	r4, #0
 800c998:	d10f      	bne.n	800c9ba <__aeabi_dmul+0x1c2>
 800c99a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c99e:	0040      	lsls	r0, r0, #1
 800c9a0:	eb41 0101 	adc.w	r1, r1, r1
 800c9a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c9a8:	bf08      	it	eq
 800c9aa:	3c01      	subeq	r4, #1
 800c9ac:	d0f7      	beq.n	800c99e <__aeabi_dmul+0x1a6>
 800c9ae:	ea41 0106 	orr.w	r1, r1, r6
 800c9b2:	f095 0f00 	teq	r5, #0
 800c9b6:	bf18      	it	ne
 800c9b8:	4770      	bxne	lr
 800c9ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c9be:	0052      	lsls	r2, r2, #1
 800c9c0:	eb43 0303 	adc.w	r3, r3, r3
 800c9c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c9c8:	bf08      	it	eq
 800c9ca:	3d01      	subeq	r5, #1
 800c9cc:	d0f7      	beq.n	800c9be <__aeabi_dmul+0x1c6>
 800c9ce:	ea43 0306 	orr.w	r3, r3, r6
 800c9d2:	4770      	bx	lr
 800c9d4:	ea94 0f0c 	teq	r4, ip
 800c9d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c9dc:	bf18      	it	ne
 800c9de:	ea95 0f0c 	teqne	r5, ip
 800c9e2:	d00c      	beq.n	800c9fe <__aeabi_dmul+0x206>
 800c9e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c9e8:	bf18      	it	ne
 800c9ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c9ee:	d1d1      	bne.n	800c994 <__aeabi_dmul+0x19c>
 800c9f0:	ea81 0103 	eor.w	r1, r1, r3
 800c9f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c9f8:	f04f 0000 	mov.w	r0, #0
 800c9fc:	bd70      	pop	{r4, r5, r6, pc}
 800c9fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800ca02:	bf06      	itte	eq
 800ca04:	4610      	moveq	r0, r2
 800ca06:	4619      	moveq	r1, r3
 800ca08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800ca0c:	d019      	beq.n	800ca42 <__aeabi_dmul+0x24a>
 800ca0e:	ea94 0f0c 	teq	r4, ip
 800ca12:	d102      	bne.n	800ca1a <__aeabi_dmul+0x222>
 800ca14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800ca18:	d113      	bne.n	800ca42 <__aeabi_dmul+0x24a>
 800ca1a:	ea95 0f0c 	teq	r5, ip
 800ca1e:	d105      	bne.n	800ca2c <__aeabi_dmul+0x234>
 800ca20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800ca24:	bf1c      	itt	ne
 800ca26:	4610      	movne	r0, r2
 800ca28:	4619      	movne	r1, r3
 800ca2a:	d10a      	bne.n	800ca42 <__aeabi_dmul+0x24a>
 800ca2c:	ea81 0103 	eor.w	r1, r1, r3
 800ca30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ca34:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ca38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca3c:	f04f 0000 	mov.w	r0, #0
 800ca40:	bd70      	pop	{r4, r5, r6, pc}
 800ca42:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800ca46:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}

0800ca4c <__aeabi_ddiv>:
 800ca4c:	b570      	push	{r4, r5, r6, lr}
 800ca4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ca52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ca56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ca5a:	bf1d      	ittte	ne
 800ca5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ca60:	ea94 0f0c 	teqne	r4, ip
 800ca64:	ea95 0f0c 	teqne	r5, ip
 800ca68:	f000 f8a7 	bleq	800cbba <__aeabi_ddiv+0x16e>
 800ca6c:	eba4 0405 	sub.w	r4, r4, r5
 800ca70:	ea81 0e03 	eor.w	lr, r1, r3
 800ca74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800ca78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800ca7c:	f000 8088 	beq.w	800cb90 <__aeabi_ddiv+0x144>
 800ca80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ca84:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800ca88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800ca8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800ca90:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800ca94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800ca98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800ca9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800caa0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800caa4:	429d      	cmp	r5, r3
 800caa6:	bf08      	it	eq
 800caa8:	4296      	cmpeq	r6, r2
 800caaa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800caae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800cab2:	d202      	bcs.n	800caba <__aeabi_ddiv+0x6e>
 800cab4:	085b      	lsrs	r3, r3, #1
 800cab6:	ea4f 0232 	mov.w	r2, r2, rrx
 800caba:	1ab6      	subs	r6, r6, r2
 800cabc:	eb65 0503 	sbc.w	r5, r5, r3
 800cac0:	085b      	lsrs	r3, r3, #1
 800cac2:	ea4f 0232 	mov.w	r2, r2, rrx
 800cac6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800caca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800cace:	ebb6 0e02 	subs.w	lr, r6, r2
 800cad2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800cad6:	bf22      	ittt	cs
 800cad8:	1ab6      	subcs	r6, r6, r2
 800cada:	4675      	movcs	r5, lr
 800cadc:	ea40 000c 	orrcs.w	r0, r0, ip
 800cae0:	085b      	lsrs	r3, r3, #1
 800cae2:	ea4f 0232 	mov.w	r2, r2, rrx
 800cae6:	ebb6 0e02 	subs.w	lr, r6, r2
 800caea:	eb75 0e03 	sbcs.w	lr, r5, r3
 800caee:	bf22      	ittt	cs
 800caf0:	1ab6      	subcs	r6, r6, r2
 800caf2:	4675      	movcs	r5, lr
 800caf4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800caf8:	085b      	lsrs	r3, r3, #1
 800cafa:	ea4f 0232 	mov.w	r2, r2, rrx
 800cafe:	ebb6 0e02 	subs.w	lr, r6, r2
 800cb02:	eb75 0e03 	sbcs.w	lr, r5, r3
 800cb06:	bf22      	ittt	cs
 800cb08:	1ab6      	subcs	r6, r6, r2
 800cb0a:	4675      	movcs	r5, lr
 800cb0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800cb10:	085b      	lsrs	r3, r3, #1
 800cb12:	ea4f 0232 	mov.w	r2, r2, rrx
 800cb16:	ebb6 0e02 	subs.w	lr, r6, r2
 800cb1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800cb1e:	bf22      	ittt	cs
 800cb20:	1ab6      	subcs	r6, r6, r2
 800cb22:	4675      	movcs	r5, lr
 800cb24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800cb28:	ea55 0e06 	orrs.w	lr, r5, r6
 800cb2c:	d018      	beq.n	800cb60 <__aeabi_ddiv+0x114>
 800cb2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800cb32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800cb36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800cb3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800cb3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800cb42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800cb46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800cb4a:	d1c0      	bne.n	800cace <__aeabi_ddiv+0x82>
 800cb4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800cb50:	d10b      	bne.n	800cb6a <__aeabi_ddiv+0x11e>
 800cb52:	ea41 0100 	orr.w	r1, r1, r0
 800cb56:	f04f 0000 	mov.w	r0, #0
 800cb5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800cb5e:	e7b6      	b.n	800cace <__aeabi_ddiv+0x82>
 800cb60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800cb64:	bf04      	itt	eq
 800cb66:	4301      	orreq	r1, r0
 800cb68:	2000      	moveq	r0, #0
 800cb6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800cb6e:	bf88      	it	hi
 800cb70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800cb74:	f63f aeaf 	bhi.w	800c8d6 <__aeabi_dmul+0xde>
 800cb78:	ebb5 0c03 	subs.w	ip, r5, r3
 800cb7c:	bf04      	itt	eq
 800cb7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800cb82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800cb86:	f150 0000 	adcs.w	r0, r0, #0
 800cb8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800cb94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800cb98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800cb9c:	bfc2      	ittt	gt
 800cb9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800cba2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800cba6:	bd70      	popgt	{r4, r5, r6, pc}
 800cba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cbac:	f04f 0e00 	mov.w	lr, #0
 800cbb0:	3c01      	subs	r4, #1
 800cbb2:	e690      	b.n	800c8d6 <__aeabi_dmul+0xde>
 800cbb4:	ea45 0e06 	orr.w	lr, r5, r6
 800cbb8:	e68d      	b.n	800c8d6 <__aeabi_dmul+0xde>
 800cbba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800cbbe:	ea94 0f0c 	teq	r4, ip
 800cbc2:	bf08      	it	eq
 800cbc4:	ea95 0f0c 	teqeq	r5, ip
 800cbc8:	f43f af3b 	beq.w	800ca42 <__aeabi_dmul+0x24a>
 800cbcc:	ea94 0f0c 	teq	r4, ip
 800cbd0:	d10a      	bne.n	800cbe8 <__aeabi_ddiv+0x19c>
 800cbd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800cbd6:	f47f af34 	bne.w	800ca42 <__aeabi_dmul+0x24a>
 800cbda:	ea95 0f0c 	teq	r5, ip
 800cbde:	f47f af25 	bne.w	800ca2c <__aeabi_dmul+0x234>
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	e72c      	b.n	800ca42 <__aeabi_dmul+0x24a>
 800cbe8:	ea95 0f0c 	teq	r5, ip
 800cbec:	d106      	bne.n	800cbfc <__aeabi_ddiv+0x1b0>
 800cbee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800cbf2:	f43f aefd 	beq.w	800c9f0 <__aeabi_dmul+0x1f8>
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	e722      	b.n	800ca42 <__aeabi_dmul+0x24a>
 800cbfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800cc00:	bf18      	it	ne
 800cc02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800cc06:	f47f aec5 	bne.w	800c994 <__aeabi_dmul+0x19c>
 800cc0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800cc0e:	f47f af0d 	bne.w	800ca2c <__aeabi_dmul+0x234>
 800cc12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800cc16:	f47f aeeb 	bne.w	800c9f0 <__aeabi_dmul+0x1f8>
 800cc1a:	e712      	b.n	800ca42 <__aeabi_dmul+0x24a>

0800cc1c <__gedf2>:
 800cc1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cc20:	e006      	b.n	800cc30 <__cmpdf2+0x4>
 800cc22:	bf00      	nop

0800cc24 <__ledf2>:
 800cc24:	f04f 0c01 	mov.w	ip, #1
 800cc28:	e002      	b.n	800cc30 <__cmpdf2+0x4>
 800cc2a:	bf00      	nop

0800cc2c <__cmpdf2>:
 800cc2c:	f04f 0c01 	mov.w	ip, #1
 800cc30:	f84d cd04 	str.w	ip, [sp, #-4]!
 800cc34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cc38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cc3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cc40:	bf18      	it	ne
 800cc42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800cc46:	d01b      	beq.n	800cc80 <__cmpdf2+0x54>
 800cc48:	b001      	add	sp, #4
 800cc4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800cc4e:	bf0c      	ite	eq
 800cc50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800cc54:	ea91 0f03 	teqne	r1, r3
 800cc58:	bf02      	ittt	eq
 800cc5a:	ea90 0f02 	teqeq	r0, r2
 800cc5e:	2000      	moveq	r0, #0
 800cc60:	4770      	bxeq	lr
 800cc62:	f110 0f00 	cmn.w	r0, #0
 800cc66:	ea91 0f03 	teq	r1, r3
 800cc6a:	bf58      	it	pl
 800cc6c:	4299      	cmppl	r1, r3
 800cc6e:	bf08      	it	eq
 800cc70:	4290      	cmpeq	r0, r2
 800cc72:	bf2c      	ite	cs
 800cc74:	17d8      	asrcs	r0, r3, #31
 800cc76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800cc7a:	f040 0001 	orr.w	r0, r0, #1
 800cc7e:	4770      	bx	lr
 800cc80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800cc84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cc88:	d102      	bne.n	800cc90 <__cmpdf2+0x64>
 800cc8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800cc8e:	d107      	bne.n	800cca0 <__cmpdf2+0x74>
 800cc90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800cc94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800cc98:	d1d6      	bne.n	800cc48 <__cmpdf2+0x1c>
 800cc9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800cc9e:	d0d3      	beq.n	800cc48 <__cmpdf2+0x1c>
 800cca0:	f85d 0b04 	ldr.w	r0, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop

0800cca8 <__aeabi_cdrcmple>:
 800cca8:	4684      	mov	ip, r0
 800ccaa:	4610      	mov	r0, r2
 800ccac:	4662      	mov	r2, ip
 800ccae:	468c      	mov	ip, r1
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4663      	mov	r3, ip
 800ccb4:	e000      	b.n	800ccb8 <__aeabi_cdcmpeq>
 800ccb6:	bf00      	nop

0800ccb8 <__aeabi_cdcmpeq>:
 800ccb8:	b501      	push	{r0, lr}
 800ccba:	f7ff ffb7 	bl	800cc2c <__cmpdf2>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	bf48      	it	mi
 800ccc2:	f110 0f00 	cmnmi.w	r0, #0
 800ccc6:	bd01      	pop	{r0, pc}

0800ccc8 <__aeabi_dcmpeq>:
 800ccc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cccc:	f7ff fff4 	bl	800ccb8 <__aeabi_cdcmpeq>
 800ccd0:	bf0c      	ite	eq
 800ccd2:	2001      	moveq	r0, #1
 800ccd4:	2000      	movne	r0, #0
 800ccd6:	f85d fb08 	ldr.w	pc, [sp], #8
 800ccda:	bf00      	nop

0800ccdc <__aeabi_dcmplt>:
 800ccdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cce0:	f7ff ffea 	bl	800ccb8 <__aeabi_cdcmpeq>
 800cce4:	bf34      	ite	cc
 800cce6:	2001      	movcc	r0, #1
 800cce8:	2000      	movcs	r0, #0
 800ccea:	f85d fb08 	ldr.w	pc, [sp], #8
 800ccee:	bf00      	nop

0800ccf0 <__aeabi_dcmple>:
 800ccf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ccf4:	f7ff ffe0 	bl	800ccb8 <__aeabi_cdcmpeq>
 800ccf8:	bf94      	ite	ls
 800ccfa:	2001      	movls	r0, #1
 800ccfc:	2000      	movhi	r0, #0
 800ccfe:	f85d fb08 	ldr.w	pc, [sp], #8
 800cd02:	bf00      	nop

0800cd04 <__aeabi_dcmpge>:
 800cd04:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cd08:	f7ff ffce 	bl	800cca8 <__aeabi_cdrcmple>
 800cd0c:	bf94      	ite	ls
 800cd0e:	2001      	movls	r0, #1
 800cd10:	2000      	movhi	r0, #0
 800cd12:	f85d fb08 	ldr.w	pc, [sp], #8
 800cd16:	bf00      	nop

0800cd18 <__aeabi_dcmpgt>:
 800cd18:	f84d ed08 	str.w	lr, [sp, #-8]!
 800cd1c:	f7ff ffc4 	bl	800cca8 <__aeabi_cdrcmple>
 800cd20:	bf34      	ite	cc
 800cd22:	2001      	movcc	r0, #1
 800cd24:	2000      	movcs	r0, #0
 800cd26:	f85d fb08 	ldr.w	pc, [sp], #8
 800cd2a:	bf00      	nop

0800cd2c <__aeabi_d2uiz>:
 800cd2c:	004a      	lsls	r2, r1, #1
 800cd2e:	d211      	bcs.n	800cd54 <__aeabi_d2uiz+0x28>
 800cd30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800cd34:	d211      	bcs.n	800cd5a <__aeabi_d2uiz+0x2e>
 800cd36:	d50d      	bpl.n	800cd54 <__aeabi_d2uiz+0x28>
 800cd38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800cd3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800cd40:	d40e      	bmi.n	800cd60 <__aeabi_d2uiz+0x34>
 800cd42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cd46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800cd4e:	fa23 f002 	lsr.w	r0, r3, r2
 800cd52:	4770      	bx	lr
 800cd54:	f04f 0000 	mov.w	r0, #0
 800cd58:	4770      	bx	lr
 800cd5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800cd5e:	d102      	bne.n	800cd66 <__aeabi_d2uiz+0x3a>
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd64:	4770      	bx	lr
 800cd66:	f04f 0000 	mov.w	r0, #0
 800cd6a:	4770      	bx	lr

0800cd6c <memcpy>:
 800cd6c:	4684      	mov	ip, r0
 800cd6e:	ea41 0300 	orr.w	r3, r1, r0
 800cd72:	f013 0303 	ands.w	r3, r3, #3
 800cd76:	d16d      	bne.n	800ce54 <memcpy+0xe8>
 800cd78:	3a40      	subs	r2, #64	; 0x40
 800cd7a:	d341      	bcc.n	800ce00 <memcpy+0x94>
 800cd7c:	f851 3b04 	ldr.w	r3, [r1], #4
 800cd80:	f840 3b04 	str.w	r3, [r0], #4
 800cd84:	f851 3b04 	ldr.w	r3, [r1], #4
 800cd88:	f840 3b04 	str.w	r3, [r0], #4
 800cd8c:	f851 3b04 	ldr.w	r3, [r1], #4
 800cd90:	f840 3b04 	str.w	r3, [r0], #4
 800cd94:	f851 3b04 	ldr.w	r3, [r1], #4
 800cd98:	f840 3b04 	str.w	r3, [r0], #4
 800cd9c:	f851 3b04 	ldr.w	r3, [r1], #4
 800cda0:	f840 3b04 	str.w	r3, [r0], #4
 800cda4:	f851 3b04 	ldr.w	r3, [r1], #4
 800cda8:	f840 3b04 	str.w	r3, [r0], #4
 800cdac:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdb0:	f840 3b04 	str.w	r3, [r0], #4
 800cdb4:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdb8:	f840 3b04 	str.w	r3, [r0], #4
 800cdbc:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdc0:	f840 3b04 	str.w	r3, [r0], #4
 800cdc4:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdc8:	f840 3b04 	str.w	r3, [r0], #4
 800cdcc:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdd0:	f840 3b04 	str.w	r3, [r0], #4
 800cdd4:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdd8:	f840 3b04 	str.w	r3, [r0], #4
 800cddc:	f851 3b04 	ldr.w	r3, [r1], #4
 800cde0:	f840 3b04 	str.w	r3, [r0], #4
 800cde4:	f851 3b04 	ldr.w	r3, [r1], #4
 800cde8:	f840 3b04 	str.w	r3, [r0], #4
 800cdec:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdf0:	f840 3b04 	str.w	r3, [r0], #4
 800cdf4:	f851 3b04 	ldr.w	r3, [r1], #4
 800cdf8:	f840 3b04 	str.w	r3, [r0], #4
 800cdfc:	3a40      	subs	r2, #64	; 0x40
 800cdfe:	d2bd      	bcs.n	800cd7c <memcpy+0x10>
 800ce00:	3230      	adds	r2, #48	; 0x30
 800ce02:	d311      	bcc.n	800ce28 <memcpy+0xbc>
 800ce04:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce08:	f840 3b04 	str.w	r3, [r0], #4
 800ce0c:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce10:	f840 3b04 	str.w	r3, [r0], #4
 800ce14:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce18:	f840 3b04 	str.w	r3, [r0], #4
 800ce1c:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce20:	f840 3b04 	str.w	r3, [r0], #4
 800ce24:	3a10      	subs	r2, #16
 800ce26:	d2ed      	bcs.n	800ce04 <memcpy+0x98>
 800ce28:	320c      	adds	r2, #12
 800ce2a:	d305      	bcc.n	800ce38 <memcpy+0xcc>
 800ce2c:	f851 3b04 	ldr.w	r3, [r1], #4
 800ce30:	f840 3b04 	str.w	r3, [r0], #4
 800ce34:	3a04      	subs	r2, #4
 800ce36:	d2f9      	bcs.n	800ce2c <memcpy+0xc0>
 800ce38:	3204      	adds	r2, #4
 800ce3a:	d008      	beq.n	800ce4e <memcpy+0xe2>
 800ce3c:	07d2      	lsls	r2, r2, #31
 800ce3e:	bf1c      	itt	ne
 800ce40:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800ce44:	f800 3b01 	strbne.w	r3, [r0], #1
 800ce48:	d301      	bcc.n	800ce4e <memcpy+0xe2>
 800ce4a:	880b      	ldrh	r3, [r1, #0]
 800ce4c:	8003      	strh	r3, [r0, #0]
 800ce4e:	4660      	mov	r0, ip
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	2a08      	cmp	r2, #8
 800ce56:	d313      	bcc.n	800ce80 <memcpy+0x114>
 800ce58:	078b      	lsls	r3, r1, #30
 800ce5a:	d08d      	beq.n	800cd78 <memcpy+0xc>
 800ce5c:	f010 0303 	ands.w	r3, r0, #3
 800ce60:	d08a      	beq.n	800cd78 <memcpy+0xc>
 800ce62:	f1c3 0304 	rsb	r3, r3, #4
 800ce66:	1ad2      	subs	r2, r2, r3
 800ce68:	07db      	lsls	r3, r3, #31
 800ce6a:	bf1c      	itt	ne
 800ce6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800ce70:	f800 3b01 	strbne.w	r3, [r0], #1
 800ce74:	d380      	bcc.n	800cd78 <memcpy+0xc>
 800ce76:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ce7a:	f820 3b02 	strh.w	r3, [r0], #2
 800ce7e:	e77b      	b.n	800cd78 <memcpy+0xc>
 800ce80:	3a04      	subs	r2, #4
 800ce82:	d3d9      	bcc.n	800ce38 <memcpy+0xcc>
 800ce84:	3a01      	subs	r2, #1
 800ce86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce8a:	f800 3b01 	strb.w	r3, [r0], #1
 800ce8e:	d2f9      	bcs.n	800ce84 <memcpy+0x118>
 800ce90:	780b      	ldrb	r3, [r1, #0]
 800ce92:	7003      	strb	r3, [r0, #0]
 800ce94:	784b      	ldrb	r3, [r1, #1]
 800ce96:	7043      	strb	r3, [r0, #1]
 800ce98:	788b      	ldrb	r3, [r1, #2]
 800ce9a:	7083      	strb	r3, [r0, #2]
 800ce9c:	4660      	mov	r0, ip
 800ce9e:	4770      	bx	lr

0800cea0 <strcmp>:
 800cea0:	ea40 0c01 	orr.w	ip, r0, r1
 800cea4:	f01c 0f07 	tst.w	ip, #7
 800cea8:	d123      	bne.n	800cef2 <strcmp+0x52>
 800ceaa:	f1bd 0d10 	subs.w	sp, sp, #16
 800ceae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ceb2:	e9cd 6700 	strd	r6, r7, [sp]
 800ceb6:	f06f 0600 	mvn.w	r6, #0
 800ceba:	f04f 0700 	mov.w	r7, #0
 800cebe:	bf00      	nop
 800cec0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800cec4:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800cec8:	42a2      	cmp	r2, r4
 800ceca:	fa82 fc46 	uadd8	ip, r2, r6
 800cece:	faa7 fc86 	sel	ip, r7, r6
 800ced2:	bf08      	it	eq
 800ced4:	f1bc 0f00 	cmpeq.w	ip, #0
 800ced8:	f040 80d7 	bne.w	800d08a <strcmp+0x1ea>
 800cedc:	42ab      	cmp	r3, r5
 800cede:	fa83 fc46 	uadd8	ip, r3, r6
 800cee2:	faa7 fc86 	sel	ip, r7, r6
 800cee6:	bf08      	it	eq
 800cee8:	f1bc 0f00 	cmpeq.w	ip, #0
 800ceec:	f040 80ca 	bne.w	800d084 <strcmp+0x1e4>
 800cef0:	e7e6      	b.n	800cec0 <strcmp+0x20>
 800cef2:	f010 0c03 	ands.w	ip, r0, #3
 800cef6:	d021      	beq.n	800cf3c <strcmp+0x9c>
 800cef8:	f020 0003 	bic.w	r0, r0, #3
 800cefc:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf00:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
 800cf04:	d008      	beq.n	800cf18 <strcmp+0x78>
 800cf06:	d20f      	bcs.n	800cf28 <strcmp+0x88>
 800cf08:	f811 cb01 	ldrb.w	ip, [r1], #1
 800cf0c:	fa5f f392 	uxtb.w	r3, r2, ror #8
 800cf10:	ebb3 0c0c 	subs.w	ip, r3, ip
 800cf14:	d110      	bne.n	800cf38 <strcmp+0x98>
 800cf16:	b17b      	cbz	r3, 800cf38 <strcmp+0x98>
 800cf18:	f811 cb01 	ldrb.w	ip, [r1], #1
 800cf1c:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
 800cf20:	ebb3 0c0c 	subs.w	ip, r3, ip
 800cf24:	d108      	bne.n	800cf38 <strcmp+0x98>
 800cf26:	b13b      	cbz	r3, 800cf38 <strcmp+0x98>
 800cf28:	f811 cb01 	ldrb.w	ip, [r1], #1
 800cf2c:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
 800cf30:	ebb3 0c0c 	subs.w	ip, r3, ip
 800cf34:	d100      	bne.n	800cf38 <strcmp+0x98>
 800cf36:	b90b      	cbnz	r3, 800cf3c <strcmp+0x9c>
 800cf38:	4660      	mov	r0, ip
 800cf3a:	4770      	bx	lr
 800cf3c:	f1bd 0d10 	subs.w	sp, sp, #16
 800cf40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cf44:	e9cd 6700 	strd	r6, r7, [sp]
 800cf48:	f06f 0600 	mvn.w	r6, #0
 800cf4c:	f04f 0700 	mov.w	r7, #0
 800cf50:	f011 0c03 	ands.w	ip, r1, #3
 800cf54:	d12d      	bne.n	800cfb2 <strcmp+0x112>
 800cf56:	f010 0f04 	tst.w	r0, #4
 800cf5a:	d00d      	beq.n	800cf78 <strcmp+0xd8>
 800cf5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf60:	f851 4b04 	ldr.w	r4, [r1], #4
 800cf64:	42a2      	cmp	r2, r4
 800cf66:	fa82 fc46 	uadd8	ip, r2, r6
 800cf6a:	faa7 fc86 	sel	ip, r7, r6
 800cf6e:	bf08      	it	eq
 800cf70:	f1bc 0f00 	cmpeq.w	ip, #0
 800cf74:	f040 8089 	bne.w	800d08a <strcmp+0x1ea>
 800cf78:	f011 0f04 	tst.w	r1, #4
 800cf7c:	d09f      	beq.n	800cebe <strcmp+0x1e>
 800cf7e:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf82:	bf00      	nop
 800cf84:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 800cf88:	42aa      	cmp	r2, r5
 800cf8a:	fa82 fc46 	uadd8	ip, r2, r6
 800cf8e:	faa7 fc86 	sel	ip, r7, r6
 800cf92:	bf08      	it	eq
 800cf94:	f1bc 0f00 	cmpeq.w	ip, #0
 800cf98:	d171      	bne.n	800d07e <strcmp+0x1de>
 800cf9a:	e8f1 4502 	ldrd	r4, r5, [r1], #8
 800cf9e:	42a3      	cmp	r3, r4
 800cfa0:	fa83 fc46 	uadd8	ip, r3, r6
 800cfa4:	faa7 fc86 	sel	ip, r7, r6
 800cfa8:	bf08      	it	eq
 800cfaa:	f1bc 0f00 	cmpeq.w	ip, #0
 800cfae:	d163      	bne.n	800d078 <strcmp+0x1d8>
 800cfb0:	e7e8      	b.n	800cf84 <strcmp+0xe4>
 800cfb2:	f021 0103 	bic.w	r1, r1, #3
 800cfb6:	f1bc 0f02 	cmp.w	ip, #2
 800cfba:	d01e      	beq.n	800cffa <strcmp+0x15a>
 800cfbc:	da3b      	bge.n	800d036 <strcmp+0x196>
 800cfbe:	f851 5b04 	ldr.w	r5, [r1], #4
 800cfc2:	bf00      	nop
 800cfc4:	f850 3b04 	ldr.w	r3, [r0], #4
 800cfc8:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800cfcc:	fa83 fc46 	uadd8	ip, r3, r6
 800cfd0:	faa7 fc86 	sel	ip, r7, r6
 800cfd4:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
 800cfd8:	ea03 2216 	and.w	r2, r3, r6, lsr #8
 800cfdc:	bf08      	it	eq
 800cfde:	42aa      	cmpeq	r2, r5
 800cfe0:	d14d      	bne.n	800d07e <strcmp+0x1de>
 800cfe2:	f851 5b04 	ldr.w	r5, [r1], #4
 800cfe6:	f1bc 0f00 	cmp.w	ip, #0
 800cfea:	ea82 0303 	eor.w	r3, r2, r3
 800cfee:	ea4f 6205 	mov.w	r2, r5, lsl #24
 800cff2:	bf08      	it	eq
 800cff4:	4293      	cmpeq	r3, r2
 800cff6:	d13c      	bne.n	800d072 <strcmp+0x1d2>
 800cff8:	e7e4      	b.n	800cfc4 <strcmp+0x124>
 800cffa:	f851 5b04 	ldr.w	r5, [r1], #4
 800cffe:	bf00      	nop
 800d000:	f850 3b04 	ldr.w	r3, [r0], #4
 800d004:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800d008:	fa83 fc46 	uadd8	ip, r3, r6
 800d00c:	faa7 fc86 	sel	ip, r7, r6
 800d010:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
 800d014:	ea03 4216 	and.w	r2, r3, r6, lsr #16
 800d018:	bf08      	it	eq
 800d01a:	42aa      	cmpeq	r2, r5
 800d01c:	d12f      	bne.n	800d07e <strcmp+0x1de>
 800d01e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d022:	f1bc 0f00 	cmp.w	ip, #0
 800d026:	ea82 0303 	eor.w	r3, r2, r3
 800d02a:	ea4f 4205 	mov.w	r2, r5, lsl #16
 800d02e:	bf08      	it	eq
 800d030:	4293      	cmpeq	r3, r2
 800d032:	d11e      	bne.n	800d072 <strcmp+0x1d2>
 800d034:	e7e4      	b.n	800d000 <strcmp+0x160>
 800d036:	f851 5b04 	ldr.w	r5, [r1], #4
 800d03a:	bf00      	nop
 800d03c:	f850 3b04 	ldr.w	r3, [r0], #4
 800d040:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800d044:	fa83 fc46 	uadd8	ip, r3, r6
 800d048:	faa7 fc86 	sel	ip, r7, r6
 800d04c:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
 800d050:	ea03 6216 	and.w	r2, r3, r6, lsr #24
 800d054:	bf08      	it	eq
 800d056:	42aa      	cmpeq	r2, r5
 800d058:	d111      	bne.n	800d07e <strcmp+0x1de>
 800d05a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d05e:	f1bc 0f00 	cmp.w	ip, #0
 800d062:	ea82 0303 	eor.w	r3, r2, r3
 800d066:	ea4f 2205 	mov.w	r2, r5, lsl #8
 800d06a:	bf08      	it	eq
 800d06c:	4293      	cmpeq	r3, r2
 800d06e:	d100      	bne.n	800d072 <strcmp+0x1d2>
 800d070:	e7e4      	b.n	800d03c <strcmp+0x19c>
 800d072:	ba19      	rev	r1, r3
 800d074:	ba12      	rev	r2, r2
 800d076:	e00a      	b.n	800d08e <strcmp+0x1ee>
 800d078:	ba19      	rev	r1, r3
 800d07a:	ba22      	rev	r2, r4
 800d07c:	e007      	b.n	800d08e <strcmp+0x1ee>
 800d07e:	ba11      	rev	r1, r2
 800d080:	ba2a      	rev	r2, r5
 800d082:	e004      	b.n	800d08e <strcmp+0x1ee>
 800d084:	ba19      	rev	r1, r3
 800d086:	ba2a      	rev	r2, r5
 800d088:	e001      	b.n	800d08e <strcmp+0x1ee>
 800d08a:	ba11      	rev	r1, r2
 800d08c:	ba22      	rev	r2, r4
 800d08e:	fa9c f08c 	rev.w	r0, ip
 800d092:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d096:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d09a:	f11d 0d10 	adds.w	sp, sp, #16
 800d09e:	b138      	cbz	r0, 800d0b0 <strcmp+0x210>
 800d0a0:	fab0 f080 	clz	r0, r0
 800d0a4:	f1c0 0018 	rsb	r0, r0, #24
 800d0a8:	fa21 f100 	lsr.w	r1, r1, r0
 800d0ac:	fa22 f200 	lsr.w	r2, r2, r0
 800d0b0:	2001      	movs	r0, #1
 800d0b2:	4291      	cmp	r1, r2
 800d0b4:	bf98      	it	ls
 800d0b6:	4180      	sbcls	r0, r0
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop

0800d0bc <__aeabi_d2iz>:
 800d0bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d0c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800d0c4:	d215      	bcs.n	800d0f2 <__aeabi_d2iz+0x36>
 800d0c6:	d511      	bpl.n	800d0ec <__aeabi_d2iz+0x30>
 800d0c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800d0cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800d0d0:	d912      	bls.n	800d0f8 <__aeabi_d2iz+0x3c>
 800d0d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d0d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d0de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d0e2:	fa23 f002 	lsr.w	r0, r3, r2
 800d0e6:	bf18      	it	ne
 800d0e8:	4240      	negne	r0, r0
 800d0ea:	4770      	bx	lr
 800d0ec:	f04f 0000 	mov.w	r0, #0
 800d0f0:	4770      	bx	lr
 800d0f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800d0f6:	d105      	bne.n	800d104 <__aeabi_d2iz+0x48>
 800d0f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800d0fc:	bf08      	it	eq
 800d0fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800d102:	4770      	bx	lr
 800d104:	f04f 0000 	mov.w	r0, #0
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop

0800d10c <__aeabi_uldivmod>:
 800d10c:	b94b      	cbnz	r3, 800d122 <__aeabi_uldivmod+0x16>
 800d10e:	b942      	cbnz	r2, 800d122 <__aeabi_uldivmod+0x16>
 800d110:	2900      	cmp	r1, #0
 800d112:	bf08      	it	eq
 800d114:	2800      	cmpeq	r0, #0
 800d116:	d002      	beq.n	800d11e <__aeabi_uldivmod+0x12>
 800d118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d11c:	4608      	mov	r0, r1
 800d11e:	f000 b83b 	b.w	800d198 <__aeabi_idiv0>
 800d122:	b082      	sub	sp, #8
 800d124:	46ec      	mov	ip, sp
 800d126:	e92d 5000 	stmdb	sp!, {ip, lr}
 800d12a:	f000 f81d 	bl	800d168 <__gnu_uldivmod_helper>
 800d12e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d132:	b002      	add	sp, #8
 800d134:	bc0c      	pop	{r2, r3}
 800d136:	4770      	bx	lr

0800d138 <__gnu_ldivmod_helper>:
 800d138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d13c:	9c06      	ldr	r4, [sp, #24]
 800d13e:	4615      	mov	r5, r2
 800d140:	4606      	mov	r6, r0
 800d142:	460f      	mov	r7, r1
 800d144:	4698      	mov	r8, r3
 800d146:	f000 f829 	bl	800d19c <__divdi3>
 800d14a:	fb05 f301 	mul.w	r3, r5, r1
 800d14e:	fb00 3808 	mla	r8, r0, r8, r3
 800d152:	fba5 2300 	umull	r2, r3, r5, r0
 800d156:	4443      	add	r3, r8
 800d158:	1ab2      	subs	r2, r6, r2
 800d15a:	eb67 0303 	sbc.w	r3, r7, r3
 800d15e:	e9c4 2300 	strd	r2, r3, [r4]
 800d162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d166:	bf00      	nop

0800d168 <__gnu_uldivmod_helper>:
 800d168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d16c:	9c06      	ldr	r4, [sp, #24]
 800d16e:	4615      	mov	r5, r2
 800d170:	4606      	mov	r6, r0
 800d172:	460f      	mov	r7, r1
 800d174:	4698      	mov	r8, r3
 800d176:	f000 f967 	bl	800d448 <__udivdi3>
 800d17a:	fb00 f808 	mul.w	r8, r0, r8
 800d17e:	fba0 2305 	umull	r2, r3, r0, r5
 800d182:	fb05 8801 	mla	r8, r5, r1, r8
 800d186:	4443      	add	r3, r8
 800d188:	1ab2      	subs	r2, r6, r2
 800d18a:	eb67 0303 	sbc.w	r3, r7, r3
 800d18e:	e9c4 2300 	strd	r2, r3, [r4]
 800d192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d196:	bf00      	nop

0800d198 <__aeabi_idiv0>:
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop

0800d19c <__divdi3>:
 800d19c:	2900      	cmp	r1, #0
 800d19e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d1a2:	bfa8      	it	ge
 800d1a4:	2600      	movge	r6, #0
 800d1a6:	f2c0 80a9 	blt.w	800d2fc <__divdi3+0x160>
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f2c0 80a1 	blt.w	800d2f2 <__divdi3+0x156>
 800d1b0:	4689      	mov	r9, r1
 800d1b2:	4690      	mov	r8, r2
 800d1b4:	469c      	mov	ip, r3
 800d1b6:	4614      	mov	r4, r2
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	460f      	mov	r7, r1
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d147      	bne.n	800d250 <__divdi3+0xb4>
 800d1c0:	428a      	cmp	r2, r1
 800d1c2:	d95b      	bls.n	800d27c <__divdi3+0xe0>
 800d1c4:	fab2 f382 	clz	r3, r2
 800d1c8:	b153      	cbz	r3, 800d1e0 <__divdi3+0x44>
 800d1ca:	f1c3 0220 	rsb	r2, r3, #32
 800d1ce:	fa01 f703 	lsl.w	r7, r1, r3
 800d1d2:	fa20 f202 	lsr.w	r2, r0, r2
 800d1d6:	fa08 f403 	lsl.w	r4, r8, r3
 800d1da:	4317      	orrs	r7, r2
 800d1dc:	fa00 f503 	lsl.w	r5, r0, r3
 800d1e0:	0c21      	lsrs	r1, r4, #16
 800d1e2:	fbb7 f2f1 	udiv	r2, r7, r1
 800d1e6:	0c2b      	lsrs	r3, r5, #16
 800d1e8:	fb01 7c12 	mls	ip, r1, r2, r7
 800d1ec:	b2a0      	uxth	r0, r4
 800d1ee:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 800d1f2:	fb00 f302 	mul.w	r3, r0, r2
 800d1f6:	42bb      	cmp	r3, r7
 800d1f8:	d909      	bls.n	800d20e <__divdi3+0x72>
 800d1fa:	193f      	adds	r7, r7, r4
 800d1fc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800d200:	d204      	bcs.n	800d20c <__divdi3+0x70>
 800d202:	42bb      	cmp	r3, r7
 800d204:	bf84      	itt	hi
 800d206:	3a02      	subhi	r2, #2
 800d208:	193f      	addhi	r7, r7, r4
 800d20a:	d800      	bhi.n	800d20e <__divdi3+0x72>
 800d20c:	4662      	mov	r2, ip
 800d20e:	1aff      	subs	r7, r7, r3
 800d210:	fbb7 f3f1 	udiv	r3, r7, r1
 800d214:	b2ad      	uxth	r5, r5
 800d216:	fb01 7113 	mls	r1, r1, r3, r7
 800d21a:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 800d21e:	fb00 f003 	mul.w	r0, r0, r3
 800d222:	4288      	cmp	r0, r1
 800d224:	d908      	bls.n	800d238 <__divdi3+0x9c>
 800d226:	1909      	adds	r1, r1, r4
 800d228:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 800d22c:	d203      	bcs.n	800d236 <__divdi3+0x9a>
 800d22e:	4288      	cmp	r0, r1
 800d230:	bf88      	it	hi
 800d232:	3b02      	subhi	r3, #2
 800d234:	d800      	bhi.n	800d238 <__divdi3+0x9c>
 800d236:	463b      	mov	r3, r7
 800d238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d23c:	2200      	movs	r2, #0
 800d23e:	4618      	mov	r0, r3
 800d240:	4611      	mov	r1, r2
 800d242:	b116      	cbz	r6, 800d24a <__divdi3+0xae>
 800d244:	4240      	negs	r0, r0
 800d246:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d24a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d24e:	4770      	bx	lr
 800d250:	428b      	cmp	r3, r1
 800d252:	bf84      	itt	hi
 800d254:	2200      	movhi	r2, #0
 800d256:	4613      	movhi	r3, r2
 800d258:	d8f1      	bhi.n	800d23e <__divdi3+0xa2>
 800d25a:	fabc f18c 	clz	r1, ip
 800d25e:	2900      	cmp	r1, #0
 800d260:	f040 8090 	bne.w	800d384 <__divdi3+0x1e8>
 800d264:	45cc      	cmp	ip, r9
 800d266:	bf28      	it	cs
 800d268:	4580      	cmpcs	r8, r0
 800d26a:	bf8c      	ite	hi
 800d26c:	2200      	movhi	r2, #0
 800d26e:	2201      	movls	r2, #1
 800d270:	bf9c      	itt	ls
 800d272:	2301      	movls	r3, #1
 800d274:	460a      	movls	r2, r1
 800d276:	d9e2      	bls.n	800d23e <__divdi3+0xa2>
 800d278:	4613      	mov	r3, r2
 800d27a:	e7e0      	b.n	800d23e <__divdi3+0xa2>
 800d27c:	b912      	cbnz	r2, 800d284 <__divdi3+0xe8>
 800d27e:	2301      	movs	r3, #1
 800d280:	fbb3 f4f2 	udiv	r4, r3, r2
 800d284:	fab4 f384 	clz	r3, r4
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d13d      	bne.n	800d308 <__divdi3+0x16c>
 800d28c:	1b3f      	subs	r7, r7, r4
 800d28e:	0c20      	lsrs	r0, r4, #16
 800d290:	fa1f fc84 	uxth.w	ip, r4
 800d294:	2201      	movs	r2, #1
 800d296:	fbb7 f1f0 	udiv	r1, r7, r0
 800d29a:	0c2b      	lsrs	r3, r5, #16
 800d29c:	fb00 7711 	mls	r7, r0, r1, r7
 800d2a0:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800d2a4:	fb0c f301 	mul.w	r3, ip, r1
 800d2a8:	42bb      	cmp	r3, r7
 800d2aa:	d90a      	bls.n	800d2c2 <__divdi3+0x126>
 800d2ac:	193f      	adds	r7, r7, r4
 800d2ae:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800d2b2:	f080 80c1 	bcs.w	800d438 <__divdi3+0x29c>
 800d2b6:	42bb      	cmp	r3, r7
 800d2b8:	bf84      	itt	hi
 800d2ba:	3902      	subhi	r1, #2
 800d2bc:	193f      	addhi	r7, r7, r4
 800d2be:	f240 80bb 	bls.w	800d438 <__divdi3+0x29c>
 800d2c2:	1aff      	subs	r7, r7, r3
 800d2c4:	fbb7 f3f0 	udiv	r3, r7, r0
 800d2c8:	b2ad      	uxth	r5, r5
 800d2ca:	fb00 7013 	mls	r0, r0, r3, r7
 800d2ce:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800d2d2:	fb0c fc03 	mul.w	ip, ip, r3
 800d2d6:	4584      	cmp	ip, r0
 800d2d8:	d908      	bls.n	800d2ec <__divdi3+0x150>
 800d2da:	1900      	adds	r0, r0, r4
 800d2dc:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 800d2e0:	d203      	bcs.n	800d2ea <__divdi3+0x14e>
 800d2e2:	4584      	cmp	ip, r0
 800d2e4:	bf88      	it	hi
 800d2e6:	3b02      	subhi	r3, #2
 800d2e8:	d800      	bhi.n	800d2ec <__divdi3+0x150>
 800d2ea:	463b      	mov	r3, r7
 800d2ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d2f0:	e7a5      	b.n	800d23e <__divdi3+0xa2>
 800d2f2:	43f6      	mvns	r6, r6
 800d2f4:	4252      	negs	r2, r2
 800d2f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d2fa:	e759      	b.n	800d1b0 <__divdi3+0x14>
 800d2fc:	4240      	negs	r0, r0
 800d2fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d302:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d306:	e750      	b.n	800d1aa <__divdi3+0xe>
 800d308:	409c      	lsls	r4, r3
 800d30a:	f1c3 0220 	rsb	r2, r3, #32
 800d30e:	fa27 f102 	lsr.w	r1, r7, r2
 800d312:	0c20      	lsrs	r0, r4, #16
 800d314:	fa25 f202 	lsr.w	r2, r5, r2
 800d318:	409f      	lsls	r7, r3
 800d31a:	4317      	orrs	r7, r2
 800d31c:	fbb1 f2f0 	udiv	r2, r1, r0
 800d320:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800d324:	fb00 1112 	mls	r1, r0, r2, r1
 800d328:	fa1f fc84 	uxth.w	ip, r4
 800d32c:	ea48 4101 	orr.w	r1, r8, r1, lsl #16
 800d330:	fb0c f802 	mul.w	r8, ip, r2
 800d334:	4588      	cmp	r8, r1
 800d336:	fa05 f503 	lsl.w	r5, r5, r3
 800d33a:	d908      	bls.n	800d34e <__divdi3+0x1b2>
 800d33c:	1909      	adds	r1, r1, r4
 800d33e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 800d342:	d27f      	bcs.n	800d444 <__divdi3+0x2a8>
 800d344:	4588      	cmp	r8, r1
 800d346:	bf84      	itt	hi
 800d348:	3a02      	subhi	r2, #2
 800d34a:	1909      	addhi	r1, r1, r4
 800d34c:	d97a      	bls.n	800d444 <__divdi3+0x2a8>
 800d34e:	ebc8 0101 	rsb	r1, r8, r1
 800d352:	fbb1 f3f0 	udiv	r3, r1, r0
 800d356:	fb00 1113 	mls	r1, r0, r3, r1
 800d35a:	b2bf      	uxth	r7, r7
 800d35c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800d360:	fb0c f103 	mul.w	r1, ip, r3
 800d364:	42b9      	cmp	r1, r7
 800d366:	d909      	bls.n	800d37c <__divdi3+0x1e0>
 800d368:	193f      	adds	r7, r7, r4
 800d36a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800d36e:	d204      	bcs.n	800d37a <__divdi3+0x1de>
 800d370:	42b9      	cmp	r1, r7
 800d372:	bf84      	itt	hi
 800d374:	3b02      	subhi	r3, #2
 800d376:	193f      	addhi	r7, r7, r4
 800d378:	d800      	bhi.n	800d37c <__divdi3+0x1e0>
 800d37a:	4643      	mov	r3, r8
 800d37c:	1a7f      	subs	r7, r7, r1
 800d37e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800d382:	e788      	b.n	800d296 <__divdi3+0xfa>
 800d384:	f1c1 0320 	rsb	r3, r1, #32
 800d388:	fa28 f203 	lsr.w	r2, r8, r3
 800d38c:	fa0c fc01 	lsl.w	ip, ip, r1
 800d390:	ea42 0c0c 	orr.w	ip, r2, ip
 800d394:	fa29 f403 	lsr.w	r4, r9, r3
 800d398:	ea4f 4a1c 	mov.w	sl, ip, lsr #16
 800d39c:	fa20 f303 	lsr.w	r3, r0, r3
 800d3a0:	fa09 f901 	lsl.w	r9, r9, r1
 800d3a4:	ea43 0009 	orr.w	r0, r3, r9
 800d3a8:	fbb4 f7fa 	udiv	r7, r4, sl
 800d3ac:	fb0a 4417 	mls	r4, sl, r7, r4
 800d3b0:	0c03      	lsrs	r3, r0, #16
 800d3b2:	fa1f f98c 	uxth.w	r9, ip
 800d3b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d3ba:	fb09 fb07 	mul.w	fp, r9, r7
 800d3be:	45a3      	cmp	fp, r4
 800d3c0:	fa08 f201 	lsl.w	r2, r8, r1
 800d3c4:	d909      	bls.n	800d3da <__divdi3+0x23e>
 800d3c6:	eb14 040c 	adds.w	r4, r4, ip
 800d3ca:	f107 33ff 	add.w	r3, r7, #4294967295	; 0xffffffff
 800d3ce:	d237      	bcs.n	800d440 <__divdi3+0x2a4>
 800d3d0:	45a3      	cmp	fp, r4
 800d3d2:	bf84      	itt	hi
 800d3d4:	3f02      	subhi	r7, #2
 800d3d6:	4464      	addhi	r4, ip
 800d3d8:	d932      	bls.n	800d440 <__divdi3+0x2a4>
 800d3da:	ebcb 0404 	rsb	r4, fp, r4
 800d3de:	fbb4 f3fa 	udiv	r3, r4, sl
 800d3e2:	fb0a 4413 	mls	r4, sl, r3, r4
 800d3e6:	b280      	uxth	r0, r0
 800d3e8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800d3ec:	fb09 f403 	mul.w	r4, r9, r3
 800d3f0:	4284      	cmp	r4, r0
 800d3f2:	d909      	bls.n	800d408 <__divdi3+0x26c>
 800d3f4:	eb10 000c 	adds.w	r0, r0, ip
 800d3f8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800d3fc:	d21e      	bcs.n	800d43c <__divdi3+0x2a0>
 800d3fe:	4284      	cmp	r4, r0
 800d400:	bf84      	itt	hi
 800d402:	3b02      	subhi	r3, #2
 800d404:	4460      	addhi	r0, ip
 800d406:	d919      	bls.n	800d43c <__divdi3+0x2a0>
 800d408:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800d40c:	1b00      	subs	r0, r0, r4
 800d40e:	fba7 2302 	umull	r2, r3, r7, r2
 800d412:	4298      	cmp	r0, r3
 800d414:	d30d      	bcc.n	800d432 <__divdi3+0x296>
 800d416:	bf14      	ite	ne
 800d418:	2300      	movne	r3, #0
 800d41a:	2301      	moveq	r3, #1
 800d41c:	fa05 f101 	lsl.w	r1, r5, r1
 800d420:	4291      	cmp	r1, r2
 800d422:	bf2c      	ite	cs
 800d424:	2200      	movcs	r2, #0
 800d426:	f003 0201 	andcc.w	r2, r3, #1
 800d42a:	463b      	mov	r3, r7
 800d42c:	2a00      	cmp	r2, #0
 800d42e:	f43f af06 	beq.w	800d23e <__divdi3+0xa2>
 800d432:	1e7b      	subs	r3, r7, #1
 800d434:	2200      	movs	r2, #0
 800d436:	e702      	b.n	800d23e <__divdi3+0xa2>
 800d438:	4641      	mov	r1, r8
 800d43a:	e742      	b.n	800d2c2 <__divdi3+0x126>
 800d43c:	4643      	mov	r3, r8
 800d43e:	e7e3      	b.n	800d408 <__divdi3+0x26c>
 800d440:	461f      	mov	r7, r3
 800d442:	e7ca      	b.n	800d3da <__divdi3+0x23e>
 800d444:	461a      	mov	r2, r3
 800d446:	e782      	b.n	800d34e <__divdi3+0x1b2>

0800d448 <__udivdi3>:
 800d448:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800d44c:	4614      	mov	r4, r2
 800d44e:	4605      	mov	r5, r0
 800d450:	460e      	mov	r6, r1
 800d452:	2b00      	cmp	r3, #0
 800d454:	d141      	bne.n	800d4da <__udivdi3+0x92>
 800d456:	428a      	cmp	r2, r1
 800d458:	d954      	bls.n	800d504 <__udivdi3+0xbc>
 800d45a:	fab2 f382 	clz	r3, r2
 800d45e:	b14b      	cbz	r3, 800d474 <__udivdi3+0x2c>
 800d460:	f1c3 0620 	rsb	r6, r3, #32
 800d464:	4099      	lsls	r1, r3
 800d466:	fa20 f606 	lsr.w	r6, r0, r6
 800d46a:	fa02 f403 	lsl.w	r4, r2, r3
 800d46e:	430e      	orrs	r6, r1
 800d470:	fa00 f503 	lsl.w	r5, r0, r3
 800d474:	0c22      	lsrs	r2, r4, #16
 800d476:	fbb6 f0f2 	udiv	r0, r6, r2
 800d47a:	0c2b      	lsrs	r3, r5, #16
 800d47c:	fb02 6110 	mls	r1, r2, r0, r6
 800d480:	b2a7      	uxth	r7, r4
 800d482:	ea43 4601 	orr.w	r6, r3, r1, lsl #16
 800d486:	fb07 f300 	mul.w	r3, r7, r0
 800d48a:	42b3      	cmp	r3, r6
 800d48c:	d909      	bls.n	800d4a2 <__udivdi3+0x5a>
 800d48e:	1936      	adds	r6, r6, r4
 800d490:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800d494:	d204      	bcs.n	800d4a0 <__udivdi3+0x58>
 800d496:	42b3      	cmp	r3, r6
 800d498:	bf84      	itt	hi
 800d49a:	3802      	subhi	r0, #2
 800d49c:	1936      	addhi	r6, r6, r4
 800d49e:	d800      	bhi.n	800d4a2 <__udivdi3+0x5a>
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	1af6      	subs	r6, r6, r3
 800d4a4:	fbb6 f3f2 	udiv	r3, r6, r2
 800d4a8:	b2ad      	uxth	r5, r5
 800d4aa:	fb02 6213 	mls	r2, r2, r3, r6
 800d4ae:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800d4b2:	fb07 f703 	mul.w	r7, r7, r3
 800d4b6:	4297      	cmp	r7, r2
 800d4b8:	d909      	bls.n	800d4ce <__udivdi3+0x86>
 800d4ba:	1912      	adds	r2, r2, r4
 800d4bc:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800d4c0:	f080 80ea 	bcs.w	800d698 <__udivdi3+0x250>
 800d4c4:	4297      	cmp	r7, r2
 800d4c6:	bf88      	it	hi
 800d4c8:	3b02      	subhi	r3, #2
 800d4ca:	f240 80e5 	bls.w	800d698 <__udivdi3+0x250>
 800d4ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800d4d8:	4770      	bx	lr
 800d4da:	428b      	cmp	r3, r1
 800d4dc:	bf84      	itt	hi
 800d4de:	2100      	movhi	r1, #0
 800d4e0:	4608      	movhi	r0, r1
 800d4e2:	d8f7      	bhi.n	800d4d4 <__udivdi3+0x8c>
 800d4e4:	fab3 f483 	clz	r4, r3
 800d4e8:	2c00      	cmp	r4, #0
 800d4ea:	d149      	bne.n	800d580 <__udivdi3+0x138>
 800d4ec:	428b      	cmp	r3, r1
 800d4ee:	bf28      	it	cs
 800d4f0:	4282      	cmpcs	r2, r0
 800d4f2:	bf8c      	ite	hi
 800d4f4:	2100      	movhi	r1, #0
 800d4f6:	2101      	movls	r1, #1
 800d4f8:	bf9c      	itt	ls
 800d4fa:	2001      	movls	r0, #1
 800d4fc:	4621      	movls	r1, r4
 800d4fe:	d9e9      	bls.n	800d4d4 <__udivdi3+0x8c>
 800d500:	4608      	mov	r0, r1
 800d502:	e7e7      	b.n	800d4d4 <__udivdi3+0x8c>
 800d504:	b912      	cbnz	r2, 800d50c <__udivdi3+0xc4>
 800d506:	2401      	movs	r4, #1
 800d508:	fbb4 f4f2 	udiv	r4, r4, r2
 800d50c:	fab4 f784 	clz	r7, r4
 800d510:	2f00      	cmp	r7, #0
 800d512:	f040 8082 	bne.w	800d61a <__udivdi3+0x1d2>
 800d516:	1b0b      	subs	r3, r1, r4
 800d518:	0c26      	lsrs	r6, r4, #16
 800d51a:	b2a7      	uxth	r7, r4
 800d51c:	2101      	movs	r1, #1
 800d51e:	fbb3 f0f6 	udiv	r0, r3, r6
 800d522:	0c2a      	lsrs	r2, r5, #16
 800d524:	fb06 3310 	mls	r3, r6, r0, r3
 800d528:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800d52c:	fb07 f200 	mul.w	r2, r7, r0
 800d530:	429a      	cmp	r2, r3
 800d532:	d90a      	bls.n	800d54a <__udivdi3+0x102>
 800d534:	191b      	adds	r3, r3, r4
 800d536:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d53a:	f080 80af 	bcs.w	800d69c <__udivdi3+0x254>
 800d53e:	429a      	cmp	r2, r3
 800d540:	bf84      	itt	hi
 800d542:	3802      	subhi	r0, #2
 800d544:	191b      	addhi	r3, r3, r4
 800d546:	f240 80a9 	bls.w	800d69c <__udivdi3+0x254>
 800d54a:	1a9b      	subs	r3, r3, r2
 800d54c:	fbb3 f2f6 	udiv	r2, r3, r6
 800d550:	b2ad      	uxth	r5, r5
 800d552:	fb06 3312 	mls	r3, r6, r2, r3
 800d556:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800d55a:	fb07 f702 	mul.w	r7, r7, r2
 800d55e:	42af      	cmp	r7, r5
 800d560:	d909      	bls.n	800d576 <__udivdi3+0x12e>
 800d562:	192c      	adds	r4, r5, r4
 800d564:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 800d568:	f080 809a 	bcs.w	800d6a0 <__udivdi3+0x258>
 800d56c:	42a7      	cmp	r7, r4
 800d56e:	bf88      	it	hi
 800d570:	3a02      	subhi	r2, #2
 800d572:	f240 8095 	bls.w	800d6a0 <__udivdi3+0x258>
 800d576:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800d57a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800d57e:	4770      	bx	lr
 800d580:	f1c4 0520 	rsb	r5, r4, #32
 800d584:	fa22 f605 	lsr.w	r6, r2, r5
 800d588:	40a3      	lsls	r3, r4
 800d58a:	4333      	orrs	r3, r6
 800d58c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800d590:	fa21 f605 	lsr.w	r6, r1, r5
 800d594:	40a1      	lsls	r1, r4
 800d596:	fa20 f505 	lsr.w	r5, r0, r5
 800d59a:	fbb6 fcf8 	udiv	ip, r6, r8
 800d59e:	430d      	orrs	r5, r1
 800d5a0:	fb08 661c 	mls	r6, r8, ip, r6
 800d5a4:	0c29      	lsrs	r1, r5, #16
 800d5a6:	fa1f f983 	uxth.w	r9, r3
 800d5aa:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 800d5ae:	fb09 f70c 	mul.w	r7, r9, ip
 800d5b2:	42b7      	cmp	r7, r6
 800d5b4:	fa02 f204 	lsl.w	r2, r2, r4
 800d5b8:	d904      	bls.n	800d5c4 <__udivdi3+0x17c>
 800d5ba:	18f6      	adds	r6, r6, r3
 800d5bc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800d5c0:	d376      	bcc.n	800d6b0 <__udivdi3+0x268>
 800d5c2:	468c      	mov	ip, r1
 800d5c4:	1bf6      	subs	r6, r6, r7
 800d5c6:	fbb6 f7f8 	udiv	r7, r6, r8
 800d5ca:	fb08 6617 	mls	r6, r8, r7, r6
 800d5ce:	b2ad      	uxth	r5, r5
 800d5d0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 800d5d4:	fb09 f607 	mul.w	r6, r9, r7
 800d5d8:	42ae      	cmp	r6, r5
 800d5da:	d904      	bls.n	800d5e6 <__udivdi3+0x19e>
 800d5dc:	18ed      	adds	r5, r5, r3
 800d5de:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800d5e2:	d35f      	bcc.n	800d6a4 <__udivdi3+0x25c>
 800d5e4:	460f      	mov	r7, r1
 800d5e6:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
 800d5ea:	1bad      	subs	r5, r5, r6
 800d5ec:	fba7 2302 	umull	r2, r3, r7, r2
 800d5f0:	429d      	cmp	r5, r3
 800d5f2:	d30d      	bcc.n	800d610 <__udivdi3+0x1c8>
 800d5f4:	fa00 f104 	lsl.w	r1, r0, r4
 800d5f8:	bf14      	ite	ne
 800d5fa:	2500      	movne	r5, #0
 800d5fc:	2501      	moveq	r5, #1
 800d5fe:	4291      	cmp	r1, r2
 800d600:	bf2c      	ite	cs
 800d602:	2100      	movcs	r1, #0
 800d604:	f005 0101 	andcc.w	r1, r5, #1
 800d608:	4638      	mov	r0, r7
 800d60a:	2900      	cmp	r1, #0
 800d60c:	f43f af62 	beq.w	800d4d4 <__udivdi3+0x8c>
 800d610:	1e78      	subs	r0, r7, #1
 800d612:	2100      	movs	r1, #0
 800d614:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800d618:	4770      	bx	lr
 800d61a:	40bc      	lsls	r4, r7
 800d61c:	f1c7 0320 	rsb	r3, r7, #32
 800d620:	fa21 fc03 	lsr.w	ip, r1, r3
 800d624:	0c26      	lsrs	r6, r4, #16
 800d626:	40b9      	lsls	r1, r7
 800d628:	fa20 f303 	lsr.w	r3, r0, r3
 800d62c:	430b      	orrs	r3, r1
 800d62e:	fbbc f1f6 	udiv	r1, ip, r6
 800d632:	0c1a      	lsrs	r2, r3, #16
 800d634:	fb06 cc11 	mls	ip, r6, r1, ip
 800d638:	fa1f f884 	uxth.w	r8, r4
 800d63c:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 800d640:	fb08 f201 	mul.w	r2, r8, r1
 800d644:	4562      	cmp	r2, ip
 800d646:	fa00 f507 	lsl.w	r5, r0, r7
 800d64a:	d909      	bls.n	800d660 <__udivdi3+0x218>
 800d64c:	eb1c 0c04 	adds.w	ip, ip, r4
 800d650:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800d654:	d233      	bcs.n	800d6be <__udivdi3+0x276>
 800d656:	4562      	cmp	r2, ip
 800d658:	bf84      	itt	hi
 800d65a:	3902      	subhi	r1, #2
 800d65c:	44a4      	addhi	ip, r4
 800d65e:	d92e      	bls.n	800d6be <__udivdi3+0x276>
 800d660:	ebc2 0c0c 	rsb	ip, r2, ip
 800d664:	fbbc f2f6 	udiv	r2, ip, r6
 800d668:	b29b      	uxth	r3, r3
 800d66a:	fb06 cc12 	mls	ip, r6, r2, ip
 800d66e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800d672:	fb08 f002 	mul.w	r0, r8, r2
 800d676:	4298      	cmp	r0, r3
 800d678:	d909      	bls.n	800d68e <__udivdi3+0x246>
 800d67a:	191b      	adds	r3, r3, r4
 800d67c:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 800d680:	d204      	bcs.n	800d68c <__udivdi3+0x244>
 800d682:	4298      	cmp	r0, r3
 800d684:	bf84      	itt	hi
 800d686:	3a02      	subhi	r2, #2
 800d688:	191b      	addhi	r3, r3, r4
 800d68a:	d800      	bhi.n	800d68e <__udivdi3+0x246>
 800d68c:	463a      	mov	r2, r7
 800d68e:	1a1b      	subs	r3, r3, r0
 800d690:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800d694:	4647      	mov	r7, r8
 800d696:	e742      	b.n	800d51e <__udivdi3+0xd6>
 800d698:	460b      	mov	r3, r1
 800d69a:	e718      	b.n	800d4ce <__udivdi3+0x86>
 800d69c:	4660      	mov	r0, ip
 800d69e:	e754      	b.n	800d54a <__udivdi3+0x102>
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	e768      	b.n	800d576 <__udivdi3+0x12e>
 800d6a4:	42ae      	cmp	r6, r5
 800d6a6:	bf84      	itt	hi
 800d6a8:	3f02      	subhi	r7, #2
 800d6aa:	18ed      	addhi	r5, r5, r3
 800d6ac:	d89b      	bhi.n	800d5e6 <__udivdi3+0x19e>
 800d6ae:	e799      	b.n	800d5e4 <__udivdi3+0x19c>
 800d6b0:	42b7      	cmp	r7, r6
 800d6b2:	bf84      	itt	hi
 800d6b4:	f1ac 0c02 	subhi.w	ip, ip, #2
 800d6b8:	18f6      	addhi	r6, r6, r3
 800d6ba:	d883      	bhi.n	800d5c4 <__udivdi3+0x17c>
 800d6bc:	e781      	b.n	800d5c2 <__udivdi3+0x17a>
 800d6be:	4601      	mov	r1, r0
 800d6c0:	e7ce      	b.n	800d660 <__udivdi3+0x218>
 800d6c2:	bf00      	nop

0800d6c4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800d6c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d6c6:	e003      	b.n	800d6d0 <LoopCopyDataInit>

0800d6c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d6c8:	4b0b      	ldr	r3, [pc, #44]	; (800d6f8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800d6ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d6cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d6ce:	3104      	adds	r1, #4

0800d6d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800d6d0:	480a      	ldr	r0, [pc, #40]	; (800d6fc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800d6d2:	4b0b      	ldr	r3, [pc, #44]	; (800d700 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800d6d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d6d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d6d8:	d3f6      	bcc.n	800d6c8 <CopyDataInit>
  ldr  r2, =_sbss
 800d6da:	4a0a      	ldr	r2, [pc, #40]	; (800d704 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800d6dc:	e002      	b.n	800d6e4 <LoopFillZerobss>

0800d6de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800d6de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d6e0:	f842 3b04 	str.w	r3, [r2], #4

0800d6e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 800d6e4:	4b08      	ldr	r3, [pc, #32]	; (800d708 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800d6e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d6e8:	d3f9      	bcc.n	800d6de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d6ea:	f7fa fa4f 	bl	8007b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d6ee:	f000 fa8b 	bl	800dc08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d6f2:	f7f2 fd99 	bl	8000228 <main>
  bx  lr
 800d6f6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800d6f8:	0801464c 	.word	0x0801464c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4

LoopCopyDataInit:
  ldr  r0, =_sdata
 800d6fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d700:	20000a1c 	.word	0x20000a1c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800d704:	20000a1c 	.word	0x20000a1c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4

LoopFillZerobss:
  ldr  r3, = _ebss
 800d708:	20001b30 	.word	0x20001b30

0800d70c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d70c:	e7fe      	b.n	800d70c <ADC_IRQHandler>
	...

0800d710 <abort>:
 800d710:	b508      	push	{r3, lr}
 800d712:	2006      	movs	r0, #6
 800d714:	f001 f946 	bl	800e9a4 <raise>
 800d718:	2001      	movs	r0, #1
 800d71a:	f006 ff93 	bl	8014644 <_etext>
 800d71e:	bf00      	nop

0800d720 <__assert_func>:
 800d720:	b500      	push	{lr}
 800d722:	f240 5488 	movw	r4, #1416	; 0x588
 800d726:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d72a:	4605      	mov	r5, r0
 800d72c:	6824      	ldr	r4, [r4, #0]
 800d72e:	b085      	sub	sp, #20
 800d730:	460e      	mov	r6, r1
 800d732:	68e0      	ldr	r0, [r4, #12]
 800d734:	b182      	cbz	r2, 800d758 <__assert_func+0x38>
 800d736:	f244 24f4 	movw	r4, #17140	; 0x42f4
 800d73a:	f6c0 0401 	movt	r4, #2049	; 0x801
 800d73e:	f244 3104 	movw	r1, #17156	; 0x4304
 800d742:	9202      	str	r2, [sp, #8]
 800d744:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d748:	461a      	mov	r2, r3
 800d74a:	9600      	str	r6, [sp, #0]
 800d74c:	462b      	mov	r3, r5
 800d74e:	9401      	str	r4, [sp, #4]
 800d750:	f000 f98c 	bl	800da6c <fiprintf>
 800d754:	f7ff ffdc 	bl	800d710 <abort>
 800d758:	f244 3400 	movw	r4, #17152	; 0x4300
 800d75c:	f6c0 0401 	movt	r4, #2049	; 0x801
 800d760:	4622      	mov	r2, r4
 800d762:	e7ec      	b.n	800d73e <__assert_func+0x1e>

0800d764 <__assert>:
 800d764:	b508      	push	{r3, lr}
 800d766:	4613      	mov	r3, r2
 800d768:	2200      	movs	r2, #0
 800d76a:	f7ff ffd9 	bl	800d720 <__assert_func>
 800d76e:	bf00      	nop

0800d770 <_fgets_r>:
 800d770:	2a01      	cmp	r2, #1
 800d772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d776:	4616      	mov	r6, r2
 800d778:	468a      	mov	sl, r1
 800d77a:	461d      	mov	r5, r3
 800d77c:	4681      	mov	r9, r0
 800d77e:	dd43      	ble.n	800d808 <_fgets_r+0x98>
 800d780:	b110      	cbz	r0, 800d788 <_fgets_r+0x18>
 800d782:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d784:	2b00      	cmp	r3, #0
 800d786:	d03c      	beq.n	800d802 <_fgets_r+0x92>
 800d788:	3e01      	subs	r6, #1
 800d78a:	46d0      	mov	r8, sl
 800d78c:	e018      	b.n	800d7c0 <_fgets_r+0x50>
 800d78e:	682f      	ldr	r7, [r5, #0]
 800d790:	42b4      	cmp	r4, r6
 800d792:	bf28      	it	cs
 800d794:	4634      	movcs	r4, r6
 800d796:	4622      	mov	r2, r4
 800d798:	210a      	movs	r1, #10
 800d79a:	4638      	mov	r0, r7
 800d79c:	f000 fd24 	bl	800e1e8 <memchr>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	4622      	mov	r2, r4
 800d7a8:	b9e3      	cbnz	r3, 800d7e4 <_fgets_r+0x74>
 800d7aa:	e895 0088 	ldmia.w	r5, {r3, r7}
 800d7ae:	4423      	add	r3, r4
 800d7b0:	1b3f      	subs	r7, r7, r4
 800d7b2:	e885 0088 	stmia.w	r5, {r3, r7}
 800d7b6:	f7ff fad9 	bl	800cd6c <memcpy>
 800d7ba:	1b36      	subs	r6, r6, r4
 800d7bc:	44a0      	add	r8, r4
 800d7be:	d00b      	beq.n	800d7d8 <_fgets_r+0x68>
 800d7c0:	686c      	ldr	r4, [r5, #4]
 800d7c2:	2c00      	cmp	r4, #0
 800d7c4:	d1e3      	bne.n	800d78e <_fgets_r+0x1e>
 800d7c6:	4648      	mov	r0, r9
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	f000 ffcb 	bl	800e764 <__srefill_r>
 800d7ce:	b908      	cbnz	r0, 800d7d4 <_fgets_r+0x64>
 800d7d0:	686c      	ldr	r4, [r5, #4]
 800d7d2:	e7dc      	b.n	800d78e <_fgets_r+0x1e>
 800d7d4:	45d0      	cmp	r8, sl
 800d7d6:	d017      	beq.n	800d808 <_fgets_r+0x98>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f888 3000 	strb.w	r3, [r8]
 800d7de:	4650      	mov	r0, sl
 800d7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	686a      	ldr	r2, [r5, #4]
 800d7e8:	602b      	str	r3, [r5, #0]
 800d7ea:	1bdc      	subs	r4, r3, r7
 800d7ec:	1b12      	subs	r2, r2, r4
 800d7ee:	606a      	str	r2, [r5, #4]
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	f7ff fabb 	bl	800cd6c <memcpy>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	f808 3004 	strb.w	r3, [r8, r4]
 800d7fc:	4650      	mov	r0, sl
 800d7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d802:	f000 f841 	bl	800d888 <__sinit>
 800d806:	e7bf      	b.n	800d788 <_fgets_r+0x18>
 800d808:	2000      	movs	r0, #0
 800d80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80e:	bf00      	nop

0800d810 <fgets>:
 800d810:	b430      	push	{r4, r5}
 800d812:	f240 5488 	movw	r4, #1416	; 0x588
 800d816:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800d81a:	460d      	mov	r5, r1
 800d81c:	4613      	mov	r3, r2
 800d81e:	4601      	mov	r1, r0
 800d820:	462a      	mov	r2, r5
 800d822:	6820      	ldr	r0, [r4, #0]
 800d824:	bc30      	pop	{r4, r5}
 800d826:	f7ff bfa3 	b.w	800d770 <_fgets_r>
 800d82a:	bf00      	nop

0800d82c <__fp_lock>:
 800d82c:	2000      	movs	r0, #0
 800d82e:	4770      	bx	lr

0800d830 <__fp_unlock>:
 800d830:	2000      	movs	r0, #0
 800d832:	4770      	bx	lr

0800d834 <_cleanup_r>:
 800d834:	f242 0115 	movw	r1, #8213	; 0x2015
 800d838:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d83c:	f000 b952 	b.w	800dae4 <_fwalk>

0800d840 <__sfmoreglue>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	1e4b      	subs	r3, r1, #1
 800d844:	2568      	movs	r5, #104	; 0x68
 800d846:	fb05 f503 	mul.w	r5, r5, r3
 800d84a:	460e      	mov	r6, r1
 800d84c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d850:	f000 fa18 	bl	800dc84 <_malloc_r>
 800d854:	4604      	mov	r4, r0
 800d856:	b140      	cbz	r0, 800d86a <__sfmoreglue+0x2a>
 800d858:	2100      	movs	r1, #0
 800d85a:	300c      	adds	r0, #12
 800d85c:	6066      	str	r6, [r4, #4]
 800d85e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d862:	6021      	str	r1, [r4, #0]
 800d864:	60a0      	str	r0, [r4, #8]
 800d866:	f000 fd07 	bl	800e278 <memset>
 800d86a:	4620      	mov	r0, r4
 800d86c:	bd70      	pop	{r4, r5, r6, pc}
 800d86e:	bf00      	nop

0800d870 <_cleanup>:
 800d870:	f244 433c 	movw	r3, #17468	; 0x443c
 800d874:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d878:	f242 0115 	movw	r1, #8213	; 0x2015
 800d87c:	6818      	ldr	r0, [r3, #0]
 800d87e:	f6c0 0101 	movt	r1, #2049	; 0x801
 800d882:	f000 b92f 	b.w	800dae4 <_fwalk>
 800d886:	bf00      	nop

0800d888 <__sinit>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800d88e:	b083      	sub	sp, #12
 800d890:	4607      	mov	r7, r0
 800d892:	2c00      	cmp	r4, #0
 800d894:	d170      	bne.n	800d978 <__sinit+0xf0>
 800d896:	6845      	ldr	r5, [r0, #4]
 800d898:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800d89c:	f64d 0335 	movw	r3, #55349	; 0xd835
 800d8a0:	f6c0 0300 	movt	r3, #2048	; 0x800
 800d8a4:	2003      	movs	r0, #3
 800d8a6:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 800d8aa:	2204      	movs	r2, #4
 800d8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8ae:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
 800d8b2:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 800d8b6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800d8ba:	81aa      	strh	r2, [r5, #12]
 800d8bc:	602c      	str	r4, [r5, #0]
 800d8be:	606c      	str	r4, [r5, #4]
 800d8c0:	60ac      	str	r4, [r5, #8]
 800d8c2:	666c      	str	r4, [r5, #100]	; 0x64
 800d8c4:	81ec      	strh	r4, [r5, #14]
 800d8c6:	612c      	str	r4, [r5, #16]
 800d8c8:	616c      	str	r4, [r5, #20]
 800d8ca:	61ac      	str	r4, [r5, #24]
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	2208      	movs	r2, #8
 800d8d0:	f000 fcd2 	bl	800e278 <memset>
 800d8d4:	f64e 2b15 	movw	fp, #59925	; 0xea15
 800d8d8:	68be      	ldr	r6, [r7, #8]
 800d8da:	61ed      	str	r5, [r5, #28]
 800d8dc:	f64e 2a3d 	movw	sl, #59965	; 0xea3d
 800d8e0:	f64e 2975 	movw	r9, #60021	; 0xea75
 800d8e4:	f64e 2895 	movw	r8, #60053	; 0xea95
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	f6c0 0b00 	movt	fp, #2048	; 0x800
 800d8ee:	f6c0 0a00 	movt	sl, #2048	; 0x800
 800d8f2:	f6c0 0900 	movt	r9, #2048	; 0x800
 800d8f6:	f6c0 0800 	movt	r8, #2048	; 0x800
 800d8fa:	2209      	movs	r2, #9
 800d8fc:	f8c5 b020 	str.w	fp, [r5, #32]
 800d900:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800d904:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800d908:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800d90c:	4621      	mov	r1, r4
 800d90e:	81f3      	strh	r3, [r6, #14]
 800d910:	81b2      	strh	r2, [r6, #12]
 800d912:	6034      	str	r4, [r6, #0]
 800d914:	6074      	str	r4, [r6, #4]
 800d916:	60b4      	str	r4, [r6, #8]
 800d918:	6674      	str	r4, [r6, #100]	; 0x64
 800d91a:	6134      	str	r4, [r6, #16]
 800d91c:	6174      	str	r4, [r6, #20]
 800d91e:	61b4      	str	r4, [r6, #24]
 800d920:	2208      	movs	r2, #8
 800d922:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800d926:	9301      	str	r3, [sp, #4]
 800d928:	f000 fca6 	bl	800e278 <memset>
 800d92c:	68fd      	ldr	r5, [r7, #12]
 800d92e:	f8c6 b020 	str.w	fp, [r6, #32]
 800d932:	2012      	movs	r0, #18
 800d934:	2202      	movs	r2, #2
 800d936:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800d93a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800d93e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800d942:	61f6      	str	r6, [r6, #28]
 800d944:	4621      	mov	r1, r4
 800d946:	81a8      	strh	r0, [r5, #12]
 800d948:	81ea      	strh	r2, [r5, #14]
 800d94a:	602c      	str	r4, [r5, #0]
 800d94c:	606c      	str	r4, [r5, #4]
 800d94e:	60ac      	str	r4, [r5, #8]
 800d950:	666c      	str	r4, [r5, #100]	; 0x64
 800d952:	612c      	str	r4, [r5, #16]
 800d954:	616c      	str	r4, [r5, #20]
 800d956:	61ac      	str	r4, [r5, #24]
 800d958:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800d95c:	2208      	movs	r2, #8
 800d95e:	f000 fc8b 	bl	800e278 <memset>
 800d962:	9b01      	ldr	r3, [sp, #4]
 800d964:	f8c5 b020 	str.w	fp, [r5, #32]
 800d968:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 800d96c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800d970:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800d974:	61ed      	str	r5, [r5, #28]
 800d976:	63bb      	str	r3, [r7, #56]	; 0x38
 800d978:	b003      	add	sp, #12
 800d97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97e:	bf00      	nop

0800d980 <__sfp>:
 800d980:	f244 433c 	movw	r3, #17468	; 0x443c
 800d984:	f6c0 0301 	movt	r3, #2049	; 0x801
 800d988:	b570      	push	{r4, r5, r6, lr}
 800d98a:	681d      	ldr	r5, [r3, #0]
 800d98c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d98e:	4606      	mov	r6, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d02c      	beq.n	800d9ee <__sfp+0x6e>
 800d994:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800d998:	686b      	ldr	r3, [r5, #4]
 800d99a:	68ac      	ldr	r4, [r5, #8]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	d505      	bpl.n	800d9ac <__sfp+0x2c>
 800d9a0:	e021      	b.n	800d9e6 <__sfp+0x66>
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800d9aa:	d01c      	beq.n	800d9e6 <__sfp+0x66>
 800d9ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	d1f6      	bne.n	800d9a2 <__sfp+0x22>
 800d9b4:	2500      	movs	r5, #0
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9bc:	81e2      	strh	r2, [r4, #14]
 800d9be:	81a3      	strh	r3, [r4, #12]
 800d9c0:	6665      	str	r5, [r4, #100]	; 0x64
 800d9c2:	6025      	str	r5, [r4, #0]
 800d9c4:	60a5      	str	r5, [r4, #8]
 800d9c6:	6065      	str	r5, [r4, #4]
 800d9c8:	6125      	str	r5, [r4, #16]
 800d9ca:	6165      	str	r5, [r4, #20]
 800d9cc:	61a5      	str	r5, [r4, #24]
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d9d4:	2208      	movs	r2, #8
 800d9d6:	f000 fc4f 	bl	800e278 <memset>
 800d9da:	6325      	str	r5, [r4, #48]	; 0x30
 800d9dc:	6365      	str	r5, [r4, #52]	; 0x34
 800d9de:	6465      	str	r5, [r4, #68]	; 0x44
 800d9e0:	64a5      	str	r5, [r4, #72]	; 0x48
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	bd70      	pop	{r4, r5, r6, pc}
 800d9e6:	682b      	ldr	r3, [r5, #0]
 800d9e8:	b12b      	cbz	r3, 800d9f6 <__sfp+0x76>
 800d9ea:	461d      	mov	r5, r3
 800d9ec:	e7d4      	b.n	800d998 <__sfp+0x18>
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f7ff ff4a 	bl	800d888 <__sinit>
 800d9f4:	e7ce      	b.n	800d994 <__sfp+0x14>
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	2104      	movs	r1, #4
 800d9fa:	f7ff ff21 	bl	800d840 <__sfmoreglue>
 800d9fe:	6028      	str	r0, [r5, #0]
 800da00:	b108      	cbz	r0, 800da06 <__sfp+0x86>
 800da02:	4605      	mov	r5, r0
 800da04:	e7c8      	b.n	800d998 <__sfp+0x18>
 800da06:	230c      	movs	r3, #12
 800da08:	6033      	str	r3, [r6, #0]
 800da0a:	bd70      	pop	{r4, r5, r6, pc}

0800da0c <__sfp_lock_acquire>:
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop

0800da10 <__sfp_lock_release>:
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop

0800da14 <__sinit_lock_acquire>:
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop

0800da18 <__sinit_lock_release>:
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop

0800da1c <__fp_lock_all>:
 800da1c:	f240 5388 	movw	r3, #1416	; 0x588
 800da20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da24:	f64d 012d 	movw	r1, #55341	; 0xd82d
 800da28:	6818      	ldr	r0, [r3, #0]
 800da2a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800da2e:	f000 b859 	b.w	800dae4 <_fwalk>
 800da32:	bf00      	nop

0800da34 <__fp_unlock_all>:
 800da34:	f240 5388 	movw	r3, #1416	; 0x588
 800da38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800da3c:	f64d 0131 	movw	r1, #55345	; 0xd831
 800da40:	6818      	ldr	r0, [r3, #0]
 800da42:	f6c0 0100 	movt	r1, #2048	; 0x800
 800da46:	f000 b84d 	b.w	800dae4 <_fwalk>
 800da4a:	bf00      	nop

0800da4c <_fiprintf_r>:
 800da4c:	b40c      	push	{r2, r3}
 800da4e:	b510      	push	{r4, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	ac04      	add	r4, sp, #16
 800da54:	f854 2b04 	ldr.w	r2, [r4], #4
 800da58:	4623      	mov	r3, r4
 800da5a:	9401      	str	r4, [sp, #4]
 800da5c:	f001 f898 	bl	800eb90 <_vfiprintf_r>
 800da60:	b002      	add	sp, #8
 800da62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da66:	b002      	add	sp, #8
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop

0800da6c <fiprintf>:
 800da6c:	b40e      	push	{r1, r2, r3}
 800da6e:	b530      	push	{r4, r5, lr}
 800da70:	b082      	sub	sp, #8
 800da72:	ac05      	add	r4, sp, #20
 800da74:	f240 5588 	movw	r5, #1416	; 0x588
 800da78:	f854 2b04 	ldr.w	r2, [r4], #4
 800da7c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800da80:	4601      	mov	r1, r0
 800da82:	4623      	mov	r3, r4
 800da84:	6828      	ldr	r0, [r5, #0]
 800da86:	9401      	str	r4, [sp, #4]
 800da88:	f001 f882 	bl	800eb90 <_vfiprintf_r>
 800da8c:	b002      	add	sp, #8
 800da8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da92:	b003      	add	sp, #12
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop

0800da98 <_fprintf_r>:
 800da98:	b40c      	push	{r2, r3}
 800da9a:	b510      	push	{r4, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	ac04      	add	r4, sp, #16
 800daa0:	f854 2b04 	ldr.w	r2, [r4], #4
 800daa4:	4623      	mov	r3, r4
 800daa6:	9401      	str	r4, [sp, #4]
 800daa8:	f001 feba 	bl	800f820 <_vfprintf_r>
 800daac:	b002      	add	sp, #8
 800daae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dab2:	b002      	add	sp, #8
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop

0800dab8 <fprintf>:
 800dab8:	b40e      	push	{r1, r2, r3}
 800daba:	b530      	push	{r4, r5, lr}
 800dabc:	b082      	sub	sp, #8
 800dabe:	ac05      	add	r4, sp, #20
 800dac0:	f240 5588 	movw	r5, #1416	; 0x588
 800dac4:	f854 2b04 	ldr.w	r2, [r4], #4
 800dac8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800dacc:	4601      	mov	r1, r0
 800dace:	4623      	mov	r3, r4
 800dad0:	6828      	ldr	r0, [r5, #0]
 800dad2:	9401      	str	r4, [sp, #4]
 800dad4:	f001 fea4 	bl	800f820 <_vfprintf_r>
 800dad8:	b002      	add	sp, #8
 800dada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dade:	b003      	add	sp, #12
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop

0800dae4 <_fwalk>:
 800dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 800daec:	4688      	mov	r8, r1
 800daee:	d01a      	beq.n	800db26 <_fwalk+0x42>
 800daf0:	2600      	movs	r6, #0
 800daf2:	687d      	ldr	r5, [r7, #4]
 800daf4:	68bc      	ldr	r4, [r7, #8]
 800daf6:	3d01      	subs	r5, #1
 800daf8:	d40f      	bmi.n	800db1a <_fwalk+0x36>
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800db02:	d906      	bls.n	800db12 <_fwalk+0x2e>
 800db04:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800db08:	3301      	adds	r3, #1
 800db0a:	4620      	mov	r0, r4
 800db0c:	d001      	beq.n	800db12 <_fwalk+0x2e>
 800db0e:	47c0      	blx	r8
 800db10:	4306      	orrs	r6, r0
 800db12:	1c6b      	adds	r3, r5, #1
 800db14:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800db18:	d1ef      	bne.n	800dafa <_fwalk+0x16>
 800db1a:	683f      	ldr	r7, [r7, #0]
 800db1c:	2f00      	cmp	r7, #0
 800db1e:	d1e8      	bne.n	800daf2 <_fwalk+0xe>
 800db20:	4630      	mov	r0, r6
 800db22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db26:	463e      	mov	r6, r7
 800db28:	4630      	mov	r0, r6
 800db2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db2e:	bf00      	nop

0800db30 <_fwalk_reent>:
 800db30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db34:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
 800db38:	4680      	mov	r8, r0
 800db3a:	4689      	mov	r9, r1
 800db3c:	d01b      	beq.n	800db76 <_fwalk_reent+0x46>
 800db3e:	2700      	movs	r7, #0
 800db40:	6875      	ldr	r5, [r6, #4]
 800db42:	68b4      	ldr	r4, [r6, #8]
 800db44:	3d01      	subs	r5, #1
 800db46:	d410      	bmi.n	800db6a <_fwalk_reent+0x3a>
 800db48:	89a3      	ldrh	r3, [r4, #12]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800db50:	d907      	bls.n	800db62 <_fwalk_reent+0x32>
 800db52:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800db56:	3301      	adds	r3, #1
 800db58:	4621      	mov	r1, r4
 800db5a:	4640      	mov	r0, r8
 800db5c:	d001      	beq.n	800db62 <_fwalk_reent+0x32>
 800db5e:	47c8      	blx	r9
 800db60:	4307      	orrs	r7, r0
 800db62:	1c6a      	adds	r2, r5, #1
 800db64:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800db68:	d1ee      	bne.n	800db48 <_fwalk_reent+0x18>
 800db6a:	6836      	ldr	r6, [r6, #0]
 800db6c:	2e00      	cmp	r6, #0
 800db6e:	d1e7      	bne.n	800db40 <_fwalk_reent+0x10>
 800db70:	4638      	mov	r0, r7
 800db72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db76:	4637      	mov	r7, r6
 800db78:	4638      	mov	r0, r7
 800db7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db7e:	bf00      	nop

0800db80 <_fwrite_r>:
 800db80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db84:	b086      	sub	sp, #24
 800db86:	fb02 f503 	mul.w	r5, r2, r3
 800db8a:	4617      	mov	r7, r2
 800db8c:	4698      	mov	r8, r3
 800db8e:	aa01      	add	r2, sp, #4
 800db90:	2301      	movs	r3, #1
 800db92:	9101      	str	r1, [sp, #4]
 800db94:	9502      	str	r5, [sp, #8]
 800db96:	9505      	str	r5, [sp, #20]
 800db98:	9203      	str	r2, [sp, #12]
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800db9e:	4606      	mov	r6, r0
 800dba0:	b108      	cbz	r0, 800dba6 <_fwrite_r+0x26>
 800dba2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dba4:	b1db      	cbz	r3, 800dbde <_fwrite_r+0x5e>
 800dba6:	89a2      	ldrh	r2, [r4, #12]
 800dba8:	0493      	lsls	r3, r2, #18
 800dbaa:	bf5f      	itttt	pl
 800dbac:	6e63      	ldrpl	r3, [r4, #100]	; 0x64
 800dbae:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800dbb2:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 800dbb6:	81a2      	strhpl	r2, [r4, #12]
 800dbb8:	bf58      	it	pl
 800dbba:	6663      	strpl	r3, [r4, #100]	; 0x64
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	aa03      	add	r2, sp, #12
 800dbc2:	f004 fc9d 	bl	8012500 <__sfvwrite_r>
 800dbc6:	b130      	cbz	r0, 800dbd6 <_fwrite_r+0x56>
 800dbc8:	9805      	ldr	r0, [sp, #20]
 800dbca:	1a28      	subs	r0, r5, r0
 800dbcc:	fbb0 f0f7 	udiv	r0, r0, r7
 800dbd0:	b006      	add	sp, #24
 800dbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	b006      	add	sp, #24
 800dbda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbde:	f7ff fe53 	bl	800d888 <__sinit>
 800dbe2:	e7e0      	b.n	800dba6 <_fwrite_r+0x26>

0800dbe4 <fwrite>:
 800dbe4:	b530      	push	{r4, r5, lr}
 800dbe6:	f240 5488 	movw	r4, #1416	; 0x588
 800dbea:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800dbee:	b083      	sub	sp, #12
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	6820      	ldr	r0, [r4, #0]
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	f7ff ffbf 	bl	800db80 <_fwrite_r>
 800dc02:	b003      	add	sp, #12
 800dc04:	bd30      	pop	{r4, r5, pc}
 800dc06:	bf00      	nop

0800dc08 <__libc_init_array>:
 800dc08:	b570      	push	{r4, r5, r6, lr}
 800dc0a:	f244 664c 	movw	r6, #17996	; 0x464c
 800dc0e:	f244 654c 	movw	r5, #17996	; 0x464c
 800dc12:	f6c0 0501 	movt	r5, #2049	; 0x801
 800dc16:	f6c0 0601 	movt	r6, #2049	; 0x801
 800dc1a:	1b76      	subs	r6, r6, r5
 800dc1c:	10b6      	asrs	r6, r6, #2
 800dc1e:	bf1c      	itt	ne
 800dc20:	3d04      	subne	r5, #4
 800dc22:	2400      	movne	r4, #0
 800dc24:	d005      	beq.n	800dc32 <__libc_init_array+0x2a>
 800dc26:	3401      	adds	r4, #1
 800dc28:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800dc2c:	4798      	blx	r3
 800dc2e:	42a6      	cmp	r6, r4
 800dc30:	d1f9      	bne.n	800dc26 <__libc_init_array+0x1e>
 800dc32:	f244 664c 	movw	r6, #17996	; 0x464c
 800dc36:	f244 654c 	movw	r5, #17996	; 0x464c
 800dc3a:	f6c0 0501 	movt	r5, #2049	; 0x801
 800dc3e:	f6c0 0601 	movt	r6, #2049	; 0x801
 800dc42:	1b76      	subs	r6, r6, r5
 800dc44:	f7f2 fec2 	bl	80009cc <_init>
 800dc48:	10b6      	asrs	r6, r6, #2
 800dc4a:	bf1c      	itt	ne
 800dc4c:	3d04      	subne	r5, #4
 800dc4e:	2400      	movne	r4, #0
 800dc50:	d006      	beq.n	800dc60 <__libc_init_array+0x58>
 800dc52:	3401      	adds	r4, #1
 800dc54:	f855 3f04 	ldr.w	r3, [r5, #4]!
 800dc58:	4798      	blx	r3
 800dc5a:	42a6      	cmp	r6, r4
 800dc5c:	d1f9      	bne.n	800dc52 <__libc_init_array+0x4a>
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	bd70      	pop	{r4, r5, r6, pc}
 800dc62:	bf00      	nop

0800dc64 <malloc>:
 800dc64:	f240 5388 	movw	r3, #1416	; 0x588
 800dc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc6c:	4601      	mov	r1, r0
 800dc6e:	6818      	ldr	r0, [r3, #0]
 800dc70:	f000 b808 	b.w	800dc84 <_malloc_r>

0800dc74 <free>:
 800dc74:	f240 5388 	movw	r3, #1416	; 0x588
 800dc78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dc7c:	4601      	mov	r1, r0
 800dc7e:	6818      	ldr	r0, [r3, #0]
 800dc80:	f004 bb70 	b.w	8012364 <_free_r>

0800dc84 <_malloc_r>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	f101 050b 	add.w	r5, r1, #11
 800dc8c:	2d16      	cmp	r5, #22
 800dc8e:	bf87      	ittee	hi
 800dc90:	f025 0507 	bichi.w	r5, r5, #7
 800dc94:	0feb      	lsrhi	r3, r5, #31
 800dc96:	2300      	movls	r3, #0
 800dc98:	2510      	movls	r5, #16
 800dc9a:	428d      	cmp	r5, r1
 800dc9c:	bf2c      	ite	cs
 800dc9e:	4619      	movcs	r1, r3
 800dca0:	f043 0101 	orrcc.w	r1, r3, #1
 800dca4:	b083      	sub	sp, #12
 800dca6:	4607      	mov	r7, r0
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	f040 80b5 	bne.w	800de18 <_malloc_r+0x194>
 800dcae:	f000 fb2d 	bl	800e30c <__malloc_lock>
 800dcb2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800dcb6:	d21f      	bcs.n	800dcf8 <_malloc_r+0x74>
 800dcb8:	f240 568c 	movw	r6, #1420	; 0x58c
 800dcbc:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800dcc0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 800dcc4:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 800dcc8:	68dc      	ldr	r4, [r3, #12]
 800dcca:	429c      	cmp	r4, r3
 800dccc:	f000 81f4 	beq.w	800e0b8 <_malloc_r+0x434>
 800dcd0:	6863      	ldr	r3, [r4, #4]
 800dcd2:	68e2      	ldr	r2, [r4, #12]
 800dcd4:	68a1      	ldr	r1, [r4, #8]
 800dcd6:	f023 0303 	bic.w	r3, r3, #3
 800dcda:	4423      	add	r3, r4
 800dcdc:	4638      	mov	r0, r7
 800dcde:	685d      	ldr	r5, [r3, #4]
 800dce0:	60ca      	str	r2, [r1, #12]
 800dce2:	f045 0501 	orr.w	r5, r5, #1
 800dce6:	6091      	str	r1, [r2, #8]
 800dce8:	605d      	str	r5, [r3, #4]
 800dcea:	f000 fb11 	bl	800e310 <__malloc_unlock>
 800dcee:	3408      	adds	r4, #8
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	b003      	add	sp, #12
 800dcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf8:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 800dcfc:	bf04      	itt	eq
 800dcfe:	217e      	moveq	r1, #126	; 0x7e
 800dd00:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 800dd04:	f040 808f 	bne.w	800de26 <_malloc_r+0x1a2>
 800dd08:	f240 568c 	movw	r6, #1420	; 0x58c
 800dd0c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800dd10:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800dd14:	68cc      	ldr	r4, [r1, #12]
 800dd16:	42a1      	cmp	r1, r4
 800dd18:	d106      	bne.n	800dd28 <_malloc_r+0xa4>
 800dd1a:	e00d      	b.n	800dd38 <_malloc_r+0xb4>
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f280 8163 	bge.w	800dfe8 <_malloc_r+0x364>
 800dd22:	68e4      	ldr	r4, [r4, #12]
 800dd24:	42a1      	cmp	r1, r4
 800dd26:	d007      	beq.n	800dd38 <_malloc_r+0xb4>
 800dd28:	6862      	ldr	r2, [r4, #4]
 800dd2a:	f022 0203 	bic.w	r2, r2, #3
 800dd2e:	1b53      	subs	r3, r2, r5
 800dd30:	2b0f      	cmp	r3, #15
 800dd32:	ddf3      	ble.n	800dd1c <_malloc_r+0x98>
 800dd34:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800dd38:	f10c 0c01 	add.w	ip, ip, #1
 800dd3c:	f240 538c 	movw	r3, #1420	; 0x58c
 800dd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800dd44:	6934      	ldr	r4, [r6, #16]
 800dd46:	f103 0e08 	add.w	lr, r3, #8
 800dd4a:	4574      	cmp	r4, lr
 800dd4c:	bf08      	it	eq
 800dd4e:	685a      	ldreq	r2, [r3, #4]
 800dd50:	d022      	beq.n	800dd98 <_malloc_r+0x114>
 800dd52:	6861      	ldr	r1, [r4, #4]
 800dd54:	f021 0103 	bic.w	r1, r1, #3
 800dd58:	1b4a      	subs	r2, r1, r5
 800dd5a:	2a0f      	cmp	r2, #15
 800dd5c:	f300 8190 	bgt.w	800e080 <_malloc_r+0x3fc>
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	f8c3 e014 	str.w	lr, [r3, #20]
 800dd66:	f8c3 e010 	str.w	lr, [r3, #16]
 800dd6a:	da67      	bge.n	800de3c <_malloc_r+0x1b8>
 800dd6c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dd70:	f080 815f 	bcs.w	800e032 <_malloc_r+0x3ae>
 800dd74:	08c9      	lsrs	r1, r1, #3
 800dd76:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 800dd7a:	ea4f 08a1 	mov.w	r8, r1, asr #2
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	6881      	ldr	r1, [r0, #8]
 800dd82:	60e0      	str	r0, [r4, #12]
 800dd84:	f04f 0901 	mov.w	r9, #1
 800dd88:	fa09 f808 	lsl.w	r8, r9, r8
 800dd8c:	ea48 0202 	orr.w	r2, r8, r2
 800dd90:	60a1      	str	r1, [r4, #8]
 800dd92:	605a      	str	r2, [r3, #4]
 800dd94:	6084      	str	r4, [r0, #8]
 800dd96:	60cc      	str	r4, [r1, #12]
 800dd98:	ea4f 03ac 	mov.w	r3, ip, asr #2
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	4098      	lsls	r0, r3
 800dda0:	4290      	cmp	r0, r2
 800dda2:	d858      	bhi.n	800de56 <_malloc_r+0x1d2>
 800dda4:	4202      	tst	r2, r0
 800dda6:	d106      	bne.n	800ddb6 <_malloc_r+0x132>
 800dda8:	f02c 0c03 	bic.w	ip, ip, #3
 800ddac:	0040      	lsls	r0, r0, #1
 800ddae:	4202      	tst	r2, r0
 800ddb0:	f10c 0c04 	add.w	ip, ip, #4
 800ddb4:	d0fa      	beq.n	800ddac <_malloc_r+0x128>
 800ddb6:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 800ddba:	4644      	mov	r4, r8
 800ddbc:	46e1      	mov	r9, ip
 800ddbe:	68e3      	ldr	r3, [r4, #12]
 800ddc0:	429c      	cmp	r4, r3
 800ddc2:	d107      	bne.n	800ddd4 <_malloc_r+0x150>
 800ddc4:	e16f      	b.n	800e0a6 <_malloc_r+0x422>
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	f280 8180 	bge.w	800e0cc <_malloc_r+0x448>
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	429c      	cmp	r4, r3
 800ddd0:	f000 8169 	beq.w	800e0a6 <_malloc_r+0x422>
 800ddd4:	6859      	ldr	r1, [r3, #4]
 800ddd6:	f021 0103 	bic.w	r1, r1, #3
 800ddda:	1b4a      	subs	r2, r1, r5
 800dddc:	2a0f      	cmp	r2, #15
 800ddde:	ddf2      	ble.n	800ddc6 <_malloc_r+0x142>
 800dde0:	461c      	mov	r4, r3
 800dde2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800dde6:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800ddea:	1959      	adds	r1, r3, r5
 800ddec:	f045 0901 	orr.w	r9, r5, #1
 800ddf0:	f042 0501 	orr.w	r5, r2, #1
 800ddf4:	f8c3 9004 	str.w	r9, [r3, #4]
 800ddf8:	4638      	mov	r0, r7
 800ddfa:	f8c8 c00c 	str.w	ip, [r8, #12]
 800ddfe:	f8cc 8008 	str.w	r8, [ip, #8]
 800de02:	6171      	str	r1, [r6, #20]
 800de04:	6131      	str	r1, [r6, #16]
 800de06:	f8c1 e00c 	str.w	lr, [r1, #12]
 800de0a:	f8c1 e008 	str.w	lr, [r1, #8]
 800de0e:	604d      	str	r5, [r1, #4]
 800de10:	508a      	str	r2, [r1, r2]
 800de12:	f000 fa7d 	bl	800e310 <__malloc_unlock>
 800de16:	e76b      	b.n	800dcf0 <_malloc_r+0x6c>
 800de18:	230c      	movs	r3, #12
 800de1a:	2400      	movs	r4, #0
 800de1c:	6003      	str	r3, [r0, #0]
 800de1e:	4620      	mov	r0, r4
 800de20:	b003      	add	sp, #12
 800de22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de26:	f1bc 0f04 	cmp.w	ip, #4
 800de2a:	f200 80ee 	bhi.w	800e00a <_malloc_r+0x386>
 800de2e:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 800de32:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800de36:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800de3a:	e765      	b.n	800dd08 <_malloc_r+0x84>
 800de3c:	4421      	add	r1, r4
 800de3e:	4638      	mov	r0, r7
 800de40:	684b      	ldr	r3, [r1, #4]
 800de42:	f043 0301 	orr.w	r3, r3, #1
 800de46:	604b      	str	r3, [r1, #4]
 800de48:	f000 fa62 	bl	800e310 <__malloc_unlock>
 800de4c:	3408      	adds	r4, #8
 800de4e:	4620      	mov	r0, r4
 800de50:	b003      	add	sp, #12
 800de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de56:	68b4      	ldr	r4, [r6, #8]
 800de58:	6863      	ldr	r3, [r4, #4]
 800de5a:	f023 0903 	bic.w	r9, r3, #3
 800de5e:	454d      	cmp	r5, r9
 800de60:	d804      	bhi.n	800de6c <_malloc_r+0x1e8>
 800de62:	ebc5 0309 	rsb	r3, r5, r9
 800de66:	2b0f      	cmp	r3, #15
 800de68:	f300 80ae 	bgt.w	800dfc8 <_malloc_r+0x344>
 800de6c:	f640 3314 	movw	r3, #2836	; 0xb14
 800de70:	f640 1a98 	movw	sl, #2456	; 0x998
 800de74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800de78:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f8da 1000 	ldr.w	r1, [sl]
 800de82:	442b      	add	r3, r5
 800de84:	3101      	adds	r1, #1
 800de86:	bf1d      	ittte	ne
 800de88:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 800de8c:	330f      	addne	r3, #15
 800de8e:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 800de92:	f103 0c10 	addeq.w	ip, r3, #16
 800de96:	bf18      	it	ne
 800de98:	f023 0c0f 	bicne.w	ip, r3, #15
 800de9c:	eb04 0209 	add.w	r2, r4, r9
 800dea0:	4661      	mov	r1, ip
 800dea2:	4638      	mov	r0, r7
 800dea4:	9201      	str	r2, [sp, #4]
 800dea6:	f8cd c000 	str.w	ip, [sp]
 800deaa:	f7fa f883 	bl	8007fb4 <_sbrk_r>
 800deae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800deb2:	4680      	mov	r8, r0
 800deb4:	9a01      	ldr	r2, [sp, #4]
 800deb6:	f8dd c000 	ldr.w	ip, [sp]
 800deba:	f000 811d 	beq.w	800e0f8 <_malloc_r+0x474>
 800debe:	4282      	cmp	r2, r0
 800dec0:	f200 8117 	bhi.w	800e0f2 <_malloc_r+0x46e>
 800dec4:	f640 3b18 	movw	fp, #2840	; 0xb18
 800dec8:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 800decc:	4542      	cmp	r2, r8
 800dece:	f8db 3000 	ldr.w	r3, [fp]
 800ded2:	4463      	add	r3, ip
 800ded4:	f8cb 3000 	str.w	r3, [fp]
 800ded8:	f000 815d 	beq.w	800e196 <_malloc_r+0x512>
 800dedc:	f8da 0000 	ldr.w	r0, [sl]
 800dee0:	f640 1198 	movw	r1, #2456	; 0x998
 800dee4:	3001      	adds	r0, #1
 800dee6:	bf18      	it	ne
 800dee8:	ebc2 0208 	rsbne	r2, r2, r8
 800deec:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800def0:	bf16      	itet	ne
 800def2:	189b      	addne	r3, r3, r2
 800def4:	f8c1 8000 	streq.w	r8, [r1]
 800def8:	f8cb 3000 	strne.w	r3, [fp]
 800defc:	f018 0307 	ands.w	r3, r8, #7
 800df00:	bf1f      	itttt	ne
 800df02:	f1c3 0208 	rsbne	r2, r3, #8
 800df06:	4490      	addne	r8, r2
 800df08:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 800df0c:	f103 0a08 	addne.w	sl, r3, #8
 800df10:	eb08 030c 	add.w	r3, r8, ip
 800df14:	bf08      	it	eq
 800df16:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
 800df1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df1e:	ebc3 0a0a 	rsb	sl, r3, sl
 800df22:	4651      	mov	r1, sl
 800df24:	4638      	mov	r0, r7
 800df26:	f7fa f845 	bl	8007fb4 <_sbrk_r>
 800df2a:	1c43      	adds	r3, r0, #1
 800df2c:	bf18      	it	ne
 800df2e:	ebc8 0200 	rsbne	r2, r8, r0
 800df32:	f8db 3000 	ldr.w	r3, [fp]
 800df36:	f8c6 8008 	str.w	r8, [r6, #8]
 800df3a:	bf15      	itete	ne
 800df3c:	4452      	addne	r2, sl
 800df3e:	f04f 0a00 	moveq.w	sl, #0
 800df42:	f042 0201 	orrne.w	r2, r2, #1
 800df46:	2201      	moveq	r2, #1
 800df48:	4453      	add	r3, sl
 800df4a:	42b4      	cmp	r4, r6
 800df4c:	f640 3a18 	movw	sl, #2840	; 0xb18
 800df50:	f8c8 2004 	str.w	r2, [r8, #4]
 800df54:	f8cb 3000 	str.w	r3, [fp]
 800df58:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800df5c:	d015      	beq.n	800df8a <_malloc_r+0x306>
 800df5e:	f1b9 0f0f 	cmp.w	r9, #15
 800df62:	f240 80f8 	bls.w	800e156 <_malloc_r+0x4d2>
 800df66:	6861      	ldr	r1, [r4, #4]
 800df68:	f1a9 020c 	sub.w	r2, r9, #12
 800df6c:	f022 0207 	bic.w	r2, r2, #7
 800df70:	f001 0e01 	and.w	lr, r1, #1
 800df74:	18a1      	adds	r1, r4, r2
 800df76:	2005      	movs	r0, #5
 800df78:	ea42 0e0e 	orr.w	lr, r2, lr
 800df7c:	2a0f      	cmp	r2, #15
 800df7e:	f8c4 e004 	str.w	lr, [r4, #4]
 800df82:	6048      	str	r0, [r1, #4]
 800df84:	6088      	str	r0, [r1, #8]
 800df86:	f200 8112 	bhi.w	800e1ae <_malloc_r+0x52a>
 800df8a:	f640 3210 	movw	r2, #2832	; 0xb10
 800df8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800df92:	68b4      	ldr	r4, [r6, #8]
 800df94:	6811      	ldr	r1, [r2, #0]
 800df96:	428b      	cmp	r3, r1
 800df98:	bf88      	it	hi
 800df9a:	6013      	strhi	r3, [r2, #0]
 800df9c:	f640 320c 	movw	r2, #2828	; 0xb0c
 800dfa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800dfa4:	6811      	ldr	r1, [r2, #0]
 800dfa6:	428b      	cmp	r3, r1
 800dfa8:	bf88      	it	hi
 800dfaa:	6013      	strhi	r3, [r2, #0]
 800dfac:	6862      	ldr	r2, [r4, #4]
 800dfae:	f022 0203 	bic.w	r2, r2, #3
 800dfb2:	4295      	cmp	r5, r2
 800dfb4:	ebc5 0302 	rsb	r3, r5, r2
 800dfb8:	d801      	bhi.n	800dfbe <_malloc_r+0x33a>
 800dfba:	2b0f      	cmp	r3, #15
 800dfbc:	dc04      	bgt.n	800dfc8 <_malloc_r+0x344>
 800dfbe:	4638      	mov	r0, r7
 800dfc0:	f000 f9a6 	bl	800e310 <__malloc_unlock>
 800dfc4:	2400      	movs	r4, #0
 800dfc6:	e693      	b.n	800dcf0 <_malloc_r+0x6c>
 800dfc8:	1962      	adds	r2, r4, r5
 800dfca:	f043 0301 	orr.w	r3, r3, #1
 800dfce:	f045 0501 	orr.w	r5, r5, #1
 800dfd2:	6065      	str	r5, [r4, #4]
 800dfd4:	4638      	mov	r0, r7
 800dfd6:	60b2      	str	r2, [r6, #8]
 800dfd8:	6053      	str	r3, [r2, #4]
 800dfda:	f000 f999 	bl	800e310 <__malloc_unlock>
 800dfde:	3408      	adds	r4, #8
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	b003      	add	sp, #12
 800dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe8:	4422      	add	r2, r4
 800dfea:	68e3      	ldr	r3, [r4, #12]
 800dfec:	6850      	ldr	r0, [r2, #4]
 800dfee:	68a1      	ldr	r1, [r4, #8]
 800dff0:	f040 0501 	orr.w	r5, r0, #1
 800dff4:	60cb      	str	r3, [r1, #12]
 800dff6:	4638      	mov	r0, r7
 800dff8:	6099      	str	r1, [r3, #8]
 800dffa:	6055      	str	r5, [r2, #4]
 800dffc:	f000 f988 	bl	800e310 <__malloc_unlock>
 800e000:	3408      	adds	r4, #8
 800e002:	4620      	mov	r0, r4
 800e004:	b003      	add	sp, #12
 800e006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e00a:	f1bc 0f14 	cmp.w	ip, #20
 800e00e:	bf9c      	itt	ls
 800e010:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 800e014:	ea4f 014c 	movls.w	r1, ip, lsl #1
 800e018:	f67f ae76 	bls.w	800dd08 <_malloc_r+0x84>
 800e01c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800e020:	f200 808f 	bhi.w	800e142 <_malloc_r+0x4be>
 800e024:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 800e028:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 800e02c:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800e030:	e66a      	b.n	800dd08 <_malloc_r+0x84>
 800e032:	0a4b      	lsrs	r3, r1, #9
 800e034:	2b04      	cmp	r3, #4
 800e036:	d958      	bls.n	800e0ea <_malloc_r+0x466>
 800e038:	2b14      	cmp	r3, #20
 800e03a:	bf9c      	itt	ls
 800e03c:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
 800e040:	0050      	lslls	r0, r2, #1
 800e042:	d905      	bls.n	800e050 <_malloc_r+0x3cc>
 800e044:	2b54      	cmp	r3, #84	; 0x54
 800e046:	f200 80ba 	bhi.w	800e1be <_malloc_r+0x53a>
 800e04a:	0b0a      	lsrs	r2, r1, #12
 800e04c:	326e      	adds	r2, #110	; 0x6e
 800e04e:	0050      	lsls	r0, r2, #1
 800e050:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800e054:	f240 588c 	movw	r8, #1420	; 0x58c
 800e058:	6883      	ldr	r3, [r0, #8]
 800e05a:	4283      	cmp	r3, r0
 800e05c:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800e060:	d07f      	beq.n	800e162 <_malloc_r+0x4de>
 800e062:	685a      	ldr	r2, [r3, #4]
 800e064:	f022 0203 	bic.w	r2, r2, #3
 800e068:	4291      	cmp	r1, r2
 800e06a:	d202      	bcs.n	800e072 <_malloc_r+0x3ee>
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	4298      	cmp	r0, r3
 800e070:	d1f7      	bne.n	800e062 <_malloc_r+0x3de>
 800e072:	68d9      	ldr	r1, [r3, #12]
 800e074:	6872      	ldr	r2, [r6, #4]
 800e076:	60e1      	str	r1, [r4, #12]
 800e078:	60a3      	str	r3, [r4, #8]
 800e07a:	608c      	str	r4, [r1, #8]
 800e07c:	60dc      	str	r4, [r3, #12]
 800e07e:	e68b      	b.n	800dd98 <_malloc_r+0x114>
 800e080:	1961      	adds	r1, r4, r5
 800e082:	f042 0601 	orr.w	r6, r2, #1
 800e086:	f045 0501 	orr.w	r5, r5, #1
 800e08a:	6065      	str	r5, [r4, #4]
 800e08c:	4638      	mov	r0, r7
 800e08e:	6159      	str	r1, [r3, #20]
 800e090:	6119      	str	r1, [r3, #16]
 800e092:	f8c1 e00c 	str.w	lr, [r1, #12]
 800e096:	f8c1 e008 	str.w	lr, [r1, #8]
 800e09a:	604e      	str	r6, [r1, #4]
 800e09c:	508a      	str	r2, [r1, r2]
 800e09e:	3408      	adds	r4, #8
 800e0a0:	f000 f936 	bl	800e310 <__malloc_unlock>
 800e0a4:	e624      	b.n	800dcf0 <_malloc_r+0x6c>
 800e0a6:	f109 0901 	add.w	r9, r9, #1
 800e0aa:	f019 0f03 	tst.w	r9, #3
 800e0ae:	f104 0408 	add.w	r4, r4, #8
 800e0b2:	f47f ae84 	bne.w	800ddbe <_malloc_r+0x13a>
 800e0b6:	e028      	b.n	800e10a <_malloc_r+0x486>
 800e0b8:	f104 0308 	add.w	r3, r4, #8
 800e0bc:	6964      	ldr	r4, [r4, #20]
 800e0be:	42a3      	cmp	r3, r4
 800e0c0:	bf08      	it	eq
 800e0c2:	f10c 0c02 	addeq.w	ip, ip, #2
 800e0c6:	f43f ae39 	beq.w	800dd3c <_malloc_r+0xb8>
 800e0ca:	e601      	b.n	800dcd0 <_malloc_r+0x4c>
 800e0cc:	4419      	add	r1, r3
 800e0ce:	461c      	mov	r4, r3
 800e0d0:	6848      	ldr	r0, [r1, #4]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	f854 2f08 	ldr.w	r2, [r4, #8]!
 800e0d8:	f040 0501 	orr.w	r5, r0, #1
 800e0dc:	604d      	str	r5, [r1, #4]
 800e0de:	4638      	mov	r0, r7
 800e0e0:	60d3      	str	r3, [r2, #12]
 800e0e2:	609a      	str	r2, [r3, #8]
 800e0e4:	f000 f914 	bl	800e310 <__malloc_unlock>
 800e0e8:	e602      	b.n	800dcf0 <_malloc_r+0x6c>
 800e0ea:	098a      	lsrs	r2, r1, #6
 800e0ec:	3238      	adds	r2, #56	; 0x38
 800e0ee:	0050      	lsls	r0, r2, #1
 800e0f0:	e7ae      	b.n	800e050 <_malloc_r+0x3cc>
 800e0f2:	42b4      	cmp	r4, r6
 800e0f4:	f43f aee6 	beq.w	800dec4 <_malloc_r+0x240>
 800e0f8:	68b4      	ldr	r4, [r6, #8]
 800e0fa:	6862      	ldr	r2, [r4, #4]
 800e0fc:	f022 0203 	bic.w	r2, r2, #3
 800e100:	e757      	b.n	800dfb2 <_malloc_r+0x32e>
 800e102:	f8d8 8000 	ldr.w	r8, [r8]
 800e106:	4598      	cmp	r8, r3
 800e108:	d16b      	bne.n	800e1e2 <_malloc_r+0x55e>
 800e10a:	f01c 0f03 	tst.w	ip, #3
 800e10e:	f1a8 0308 	sub.w	r3, r8, #8
 800e112:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e116:	d1f4      	bne.n	800e102 <_malloc_r+0x47e>
 800e118:	6873      	ldr	r3, [r6, #4]
 800e11a:	ea23 0300 	bic.w	r3, r3, r0
 800e11e:	6073      	str	r3, [r6, #4]
 800e120:	0040      	lsls	r0, r0, #1
 800e122:	4298      	cmp	r0, r3
 800e124:	f63f ae97 	bhi.w	800de56 <_malloc_r+0x1d2>
 800e128:	2800      	cmp	r0, #0
 800e12a:	f43f ae94 	beq.w	800de56 <_malloc_r+0x1d2>
 800e12e:	4203      	tst	r3, r0
 800e130:	46cc      	mov	ip, r9
 800e132:	f47f ae40 	bne.w	800ddb6 <_malloc_r+0x132>
 800e136:	0040      	lsls	r0, r0, #1
 800e138:	4203      	tst	r3, r0
 800e13a:	f10c 0c04 	add.w	ip, ip, #4
 800e13e:	d0fa      	beq.n	800e136 <_malloc_r+0x4b2>
 800e140:	e639      	b.n	800ddb6 <_malloc_r+0x132>
 800e142:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800e146:	d817      	bhi.n	800e178 <_malloc_r+0x4f4>
 800e148:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 800e14c:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 800e150:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800e154:	e5d8      	b.n	800dd08 <_malloc_r+0x84>
 800e156:	2301      	movs	r3, #1
 800e158:	f8c8 3004 	str.w	r3, [r8, #4]
 800e15c:	4644      	mov	r4, r8
 800e15e:	2200      	movs	r2, #0
 800e160:	e727      	b.n	800dfb2 <_malloc_r+0x32e>
 800e162:	1091      	asrs	r1, r2, #2
 800e164:	2001      	movs	r0, #1
 800e166:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e16a:	fa00 f101 	lsl.w	r1, r0, r1
 800e16e:	430a      	orrs	r2, r1
 800e170:	f8c8 2004 	str.w	r2, [r8, #4]
 800e174:	4619      	mov	r1, r3
 800e176:	e77e      	b.n	800e076 <_malloc_r+0x3f2>
 800e178:	f240 5354 	movw	r3, #1364	; 0x554
 800e17c:	459c      	cmp	ip, r3
 800e17e:	bf9d      	ittte	ls
 800e180:	ea4f 4c95 	movls.w	ip, r5, lsr #18
 800e184:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 800e188:	ea4f 014c 	movls.w	r1, ip, lsl #1
 800e18c:	21fc      	movhi	r1, #252	; 0xfc
 800e18e:	bf88      	it	hi
 800e190:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 800e194:	e5b8      	b.n	800dd08 <_malloc_r+0x84>
 800e196:	f3c2 010b 	ubfx	r1, r2, #0, #12
 800e19a:	2900      	cmp	r1, #0
 800e19c:	f47f ae9e 	bne.w	800dedc <_malloc_r+0x258>
 800e1a0:	eb0c 0109 	add.w	r1, ip, r9
 800e1a4:	68b2      	ldr	r2, [r6, #8]
 800e1a6:	f041 0101 	orr.w	r1, r1, #1
 800e1aa:	6051      	str	r1, [r2, #4]
 800e1ac:	e6ed      	b.n	800df8a <_malloc_r+0x306>
 800e1ae:	f104 0108 	add.w	r1, r4, #8
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	f004 f8d6 	bl	8012364 <_free_r>
 800e1b8:	f8da 3000 	ldr.w	r3, [sl]
 800e1bc:	e6e5      	b.n	800df8a <_malloc_r+0x306>
 800e1be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800e1c2:	d803      	bhi.n	800e1cc <_malloc_r+0x548>
 800e1c4:	0bca      	lsrs	r2, r1, #15
 800e1c6:	3277      	adds	r2, #119	; 0x77
 800e1c8:	0050      	lsls	r0, r2, #1
 800e1ca:	e741      	b.n	800e050 <_malloc_r+0x3cc>
 800e1cc:	f240 5254 	movw	r2, #1364	; 0x554
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	bf9d      	ittte	ls
 800e1d4:	0c8a      	lsrls	r2, r1, #18
 800e1d6:	327c      	addls	r2, #124	; 0x7c
 800e1d8:	0050      	lslls	r0, r2, #1
 800e1da:	20fc      	movhi	r0, #252	; 0xfc
 800e1dc:	bf88      	it	hi
 800e1de:	227e      	movhi	r2, #126	; 0x7e
 800e1e0:	e736      	b.n	800e050 <_malloc_r+0x3cc>
 800e1e2:	6873      	ldr	r3, [r6, #4]
 800e1e4:	e79c      	b.n	800e120 <_malloc_r+0x49c>
 800e1e6:	bf00      	nop

0800e1e8 <memchr>:
 800e1e8:	0783      	lsls	r3, r0, #30
 800e1ea:	b470      	push	{r4, r5, r6}
 800e1ec:	b2c9      	uxtb	r1, r1
 800e1ee:	d03f      	beq.n	800e270 <memchr+0x88>
 800e1f0:	1e54      	subs	r4, r2, #1
 800e1f2:	b32a      	cbz	r2, 800e240 <memchr+0x58>
 800e1f4:	7803      	ldrb	r3, [r0, #0]
 800e1f6:	428b      	cmp	r3, r1
 800e1f8:	d023      	beq.n	800e242 <memchr+0x5a>
 800e1fa:	1c43      	adds	r3, r0, #1
 800e1fc:	e004      	b.n	800e208 <memchr+0x20>
 800e1fe:	b1fc      	cbz	r4, 800e240 <memchr+0x58>
 800e200:	7804      	ldrb	r4, [r0, #0]
 800e202:	428c      	cmp	r4, r1
 800e204:	d01d      	beq.n	800e242 <memchr+0x5a>
 800e206:	4614      	mov	r4, r2
 800e208:	f013 0f03 	tst.w	r3, #3
 800e20c:	4618      	mov	r0, r3
 800e20e:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 800e212:	f103 0301 	add.w	r3, r3, #1
 800e216:	d1f2      	bne.n	800e1fe <memchr+0x16>
 800e218:	2c03      	cmp	r4, #3
 800e21a:	d814      	bhi.n	800e246 <memchr+0x5e>
 800e21c:	1e65      	subs	r5, r4, #1
 800e21e:	b34c      	cbz	r4, 800e274 <memchr+0x8c>
 800e220:	7803      	ldrb	r3, [r0, #0]
 800e222:	428b      	cmp	r3, r1
 800e224:	d00d      	beq.n	800e242 <memchr+0x5a>
 800e226:	1c42      	adds	r2, r0, #1
 800e228:	2300      	movs	r3, #0
 800e22a:	e002      	b.n	800e232 <memchr+0x4a>
 800e22c:	7804      	ldrb	r4, [r0, #0]
 800e22e:	428c      	cmp	r4, r1
 800e230:	d007      	beq.n	800e242 <memchr+0x5a>
 800e232:	42ab      	cmp	r3, r5
 800e234:	4610      	mov	r0, r2
 800e236:	f103 0301 	add.w	r3, r3, #1
 800e23a:	f102 0201 	add.w	r2, r2, #1
 800e23e:	d1f5      	bne.n	800e22c <memchr+0x44>
 800e240:	2000      	movs	r0, #0
 800e242:	bc70      	pop	{r4, r5, r6}
 800e244:	4770      	bx	lr
 800e246:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800e24a:	4603      	mov	r3, r0
 800e24c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800e250:	4618      	mov	r0, r3
 800e252:	3304      	adds	r3, #4
 800e254:	6802      	ldr	r2, [r0, #0]
 800e256:	4072      	eors	r2, r6
 800e258:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 800e25c:	ea25 0202 	bic.w	r2, r5, r2
 800e260:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800e264:	d1da      	bne.n	800e21c <memchr+0x34>
 800e266:	3c04      	subs	r4, #4
 800e268:	2c03      	cmp	r4, #3
 800e26a:	4618      	mov	r0, r3
 800e26c:	d8f0      	bhi.n	800e250 <memchr+0x68>
 800e26e:	e7d5      	b.n	800e21c <memchr+0x34>
 800e270:	4614      	mov	r4, r2
 800e272:	e7d1      	b.n	800e218 <memchr+0x30>
 800e274:	4620      	mov	r0, r4
 800e276:	e7e4      	b.n	800e242 <memchr+0x5a>

0800e278 <memset>:
 800e278:	b4f0      	push	{r4, r5, r6, r7}
 800e27a:	0784      	lsls	r4, r0, #30
 800e27c:	d043      	beq.n	800e306 <memset+0x8e>
 800e27e:	1e54      	subs	r4, r2, #1
 800e280:	2a00      	cmp	r2, #0
 800e282:	d03e      	beq.n	800e302 <memset+0x8a>
 800e284:	b2cd      	uxtb	r5, r1
 800e286:	4603      	mov	r3, r0
 800e288:	e003      	b.n	800e292 <memset+0x1a>
 800e28a:	1e62      	subs	r2, r4, #1
 800e28c:	2c00      	cmp	r4, #0
 800e28e:	d038      	beq.n	800e302 <memset+0x8a>
 800e290:	4614      	mov	r4, r2
 800e292:	f803 5b01 	strb.w	r5, [r3], #1
 800e296:	079a      	lsls	r2, r3, #30
 800e298:	d1f7      	bne.n	800e28a <memset+0x12>
 800e29a:	2c03      	cmp	r4, #3
 800e29c:	d92a      	bls.n	800e2f4 <memset+0x7c>
 800e29e:	b2cd      	uxtb	r5, r1
 800e2a0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800e2a4:	2c0f      	cmp	r4, #15
 800e2a6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800e2aa:	d915      	bls.n	800e2d8 <memset+0x60>
 800e2ac:	f1a4 0710 	sub.w	r7, r4, #16
 800e2b0:	093f      	lsrs	r7, r7, #4
 800e2b2:	f103 0610 	add.w	r6, r3, #16
 800e2b6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	6015      	str	r5, [r2, #0]
 800e2be:	6055      	str	r5, [r2, #4]
 800e2c0:	6095      	str	r5, [r2, #8]
 800e2c2:	60d5      	str	r5, [r2, #12]
 800e2c4:	3210      	adds	r2, #16
 800e2c6:	42b2      	cmp	r2, r6
 800e2c8:	d1f8      	bne.n	800e2bc <memset+0x44>
 800e2ca:	f004 040f 	and.w	r4, r4, #15
 800e2ce:	3701      	adds	r7, #1
 800e2d0:	2c03      	cmp	r4, #3
 800e2d2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800e2d6:	d90d      	bls.n	800e2f4 <memset+0x7c>
 800e2d8:	461e      	mov	r6, r3
 800e2da:	4622      	mov	r2, r4
 800e2dc:	3a04      	subs	r2, #4
 800e2de:	2a03      	cmp	r2, #3
 800e2e0:	f846 5b04 	str.w	r5, [r6], #4
 800e2e4:	d8fa      	bhi.n	800e2dc <memset+0x64>
 800e2e6:	1f22      	subs	r2, r4, #4
 800e2e8:	f022 0203 	bic.w	r2, r2, #3
 800e2ec:	3204      	adds	r2, #4
 800e2ee:	4413      	add	r3, r2
 800e2f0:	f004 0403 	and.w	r4, r4, #3
 800e2f4:	b12c      	cbz	r4, 800e302 <memset+0x8a>
 800e2f6:	b2c9      	uxtb	r1, r1
 800e2f8:	441c      	add	r4, r3
 800e2fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e2fe:	42a3      	cmp	r3, r4
 800e300:	d1fb      	bne.n	800e2fa <memset+0x82>
 800e302:	bcf0      	pop	{r4, r5, r6, r7}
 800e304:	4770      	bx	lr
 800e306:	4614      	mov	r4, r2
 800e308:	4603      	mov	r3, r0
 800e30a:	e7c6      	b.n	800e29a <memset+0x22>

0800e30c <__malloc_lock>:
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop

0800e310 <__malloc_unlock>:
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop

0800e314 <_printf_r>:
 800e314:	b40e      	push	{r1, r2, r3}
 800e316:	b510      	push	{r4, lr}
 800e318:	b083      	sub	sp, #12
 800e31a:	ac05      	add	r4, sp, #20
 800e31c:	6881      	ldr	r1, [r0, #8]
 800e31e:	f854 2b04 	ldr.w	r2, [r4], #4
 800e322:	4623      	mov	r3, r4
 800e324:	9401      	str	r4, [sp, #4]
 800e326:	f001 fa7b 	bl	800f820 <_vfprintf_r>
 800e32a:	b003      	add	sp, #12
 800e32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e330:	b003      	add	sp, #12
 800e332:	4770      	bx	lr

0800e334 <printf>:
 800e334:	b40f      	push	{r0, r1, r2, r3}
 800e336:	b500      	push	{lr}
 800e338:	f240 5288 	movw	r2, #1416	; 0x588
 800e33c:	b083      	sub	sp, #12
 800e33e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800e342:	ab04      	add	r3, sp, #16
 800e344:	6810      	ldr	r0, [r2, #0]
 800e346:	f853 2b04 	ldr.w	r2, [r3], #4
 800e34a:	6881      	ldr	r1, [r0, #8]
 800e34c:	9301      	str	r3, [sp, #4]
 800e34e:	f001 fa67 	bl	800f820 <_vfprintf_r>
 800e352:	b003      	add	sp, #12
 800e354:	f85d eb04 	ldr.w	lr, [sp], #4
 800e358:	b004      	add	sp, #16
 800e35a:	4770      	bx	lr

0800e35c <realloc>:
 800e35c:	f240 5388 	movw	r3, #1416	; 0x588
 800e360:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e364:	460a      	mov	r2, r1
 800e366:	4601      	mov	r1, r0
 800e368:	6818      	ldr	r0, [r3, #0]
 800e36a:	f000 b801 	b.w	800e370 <_realloc_r>
 800e36e:	bf00      	nop

0800e370 <_realloc_r>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	460c      	mov	r4, r1
 800e376:	b083      	sub	sp, #12
 800e378:	4690      	mov	r8, r2
 800e37a:	4681      	mov	r9, r0
 800e37c:	2900      	cmp	r1, #0
 800e37e:	f000 8124 	beq.w	800e5ca <_realloc_r+0x25a>
 800e382:	f7ff ffc3 	bl	800e30c <__malloc_lock>
 800e386:	f108 060b 	add.w	r6, r8, #11
 800e38a:	2e16      	cmp	r6, #22
 800e38c:	bf8c      	ite	hi
 800e38e:	f026 0607 	bichi.w	r6, r6, #7
 800e392:	2210      	movls	r2, #16
 800e394:	f854 cc04 	ldr.w	ip, [r4, #-4]
 800e398:	bf8d      	iteet	hi
 800e39a:	0ff3      	lsrhi	r3, r6, #31
 800e39c:	4616      	movls	r6, r2
 800e39e:	2300      	movls	r3, #0
 800e3a0:	4632      	movhi	r2, r6
 800e3a2:	4546      	cmp	r6, r8
 800e3a4:	bf38      	it	cc
 800e3a6:	f043 0301 	orrcc.w	r3, r3, #1
 800e3aa:	f02c 0503 	bic.w	r5, ip, #3
 800e3ae:	f1a4 0708 	sub.w	r7, r4, #8
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f040 810f 	bne.w	800e5d6 <_realloc_r+0x266>
 800e3b8:	4295      	cmp	r5, r2
 800e3ba:	db15      	blt.n	800e3e8 <_realloc_r+0x78>
 800e3bc:	4660      	mov	r0, ip
 800e3be:	1bab      	subs	r3, r5, r6
 800e3c0:	2b0f      	cmp	r3, #15
 800e3c2:	f000 0c01 	and.w	ip, r0, #1
 800e3c6:	f200 80c6 	bhi.w	800e556 <_realloc_r+0x1e6>
 800e3ca:	ea4c 0305 	orr.w	r3, ip, r5
 800e3ce:	443d      	add	r5, r7
 800e3d0:	607b      	str	r3, [r7, #4]
 800e3d2:	686b      	ldr	r3, [r5, #4]
 800e3d4:	f043 0301 	orr.w	r3, r3, #1
 800e3d8:	606b      	str	r3, [r5, #4]
 800e3da:	4648      	mov	r0, r9
 800e3dc:	f7ff ff98 	bl	800e310 <__malloc_unlock>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	b003      	add	sp, #12
 800e3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e8:	f240 5a8c 	movw	sl, #1420	; 0x58c
 800e3ec:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800e3f0:	1979      	adds	r1, r7, r5
 800e3f2:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e3f6:	4288      	cmp	r0, r1
 800e3f8:	f000 80f2 	beq.w	800e5e0 <_realloc_r+0x270>
 800e3fc:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800e400:	f02e 0b01 	bic.w	fp, lr, #1
 800e404:	448b      	add	fp, r1
 800e406:	f8db b004 	ldr.w	fp, [fp, #4]
 800e40a:	f01b 0f01 	tst.w	fp, #1
 800e40e:	bf1c      	itt	ne
 800e410:	469e      	movne	lr, r3
 800e412:	4671      	movne	r1, lr
 800e414:	d054      	beq.n	800e4c0 <_realloc_r+0x150>
 800e416:	f01c 0f01 	tst.w	ip, #1
 800e41a:	f040 80ad 	bne.w	800e578 <_realloc_r+0x208>
 800e41e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800e422:	ebc3 0b07 	rsb	fp, r3, r7
 800e426:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e42a:	f023 0303 	bic.w	r3, r3, #3
 800e42e:	442b      	add	r3, r5
 800e430:	2900      	cmp	r1, #0
 800e432:	d052      	beq.n	800e4da <_realloc_r+0x16a>
 800e434:	4281      	cmp	r1, r0
 800e436:	f000 811f 	beq.w	800e678 <_realloc_r+0x308>
 800e43a:	449e      	add	lr, r3
 800e43c:	4596      	cmp	lr, r2
 800e43e:	db4c      	blt.n	800e4da <_realloc_r+0x16a>
 800e440:	68cb      	ldr	r3, [r1, #12]
 800e442:	688a      	ldr	r2, [r1, #8]
 800e444:	465f      	mov	r7, fp
 800e446:	60d3      	str	r3, [r2, #12]
 800e448:	609a      	str	r2, [r3, #8]
 800e44a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800e44e:	f8db 300c 	ldr.w	r3, [fp, #12]
 800e452:	1f2a      	subs	r2, r5, #4
 800e454:	2a24      	cmp	r2, #36	; 0x24
 800e456:	60cb      	str	r3, [r1, #12]
 800e458:	6099      	str	r1, [r3, #8]
 800e45a:	f200 8165 	bhi.w	800e728 <_realloc_r+0x3b8>
 800e45e:	2a13      	cmp	r2, #19
 800e460:	bf98      	it	ls
 800e462:	463b      	movls	r3, r7
 800e464:	d920      	bls.n	800e4a8 <_realloc_r+0x138>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	f8cb 3008 	str.w	r3, [fp, #8]
 800e46c:	6863      	ldr	r3, [r4, #4]
 800e46e:	2a1b      	cmp	r2, #27
 800e470:	f8cb 300c 	str.w	r3, [fp, #12]
 800e474:	bf9c      	itt	ls
 800e476:	3408      	addls	r4, #8
 800e478:	f10b 0310 	addls.w	r3, fp, #16
 800e47c:	d914      	bls.n	800e4a8 <_realloc_r+0x138>
 800e47e:	68a3      	ldr	r3, [r4, #8]
 800e480:	f8cb 3010 	str.w	r3, [fp, #16]
 800e484:	68e3      	ldr	r3, [r4, #12]
 800e486:	2a24      	cmp	r2, #36	; 0x24
 800e488:	f8cb 3014 	str.w	r3, [fp, #20]
 800e48c:	bf03      	ittte	eq
 800e48e:	6923      	ldreq	r3, [r4, #16]
 800e490:	f8cb 3018 	streq.w	r3, [fp, #24]
 800e494:	6962      	ldreq	r2, [r4, #20]
 800e496:	3410      	addne	r4, #16
 800e498:	bf11      	iteee	ne
 800e49a:	f10b 0318 	addne.w	r3, fp, #24
 800e49e:	f10b 0320 	addeq.w	r3, fp, #32
 800e4a2:	f8cb 201c 	streq.w	r2, [fp, #28]
 800e4a6:	3418      	addeq	r4, #24
 800e4a8:	6822      	ldr	r2, [r4, #0]
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	6862      	ldr	r2, [r4, #4]
 800e4ae:	605a      	str	r2, [r3, #4]
 800e4b0:	68a2      	ldr	r2, [r4, #8]
 800e4b2:	609a      	str	r2, [r3, #8]
 800e4b4:	463c      	mov	r4, r7
 800e4b6:	4675      	mov	r5, lr
 800e4b8:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e4bc:	465f      	mov	r7, fp
 800e4be:	e77e      	b.n	800e3be <_realloc_r+0x4e>
 800e4c0:	f02e 0e03 	bic.w	lr, lr, #3
 800e4c4:	eb0e 0305 	add.w	r3, lr, r5
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	dba4      	blt.n	800e416 <_realloc_r+0xa6>
 800e4cc:	68ca      	ldr	r2, [r1, #12]
 800e4ce:	6889      	ldr	r1, [r1, #8]
 800e4d0:	4660      	mov	r0, ip
 800e4d2:	60ca      	str	r2, [r1, #12]
 800e4d4:	461d      	mov	r5, r3
 800e4d6:	6091      	str	r1, [r2, #8]
 800e4d8:	e771      	b.n	800e3be <_realloc_r+0x4e>
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	db4c      	blt.n	800e578 <_realloc_r+0x208>
 800e4de:	465f      	mov	r7, fp
 800e4e0:	f8db 100c 	ldr.w	r1, [fp, #12]
 800e4e4:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e4e8:	1f2a      	subs	r2, r5, #4
 800e4ea:	2a24      	cmp	r2, #36	; 0x24
 800e4ec:	60c1      	str	r1, [r0, #12]
 800e4ee:	6088      	str	r0, [r1, #8]
 800e4f0:	f200 80b4 	bhi.w	800e65c <_realloc_r+0x2ec>
 800e4f4:	2a13      	cmp	r2, #19
 800e4f6:	bf98      	it	ls
 800e4f8:	463a      	movls	r2, r7
 800e4fa:	d920      	bls.n	800e53e <_realloc_r+0x1ce>
 800e4fc:	6821      	ldr	r1, [r4, #0]
 800e4fe:	f8cb 1008 	str.w	r1, [fp, #8]
 800e502:	6861      	ldr	r1, [r4, #4]
 800e504:	2a1b      	cmp	r2, #27
 800e506:	f8cb 100c 	str.w	r1, [fp, #12]
 800e50a:	bf9c      	itt	ls
 800e50c:	3408      	addls	r4, #8
 800e50e:	f10b 0210 	addls.w	r2, fp, #16
 800e512:	d914      	bls.n	800e53e <_realloc_r+0x1ce>
 800e514:	68a1      	ldr	r1, [r4, #8]
 800e516:	f8cb 1010 	str.w	r1, [fp, #16]
 800e51a:	68e1      	ldr	r1, [r4, #12]
 800e51c:	2a24      	cmp	r2, #36	; 0x24
 800e51e:	f8cb 1014 	str.w	r1, [fp, #20]
 800e522:	bf03      	ittte	eq
 800e524:	6922      	ldreq	r2, [r4, #16]
 800e526:	f8cb 2018 	streq.w	r2, [fp, #24]
 800e52a:	6961      	ldreq	r1, [r4, #20]
 800e52c:	3410      	addne	r4, #16
 800e52e:	bf11      	iteee	ne
 800e530:	f10b 0218 	addne.w	r2, fp, #24
 800e534:	f10b 0220 	addeq.w	r2, fp, #32
 800e538:	f8cb 101c 	streq.w	r1, [fp, #28]
 800e53c:	3418      	addeq	r4, #24
 800e53e:	6821      	ldr	r1, [r4, #0]
 800e540:	6011      	str	r1, [r2, #0]
 800e542:	6861      	ldr	r1, [r4, #4]
 800e544:	6051      	str	r1, [r2, #4]
 800e546:	68a1      	ldr	r1, [r4, #8]
 800e548:	6091      	str	r1, [r2, #8]
 800e54a:	463c      	mov	r4, r7
 800e54c:	461d      	mov	r5, r3
 800e54e:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e552:	465f      	mov	r7, fp
 800e554:	e733      	b.n	800e3be <_realloc_r+0x4e>
 800e556:	19b9      	adds	r1, r7, r6
 800e558:	f043 0201 	orr.w	r2, r3, #1
 800e55c:	ea4c 0606 	orr.w	r6, ip, r6
 800e560:	440b      	add	r3, r1
 800e562:	607e      	str	r6, [r7, #4]
 800e564:	604a      	str	r2, [r1, #4]
 800e566:	685a      	ldr	r2, [r3, #4]
 800e568:	f042 0201 	orr.w	r2, r2, #1
 800e56c:	3108      	adds	r1, #8
 800e56e:	605a      	str	r2, [r3, #4]
 800e570:	4648      	mov	r0, r9
 800e572:	f003 fef7 	bl	8012364 <_free_r>
 800e576:	e730      	b.n	800e3da <_realloc_r+0x6a>
 800e578:	4641      	mov	r1, r8
 800e57a:	4648      	mov	r0, r9
 800e57c:	f7ff fb82 	bl	800dc84 <_malloc_r>
 800e580:	4680      	mov	r8, r0
 800e582:	b1d8      	cbz	r0, 800e5bc <_realloc_r+0x24c>
 800e584:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e588:	f023 0201 	bic.w	r2, r3, #1
 800e58c:	443a      	add	r2, r7
 800e58e:	f1a0 0108 	sub.w	r1, r0, #8
 800e592:	4291      	cmp	r1, r2
 800e594:	f000 80c1 	beq.w	800e71a <_realloc_r+0x3aa>
 800e598:	1f2a      	subs	r2, r5, #4
 800e59a:	2a24      	cmp	r2, #36	; 0x24
 800e59c:	d868      	bhi.n	800e670 <_realloc_r+0x300>
 800e59e:	2a13      	cmp	r2, #19
 800e5a0:	bf9c      	itt	ls
 800e5a2:	4603      	movls	r3, r0
 800e5a4:	4622      	movls	r2, r4
 800e5a6:	d83a      	bhi.n	800e61e <_realloc_r+0x2ae>
 800e5a8:	6811      	ldr	r1, [r2, #0]
 800e5aa:	6019      	str	r1, [r3, #0]
 800e5ac:	6851      	ldr	r1, [r2, #4]
 800e5ae:	6059      	str	r1, [r3, #4]
 800e5b0:	6892      	ldr	r2, [r2, #8]
 800e5b2:	609a      	str	r2, [r3, #8]
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	4648      	mov	r0, r9
 800e5b8:	f003 fed4 	bl	8012364 <_free_r>
 800e5bc:	4648      	mov	r0, r9
 800e5be:	f7ff fea7 	bl	800e310 <__malloc_unlock>
 800e5c2:	4640      	mov	r0, r8
 800e5c4:	b003      	add	sp, #12
 800e5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	b003      	add	sp, #12
 800e5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d2:	f7ff bb57 	b.w	800dc84 <_malloc_r>
 800e5d6:	230c      	movs	r3, #12
 800e5d8:	f8c9 3000 	str.w	r3, [r9]
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e700      	b.n	800e3e2 <_realloc_r+0x72>
 800e5e0:	6843      	ldr	r3, [r0, #4]
 800e5e2:	f023 0e03 	bic.w	lr, r3, #3
 800e5e6:	f106 0110 	add.w	r1, r6, #16
 800e5ea:	eb0e 0305 	add.w	r3, lr, r5
 800e5ee:	428b      	cmp	r3, r1
 800e5f0:	bfb8      	it	lt
 800e5f2:	4601      	movlt	r1, r0
 800e5f4:	f6ff af0f 	blt.w	800e416 <_realloc_r+0xa6>
 800e5f8:	4437      	add	r7, r6
 800e5fa:	1b9b      	subs	r3, r3, r6
 800e5fc:	f043 0301 	orr.w	r3, r3, #1
 800e600:	f8ca 7008 	str.w	r7, [sl, #8]
 800e604:	607b      	str	r3, [r7, #4]
 800e606:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e60a:	f003 0301 	and.w	r3, r3, #1
 800e60e:	431e      	orrs	r6, r3
 800e610:	4648      	mov	r0, r9
 800e612:	f844 6c04 	str.w	r6, [r4, #-4]
 800e616:	f7ff fe7b 	bl	800e310 <__malloc_unlock>
 800e61a:	4620      	mov	r0, r4
 800e61c:	e6e1      	b.n	800e3e2 <_realloc_r+0x72>
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	6003      	str	r3, [r0, #0]
 800e622:	6863      	ldr	r3, [r4, #4]
 800e624:	2a1b      	cmp	r2, #27
 800e626:	6043      	str	r3, [r0, #4]
 800e628:	bf9c      	itt	ls
 800e62a:	f104 0208 	addls.w	r2, r4, #8
 800e62e:	f100 0308 	addls.w	r3, r0, #8
 800e632:	d9b9      	bls.n	800e5a8 <_realloc_r+0x238>
 800e634:	68a3      	ldr	r3, [r4, #8]
 800e636:	6083      	str	r3, [r0, #8]
 800e638:	68e3      	ldr	r3, [r4, #12]
 800e63a:	2a24      	cmp	r2, #36	; 0x24
 800e63c:	60c3      	str	r3, [r0, #12]
 800e63e:	bf03      	ittte	eq
 800e640:	6923      	ldreq	r3, [r4, #16]
 800e642:	6103      	streq	r3, [r0, #16]
 800e644:	6962      	ldreq	r2, [r4, #20]
 800e646:	f100 0310 	addne.w	r3, r0, #16
 800e64a:	bf09      	itett	eq
 800e64c:	6142      	streq	r2, [r0, #20]
 800e64e:	f104 0210 	addne.w	r2, r4, #16
 800e652:	f100 0318 	addeq.w	r3, r0, #24
 800e656:	f104 0218 	addeq.w	r2, r4, #24
 800e65a:	e7a5      	b.n	800e5a8 <_realloc_r+0x238>
 800e65c:	4621      	mov	r1, r4
 800e65e:	4638      	mov	r0, r7
 800e660:	461d      	mov	r5, r3
 800e662:	463c      	mov	r4, r7
 800e664:	f004 f9b2 	bl	80129cc <memmove>
 800e668:	465f      	mov	r7, fp
 800e66a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e66e:	e6a6      	b.n	800e3be <_realloc_r+0x4e>
 800e670:	4621      	mov	r1, r4
 800e672:	f004 f9ab 	bl	80129cc <memmove>
 800e676:	e79d      	b.n	800e5b4 <_realloc_r+0x244>
 800e678:	eb0e 0c03 	add.w	ip, lr, r3
 800e67c:	f106 0110 	add.w	r1, r6, #16
 800e680:	458c      	cmp	ip, r1
 800e682:	f6ff af2a 	blt.w	800e4da <_realloc_r+0x16a>
 800e686:	465f      	mov	r7, fp
 800e688:	f8db 300c 	ldr.w	r3, [fp, #12]
 800e68c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800e690:	1f2a      	subs	r2, r5, #4
 800e692:	2a24      	cmp	r2, #36	; 0x24
 800e694:	60cb      	str	r3, [r1, #12]
 800e696:	6099      	str	r1, [r3, #8]
 800e698:	d850      	bhi.n	800e73c <_realloc_r+0x3cc>
 800e69a:	2a13      	cmp	r2, #19
 800e69c:	bf98      	it	ls
 800e69e:	463b      	movls	r3, r7
 800e6a0:	d920      	bls.n	800e6e4 <_realloc_r+0x374>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	f8cb 3008 	str.w	r3, [fp, #8]
 800e6a8:	6863      	ldr	r3, [r4, #4]
 800e6aa:	2a1b      	cmp	r2, #27
 800e6ac:	f8cb 300c 	str.w	r3, [fp, #12]
 800e6b0:	bf9c      	itt	ls
 800e6b2:	3408      	addls	r4, #8
 800e6b4:	f10b 0310 	addls.w	r3, fp, #16
 800e6b8:	d914      	bls.n	800e6e4 <_realloc_r+0x374>
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	f8cb 3010 	str.w	r3, [fp, #16]
 800e6c0:	68e3      	ldr	r3, [r4, #12]
 800e6c2:	2a24      	cmp	r2, #36	; 0x24
 800e6c4:	f8cb 3014 	str.w	r3, [fp, #20]
 800e6c8:	bf03      	ittte	eq
 800e6ca:	6923      	ldreq	r3, [r4, #16]
 800e6cc:	f8cb 3018 	streq.w	r3, [fp, #24]
 800e6d0:	6962      	ldreq	r2, [r4, #20]
 800e6d2:	3410      	addne	r4, #16
 800e6d4:	bf11      	iteee	ne
 800e6d6:	f10b 0318 	addne.w	r3, fp, #24
 800e6da:	f10b 0320 	addeq.w	r3, fp, #32
 800e6de:	f8cb 201c 	streq.w	r2, [fp, #28]
 800e6e2:	3418      	addeq	r4, #24
 800e6e4:	6822      	ldr	r2, [r4, #0]
 800e6e6:	601a      	str	r2, [r3, #0]
 800e6e8:	6862      	ldr	r2, [r4, #4]
 800e6ea:	605a      	str	r2, [r3, #4]
 800e6ec:	68a2      	ldr	r2, [r4, #8]
 800e6ee:	609a      	str	r2, [r3, #8]
 800e6f0:	eb0b 0306 	add.w	r3, fp, r6
 800e6f4:	ebc6 020c 	rsb	r2, r6, ip
 800e6f8:	f042 0201 	orr.w	r2, r2, #1
 800e6fc:	f8ca 3008 	str.w	r3, [sl, #8]
 800e700:	605a      	str	r2, [r3, #4]
 800e702:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e706:	f003 0301 	and.w	r3, r3, #1
 800e70a:	431e      	orrs	r6, r3
 800e70c:	4648      	mov	r0, r9
 800e70e:	f8cb 6004 	str.w	r6, [fp, #4]
 800e712:	f7ff fdfd 	bl	800e310 <__malloc_unlock>
 800e716:	4638      	mov	r0, r7
 800e718:	e663      	b.n	800e3e2 <_realloc_r+0x72>
 800e71a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e71e:	f022 0203 	bic.w	r2, r2, #3
 800e722:	4415      	add	r5, r2
 800e724:	4618      	mov	r0, r3
 800e726:	e64a      	b.n	800e3be <_realloc_r+0x4e>
 800e728:	4621      	mov	r1, r4
 800e72a:	4638      	mov	r0, r7
 800e72c:	4675      	mov	r5, lr
 800e72e:	463c      	mov	r4, r7
 800e730:	f004 f94c 	bl	80129cc <memmove>
 800e734:	465f      	mov	r7, fp
 800e736:	f8db 0004 	ldr.w	r0, [fp, #4]
 800e73a:	e640      	b.n	800e3be <_realloc_r+0x4e>
 800e73c:	4621      	mov	r1, r4
 800e73e:	4638      	mov	r0, r7
 800e740:	f8cd c004 	str.w	ip, [sp, #4]
 800e744:	f004 f942 	bl	80129cc <memmove>
 800e748:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e74c:	e7d0      	b.n	800e6f0 <_realloc_r+0x380>
 800e74e:	bf00      	nop

0800e750 <lflush>:
 800e750:	8983      	ldrh	r3, [r0, #12]
 800e752:	f003 0309 	and.w	r3, r3, #9
 800e756:	2b09      	cmp	r3, #9
 800e758:	d001      	beq.n	800e75e <lflush+0xe>
 800e75a:	2000      	movs	r0, #0
 800e75c:	4770      	bx	lr
 800e75e:	f003 bd25 	b.w	80121ac <fflush>
 800e762:	bf00      	nop

0800e764 <__srefill_r>:
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	460c      	mov	r4, r1
 800e768:	4605      	mov	r5, r0
 800e76a:	b110      	cbz	r0, 800e772 <__srefill_r+0xe>
 800e76c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d043      	beq.n	800e7fa <__srefill_r+0x96>
 800e772:	89a2      	ldrh	r2, [r4, #12]
 800e774:	b293      	uxth	r3, r2
 800e776:	0499      	lsls	r1, r3, #18
 800e778:	d407      	bmi.n	800e78a <__srefill_r+0x26>
 800e77a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e77c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e784:	6663      	str	r3, [r4, #100]	; 0x64
 800e786:	81a2      	strh	r2, [r4, #12]
 800e788:	b293      	uxth	r3, r2
 800e78a:	2100      	movs	r1, #0
 800e78c:	069f      	lsls	r7, r3, #26
 800e78e:	6061      	str	r1, [r4, #4]
 800e790:	d430      	bmi.n	800e7f4 <__srefill_r+0x90>
 800e792:	075e      	lsls	r6, r3, #29
 800e794:	d521      	bpl.n	800e7da <__srefill_r+0x76>
 800e796:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e798:	b161      	cbz	r1, 800e7b4 <__srefill_r+0x50>
 800e79a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e79e:	4299      	cmp	r1, r3
 800e7a0:	d002      	beq.n	800e7a8 <__srefill_r+0x44>
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f003 fdde 	bl	8012364 <_free_r>
 800e7a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	6063      	str	r3, [r4, #4]
 800e7ae:	6320      	str	r0, [r4, #48]	; 0x30
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d145      	bne.n	800e840 <__srefill_r+0xdc>
 800e7b4:	6923      	ldr	r3, [r4, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d053      	beq.n	800e862 <__srefill_r+0xfe>
 800e7ba:	89a6      	ldrh	r6, [r4, #12]
 800e7bc:	b2b7      	uxth	r7, r6
 800e7be:	07bb      	lsls	r3, r7, #30
 800e7c0:	d11e      	bne.n	800e800 <__srefill_r+0x9c>
 800e7c2:	6922      	ldr	r2, [r4, #16]
 800e7c4:	6a26      	ldr	r6, [r4, #32]
 800e7c6:	6022      	str	r2, [r4, #0]
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	69e1      	ldr	r1, [r4, #28]
 800e7cc:	6963      	ldr	r3, [r4, #20]
 800e7ce:	47b0      	blx	r6
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	6060      	str	r0, [r4, #4]
 800e7d4:	dd09      	ble.n	800e7ea <__srefill_r+0x86>
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7da:	06d8      	lsls	r0, r3, #27
 800e7dc:	d546      	bpl.n	800e86c <__srefill_r+0x108>
 800e7de:	0719      	lsls	r1, r3, #28
 800e7e0:	d431      	bmi.n	800e846 <__srefill_r+0xe2>
 800e7e2:	f042 0204 	orr.w	r2, r2, #4
 800e7e6:	81a2      	strh	r2, [r4, #12]
 800e7e8:	e7e4      	b.n	800e7b4 <__srefill_r+0x50>
 800e7ea:	d120      	bne.n	800e82e <__srefill_r+0xca>
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	f043 0320 	orr.w	r3, r3, #32
 800e7f2:	81a3      	strh	r3, [r4, #12]
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7fa:	f7ff f845 	bl	800d888 <__sinit>
 800e7fe:	e7b8      	b.n	800e772 <__srefill_r+0xe>
 800e800:	f244 433c 	movw	r3, #17468	; 0x443c
 800e804:	f6c0 0301 	movt	r3, #2049	; 0x801
 800e808:	2201      	movs	r2, #1
 800e80a:	f24e 7151 	movw	r1, #59217	; 0xe751
 800e80e:	6818      	ldr	r0, [r3, #0]
 800e810:	81a2      	strh	r2, [r4, #12]
 800e812:	f6c0 0100 	movt	r1, #2048	; 0x800
 800e816:	f007 0709 	and.w	r7, r7, #9
 800e81a:	f7ff f963 	bl	800dae4 <_fwalk>
 800e81e:	2f09      	cmp	r7, #9
 800e820:	81a6      	strh	r6, [r4, #12]
 800e822:	d1ce      	bne.n	800e7c2 <__srefill_r+0x5e>
 800e824:	4628      	mov	r0, r5
 800e826:	4621      	mov	r1, r4
 800e828:	f003 fbfc 	bl	8012024 <__sflush_r>
 800e82c:	e7c9      	b.n	800e7c2 <__srefill_r+0x5e>
 800e82e:	89a2      	ldrh	r2, [r4, #12]
 800e830:	2300      	movs	r3, #0
 800e832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e836:	81a2      	strh	r2, [r4, #12]
 800e838:	6063      	str	r3, [r4, #4]
 800e83a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e846:	4628      	mov	r0, r5
 800e848:	4621      	mov	r1, r4
 800e84a:	f003 fc99 	bl	8012180 <_fflush_r>
 800e84e:	2800      	cmp	r0, #0
 800e850:	d1d0      	bne.n	800e7f4 <__srefill_r+0x90>
 800e852:	89a2      	ldrh	r2, [r4, #12]
 800e854:	60a0      	str	r0, [r4, #8]
 800e856:	f022 0208 	bic.w	r2, r2, #8
 800e85a:	0412      	lsls	r2, r2, #16
 800e85c:	61a0      	str	r0, [r4, #24]
 800e85e:	0c12      	lsrs	r2, r2, #16
 800e860:	e7bf      	b.n	800e7e2 <__srefill_r+0x7e>
 800e862:	4628      	mov	r0, r5
 800e864:	4621      	mov	r1, r4
 800e866:	f004 f83f 	bl	80128e8 <__smakebuf_r>
 800e86a:	e7a6      	b.n	800e7ba <__srefill_r+0x56>
 800e86c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e870:	2309      	movs	r3, #9
 800e872:	602b      	str	r3, [r5, #0]
 800e874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e878:	81a2      	strh	r2, [r4, #12]
 800e87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e87c <_init_signal_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	f8d0 52dc 	ldr.w	r5, [r0, #732]	; 0x2dc
 800e882:	4604      	mov	r4, r0
 800e884:	b10d      	cbz	r5, 800e88a <_init_signal_r+0xe>
 800e886:	2000      	movs	r0, #0
 800e888:	bd38      	pop	{r3, r4, r5, pc}
 800e88a:	2180      	movs	r1, #128	; 0x80
 800e88c:	f7ff f9fa 	bl	800dc84 <_malloc_r>
 800e890:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 800e894:	b158      	cbz	r0, 800e8ae <_init_signal_r+0x32>
 800e896:	462b      	mov	r3, r5
 800e898:	4602      	mov	r2, r0
 800e89a:	4629      	mov	r1, r5
 800e89c:	e001      	b.n	800e8a2 <_init_signal_r+0x26>
 800e89e:	f8d4 22dc 	ldr.w	r2, [r4, #732]	; 0x2dc
 800e8a2:	50d1      	str	r1, [r2, r3]
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	2b80      	cmp	r3, #128	; 0x80
 800e8a8:	d1f9      	bne.n	800e89e <_init_signal_r+0x22>
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	bd38      	pop	{r3, r4, r5, pc}
 800e8ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8b2:	bd38      	pop	{r3, r4, r5, pc}

0800e8b4 <_signal_r>:
 800e8b4:	b510      	push	{r4, lr}
 800e8b6:	291f      	cmp	r1, #31
 800e8b8:	b082      	sub	sp, #8
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	d808      	bhi.n	800e8d0 <_signal_r+0x1c>
 800e8be:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800e8c2:	b15b      	cbz	r3, 800e8dc <_signal_r+0x28>
 800e8c4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800e8c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800e8cc:	b002      	add	sp, #8
 800e8ce:	bd10      	pop	{r4, pc}
 800e8d0:	2316      	movs	r3, #22
 800e8d2:	6003      	str	r3, [r0, #0]
 800e8d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8d8:	b002      	add	sp, #8
 800e8da:	bd10      	pop	{r4, pc}
 800e8dc:	9101      	str	r1, [sp, #4]
 800e8de:	9200      	str	r2, [sp, #0]
 800e8e0:	f7ff ffcc 	bl	800e87c <_init_signal_r>
 800e8e4:	9901      	ldr	r1, [sp, #4]
 800e8e6:	9a00      	ldr	r2, [sp, #0]
 800e8e8:	b910      	cbnz	r0, 800e8f0 <_signal_r+0x3c>
 800e8ea:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 800e8ee:	e7e9      	b.n	800e8c4 <_signal_r+0x10>
 800e8f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8f4:	e7ea      	b.n	800e8cc <_signal_r+0x18>
 800e8f6:	bf00      	nop

0800e8f8 <_raise_r>:
 800e8f8:	291f      	cmp	r1, #31
 800e8fa:	b538      	push	{r3, r4, r5, lr}
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	4605      	mov	r5, r0
 800e900:	d820      	bhi.n	800e944 <_raise_r+0x4c>
 800e902:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800e906:	b19a      	cbz	r2, 800e930 <_raise_r+0x38>
 800e908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e90c:	b183      	cbz	r3, 800e930 <_raise_r+0x38>
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d00c      	beq.n	800e92c <_raise_r+0x34>
 800e912:	1c59      	adds	r1, r3, #1
 800e914:	d006      	beq.n	800e924 <_raise_r+0x2c>
 800e916:	2500      	movs	r5, #0
 800e918:	4620      	mov	r0, r4
 800e91a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800e91e:	4798      	blx	r3
 800e920:	4628      	mov	r0, r5
 800e922:	bd38      	pop	{r3, r4, r5, pc}
 800e924:	2316      	movs	r3, #22
 800e926:	6003      	str	r3, [r0, #0]
 800e928:	2001      	movs	r0, #1
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	2000      	movs	r0, #0
 800e92e:	bd38      	pop	{r3, r4, r5, pc}
 800e930:	4628      	mov	r0, r5
 800e932:	f000 f86d 	bl	800ea10 <_getpid_r>
 800e936:	4622      	mov	r2, r4
 800e938:	4601      	mov	r1, r0
 800e93a:	4628      	mov	r0, r5
 800e93c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e940:	f000 b852 	b.w	800e9e8 <_kill_r>
 800e944:	2316      	movs	r3, #22
 800e946:	6003      	str	r3, [r0, #0]
 800e948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e94c:	bd38      	pop	{r3, r4, r5, pc}
 800e94e:	bf00      	nop

0800e950 <__sigtramp_r>:
 800e950:	b510      	push	{r4, lr}
 800e952:	291f      	cmp	r1, #31
 800e954:	b082      	sub	sp, #8
 800e956:	4604      	mov	r4, r0
 800e958:	d820      	bhi.n	800e99c <__sigtramp_r+0x4c>
 800e95a:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 800e95e:	b1ab      	cbz	r3, 800e98c <__sigtramp_r+0x3c>
 800e960:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800e964:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e968:	b172      	cbz	r2, 800e988 <__sigtramp_r+0x38>
 800e96a:	1c50      	adds	r0, r2, #1
 800e96c:	bf08      	it	eq
 800e96e:	2002      	moveq	r0, #2
 800e970:	d008      	beq.n	800e984 <__sigtramp_r+0x34>
 800e972:	2a01      	cmp	r2, #1
 800e974:	bf08      	it	eq
 800e976:	2003      	moveq	r0, #3
 800e978:	d004      	beq.n	800e984 <__sigtramp_r+0x34>
 800e97a:	2400      	movs	r4, #0
 800e97c:	4608      	mov	r0, r1
 800e97e:	601c      	str	r4, [r3, #0]
 800e980:	4790      	blx	r2
 800e982:	4620      	mov	r0, r4
 800e984:	b002      	add	sp, #8
 800e986:	bd10      	pop	{r4, pc}
 800e988:	2001      	movs	r0, #1
 800e98a:	e7fb      	b.n	800e984 <__sigtramp_r+0x34>
 800e98c:	9101      	str	r1, [sp, #4]
 800e98e:	f7ff ff75 	bl	800e87c <_init_signal_r>
 800e992:	9901      	ldr	r1, [sp, #4]
 800e994:	b910      	cbnz	r0, 800e99c <__sigtramp_r+0x4c>
 800e996:	f8d4 32dc 	ldr.w	r3, [r4, #732]	; 0x2dc
 800e99a:	e7e1      	b.n	800e960 <__sigtramp_r+0x10>
 800e99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9a0:	e7f0      	b.n	800e984 <__sigtramp_r+0x34>
 800e9a2:	bf00      	nop

0800e9a4 <raise>:
 800e9a4:	f240 5388 	movw	r3, #1416	; 0x588
 800e9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9ac:	4601      	mov	r1, r0
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	f7ff bfa2 	b.w	800e8f8 <_raise_r>

0800e9b4 <signal>:
 800e9b4:	f240 5388 	movw	r3, #1416	; 0x588
 800e9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9bc:	460a      	mov	r2, r1
 800e9be:	4601      	mov	r1, r0
 800e9c0:	6818      	ldr	r0, [r3, #0]
 800e9c2:	f7ff bf77 	b.w	800e8b4 <_signal_r>
 800e9c6:	bf00      	nop

0800e9c8 <_init_signal>:
 800e9c8:	f240 5388 	movw	r3, #1416	; 0x588
 800e9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9d0:	6818      	ldr	r0, [r3, #0]
 800e9d2:	f7ff bf53 	b.w	800e87c <_init_signal_r>
 800e9d6:	bf00      	nop

0800e9d8 <__sigtramp>:
 800e9d8:	f240 5388 	movw	r3, #1416	; 0x588
 800e9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800e9e0:	4601      	mov	r1, r0
 800e9e2:	6818      	ldr	r0, [r3, #0]
 800e9e4:	f7ff bfb4 	b.w	800e950 <__sigtramp_r>

0800e9e8 <_kill_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	f641 342c 	movw	r4, #6956	; 0x1b2c
 800e9ee:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	4605      	mov	r5, r0
 800e9f6:	4608      	mov	r0, r1
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	6023      	str	r3, [r4, #0]
 800e9fc:	f7f9 faa0 	bl	8007f40 <_kill>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	d000      	beq.n	800ea06 <_kill_r+0x1e>
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d0fb      	beq.n	800ea04 <_kill_r+0x1c>
 800ea0c:	602b      	str	r3, [r5, #0]
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}

0800ea10 <_getpid_r>:
 800ea10:	f7f9 baaa 	b.w	8007f68 <_getpid>

0800ea14 <__sread>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	460c      	mov	r4, r1
 800ea18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1c:	f004 fcb4 	bl	8013388 <_read_r>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	bfab      	itete	ge
 800ea24:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800ea26:	89a3      	ldrhlt	r3, [r4, #12]
 800ea28:	181b      	addge	r3, r3, r0
 800ea2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea2e:	bfac      	ite	ge
 800ea30:	6523      	strge	r3, [r4, #80]	; 0x50
 800ea32:	81a3      	strhlt	r3, [r4, #12]
 800ea34:	bd10      	pop	{r4, pc}
 800ea36:	bf00      	nop

0800ea38 <__seofread>:
 800ea38:	2000      	movs	r0, #0
 800ea3a:	4770      	bx	lr

0800ea3c <__swrite>:
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	460c      	mov	r4, r1
 800ea42:	8989      	ldrh	r1, [r1, #12]
 800ea44:	461d      	mov	r5, r3
 800ea46:	05cb      	lsls	r3, r1, #23
 800ea48:	4616      	mov	r6, r2
 800ea4a:	4607      	mov	r7, r0
 800ea4c:	d506      	bpl.n	800ea5c <__swrite+0x20>
 800ea4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea52:	2200      	movs	r2, #0
 800ea54:	2302      	movs	r3, #2
 800ea56:	f003 ff31 	bl	80128bc <_lseek_r>
 800ea5a:	89a1      	ldrh	r1, [r4, #12]
 800ea5c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800ea60:	81a1      	strh	r1, [r4, #12]
 800ea62:	4638      	mov	r0, r7
 800ea64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea68:	4632      	mov	r2, r6
 800ea6a:	462b      	mov	r3, r5
 800ea6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	f002 b9c2 	b.w	8010df8 <_write_r>

0800ea74 <__sseek>:
 800ea74:	b510      	push	{r4, lr}
 800ea76:	460c      	mov	r4, r1
 800ea78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea7c:	f003 ff1e 	bl	80128bc <_lseek_r>
 800ea80:	89a3      	ldrh	r3, [r4, #12]
 800ea82:	1c42      	adds	r2, r0, #1
 800ea84:	bf0e      	itee	eq
 800ea86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea8e:	6520      	strne	r0, [r4, #80]	; 0x50
 800ea90:	81a3      	strh	r3, [r4, #12]
 800ea92:	bd10      	pop	{r4, pc}

0800ea94 <__sclose>:
 800ea94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea98:	f002 ba28 	b.w	8010eec <_close_r>

0800ea9c <strlen>:
 800ea9c:	f020 0103 	bic.w	r1, r0, #3
 800eaa0:	f010 0003 	ands.w	r0, r0, #3
 800eaa4:	f1c0 0000 	rsb	r0, r0, #0
 800eaa8:	f851 3b04 	ldr.w	r3, [r1], #4
 800eaac:	f100 0c04 	add.w	ip, r0, #4
 800eab0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800eab4:	f06f 0200 	mvn.w	r2, #0
 800eab8:	bf1c      	itt	ne
 800eaba:	fa22 f20c 	lsrne.w	r2, r2, ip
 800eabe:	4313      	orrne	r3, r2
 800eac0:	f04f 0c01 	mov.w	ip, #1
 800eac4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800eac8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800eacc:	eba3 020c 	sub.w	r2, r3, ip
 800ead0:	ea22 0203 	bic.w	r2, r2, r3
 800ead4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800ead8:	bf04      	itt	eq
 800eada:	f851 3b04 	ldreq.w	r3, [r1], #4
 800eade:	3004      	addeq	r0, #4
 800eae0:	d0f4      	beq.n	800eacc <strlen+0x30>
 800eae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800eae6:	bf1f      	itttt	ne
 800eae8:	3001      	addne	r0, #1
 800eaea:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800eaee:	3001      	addne	r0, #1
 800eaf0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800eaf4:	bf18      	it	ne
 800eaf6:	3001      	addne	r0, #1
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop

0800eafc <__sprint_r.part.0>:
 800eafc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800eafe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb02:	049c      	lsls	r4, r3, #18
 800eb04:	460e      	mov	r6, r1
 800eb06:	4680      	mov	r8, r0
 800eb08:	4691      	mov	r9, r2
 800eb0a:	d52b      	bpl.n	800eb64 <__sprint_r.part.0+0x68>
 800eb0c:	6893      	ldr	r3, [r2, #8]
 800eb0e:	6812      	ldr	r2, [r2, #0]
 800eb10:	f102 0a08 	add.w	sl, r2, #8
 800eb14:	b323      	cbz	r3, 800eb60 <__sprint_r.part.0+0x64>
 800eb16:	e91a 00a0 	ldmdb	sl, {r5, r7}
 800eb1a:	08bf      	lsrs	r7, r7, #2
 800eb1c:	bf1c      	itt	ne
 800eb1e:	3d04      	subne	r5, #4
 800eb20:	2400      	movne	r4, #0
 800eb22:	d102      	bne.n	800eb2a <__sprint_r.part.0+0x2e>
 800eb24:	e014      	b.n	800eb50 <__sprint_r.part.0+0x54>
 800eb26:	42a7      	cmp	r7, r4
 800eb28:	d010      	beq.n	800eb4c <__sprint_r.part.0+0x50>
 800eb2a:	4640      	mov	r0, r8
 800eb2c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800eb30:	4632      	mov	r2, r6
 800eb32:	f003 fb4f 	bl	80121d4 <_fputwc_r>
 800eb36:	1c43      	adds	r3, r0, #1
 800eb38:	f104 0401 	add.w	r4, r4, #1
 800eb3c:	d1f3      	bne.n	800eb26 <__sprint_r.part.0+0x2a>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f8c9 3008 	str.w	r3, [r9, #8]
 800eb44:	f8c9 3004 	str.w	r3, [r9, #4]
 800eb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800eb50:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 800eb54:	f8c9 3008 	str.w	r3, [r9, #8]
 800eb58:	f10a 0a08 	add.w	sl, sl, #8
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1da      	bne.n	800eb16 <__sprint_r.part.0+0x1a>
 800eb60:	2000      	movs	r0, #0
 800eb62:	e7ec      	b.n	800eb3e <__sprint_r.part.0+0x42>
 800eb64:	f003 fccc 	bl	8012500 <__sfvwrite_r>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f8c9 3008 	str.w	r3, [r9, #8]
 800eb6e:	f8c9 3004 	str.w	r3, [r9, #4]
 800eb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb76:	bf00      	nop

0800eb78 <__sprint_r>:
 800eb78:	6893      	ldr	r3, [r2, #8]
 800eb7a:	b410      	push	{r4}
 800eb7c:	b11b      	cbz	r3, 800eb86 <__sprint_r+0xe>
 800eb7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb82:	f7ff bfbb 	b.w	800eafc <__sprint_r.part.0>
 800eb86:	4618      	mov	r0, r3
 800eb88:	6053      	str	r3, [r2, #4]
 800eb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <_vfiprintf_r>:
 800eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb94:	b0b1      	sub	sp, #196	; 0xc4
 800eb96:	461c      	mov	r4, r3
 800eb98:	9102      	str	r1, [sp, #8]
 800eb9a:	4690      	mov	r8, r2
 800eb9c:	9308      	str	r3, [sp, #32]
 800eb9e:	9006      	str	r0, [sp, #24]
 800eba0:	b118      	cbz	r0, 800ebaa <_vfiprintf_r+0x1a>
 800eba2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 80f1 	beq.w	800ed8c <_vfiprintf_r+0x1fc>
 800ebaa:	9d02      	ldr	r5, [sp, #8]
 800ebac:	89a9      	ldrh	r1, [r5, #12]
 800ebae:	b28a      	uxth	r2, r1
 800ebb0:	0497      	lsls	r7, r2, #18
 800ebb2:	d407      	bmi.n	800ebc4 <_vfiprintf_r+0x34>
 800ebb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebb6:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 800ebba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebbe:	81aa      	strh	r2, [r5, #12]
 800ebc0:	666b      	str	r3, [r5, #100]	; 0x64
 800ebc2:	b292      	uxth	r2, r2
 800ebc4:	0716      	lsls	r6, r2, #28
 800ebc6:	f140 80c1 	bpl.w	800ed4c <_vfiprintf_r+0x1bc>
 800ebca:	9d02      	ldr	r5, [sp, #8]
 800ebcc:	692b      	ldr	r3, [r5, #16]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 80bc 	beq.w	800ed4c <_vfiprintf_r+0x1bc>
 800ebd4:	f002 021a 	and.w	r2, r2, #26
 800ebd8:	2a0a      	cmp	r2, #10
 800ebda:	f000 80c3 	beq.w	800ed64 <_vfiprintf_r+0x1d4>
 800ebde:	f10d 047f 	add.w	r4, sp, #127	; 0x7f
 800ebe2:	9401      	str	r4, [sp, #4]
 800ebe4:	9d01      	ldr	r5, [sp, #4]
 800ebe6:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 800ebea:	ebc5 050a 	rsb	r5, r5, sl
 800ebee:	f244 4480 	movw	r4, #17536	; 0x4480
 800ebf2:	950e      	str	r5, [sp, #56]	; 0x38
 800ebf4:	f244 4540 	movw	r5, #17472	; 0x4440
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	f6c0 0501 	movt	r5, #2049	; 0x801
 800ebfe:	f6c0 0401 	movt	r4, #2049	; 0x801
 800ec02:	930d      	str	r3, [sp, #52]	; 0x34
 800ec04:	9315      	str	r3, [sp, #84]	; 0x54
 800ec06:	9314      	str	r3, [sp, #80]	; 0x50
 800ec08:	9309      	str	r3, [sp, #36]	; 0x24
 800ec0a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800ec0e:	950a      	str	r5, [sp, #40]	; 0x28
 800ec10:	4656      	mov	r6, sl
 800ec12:	4627      	mov	r7, r4
 800ec14:	f898 3000 	ldrb.w	r3, [r8]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	bf18      	it	ne
 800ec1c:	2b25      	cmpne	r3, #37	; 0x25
 800ec1e:	f000 839f 	beq.w	800f360 <_vfiprintf_r+0x7d0>
 800ec22:	f108 0201 	add.w	r2, r8, #1
 800ec26:	4614      	mov	r4, r2
 800ec28:	3201      	adds	r2, #1
 800ec2a:	7823      	ldrb	r3, [r4, #0]
 800ec2c:	2b25      	cmp	r3, #37	; 0x25
 800ec2e:	bf18      	it	ne
 800ec30:	2b00      	cmpne	r3, #0
 800ec32:	d1f8      	bne.n	800ec26 <_vfiprintf_r+0x96>
 800ec34:	ebb4 0508 	subs.w	r5, r4, r8
 800ec38:	d00f      	beq.n	800ec5a <_vfiprintf_r+0xca>
 800ec3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ec3e:	f8c6 8000 	str.w	r8, [r6]
 800ec42:	3301      	adds	r3, #1
 800ec44:	442a      	add	r2, r5
 800ec46:	2b07      	cmp	r3, #7
 800ec48:	6075      	str	r5, [r6, #4]
 800ec4a:	9215      	str	r2, [sp, #84]	; 0x54
 800ec4c:	9314      	str	r3, [sp, #80]	; 0x50
 800ec4e:	bfd8      	it	le
 800ec50:	3608      	addle	r6, #8
 800ec52:	dc75      	bgt.n	800ed40 <_vfiprintf_r+0x1b0>
 800ec54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec56:	4428      	add	r0, r5
 800ec58:	9009      	str	r0, [sp, #36]	; 0x24
 800ec5a:	7823      	ldrb	r3, [r4, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 838c 	beq.w	800f37a <_vfiprintf_r+0x7ea>
 800ec62:	2300      	movs	r3, #0
 800ec64:	4619      	mov	r1, r3
 800ec66:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 800ec6a:	9305      	str	r3, [sp, #20]
 800ec6c:	469c      	mov	ip, r3
 800ec6e:	f104 0801 	add.w	r8, r4, #1
 800ec72:	7863      	ldrb	r3, [r4, #1]
 800ec74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ec78:	9404      	str	r4, [sp, #16]
 800ec7a:	4608      	mov	r0, r1
 800ec7c:	f108 0801 	add.w	r8, r8, #1
 800ec80:	f1a3 0220 	sub.w	r2, r3, #32
 800ec84:	2a58      	cmp	r2, #88	; 0x58
 800ec86:	f200 82c2 	bhi.w	800f20e <_vfiprintf_r+0x67e>
 800ec8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ec8e:	01ee      	.short	0x01ee
 800ec90:	02c002c0 	.word	0x02c002c0
 800ec94:	02c001f5 	.word	0x02c001f5
 800ec98:	02c002c0 	.word	0x02c002c0
 800ec9c:	02c002c0 	.word	0x02c002c0
 800eca0:	01fa02c0 	.word	0x01fa02c0
 800eca4:	02c00205 	.word	0x02c00205
 800eca8:	02090084 	.word	0x02090084
 800ecac:	024e02c0 	.word	0x024e02c0
 800ecb0:	02530253 	.word	0x02530253
 800ecb4:	02530253 	.word	0x02530253
 800ecb8:	02530253 	.word	0x02530253
 800ecbc:	02530253 	.word	0x02530253
 800ecc0:	02c00253 	.word	0x02c00253
 800ecc4:	02c002c0 	.word	0x02c002c0
 800ecc8:	02c002c0 	.word	0x02c002c0
 800eccc:	02c002c0 	.word	0x02c002c0
 800ecd0:	02c002c0 	.word	0x02c002c0
 800ecd4:	026102c0 	.word	0x026102c0
 800ecd8:	02c002c0 	.word	0x02c002c0
 800ecdc:	02c002c0 	.word	0x02c002c0
 800ece0:	02c002c0 	.word	0x02c002c0
 800ece4:	02c002c0 	.word	0x02c002c0
 800ece8:	02c002c0 	.word	0x02c002c0
 800ecec:	02c0027b 	.word	0x02c0027b
 800ecf0:	02c002c0 	.word	0x02c002c0
 800ecf4:	02c002c0 	.word	0x02c002c0
 800ecf8:	02c00291 	.word	0x02c00291
 800ecfc:	02a702c0 	.word	0x02a702c0
 800ed00:	02c002c0 	.word	0x02c002c0
 800ed04:	02c002c0 	.word	0x02c002c0
 800ed08:	02c002c0 	.word	0x02c002c0
 800ed0c:	02c002c0 	.word	0x02c002c0
 800ed10:	02c002c0 	.word	0x02c002c0
 800ed14:	01d401c1 	.word	0x01d401c1
 800ed18:	02c002c0 	.word	0x02c002c0
 800ed1c:	017402c0 	.word	0x017402c0
 800ed20:	02c001d4 	.word	0x02c001d4
 800ed24:	017902c0 	.word	0x017902c0
 800ed28:	018602c0 	.word	0x018602c0
 800ed2c:	015a0089 	.word	0x015a0089
 800ed30:	02c0016f 	.word	0x02c0016f
 800ed34:	02c00198 	.word	0x02c00198
 800ed38:	02c0014a 	.word	0x02c0014a
 800ed3c:	022902c0 	.word	0x022902c0
 800ed40:	2a00      	cmp	r2, #0
 800ed42:	f040 8439 	bne.w	800f5b8 <_vfiprintf_r+0xa28>
 800ed46:	9214      	str	r2, [sp, #80]	; 0x50
 800ed48:	4656      	mov	r6, sl
 800ed4a:	e783      	b.n	800ec54 <_vfiprintf_r+0xc4>
 800ed4c:	9806      	ldr	r0, [sp, #24]
 800ed4e:	9902      	ldr	r1, [sp, #8]
 800ed50:	f002 f868 	bl	8010e24 <__swsetup_r>
 800ed54:	b9a8      	cbnz	r0, 800ed82 <_vfiprintf_r+0x1f2>
 800ed56:	9d02      	ldr	r5, [sp, #8]
 800ed58:	89aa      	ldrh	r2, [r5, #12]
 800ed5a:	f002 021a 	and.w	r2, r2, #26
 800ed5e:	2a0a      	cmp	r2, #10
 800ed60:	f47f af3d 	bne.w	800ebde <_vfiprintf_r+0x4e>
 800ed64:	9d02      	ldr	r5, [sp, #8]
 800ed66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f6ff af37 	blt.w	800ebde <_vfiprintf_r+0x4e>
 800ed70:	9806      	ldr	r0, [sp, #24]
 800ed72:	4629      	mov	r1, r5
 800ed74:	4642      	mov	r2, r8
 800ed76:	4623      	mov	r3, r4
 800ed78:	f000 fd16 	bl	800f7a8 <__sbprintf>
 800ed7c:	b031      	add	sp, #196	; 0xc4
 800ed7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed86:	b031      	add	sp, #196	; 0xc4
 800ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8c:	f7fe fd7c 	bl	800d888 <__sinit>
 800ed90:	e70b      	b.n	800ebaa <_vfiprintf_r+0x1a>
 800ed92:	4240      	negs	r0, r0
 800ed94:	9308      	str	r3, [sp, #32]
 800ed96:	f04c 0c04 	orr.w	ip, ip, #4
 800ed9a:	f898 3000 	ldrb.w	r3, [r8]
 800ed9e:	e76d      	b.n	800ec7c <_vfiprintf_r+0xec>
 800eda0:	f01c 0320 	ands.w	r3, ip, #32
 800eda4:	9005      	str	r0, [sp, #20]
 800eda6:	f000 81f4 	beq.w	800f192 <_vfiprintf_r+0x602>
 800edaa:	9c08      	ldr	r4, [sp, #32]
 800edac:	1de3      	adds	r3, r4, #7
 800edae:	f023 0307 	bic.w	r3, r3, #7
 800edb2:	f103 0508 	add.w	r5, r3, #8
 800edb6:	9508      	str	r5, [sp, #32]
 800edb8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800edbc:	2300      	movs	r3, #0
 800edbe:	f04f 0b00 	mov.w	fp, #0
 800edc2:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
 800edc6:	9904      	ldr	r1, [sp, #16]
 800edc8:	9804      	ldr	r0, [sp, #16]
 800edca:	2900      	cmp	r1, #0
 800edcc:	bfa8      	it	ge
 800edce:	f02c 0c80 	bicge.w	ip, ip, #128	; 0x80
 800edd2:	ea54 0205 	orrs.w	r2, r4, r5
 800edd6:	bf0c      	ite	eq
 800edd8:	2200      	moveq	r2, #0
 800edda:	2201      	movne	r2, #1
 800eddc:	2800      	cmp	r0, #0
 800edde:	bf18      	it	ne
 800ede0:	f042 0201 	orrne.w	r2, r2, #1
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	f000 8344 	beq.w	800f472 <_vfiprintf_r+0x8e2>
 800edea:	2b01      	cmp	r3, #1
 800edec:	f000 83ad 	beq.w	800f54a <_vfiprintf_r+0x9ba>
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	f10d 027f 	add.w	r2, sp, #127	; 0x7f
 800edf6:	d170      	bne.n	800eeda <_vfiprintf_r+0x34a>
 800edf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800edfa:	f004 000f 	and.w	r0, r4, #15
 800edfe:	0923      	lsrs	r3, r4, #4
 800ee00:	4691      	mov	r9, r2
 800ee02:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800ee06:	5c0a      	ldrb	r2, [r1, r0]
 800ee08:	0928      	lsrs	r0, r5, #4
 800ee0a:	461c      	mov	r4, r3
 800ee0c:	4605      	mov	r5, r0
 800ee0e:	ea54 0005 	orrs.w	r0, r4, r5
 800ee12:	f889 2000 	strb.w	r2, [r9]
 800ee16:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800ee1a:	d1ee      	bne.n	800edfa <_vfiprintf_r+0x26a>
 800ee1c:	ebc9 030a 	rsb	r3, r9, sl
 800ee20:	9307      	str	r3, [sp, #28]
 800ee22:	9b07      	ldr	r3, [sp, #28]
 800ee24:	9d04      	ldr	r5, [sp, #16]
 800ee26:	42ab      	cmp	r3, r5
 800ee28:	bfb8      	it	lt
 800ee2a:	462b      	movlt	r3, r5
 800ee2c:	9303      	str	r3, [sp, #12]
 800ee2e:	f1bb 0f00 	cmp.w	fp, #0
 800ee32:	d001      	beq.n	800ee38 <_vfiprintf_r+0x2a8>
 800ee34:	3301      	adds	r3, #1
 800ee36:	9303      	str	r3, [sp, #12]
 800ee38:	f01c 0402 	ands.w	r4, ip, #2
 800ee3c:	bf18      	it	ne
 800ee3e:	9d03      	ldrne	r5, [sp, #12]
 800ee40:	940b      	str	r4, [sp, #44]	; 0x2c
 800ee42:	bf1c      	itt	ne
 800ee44:	3502      	addne	r5, #2
 800ee46:	9503      	strne	r5, [sp, #12]
 800ee48:	f01c 0384 	ands.w	r3, ip, #132	; 0x84
 800ee4c:	930c      	str	r3, [sp, #48]	; 0x30
 800ee4e:	f040 81fc 	bne.w	800f24a <_vfiprintf_r+0x6ba>
 800ee52:	9d05      	ldr	r5, [sp, #20]
 800ee54:	9b03      	ldr	r3, [sp, #12]
 800ee56:	1aec      	subs	r4, r5, r3
 800ee58:	2c00      	cmp	r4, #0
 800ee5a:	f340 81f6 	ble.w	800f24a <_vfiprintf_r+0x6ba>
 800ee5e:	2c10      	cmp	r4, #16
 800ee60:	f340 8458 	ble.w	800f714 <_vfiprintf_r+0xb84>
 800ee64:	f244 4540 	movw	r5, #17472	; 0x4440
 800ee68:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ee6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ee6e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ee70:	46b4      	mov	ip, r6
 800ee72:	f6c0 0501 	movt	r5, #2049	; 0x801
 800ee76:	f04f 0b10 	mov.w	fp, #16
 800ee7a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ee7c:	e006      	b.n	800ee8c <_vfiprintf_r+0x2fc>
 800ee7e:	1c83      	adds	r3, r0, #2
 800ee80:	f10c 0c08 	add.w	ip, ip, #8
 800ee84:	4608      	mov	r0, r1
 800ee86:	3c10      	subs	r4, #16
 800ee88:	2c10      	cmp	r4, #16
 800ee8a:	dd11      	ble.n	800eeb0 <_vfiprintf_r+0x320>
 800ee8c:	1c41      	adds	r1, r0, #1
 800ee8e:	3210      	adds	r2, #16
 800ee90:	2907      	cmp	r1, #7
 800ee92:	9215      	str	r2, [sp, #84]	; 0x54
 800ee94:	e88c 0840 	stmia.w	ip, {r6, fp}
 800ee98:	9114      	str	r1, [sp, #80]	; 0x50
 800ee9a:	ddf0      	ble.n	800ee7e <_vfiprintf_r+0x2ee>
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	2a00      	cmp	r2, #0
 800eea0:	f040 81c6 	bne.w	800f230 <_vfiprintf_r+0x6a0>
 800eea4:	3c10      	subs	r4, #16
 800eea6:	2c10      	cmp	r4, #16
 800eea8:	f04f 0301 	mov.w	r3, #1
 800eeac:	46d4      	mov	ip, sl
 800eeae:	dced      	bgt.n	800ee8c <_vfiprintf_r+0x2fc>
 800eeb0:	4666      	mov	r6, ip
 800eeb2:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800eeb6:	2b07      	cmp	r3, #7
 800eeb8:	4422      	add	r2, r4
 800eeba:	6035      	str	r5, [r6, #0]
 800eebc:	6074      	str	r4, [r6, #4]
 800eebe:	9215      	str	r2, [sp, #84]	; 0x54
 800eec0:	9314      	str	r3, [sp, #80]	; 0x50
 800eec2:	bfdc      	itt	le
 800eec4:	3608      	addle	r6, #8
 800eec6:	1c58      	addle	r0, r3, #1
 800eec8:	f340 81c2 	ble.w	800f250 <_vfiprintf_r+0x6c0>
 800eecc:	2a00      	cmp	r2, #0
 800eece:	f040 83e8 	bne.w	800f6a2 <_vfiprintf_r+0xb12>
 800eed2:	4613      	mov	r3, r2
 800eed4:	2001      	movs	r0, #1
 800eed6:	4656      	mov	r6, sl
 800eed8:	e1ba      	b.n	800f250 <_vfiprintf_r+0x6c0>
 800eeda:	08e3      	lsrs	r3, r4, #3
 800eedc:	4691      	mov	r9, r2
 800eede:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 800eee2:	08ea      	lsrs	r2, r5, #3
 800eee4:	f004 0107 	and.w	r1, r4, #7
 800eee8:	4615      	mov	r5, r2
 800eeea:	461c      	mov	r4, r3
 800eeec:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800eef0:	ea54 0105 	orrs.w	r1, r4, r5
 800eef4:	f889 3000 	strb.w	r3, [r9]
 800eef8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800eefc:	d1ed      	bne.n	800eeda <_vfiprintf_r+0x34a>
 800eefe:	f01c 0f01 	tst.w	ip, #1
 800ef02:	4649      	mov	r1, r9
 800ef04:	d08a      	beq.n	800ee1c <_vfiprintf_r+0x28c>
 800ef06:	2b30      	cmp	r3, #48	; 0x30
 800ef08:	bf17      	itett	ne
 800ef0a:	4691      	movne	r9, r2
 800ef0c:	ebc9 040a 	rsbeq	r4, r9, sl
 800ef10:	2330      	movne	r3, #48	; 0x30
 800ef12:	ebc9 050a 	rsbne	r5, r9, sl
 800ef16:	bf0e      	itee	eq
 800ef18:	9407      	streq	r4, [sp, #28]
 800ef1a:	9507      	strne	r5, [sp, #28]
 800ef1c:	f801 3c01 	strbne.w	r3, [r1, #-1]
 800ef20:	e77f      	b.n	800ee22 <_vfiprintf_r+0x292>
 800ef22:	f01c 0f20 	tst.w	ip, #32
 800ef26:	9005      	str	r0, [sp, #20]
 800ef28:	f000 8149 	beq.w	800f1be <_vfiprintf_r+0x62e>
 800ef2c:	9c08      	ldr	r4, [sp, #32]
 800ef2e:	1de3      	adds	r3, r4, #7
 800ef30:	f023 0307 	bic.w	r3, r3, #7
 800ef34:	f103 0508 	add.w	r5, r3, #8
 800ef38:	9508      	str	r5, [sp, #32]
 800ef3a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e73d      	b.n	800edbe <_vfiprintf_r+0x22e>
 800ef42:	9a08      	ldr	r2, [sp, #32]
 800ef44:	9005      	str	r0, [sp, #20]
 800ef46:	2330      	movs	r3, #48	; 0x30
 800ef48:	f244 4064 	movw	r0, #17508	; 0x4464
 800ef4c:	1d15      	adds	r5, r2, #4
 800ef4e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 800ef52:	f6c0 0001 	movt	r0, #2049	; 0x801
 800ef56:	2378      	movs	r3, #120	; 0x78
 800ef58:	9508      	str	r5, [sp, #32]
 800ef5a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800ef5e:	6814      	ldr	r4, [r2, #0]
 800ef60:	900d      	str	r0, [sp, #52]	; 0x34
 800ef62:	f04c 0c02 	orr.w	ip, ip, #2
 800ef66:	2500      	movs	r5, #0
 800ef68:	2302      	movs	r3, #2
 800ef6a:	e728      	b.n	800edbe <_vfiprintf_r+0x22e>
 800ef6c:	f04c 0c20 	orr.w	ip, ip, #32
 800ef70:	f898 3000 	ldrb.w	r3, [r8]
 800ef74:	e682      	b.n	800ec7c <_vfiprintf_r+0xec>
 800ef76:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
 800ef7a:	f898 3000 	ldrb.w	r3, [r8]
 800ef7e:	e67d      	b.n	800ec7c <_vfiprintf_r+0xec>
 800ef80:	f898 3000 	ldrb.w	r3, [r8]
 800ef84:	4642      	mov	r2, r8
 800ef86:	2b6c      	cmp	r3, #108	; 0x6c
 800ef88:	bf03      	ittte	eq
 800ef8a:	f108 0801 	addeq.w	r8, r8, #1
 800ef8e:	f04c 0c20 	orreq.w	ip, ip, #32
 800ef92:	7853      	ldrbeq	r3, [r2, #1]
 800ef94:	f04c 0c10 	orrne.w	ip, ip, #16
 800ef98:	e670      	b.n	800ec7c <_vfiprintf_r+0xec>
 800ef9a:	f01c 0f20 	tst.w	ip, #32
 800ef9e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800efa2:	f000 8368 	beq.w	800f676 <_vfiprintf_r+0xae6>
 800efa6:	9c08      	ldr	r4, [sp, #32]
 800efa8:	6821      	ldr	r1, [r4, #0]
 800efaa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800efac:	17e5      	asrs	r5, r4, #31
 800efae:	462b      	mov	r3, r5
 800efb0:	9d08      	ldr	r5, [sp, #32]
 800efb2:	4622      	mov	r2, r4
 800efb4:	3504      	adds	r5, #4
 800efb6:	9508      	str	r5, [sp, #32]
 800efb8:	e9c1 2300 	strd	r2, r3, [r1]
 800efbc:	e62a      	b.n	800ec14 <_vfiprintf_r+0x84>
 800efbe:	9c08      	ldr	r4, [sp, #32]
 800efc0:	9005      	str	r0, [sp, #20]
 800efc2:	f8d4 9000 	ldr.w	r9, [r4]
 800efc6:	9808      	ldr	r0, [sp, #32]
 800efc8:	2400      	movs	r4, #0
 800efca:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 800efce:	1d05      	adds	r5, r0, #4
 800efd0:	f1b9 0f00 	cmp.w	r9, #0
 800efd4:	f000 83a7 	beq.w	800f726 <_vfiprintf_r+0xb96>
 800efd8:	9804      	ldr	r0, [sp, #16]
 800efda:	2800      	cmp	r0, #0
 800efdc:	4648      	mov	r0, r9
 800efde:	f2c0 837b 	blt.w	800f6d8 <_vfiprintf_r+0xb48>
 800efe2:	4621      	mov	r1, r4
 800efe4:	9a04      	ldr	r2, [sp, #16]
 800efe6:	f8cd c000 	str.w	ip, [sp]
 800efea:	f7ff f8fd 	bl	800e1e8 <memchr>
 800efee:	f8dd c000 	ldr.w	ip, [sp]
 800eff2:	2800      	cmp	r0, #0
 800eff4:	f000 83b0 	beq.w	800f758 <_vfiprintf_r+0xbc8>
 800eff8:	9904      	ldr	r1, [sp, #16]
 800effa:	9508      	str	r5, [sp, #32]
 800effc:	ebc9 0000 	rsb	r0, r9, r0
 800f000:	4288      	cmp	r0, r1
 800f002:	bfb8      	it	lt
 800f004:	4601      	movlt	r1, r0
 800f006:	9107      	str	r1, [sp, #28]
 800f008:	9404      	str	r4, [sp, #16]
 800f00a:	f89d b047 	ldrb.w	fp, [sp, #71]	; 0x47
 800f00e:	e708      	b.n	800ee22 <_vfiprintf_r+0x292>
 800f010:	9b08      	ldr	r3, [sp, #32]
 800f012:	9d08      	ldr	r5, [sp, #32]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	9005      	str	r0, [sp, #20]
 800f018:	2401      	movs	r4, #1
 800f01a:	2200      	movs	r2, #0
 800f01c:	3504      	adds	r5, #4
 800f01e:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800f022:	9403      	str	r4, [sp, #12]
 800f024:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 800f028:	9508      	str	r5, [sp, #32]
 800f02a:	9407      	str	r4, [sp, #28]
 800f02c:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 800f030:	2500      	movs	r5, #0
 800f032:	9504      	str	r5, [sp, #16]
 800f034:	e700      	b.n	800ee38 <_vfiprintf_r+0x2a8>
 800f036:	f01c 0f20 	tst.w	ip, #32
 800f03a:	9005      	str	r0, [sp, #20]
 800f03c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800f040:	f000 808f 	beq.w	800f162 <_vfiprintf_r+0x5d2>
 800f044:	9c08      	ldr	r4, [sp, #32]
 800f046:	1de1      	adds	r1, r4, #7
 800f048:	f021 0107 	bic.w	r1, r1, #7
 800f04c:	e9d1 2300 	ldrd	r2, r3, [r1]
 800f050:	3108      	adds	r1, #8
 800f052:	9108      	str	r1, [sp, #32]
 800f054:	4614      	mov	r4, r2
 800f056:	461d      	mov	r5, r3
 800f058:	2a00      	cmp	r2, #0
 800f05a:	f173 0100 	sbcs.w	r1, r3, #0
 800f05e:	f2c0 8300 	blt.w	800f662 <_vfiprintf_r+0xad2>
 800f062:	f89d b047 	ldrb.w	fp, [sp, #71]	; 0x47
 800f066:	2301      	movs	r3, #1
 800f068:	e6ad      	b.n	800edc6 <_vfiprintf_r+0x236>
 800f06a:	f898 3000 	ldrb.w	r3, [r8]
 800f06e:	2900      	cmp	r1, #0
 800f070:	f47f ae04 	bne.w	800ec7c <_vfiprintf_r+0xec>
 800f074:	2120      	movs	r1, #32
 800f076:	e601      	b.n	800ec7c <_vfiprintf_r+0xec>
 800f078:	f04c 0c01 	orr.w	ip, ip, #1
 800f07c:	f898 3000 	ldrb.w	r3, [r8]
 800f080:	e5fc      	b.n	800ec7c <_vfiprintf_r+0xec>
 800f082:	9d08      	ldr	r5, [sp, #32]
 800f084:	6828      	ldr	r0, [r5, #0]
 800f086:	2800      	cmp	r0, #0
 800f088:	f105 0304 	add.w	r3, r5, #4
 800f08c:	f6ff ae81 	blt.w	800ed92 <_vfiprintf_r+0x202>
 800f090:	9308      	str	r3, [sp, #32]
 800f092:	f898 3000 	ldrb.w	r3, [r8]
 800f096:	e5f1      	b.n	800ec7c <_vfiprintf_r+0xec>
 800f098:	f898 3000 	ldrb.w	r3, [r8]
 800f09c:	212b      	movs	r1, #43	; 0x2b
 800f09e:	e5ed      	b.n	800ec7c <_vfiprintf_r+0xec>
 800f0a0:	f898 3000 	ldrb.w	r3, [r8]
 800f0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f0a6:	f108 0501 	add.w	r5, r8, #1
 800f0aa:	f000 835d 	beq.w	800f768 <_vfiprintf_r+0xbd8>
 800f0ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f0b2:	2a09      	cmp	r2, #9
 800f0b4:	bf82      	ittt	hi
 800f0b6:	2400      	movhi	r4, #0
 800f0b8:	46a8      	movhi	r8, r5
 800f0ba:	9404      	strhi	r4, [sp, #16]
 800f0bc:	f63f ade0 	bhi.w	800ec80 <_vfiprintf_r+0xf0>
 800f0c0:	2400      	movs	r4, #0
 800f0c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f0c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800f0ca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800f0ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f0d2:	2a09      	cmp	r2, #9
 800f0d4:	d9f5      	bls.n	800f0c2 <_vfiprintf_r+0x532>
 800f0d6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800f0da:	9404      	str	r4, [sp, #16]
 800f0dc:	46a8      	mov	r8, r5
 800f0de:	e5cf      	b.n	800ec80 <_vfiprintf_r+0xf0>
 800f0e0:	f244 4464 	movw	r4, #17508	; 0x4464
 800f0e4:	f6c0 0401 	movt	r4, #2049	; 0x801
 800f0e8:	f01c 0f20 	tst.w	ip, #32
 800f0ec:	9005      	str	r0, [sp, #20]
 800f0ee:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800f0f2:	940d      	str	r4, [sp, #52]	; 0x34
 800f0f4:	d07d      	beq.n	800f1f2 <_vfiprintf_r+0x662>
 800f0f6:	9d08      	ldr	r5, [sp, #32]
 800f0f8:	1dea      	adds	r2, r5, #7
 800f0fa:	f022 0207 	bic.w	r2, r2, #7
 800f0fe:	f102 0408 	add.w	r4, r2, #8
 800f102:	9408      	str	r4, [sp, #32]
 800f104:	e9d2 4500 	ldrd	r4, r5, [r2]
 800f108:	f01c 0f01 	tst.w	ip, #1
 800f10c:	f000 821b 	beq.w	800f546 <_vfiprintf_r+0x9b6>
 800f110:	ea54 0005 	orrs.w	r0, r4, r5
 800f114:	f000 8217 	beq.w	800f546 <_vfiprintf_r+0x9b6>
 800f118:	2230      	movs	r2, #48	; 0x30
 800f11a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 800f11e:	f04c 0c02 	orr.w	ip, ip, #2
 800f122:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 800f126:	2302      	movs	r3, #2
 800f128:	e649      	b.n	800edbe <_vfiprintf_r+0x22e>
 800f12a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800f12e:	f898 3000 	ldrb.w	r3, [r8]
 800f132:	e5a3      	b.n	800ec7c <_vfiprintf_r+0xec>
 800f134:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f138:	2000      	movs	r0, #0
 800f13a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f13e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f142:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800f146:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f14a:	2a09      	cmp	r2, #9
 800f14c:	d9f5      	bls.n	800f13a <_vfiprintf_r+0x5aa>
 800f14e:	e597      	b.n	800ec80 <_vfiprintf_r+0xf0>
 800f150:	f04c 0c10 	orr.w	ip, ip, #16
 800f154:	f01c 0f20 	tst.w	ip, #32
 800f158:	9005      	str	r0, [sp, #20]
 800f15a:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800f15e:	f47f af71 	bne.w	800f044 <_vfiprintf_r+0x4b4>
 800f162:	f01c 0f10 	tst.w	ip, #16
 800f166:	f040 821e 	bne.w	800f5a6 <_vfiprintf_r+0xa16>
 800f16a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f16e:	f000 821a 	beq.w	800f5a6 <_vfiprintf_r+0xa16>
 800f172:	9908      	ldr	r1, [sp, #32]
 800f174:	f9b1 4000 	ldrsh.w	r4, [r1]
 800f178:	3104      	adds	r1, #4
 800f17a:	17e5      	asrs	r5, r4, #31
 800f17c:	4622      	mov	r2, r4
 800f17e:	462b      	mov	r3, r5
 800f180:	9108      	str	r1, [sp, #32]
 800f182:	e769      	b.n	800f058 <_vfiprintf_r+0x4c8>
 800f184:	f04c 0c10 	orr.w	ip, ip, #16
 800f188:	f01c 0320 	ands.w	r3, ip, #32
 800f18c:	9005      	str	r0, [sp, #20]
 800f18e:	f47f ae0c 	bne.w	800edaa <_vfiprintf_r+0x21a>
 800f192:	f01c 0210 	ands.w	r2, ip, #16
 800f196:	f040 81f3 	bne.w	800f580 <_vfiprintf_r+0x9f0>
 800f19a:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
 800f19e:	f000 81ef 	beq.w	800f580 <_vfiprintf_r+0x9f0>
 800f1a2:	9808      	ldr	r0, [sp, #32]
 800f1a4:	8804      	ldrh	r4, [r0, #0]
 800f1a6:	3004      	adds	r0, #4
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	2500      	movs	r5, #0
 800f1ac:	9008      	str	r0, [sp, #32]
 800f1ae:	e606      	b.n	800edbe <_vfiprintf_r+0x22e>
 800f1b0:	f04c 0c10 	orr.w	ip, ip, #16
 800f1b4:	f01c 0f20 	tst.w	ip, #32
 800f1b8:	9005      	str	r0, [sp, #20]
 800f1ba:	f47f aeb7 	bne.w	800ef2c <_vfiprintf_r+0x39c>
 800f1be:	f01c 0f10 	tst.w	ip, #16
 800f1c2:	f040 81e9 	bne.w	800f598 <_vfiprintf_r+0xa08>
 800f1c6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f1ca:	f000 81e5 	beq.w	800f598 <_vfiprintf_r+0xa08>
 800f1ce:	9808      	ldr	r0, [sp, #32]
 800f1d0:	8804      	ldrh	r4, [r0, #0]
 800f1d2:	3004      	adds	r0, #4
 800f1d4:	2500      	movs	r5, #0
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	9008      	str	r0, [sp, #32]
 800f1da:	e5f0      	b.n	800edbe <_vfiprintf_r+0x22e>
 800f1dc:	f244 4450 	movw	r4, #17488	; 0x4450
 800f1e0:	f6c0 0401 	movt	r4, #2049	; 0x801
 800f1e4:	f01c 0f20 	tst.w	ip, #32
 800f1e8:	9005      	str	r0, [sp, #20]
 800f1ea:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800f1ee:	940d      	str	r4, [sp, #52]	; 0x34
 800f1f0:	d181      	bne.n	800f0f6 <_vfiprintf_r+0x566>
 800f1f2:	f01c 0f10 	tst.w	ip, #16
 800f1f6:	f040 81c9 	bne.w	800f58c <_vfiprintf_r+0x9fc>
 800f1fa:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f1fe:	f000 81c5 	beq.w	800f58c <_vfiprintf_r+0x9fc>
 800f202:	9808      	ldr	r0, [sp, #32]
 800f204:	8804      	ldrh	r4, [r0, #0]
 800f206:	3004      	adds	r0, #4
 800f208:	2500      	movs	r5, #0
 800f20a:	9008      	str	r0, [sp, #32]
 800f20c:	e77c      	b.n	800f108 <_vfiprintf_r+0x578>
 800f20e:	9005      	str	r0, [sp, #20]
 800f210:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 800f214:	2b00      	cmp	r3, #0
 800f216:	f000 80b0 	beq.w	800f37a <_vfiprintf_r+0x7ea>
 800f21a:	2501      	movs	r5, #1
 800f21c:	2200      	movs	r2, #0
 800f21e:	9503      	str	r5, [sp, #12]
 800f220:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 800f224:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 800f228:	9507      	str	r5, [sp, #28]
 800f22a:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 800f22e:	e6ff      	b.n	800f030 <_vfiprintf_r+0x4a0>
 800f230:	9806      	ldr	r0, [sp, #24]
 800f232:	9902      	ldr	r1, [sp, #8]
 800f234:	aa13      	add	r2, sp, #76	; 0x4c
 800f236:	f7ff fc61 	bl	800eafc <__sprint_r.part.0>
 800f23a:	2800      	cmp	r0, #0
 800f23c:	f040 80a4 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f240:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f242:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	46d4      	mov	ip, sl
 800f248:	e61d      	b.n	800ee86 <_vfiprintf_r+0x2f6>
 800f24a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f24c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f24e:	1c58      	adds	r0, r3, #1
 800f250:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 800f254:	b169      	cbz	r1, 800f272 <_vfiprintf_r+0x6e2>
 800f256:	3201      	adds	r2, #1
 800f258:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 800f25c:	2101      	movs	r1, #1
 800f25e:	2807      	cmp	r0, #7
 800f260:	9215      	str	r2, [sp, #84]	; 0x54
 800f262:	9014      	str	r0, [sp, #80]	; 0x50
 800f264:	6033      	str	r3, [r6, #0]
 800f266:	6071      	str	r1, [r6, #4]
 800f268:	f300 815e 	bgt.w	800f528 <_vfiprintf_r+0x998>
 800f26c:	4603      	mov	r3, r0
 800f26e:	3608      	adds	r6, #8
 800f270:	4408      	add	r0, r1
 800f272:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f274:	b164      	cbz	r4, 800f290 <_vfiprintf_r+0x700>
 800f276:	3202      	adds	r2, #2
 800f278:	a912      	add	r1, sp, #72	; 0x48
 800f27a:	2302      	movs	r3, #2
 800f27c:	2807      	cmp	r0, #7
 800f27e:	9215      	str	r2, [sp, #84]	; 0x54
 800f280:	9014      	str	r0, [sp, #80]	; 0x50
 800f282:	e886 000a 	stmia.w	r6, {r1, r3}
 800f286:	f300 8155 	bgt.w	800f534 <_vfiprintf_r+0x9a4>
 800f28a:	4603      	mov	r3, r0
 800f28c:	3608      	adds	r6, #8
 800f28e:	3001      	adds	r0, #1
 800f290:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f292:	2d80      	cmp	r5, #128	; 0x80
 800f294:	f000 80fe 	beq.w	800f494 <_vfiprintf_r+0x904>
 800f298:	9c04      	ldr	r4, [sp, #16]
 800f29a:	9907      	ldr	r1, [sp, #28]
 800f29c:	1a65      	subs	r5, r4, r1
 800f29e:	2d00      	cmp	r5, #0
 800f2a0:	f340 808a 	ble.w	800f3b8 <_vfiprintf_r+0x828>
 800f2a4:	f244 4480 	movw	r4, #17536	; 0x4480
 800f2a8:	2d10      	cmp	r5, #16
 800f2aa:	f6c0 0401 	movt	r4, #2049	; 0x801
 800f2ae:	dd24      	ble.n	800f2fa <_vfiprintf_r+0x76a>
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	f04f 0b10 	mov.w	fp, #16
 800f2b6:	4664      	mov	r4, ip
 800f2b8:	46b4      	mov	ip, r6
 800f2ba:	462e      	mov	r6, r5
 800f2bc:	460d      	mov	r5, r1
 800f2be:	e006      	b.n	800f2ce <_vfiprintf_r+0x73e>
 800f2c0:	1c98      	adds	r0, r3, #2
 800f2c2:	f10c 0c08 	add.w	ip, ip, #8
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	3e10      	subs	r6, #16
 800f2ca:	2e10      	cmp	r6, #16
 800f2cc:	dd10      	ble.n	800f2f0 <_vfiprintf_r+0x760>
 800f2ce:	1c59      	adds	r1, r3, #1
 800f2d0:	3210      	adds	r2, #16
 800f2d2:	2907      	cmp	r1, #7
 800f2d4:	9215      	str	r2, [sp, #84]	; 0x54
 800f2d6:	e88c 0880 	stmia.w	ip, {r7, fp}
 800f2da:	9114      	str	r1, [sp, #80]	; 0x50
 800f2dc:	ddf0      	ble.n	800f2c0 <_vfiprintf_r+0x730>
 800f2de:	4613      	mov	r3, r2
 800f2e0:	2a00      	cmp	r2, #0
 800f2e2:	d13f      	bne.n	800f364 <_vfiprintf_r+0x7d4>
 800f2e4:	3e10      	subs	r6, #16
 800f2e6:	2e10      	cmp	r6, #16
 800f2e8:	f04f 0001 	mov.w	r0, #1
 800f2ec:	46d4      	mov	ip, sl
 800f2ee:	dcee      	bgt.n	800f2ce <_vfiprintf_r+0x73e>
 800f2f0:	462b      	mov	r3, r5
 800f2f2:	4635      	mov	r5, r6
 800f2f4:	4666      	mov	r6, ip
 800f2f6:	46a4      	mov	ip, r4
 800f2f8:	461c      	mov	r4, r3
 800f2fa:	2807      	cmp	r0, #7
 800f2fc:	442a      	add	r2, r5
 800f2fe:	e886 0030 	stmia.w	r6, {r4, r5}
 800f302:	9014      	str	r0, [sp, #80]	; 0x50
 800f304:	9215      	str	r2, [sp, #84]	; 0x54
 800f306:	bfdc      	itt	le
 800f308:	3608      	addle	r6, #8
 800f30a:	3001      	addle	r0, #1
 800f30c:	dd54      	ble.n	800f3b8 <_vfiprintf_r+0x828>
 800f30e:	2a00      	cmp	r2, #0
 800f310:	d143      	bne.n	800f39a <_vfiprintf_r+0x80a>
 800f312:	9c07      	ldr	r4, [sp, #28]
 800f314:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 800f318:	2301      	movs	r3, #1
 800f31a:	9421      	str	r4, [sp, #132]	; 0x84
 800f31c:	9415      	str	r4, [sp, #84]	; 0x54
 800f31e:	4622      	mov	r2, r4
 800f320:	9314      	str	r3, [sp, #80]	; 0x50
 800f322:	4656      	mov	r6, sl
 800f324:	f01c 0f04 	tst.w	ip, #4
 800f328:	f106 0608 	add.w	r6, r6, #8
 800f32c:	d155      	bne.n	800f3da <_vfiprintf_r+0x84a>
 800f32e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	9d05      	ldr	r5, [sp, #20]
 800f334:	42ab      	cmp	r3, r5
 800f336:	bfac      	ite	ge
 800f338:	18e4      	addge	r4, r4, r3
 800f33a:	1964      	addlt	r4, r4, r5
 800f33c:	9409      	str	r4, [sp, #36]	; 0x24
 800f33e:	b12a      	cbz	r2, 800f34c <_vfiprintf_r+0x7bc>
 800f340:	9806      	ldr	r0, [sp, #24]
 800f342:	9902      	ldr	r1, [sp, #8]
 800f344:	aa13      	add	r2, sp, #76	; 0x4c
 800f346:	f7ff fbd9 	bl	800eafc <__sprint_r.part.0>
 800f34a:	b9e8      	cbnz	r0, 800f388 <_vfiprintf_r+0x7f8>
 800f34c:	2300      	movs	r3, #0
 800f34e:	9314      	str	r3, [sp, #80]	; 0x50
 800f350:	f898 3000 	ldrb.w	r3, [r8]
 800f354:	2b00      	cmp	r3, #0
 800f356:	bf18      	it	ne
 800f358:	2b25      	cmpne	r3, #37	; 0x25
 800f35a:	4656      	mov	r6, sl
 800f35c:	f47f ac61 	bne.w	800ec22 <_vfiprintf_r+0x92>
 800f360:	4644      	mov	r4, r8
 800f362:	e47a      	b.n	800ec5a <_vfiprintf_r+0xca>
 800f364:	9806      	ldr	r0, [sp, #24]
 800f366:	9902      	ldr	r1, [sp, #8]
 800f368:	aa13      	add	r2, sp, #76	; 0x4c
 800f36a:	f7ff fbc7 	bl	800eafc <__sprint_r.part.0>
 800f36e:	b958      	cbnz	r0, 800f388 <_vfiprintf_r+0x7f8>
 800f370:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f372:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f374:	1c58      	adds	r0, r3, #1
 800f376:	46d4      	mov	ip, sl
 800f378:	e7a6      	b.n	800f2c8 <_vfiprintf_r+0x738>
 800f37a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f37c:	b123      	cbz	r3, 800f388 <_vfiprintf_r+0x7f8>
 800f37e:	9806      	ldr	r0, [sp, #24]
 800f380:	9902      	ldr	r1, [sp, #8]
 800f382:	aa13      	add	r2, sp, #76	; 0x4c
 800f384:	f7ff fbba 	bl	800eafc <__sprint_r.part.0>
 800f388:	9c02      	ldr	r4, [sp, #8]
 800f38a:	89a3      	ldrh	r3, [r4, #12]
 800f38c:	065d      	lsls	r5, r3, #25
 800f38e:	f53f acf8 	bmi.w	800ed82 <_vfiprintf_r+0x1f2>
 800f392:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f394:	b031      	add	sp, #196	; 0xc4
 800f396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f39a:	9806      	ldr	r0, [sp, #24]
 800f39c:	9902      	ldr	r1, [sp, #8]
 800f39e:	f8cd c000 	str.w	ip, [sp]
 800f3a2:	aa13      	add	r2, sp, #76	; 0x4c
 800f3a4:	f7ff fbaa 	bl	800eafc <__sprint_r.part.0>
 800f3a8:	f8dd c000 	ldr.w	ip, [sp]
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d1eb      	bne.n	800f388 <_vfiprintf_r+0x7f8>
 800f3b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f3b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f3b4:	3001      	adds	r0, #1
 800f3b6:	4656      	mov	r6, sl
 800f3b8:	9d07      	ldr	r5, [sp, #28]
 800f3ba:	f8c6 9000 	str.w	r9, [r6]
 800f3be:	442a      	add	r2, r5
 800f3c0:	2807      	cmp	r0, #7
 800f3c2:	9215      	str	r2, [sp, #84]	; 0x54
 800f3c4:	6075      	str	r5, [r6, #4]
 800f3c6:	9014      	str	r0, [sp, #80]	; 0x50
 800f3c8:	ddac      	ble.n	800f324 <_vfiprintf_r+0x794>
 800f3ca:	2a00      	cmp	r2, #0
 800f3cc:	f040 80c9 	bne.w	800f562 <_vfiprintf_r+0x9d2>
 800f3d0:	9214      	str	r2, [sp, #80]	; 0x50
 800f3d2:	4656      	mov	r6, sl
 800f3d4:	f01c 0f04 	tst.w	ip, #4
 800f3d8:	d0a9      	beq.n	800f32e <_vfiprintf_r+0x79e>
 800f3da:	9d05      	ldr	r5, [sp, #20]
 800f3dc:	9b03      	ldr	r3, [sp, #12]
 800f3de:	1aec      	subs	r4, r5, r3
 800f3e0:	2c00      	cmp	r4, #0
 800f3e2:	dda4      	ble.n	800f32e <_vfiprintf_r+0x79e>
 800f3e4:	2c10      	cmp	r4, #16
 800f3e6:	f340 81ac 	ble.w	800f742 <_vfiprintf_r+0xbb2>
 800f3ea:	f244 4540 	movw	r5, #17472	; 0x4440
 800f3ee:	46b4      	mov	ip, r6
 800f3f0:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f3f2:	f8dd b018 	ldr.w	fp, [sp, #24]
 800f3f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f3f8:	f6c0 0501 	movt	r5, #2049	; 0x801
 800f3fc:	f04f 0910 	mov.w	r9, #16
 800f400:	e006      	b.n	800f410 <_vfiprintf_r+0x880>
 800f402:	1c88      	adds	r0, r1, #2
 800f404:	f10c 0c08 	add.w	ip, ip, #8
 800f408:	4619      	mov	r1, r3
 800f40a:	3c10      	subs	r4, #16
 800f40c:	2c10      	cmp	r4, #16
 800f40e:	dd0f      	ble.n	800f430 <_vfiprintf_r+0x8a0>
 800f410:	1c4b      	adds	r3, r1, #1
 800f412:	3210      	adds	r2, #16
 800f414:	2b07      	cmp	r3, #7
 800f416:	9215      	str	r2, [sp, #84]	; 0x54
 800f418:	e88c 0240 	stmia.w	ip, {r6, r9}
 800f41c:	9314      	str	r3, [sp, #80]	; 0x50
 800f41e:	ddf0      	ble.n	800f402 <_vfiprintf_r+0x872>
 800f420:	4611      	mov	r1, r2
 800f422:	b9d2      	cbnz	r2, 800f45a <_vfiprintf_r+0x8ca>
 800f424:	3c10      	subs	r4, #16
 800f426:	2c10      	cmp	r4, #16
 800f428:	f04f 0001 	mov.w	r0, #1
 800f42c:	46d4      	mov	ip, sl
 800f42e:	dcef      	bgt.n	800f410 <_vfiprintf_r+0x880>
 800f430:	4666      	mov	r6, ip
 800f432:	4422      	add	r2, r4
 800f434:	2807      	cmp	r0, #7
 800f436:	9215      	str	r2, [sp, #84]	; 0x54
 800f438:	6035      	str	r5, [r6, #0]
 800f43a:	6074      	str	r4, [r6, #4]
 800f43c:	9014      	str	r0, [sp, #80]	; 0x50
 800f43e:	f77f af76 	ble.w	800f32e <_vfiprintf_r+0x79e>
 800f442:	2a00      	cmp	r2, #0
 800f444:	f040 813e 	bne.w	800f6c4 <_vfiprintf_r+0xb34>
 800f448:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f44a:	9b03      	ldr	r3, [sp, #12]
 800f44c:	9d05      	ldr	r5, [sp, #20]
 800f44e:	42ab      	cmp	r3, r5
 800f450:	bfac      	ite	ge
 800f452:	18e4      	addge	r4, r4, r3
 800f454:	1964      	addlt	r4, r4, r5
 800f456:	9409      	str	r4, [sp, #36]	; 0x24
 800f458:	e778      	b.n	800f34c <_vfiprintf_r+0x7bc>
 800f45a:	4658      	mov	r0, fp
 800f45c:	9902      	ldr	r1, [sp, #8]
 800f45e:	aa13      	add	r2, sp, #76	; 0x4c
 800f460:	f7ff fb4c 	bl	800eafc <__sprint_r.part.0>
 800f464:	2800      	cmp	r0, #0
 800f466:	d18f      	bne.n	800f388 <_vfiprintf_r+0x7f8>
 800f468:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f46a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f46c:	1c48      	adds	r0, r1, #1
 800f46e:	46d4      	mov	ip, sl
 800f470:	e7cb      	b.n	800f40a <_vfiprintf_r+0x87a>
 800f472:	2b00      	cmp	r3, #0
 800f474:	d164      	bne.n	800f540 <_vfiprintf_r+0x9b0>
 800f476:	f01c 0f01 	tst.w	ip, #1
 800f47a:	bf04      	itt	eq
 800f47c:	9307      	streq	r3, [sp, #28]
 800f47e:	46d1      	moveq	r9, sl
 800f480:	f43f accf 	beq.w	800ee22 <_vfiprintf_r+0x292>
 800f484:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f486:	2330      	movs	r3, #48	; 0x30
 800f488:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800f48c:	9407      	str	r4, [sp, #28]
 800f48e:	f10d 097f 	add.w	r9, sp, #127	; 0x7f
 800f492:	e4c6      	b.n	800ee22 <_vfiprintf_r+0x292>
 800f494:	9c05      	ldr	r4, [sp, #20]
 800f496:	9903      	ldr	r1, [sp, #12]
 800f498:	1a65      	subs	r5, r4, r1
 800f49a:	2d00      	cmp	r5, #0
 800f49c:	f77f aefc 	ble.w	800f298 <_vfiprintf_r+0x708>
 800f4a0:	2d10      	cmp	r5, #16
 800f4a2:	f244 4480 	movw	r4, #17536	; 0x4480
 800f4a6:	f340 8153 	ble.w	800f750 <_vfiprintf_r+0xbc0>
 800f4aa:	f6c0 0401 	movt	r4, #2049	; 0x801
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	f04f 0b10 	mov.w	fp, #16
 800f4b4:	4664      	mov	r4, ip
 800f4b6:	46b4      	mov	ip, r6
 800f4b8:	462e      	mov	r6, r5
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	e006      	b.n	800f4cc <_vfiprintf_r+0x93c>
 800f4be:	1c99      	adds	r1, r3, #2
 800f4c0:	f10c 0c08 	add.w	ip, ip, #8
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	3e10      	subs	r6, #16
 800f4c8:	2e10      	cmp	r6, #16
 800f4ca:	dd0f      	ble.n	800f4ec <_vfiprintf_r+0x95c>
 800f4cc:	1c58      	adds	r0, r3, #1
 800f4ce:	3210      	adds	r2, #16
 800f4d0:	2807      	cmp	r0, #7
 800f4d2:	9215      	str	r2, [sp, #84]	; 0x54
 800f4d4:	e88c 0880 	stmia.w	ip, {r7, fp}
 800f4d8:	9014      	str	r0, [sp, #80]	; 0x50
 800f4da:	ddf0      	ble.n	800f4be <_vfiprintf_r+0x92e>
 800f4dc:	4613      	mov	r3, r2
 800f4de:	b9b2      	cbnz	r2, 800f50e <_vfiprintf_r+0x97e>
 800f4e0:	3e10      	subs	r6, #16
 800f4e2:	2e10      	cmp	r6, #16
 800f4e4:	f04f 0101 	mov.w	r1, #1
 800f4e8:	46d4      	mov	ip, sl
 800f4ea:	dcef      	bgt.n	800f4cc <_vfiprintf_r+0x93c>
 800f4ec:	462b      	mov	r3, r5
 800f4ee:	4635      	mov	r5, r6
 800f4f0:	4666      	mov	r6, ip
 800f4f2:	46a4      	mov	ip, r4
 800f4f4:	461c      	mov	r4, r3
 800f4f6:	442a      	add	r2, r5
 800f4f8:	2907      	cmp	r1, #7
 800f4fa:	9215      	str	r2, [sp, #84]	; 0x54
 800f4fc:	e886 0030 	stmia.w	r6, {r4, r5}
 800f500:	9114      	str	r1, [sp, #80]	; 0x50
 800f502:	f300 8086 	bgt.w	800f612 <_vfiprintf_r+0xa82>
 800f506:	3608      	adds	r6, #8
 800f508:	1c48      	adds	r0, r1, #1
 800f50a:	460b      	mov	r3, r1
 800f50c:	e6c4      	b.n	800f298 <_vfiprintf_r+0x708>
 800f50e:	9806      	ldr	r0, [sp, #24]
 800f510:	9902      	ldr	r1, [sp, #8]
 800f512:	aa13      	add	r2, sp, #76	; 0x4c
 800f514:	f7ff faf2 	bl	800eafc <__sprint_r.part.0>
 800f518:	2800      	cmp	r0, #0
 800f51a:	f47f af35 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f51e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f520:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f522:	1c59      	adds	r1, r3, #1
 800f524:	46d4      	mov	ip, sl
 800f526:	e7ce      	b.n	800f4c6 <_vfiprintf_r+0x936>
 800f528:	2a00      	cmp	r2, #0
 800f52a:	d150      	bne.n	800f5ce <_vfiprintf_r+0xa3e>
 800f52c:	4613      	mov	r3, r2
 800f52e:	4608      	mov	r0, r1
 800f530:	4656      	mov	r6, sl
 800f532:	e69e      	b.n	800f272 <_vfiprintf_r+0x6e2>
 800f534:	2a00      	cmp	r2, #0
 800f536:	d15b      	bne.n	800f5f0 <_vfiprintf_r+0xa60>
 800f538:	4613      	mov	r3, r2
 800f53a:	2001      	movs	r0, #1
 800f53c:	4656      	mov	r6, sl
 800f53e:	e6a7      	b.n	800f290 <_vfiprintf_r+0x700>
 800f540:	9207      	str	r2, [sp, #28]
 800f542:	46d1      	mov	r9, sl
 800f544:	e46d      	b.n	800ee22 <_vfiprintf_r+0x292>
 800f546:	2302      	movs	r3, #2
 800f548:	e439      	b.n	800edbe <_vfiprintf_r+0x22e>
 800f54a:	2d00      	cmp	r5, #0
 800f54c:	bf08      	it	eq
 800f54e:	2c0a      	cmpeq	r4, #10
 800f550:	d265      	bcs.n	800f61e <_vfiprintf_r+0xa8e>
 800f552:	3430      	adds	r4, #48	; 0x30
 800f554:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 800f558:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f55a:	f10d 097f 	add.w	r9, sp, #127	; 0x7f
 800f55e:	9407      	str	r4, [sp, #28]
 800f560:	e45f      	b.n	800ee22 <_vfiprintf_r+0x292>
 800f562:	9806      	ldr	r0, [sp, #24]
 800f564:	9902      	ldr	r1, [sp, #8]
 800f566:	f8cd c000 	str.w	ip, [sp]
 800f56a:	aa13      	add	r2, sp, #76	; 0x4c
 800f56c:	f7ff fac6 	bl	800eafc <__sprint_r.part.0>
 800f570:	f8dd c000 	ldr.w	ip, [sp]
 800f574:	2800      	cmp	r0, #0
 800f576:	f47f af07 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f57a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f57c:	4656      	mov	r6, sl
 800f57e:	e729      	b.n	800f3d4 <_vfiprintf_r+0x844>
 800f580:	9d08      	ldr	r5, [sp, #32]
 800f582:	682c      	ldr	r4, [r5, #0]
 800f584:	3504      	adds	r5, #4
 800f586:	9508      	str	r5, [sp, #32]
 800f588:	2500      	movs	r5, #0
 800f58a:	e418      	b.n	800edbe <_vfiprintf_r+0x22e>
 800f58c:	9d08      	ldr	r5, [sp, #32]
 800f58e:	682c      	ldr	r4, [r5, #0]
 800f590:	3504      	adds	r5, #4
 800f592:	9508      	str	r5, [sp, #32]
 800f594:	2500      	movs	r5, #0
 800f596:	e5b7      	b.n	800f108 <_vfiprintf_r+0x578>
 800f598:	9d08      	ldr	r5, [sp, #32]
 800f59a:	682c      	ldr	r4, [r5, #0]
 800f59c:	3504      	adds	r5, #4
 800f59e:	9508      	str	r5, [sp, #32]
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	2500      	movs	r5, #0
 800f5a4:	e40b      	b.n	800edbe <_vfiprintf_r+0x22e>
 800f5a6:	9d08      	ldr	r5, [sp, #32]
 800f5a8:	9808      	ldr	r0, [sp, #32]
 800f5aa:	682c      	ldr	r4, [r5, #0]
 800f5ac:	3004      	adds	r0, #4
 800f5ae:	17e5      	asrs	r5, r4, #31
 800f5b0:	9008      	str	r0, [sp, #32]
 800f5b2:	4622      	mov	r2, r4
 800f5b4:	462b      	mov	r3, r5
 800f5b6:	e54f      	b.n	800f058 <_vfiprintf_r+0x4c8>
 800f5b8:	9806      	ldr	r0, [sp, #24]
 800f5ba:	9902      	ldr	r1, [sp, #8]
 800f5bc:	aa13      	add	r2, sp, #76	; 0x4c
 800f5be:	f7ff fa9d 	bl	800eafc <__sprint_r.part.0>
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	f47f aee0 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f5c8:	4656      	mov	r6, sl
 800f5ca:	f7ff bb43 	b.w	800ec54 <_vfiprintf_r+0xc4>
 800f5ce:	9806      	ldr	r0, [sp, #24]
 800f5d0:	9902      	ldr	r1, [sp, #8]
 800f5d2:	f8cd c000 	str.w	ip, [sp]
 800f5d6:	aa13      	add	r2, sp, #76	; 0x4c
 800f5d8:	f7ff fa90 	bl	800eafc <__sprint_r.part.0>
 800f5dc:	f8dd c000 	ldr.w	ip, [sp]
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	f47f aed1 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f5e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f5ea:	1c58      	adds	r0, r3, #1
 800f5ec:	4656      	mov	r6, sl
 800f5ee:	e640      	b.n	800f272 <_vfiprintf_r+0x6e2>
 800f5f0:	9806      	ldr	r0, [sp, #24]
 800f5f2:	9902      	ldr	r1, [sp, #8]
 800f5f4:	f8cd c000 	str.w	ip, [sp]
 800f5f8:	aa13      	add	r2, sp, #76	; 0x4c
 800f5fa:	f7ff fa7f 	bl	800eafc <__sprint_r.part.0>
 800f5fe:	f8dd c000 	ldr.w	ip, [sp]
 800f602:	2800      	cmp	r0, #0
 800f604:	f47f aec0 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f608:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f60a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f60c:	1c58      	adds	r0, r3, #1
 800f60e:	4656      	mov	r6, sl
 800f610:	e63e      	b.n	800f290 <_vfiprintf_r+0x700>
 800f612:	2a00      	cmp	r2, #0
 800f614:	d16d      	bne.n	800f6f2 <_vfiprintf_r+0xb62>
 800f616:	4613      	mov	r3, r2
 800f618:	2001      	movs	r0, #1
 800f61a:	4656      	mov	r6, sl
 800f61c:	e63c      	b.n	800f298 <_vfiprintf_r+0x708>
 800f61e:	f10d 097f 	add.w	r9, sp, #127	; 0x7f
 800f622:	f8cd c00c 	str.w	ip, [sp, #12]
 800f626:	9607      	str	r6, [sp, #28]
 800f628:	4620      	mov	r0, r4
 800f62a:	4629      	mov	r1, r5
 800f62c:	220a      	movs	r2, #10
 800f62e:	2300      	movs	r3, #0
 800f630:	f7fd fd6c 	bl	800d10c <__aeabi_uldivmod>
 800f634:	3230      	adds	r2, #48	; 0x30
 800f636:	f889 2000 	strb.w	r2, [r9]
 800f63a:	4620      	mov	r0, r4
 800f63c:	4629      	mov	r1, r5
 800f63e:	220a      	movs	r2, #10
 800f640:	2300      	movs	r3, #0
 800f642:	f7fd fd63 	bl	800d10c <__aeabi_uldivmod>
 800f646:	4604      	mov	r4, r0
 800f648:	460d      	mov	r5, r1
 800f64a:	ea54 0005 	orrs.w	r0, r4, r5
 800f64e:	464e      	mov	r6, r9
 800f650:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f654:	d1e8      	bne.n	800f628 <_vfiprintf_r+0xa98>
 800f656:	46b1      	mov	r9, r6
 800f658:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800f65c:	9e07      	ldr	r6, [sp, #28]
 800f65e:	f7ff bbdd 	b.w	800ee1c <_vfiprintf_r+0x28c>
 800f662:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
 800f666:	4264      	negs	r4, r4
 800f668:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800f66c:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
 800f670:	2301      	movs	r3, #1
 800f672:	f7ff bba8 	b.w	800edc6 <_vfiprintf_r+0x236>
 800f676:	f01c 0f10 	tst.w	ip, #16
 800f67a:	d10a      	bne.n	800f692 <_vfiprintf_r+0xb02>
 800f67c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f680:	d007      	beq.n	800f692 <_vfiprintf_r+0xb02>
 800f682:	9c08      	ldr	r4, [sp, #32]
 800f684:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	3404      	adds	r4, #4
 800f68a:	9408      	str	r4, [sp, #32]
 800f68c:	801d      	strh	r5, [r3, #0]
 800f68e:	f7ff bac1 	b.w	800ec14 <_vfiprintf_r+0x84>
 800f692:	9c08      	ldr	r4, [sp, #32]
 800f694:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f696:	6823      	ldr	r3, [r4, #0]
 800f698:	3404      	adds	r4, #4
 800f69a:	9408      	str	r4, [sp, #32]
 800f69c:	601d      	str	r5, [r3, #0]
 800f69e:	f7ff bab9 	b.w	800ec14 <_vfiprintf_r+0x84>
 800f6a2:	9806      	ldr	r0, [sp, #24]
 800f6a4:	9902      	ldr	r1, [sp, #8]
 800f6a6:	f8cd c000 	str.w	ip, [sp]
 800f6aa:	aa13      	add	r2, sp, #76	; 0x4c
 800f6ac:	f7ff fa26 	bl	800eafc <__sprint_r.part.0>
 800f6b0:	f8dd c000 	ldr.w	ip, [sp]
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	f47f ae67 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f6ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f6be:	1c58      	adds	r0, r3, #1
 800f6c0:	4656      	mov	r6, sl
 800f6c2:	e5c5      	b.n	800f250 <_vfiprintf_r+0x6c0>
 800f6c4:	9806      	ldr	r0, [sp, #24]
 800f6c6:	9902      	ldr	r1, [sp, #8]
 800f6c8:	aa13      	add	r2, sp, #76	; 0x4c
 800f6ca:	f7ff fa17 	bl	800eafc <__sprint_r.part.0>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	f47f ae5a 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f6d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f6d6:	e62a      	b.n	800f32e <_vfiprintf_r+0x79e>
 800f6d8:	f8cd c000 	str.w	ip, [sp]
 800f6dc:	9508      	str	r5, [sp, #32]
 800f6de:	9404      	str	r4, [sp, #16]
 800f6e0:	f7ff f9dc 	bl	800ea9c <strlen>
 800f6e4:	f89d b047 	ldrb.w	fp, [sp, #71]	; 0x47
 800f6e8:	9007      	str	r0, [sp, #28]
 800f6ea:	f8dd c000 	ldr.w	ip, [sp]
 800f6ee:	f7ff bb98 	b.w	800ee22 <_vfiprintf_r+0x292>
 800f6f2:	9806      	ldr	r0, [sp, #24]
 800f6f4:	9902      	ldr	r1, [sp, #8]
 800f6f6:	f8cd c000 	str.w	ip, [sp]
 800f6fa:	aa13      	add	r2, sp, #76	; 0x4c
 800f6fc:	f7ff f9fe 	bl	800eafc <__sprint_r.part.0>
 800f700:	f8dd c000 	ldr.w	ip, [sp]
 800f704:	2800      	cmp	r0, #0
 800f706:	f47f ae3f 	bne.w	800f388 <_vfiprintf_r+0x7f8>
 800f70a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f70c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f70e:	1c58      	adds	r0, r3, #1
 800f710:	4656      	mov	r6, sl
 800f712:	e5c1      	b.n	800f298 <_vfiprintf_r+0x708>
 800f714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f716:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f718:	f244 4540 	movw	r5, #17472	; 0x4440
 800f71c:	3301      	adds	r3, #1
 800f71e:	f6c0 0501 	movt	r5, #2049	; 0x801
 800f722:	f7ff bbc8 	b.w	800eeb6 <_vfiprintf_r+0x326>
 800f726:	9c04      	ldr	r4, [sp, #16]
 800f728:	9508      	str	r5, [sp, #32]
 800f72a:	2c06      	cmp	r4, #6
 800f72c:	bf28      	it	cs
 800f72e:	2406      	movcs	r4, #6
 800f730:	f244 4978 	movw	r9, #17528	; 0x4478
 800f734:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
 800f738:	9407      	str	r4, [sp, #28]
 800f73a:	9503      	str	r5, [sp, #12]
 800f73c:	f6c0 0901 	movt	r9, #2049	; 0x801
 800f740:	e476      	b.n	800f030 <_vfiprintf_r+0x4a0>
 800f742:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f744:	f244 4540 	movw	r5, #17472	; 0x4440
 800f748:	3001      	adds	r0, #1
 800f74a:	f6c0 0501 	movt	r5, #2049	; 0x801
 800f74e:	e670      	b.n	800f432 <_vfiprintf_r+0x8a2>
 800f750:	4601      	mov	r1, r0
 800f752:	f6c0 0401 	movt	r4, #2049	; 0x801
 800f756:	e6ce      	b.n	800f4f6 <_vfiprintf_r+0x966>
 800f758:	9c04      	ldr	r4, [sp, #16]
 800f75a:	f89d b047 	ldrb.w	fp, [sp, #71]	; 0x47
 800f75e:	9407      	str	r4, [sp, #28]
 800f760:	9508      	str	r5, [sp, #32]
 800f762:	9004      	str	r0, [sp, #16]
 800f764:	f7ff bb5d 	b.w	800ee22 <_vfiprintf_r+0x292>
 800f768:	9c08      	ldr	r4, [sp, #32]
 800f76a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f76e:	6824      	ldr	r4, [r4, #0]
 800f770:	9404      	str	r4, [sp, #16]
 800f772:	9c08      	ldr	r4, [sp, #32]
 800f774:	1d22      	adds	r2, r4, #4
 800f776:	9c04      	ldr	r4, [sp, #16]
 800f778:	9208      	str	r2, [sp, #32]
 800f77a:	2c00      	cmp	r4, #0
 800f77c:	46a8      	mov	r8, r5
 800f77e:	bfbc      	itt	lt
 800f780:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800f784:	9504      	strlt	r5, [sp, #16]
 800f786:	f7ff ba79 	b.w	800ec7c <_vfiprintf_r+0xec>
 800f78a:	bf00      	nop

0800f78c <vfiprintf>:
 800f78c:	b430      	push	{r4, r5}
 800f78e:	f240 5488 	movw	r4, #1416	; 0x588
 800f792:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800f796:	460d      	mov	r5, r1
 800f798:	4613      	mov	r3, r2
 800f79a:	4601      	mov	r1, r0
 800f79c:	462a      	mov	r2, r5
 800f79e:	6820      	ldr	r0, [r4, #0]
 800f7a0:	bc30      	pop	{r4, r5}
 800f7a2:	f7ff b9f5 	b.w	800eb90 <_vfiprintf_r>
 800f7a6:	bf00      	nop

0800f7a8 <__sbprintf>:
 800f7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7ac:	460c      	mov	r4, r1
 800f7ae:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800f7b2:	69e7      	ldr	r7, [r4, #28]
 800f7b4:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 800f7b8:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800f7ba:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 800f7be:	9707      	str	r7, [sp, #28]
 800f7c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800f7c2:	9119      	str	r1, [sp, #100]	; 0x64
 800f7c4:	ad1a      	add	r5, sp, #104	; 0x68
 800f7c6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800f7ca:	f04f 0e00 	mov.w	lr, #0
 800f7ce:	f029 0902 	bic.w	r9, r9, #2
 800f7d2:	4669      	mov	r1, sp
 800f7d4:	9500      	str	r5, [sp, #0]
 800f7d6:	9504      	str	r5, [sp, #16]
 800f7d8:	9602      	str	r6, [sp, #8]
 800f7da:	9605      	str	r6, [sp, #20]
 800f7dc:	f8ad 900c 	strh.w	r9, [sp, #12]
 800f7e0:	f8ad 800e 	strh.w	r8, [sp, #14]
 800f7e4:	9709      	str	r7, [sp, #36]	; 0x24
 800f7e6:	f8cd e018 	str.w	lr, [sp, #24]
 800f7ea:	4606      	mov	r6, r0
 800f7ec:	f7ff f9d0 	bl	800eb90 <_vfiprintf_r>
 800f7f0:	1e05      	subs	r5, r0, #0
 800f7f2:	db07      	blt.n	800f804 <__sbprintf+0x5c>
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	4669      	mov	r1, sp
 800f7f8:	f002 fcc2 	bl	8012180 <_fflush_r>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	bf18      	it	ne
 800f800:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800f804:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f808:	065b      	lsls	r3, r3, #25
 800f80a:	bf48      	it	mi
 800f80c:	89a3      	ldrhmi	r3, [r4, #12]
 800f80e:	4628      	mov	r0, r5
 800f810:	bf44      	itt	mi
 800f812:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f816:	81a3      	strhmi	r3, [r4, #12]
 800f818:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800f81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f820 <_vfprintf_r>:
 800f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f824:	b0c3      	sub	sp, #268	; 0x10c
 800f826:	461c      	mov	r4, r3
 800f828:	4689      	mov	r9, r1
 800f82a:	9206      	str	r2, [sp, #24]
 800f82c:	900a      	str	r0, [sp, #40]	; 0x28
 800f82e:	f003 f82f 	bl	8012890 <_localeconv_r>
 800f832:	6800      	ldr	r0, [r0, #0]
 800f834:	9014      	str	r0, [sp, #80]	; 0x50
 800f836:	f7ff f931 	bl	800ea9c <strlen>
 800f83a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f83c:	9017      	str	r0, [sp, #92]	; 0x5c
 800f83e:	940e      	str	r4, [sp, #56]	; 0x38
 800f840:	b11d      	cbz	r5, 800f84a <_vfprintf_r+0x2a>
 800f842:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f844:	2b00      	cmp	r3, #0
 800f846:	f000 811d 	beq.w	800fa84 <_vfprintf_r+0x264>
 800f84a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f84e:	b29a      	uxth	r2, r3
 800f850:	0490      	lsls	r0, r2, #18
 800f852:	d40a      	bmi.n	800f86a <_vfprintf_r+0x4a>
 800f854:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 800f858:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f85c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800f860:	f8a9 300c 	strh.w	r3, [r9, #12]
 800f864:	b29a      	uxth	r2, r3
 800f866:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 800f86a:	0711      	lsls	r1, r2, #28
 800f86c:	f140 80d1 	bpl.w	800fa12 <_vfprintf_r+0x1f2>
 800f870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f874:	2b00      	cmp	r3, #0
 800f876:	f000 80cc 	beq.w	800fa12 <_vfprintf_r+0x1f2>
 800f87a:	f002 021a 	and.w	r2, r2, #26
 800f87e:	2a0a      	cmp	r2, #10
 800f880:	f000 80d3 	beq.w	800fa2a <_vfprintf_r+0x20a>
 800f884:	f10d 05c7 	add.w	r5, sp, #199	; 0xc7
 800f888:	9503      	str	r5, [sp, #12]
 800f88a:	ad32      	add	r5, sp, #200	; 0xc8
 800f88c:	46ac      	mov	ip, r5
 800f88e:	9525      	str	r5, [sp, #148]	; 0x94
 800f890:	9d03      	ldr	r5, [sp, #12]
 800f892:	f8cd 901c 	str.w	r9, [sp, #28]
 800f896:	ac32      	add	r4, sp, #200	; 0xc8
 800f898:	9404      	str	r4, [sp, #16]
 800f89a:	ebc5 040c 	rsb	r4, r5, ip
 800f89e:	f244 4b90 	movw	fp, #17552	; 0x4490
 800f8a2:	941b      	str	r4, [sp, #108]	; 0x6c
 800f8a4:	f244 45b0 	movw	r5, #17584	; 0x44b0
 800f8a8:	f244 44b4 	movw	r4, #17588	; 0x44b4
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	f6c0 0401 	movt	r4, #2049	; 0x801
 800f8b2:	f6c0 0b01 	movt	fp, #2049	; 0x801
 800f8b6:	f6c0 0501 	movt	r5, #2049	; 0x801
 800f8ba:	930c      	str	r3, [sp, #48]	; 0x30
 800f8bc:	9327      	str	r3, [sp, #156]	; 0x9c
 800f8be:	9326      	str	r3, [sp, #152]	; 0x98
 800f8c0:	9316      	str	r3, [sp, #88]	; 0x58
 800f8c2:	9318      	str	r3, [sp, #96]	; 0x60
 800f8c4:	9315      	str	r3, [sp, #84]	; 0x54
 800f8c6:	9319      	str	r3, [sp, #100]	; 0x64
 800f8c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8ca:	9411      	str	r4, [sp, #68]	; 0x44
 800f8cc:	9512      	str	r5, [sp, #72]	; 0x48
 800f8ce:	4666      	mov	r6, ip
 800f8d0:	465f      	mov	r7, fp
 800f8d2:	9c06      	ldr	r4, [sp, #24]
 800f8d4:	7823      	ldrb	r3, [r4, #0]
 800f8d6:	2b25      	cmp	r3, #37	; 0x25
 800f8d8:	bf18      	it	ne
 800f8da:	2b00      	cmpne	r3, #0
 800f8dc:	f000 80d6 	beq.w	800fa8c <_vfprintf_r+0x26c>
 800f8e0:	1c62      	adds	r2, r4, #1
 800f8e2:	4614      	mov	r4, r2
 800f8e4:	3201      	adds	r2, #1
 800f8e6:	7823      	ldrb	r3, [r4, #0]
 800f8e8:	2b25      	cmp	r3, #37	; 0x25
 800f8ea:	bf18      	it	ne
 800f8ec:	2b00      	cmpne	r3, #0
 800f8ee:	d1f8      	bne.n	800f8e2 <_vfprintf_r+0xc2>
 800f8f0:	9806      	ldr	r0, [sp, #24]
 800f8f2:	1a25      	subs	r5, r4, r0
 800f8f4:	d00f      	beq.n	800f916 <_vfprintf_r+0xf6>
 800f8f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f8f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f8fa:	6030      	str	r0, [r6, #0]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	442a      	add	r2, r5
 800f900:	2b07      	cmp	r3, #7
 800f902:	6075      	str	r5, [r6, #4]
 800f904:	9227      	str	r2, [sp, #156]	; 0x9c
 800f906:	9326      	str	r3, [sp, #152]	; 0x98
 800f908:	bfd8      	it	le
 800f90a:	3608      	addle	r6, #8
 800f90c:	f300 80a0 	bgt.w	800fa50 <_vfprintf_r+0x230>
 800f910:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f912:	4429      	add	r1, r5
 800f914:	910f      	str	r1, [sp, #60]	; 0x3c
 800f916:	7823      	ldrb	r3, [r4, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f001 804a 	beq.w	80109b2 <_vfprintf_r+0x1192>
 800f91e:	2300      	movs	r3, #0
 800f920:	1c65      	adds	r5, r4, #1
 800f922:	f894 9001 	ldrb.w	r9, [r4, #1]
 800f926:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800f92a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f92e:	461a      	mov	r2, r3
 800f930:	930d      	str	r3, [sp, #52]	; 0x34
 800f932:	9305      	str	r3, [sp, #20]
 800f934:	9506      	str	r5, [sp, #24]
 800f936:	9408      	str	r4, [sp, #32]
 800f938:	462b      	mov	r3, r5
 800f93a:	3301      	adds	r3, #1
 800f93c:	f1a9 0120 	sub.w	r1, r9, #32
 800f940:	2958      	cmp	r1, #88	; 0x58
 800f942:	f200 8428 	bhi.w	8010196 <_vfprintf_r+0x976>
 800f946:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f94a:	03cf      	.short	0x03cf
 800f94c:	04260426 	.word	0x04260426
 800f950:	0426041e 	.word	0x0426041e
 800f954:	04260426 	.word	0x04260426
 800f958:	04260426 	.word	0x04260426
 800f95c:	03750426 	.word	0x03750426
 800f960:	042603cb 	.word	0x042603cb
 800f964:	0250005d 	.word	0x0250005d
 800f968:	028f0426 	.word	0x028f0426
 800f96c:	02960296 	.word	0x02960296
 800f970:	02960296 	.word	0x02960296
 800f974:	02960296 	.word	0x02960296
 800f978:	02960296 	.word	0x02960296
 800f97c:	04260296 	.word	0x04260296
 800f980:	04260426 	.word	0x04260426
 800f984:	04260426 	.word	0x04260426
 800f988:	04260426 	.word	0x04260426
 800f98c:	04260426 	.word	0x04260426
 800f990:	02710426 	.word	0x02710426
 800f994:	042602ae 	.word	0x042602ae
 800f998:	042602ae 	.word	0x042602ae
 800f99c:	04260426 	.word	0x04260426
 800f9a0:	02a70426 	.word	0x02a70426
 800f9a4:	04260426 	.word	0x04260426
 800f9a8:	042602ed 	.word	0x042602ed
 800f9ac:	04260426 	.word	0x04260426
 800f9b0:	04260426 	.word	0x04260426
 800f9b4:	04260308 	.word	0x04260308
 800f9b8:	03200426 	.word	0x03200426
 800f9bc:	04260426 	.word	0x04260426
 800f9c0:	04260426 	.word	0x04260426
 800f9c4:	04260426 	.word	0x04260426
 800f9c8:	04260426 	.word	0x04260426
 800f9cc:	04260426 	.word	0x04260426
 800f9d0:	035d0347 	.word	0x035d0347
 800f9d4:	02ae02ae 	.word	0x02ae02ae
 800f9d8:	03ee02ae 	.word	0x03ee02ae
 800f9dc:	0426035d 	.word	0x0426035d
 800f9e0:	03f50426 	.word	0x03f50426
 800f9e4:	040a0426 	.word	0x040a0426
 800f9e8:	03d6023f 	.word	0x03d6023f
 800f9ec:	04260382 	.word	0x04260382
 800f9f0:	04260389 	.word	0x04260389
 800f9f4:	042600a3 	.word	0x042600a3
 800f9f8:	03b10426 	.word	0x03b10426
 800f9fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f9fe:	910e      	str	r1, [sp, #56]	; 0x38
 800fa00:	4264      	negs	r4, r4
 800fa02:	940d      	str	r4, [sp, #52]	; 0x34
 800fa04:	9d05      	ldr	r5, [sp, #20]
 800fa06:	f045 0504 	orr.w	r5, r5, #4
 800fa0a:	9505      	str	r5, [sp, #20]
 800fa0c:	f893 9000 	ldrb.w	r9, [r3]
 800fa10:	e793      	b.n	800f93a <_vfprintf_r+0x11a>
 800fa12:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa14:	4649      	mov	r1, r9
 800fa16:	f001 fa05 	bl	8010e24 <__swsetup_r>
 800fa1a:	b9a0      	cbnz	r0, 800fa46 <_vfprintf_r+0x226>
 800fa1c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 800fa20:	f002 021a 	and.w	r2, r2, #26
 800fa24:	2a0a      	cmp	r2, #10
 800fa26:	f47f af2d 	bne.w	800f884 <_vfprintf_r+0x64>
 800fa2a:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f6ff af28 	blt.w	800f884 <_vfprintf_r+0x64>
 800fa34:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa36:	9a06      	ldr	r2, [sp, #24]
 800fa38:	4649      	mov	r1, r9
 800fa3a:	4623      	mov	r3, r4
 800fa3c:	f001 f9a0 	bl	8010d80 <__sbprintf>
 800fa40:	b043      	add	sp, #268	; 0x10c
 800fa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa4a:	b043      	add	sp, #268	; 0x10c
 800fa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa50:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa52:	9907      	ldr	r1, [sp, #28]
 800fa54:	aa25      	add	r2, sp, #148	; 0x94
 800fa56:	f7ff f88f 	bl	800eb78 <__sprint_r>
 800fa5a:	b948      	cbnz	r0, 800fa70 <_vfprintf_r+0x250>
 800fa5c:	ae32      	add	r6, sp, #200	; 0xc8
 800fa5e:	e757      	b.n	800f910 <_vfprintf_r+0xf0>
 800fa60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa62:	9907      	ldr	r1, [sp, #28]
 800fa64:	aa25      	add	r2, sp, #148	; 0x94
 800fa66:	f7ff f887 	bl	800eb78 <__sprint_r>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	f000 818c 	beq.w	800fd88 <_vfprintf_r+0x568>
 800fa70:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800fa74:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800fa78:	065b      	lsls	r3, r3, #25
 800fa7a:	d4e4      	bmi.n	800fa46 <_vfprintf_r+0x226>
 800fa7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800fa7e:	b043      	add	sp, #268	; 0x10c
 800fa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa84:	4628      	mov	r0, r5
 800fa86:	f7fd feff 	bl	800d888 <__sinit>
 800fa8a:	e6de      	b.n	800f84a <_vfprintf_r+0x2a>
 800fa8c:	9c06      	ldr	r4, [sp, #24]
 800fa8e:	e742      	b.n	800f916 <_vfprintf_r+0xf6>
 800fa90:	9c05      	ldr	r4, [sp, #20]
 800fa92:	9306      	str	r3, [sp, #24]
 800fa94:	06a3      	lsls	r3, r4, #26
 800fa96:	f140 8269 	bpl.w	800ff6c <_vfprintf_r+0x74c>
 800fa9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fa9c:	1deb      	adds	r3, r5, #7
 800fa9e:	f023 0307 	bic.w	r3, r3, #7
 800faa2:	f103 0408 	add.w	r4, r3, #8
 800faa6:	940e      	str	r4, [sp, #56]	; 0x38
 800faa8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800faac:	2301      	movs	r3, #1
 800faae:	f04f 0a00 	mov.w	sl, #0
 800fab2:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 800fab6:	9a08      	ldr	r2, [sp, #32]
 800fab8:	2a00      	cmp	r2, #0
 800faba:	bfa2      	ittt	ge
 800fabc:	9805      	ldrge	r0, [sp, #20]
 800fabe:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 800fac2:	9005      	strge	r0, [sp, #20]
 800fac4:	ea54 0105 	orrs.w	r1, r4, r5
 800fac8:	9808      	ldr	r0, [sp, #32]
 800faca:	bf0c      	ite	eq
 800facc:	2200      	moveq	r2, #0
 800face:	2201      	movne	r2, #1
 800fad0:	2800      	cmp	r0, #0
 800fad2:	bf18      	it	ne
 800fad4:	f042 0201 	orrne.w	r2, r2, #1
 800fad8:	2a00      	cmp	r2, #0
 800fada:	f000 83e2 	beq.w	80102a2 <_vfprintf_r+0xa82>
 800fade:	2b01      	cmp	r3, #1
 800fae0:	f000 8505 	beq.w	80104ee <_vfprintf_r+0xcce>
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	f10d 02c7 	add.w	r2, sp, #199	; 0xc7
 800faea:	f040 8151 	bne.w	800fd90 <_vfprintf_r+0x570>
 800faee:	9815      	ldr	r0, [sp, #84]	; 0x54
 800faf0:	f004 010f 	and.w	r1, r4, #15
 800faf4:	0923      	lsrs	r3, r4, #4
 800faf6:	4690      	mov	r8, r2
 800faf8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800fafc:	5c42      	ldrb	r2, [r0, r1]
 800fafe:	0929      	lsrs	r1, r5, #4
 800fb00:	461c      	mov	r4, r3
 800fb02:	460d      	mov	r5, r1
 800fb04:	ea54 0105 	orrs.w	r1, r4, r5
 800fb08:	f888 2000 	strb.w	r2, [r8]
 800fb0c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800fb10:	d1ee      	bne.n	800faf0 <_vfprintf_r+0x2d0>
 800fb12:	9b04      	ldr	r3, [sp, #16]
 800fb14:	ebc8 0303 	rsb	r3, r8, r3
 800fb18:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb1a:	9c08      	ldr	r4, [sp, #32]
 800fb1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fb1e:	42a5      	cmp	r5, r4
 800fb20:	bfb8      	it	lt
 800fb22:	4625      	movlt	r5, r4
 800fb24:	2400      	movs	r4, #0
 800fb26:	9509      	str	r5, [sp, #36]	; 0x24
 800fb28:	9413      	str	r4, [sp, #76]	; 0x4c
 800fb2a:	f1ba 0f00 	cmp.w	sl, #0
 800fb2e:	d002      	beq.n	800fb36 <_vfprintf_r+0x316>
 800fb30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fb32:	3401      	adds	r4, #1
 800fb34:	9409      	str	r4, [sp, #36]	; 0x24
 800fb36:	9d05      	ldr	r5, [sp, #20]
 800fb38:	f015 0b02 	ands.w	fp, r5, #2
 800fb3c:	bf18      	it	ne
 800fb3e:	9c09      	ldrne	r4, [sp, #36]	; 0x24
 800fb40:	9d05      	ldr	r5, [sp, #20]
 800fb42:	bf1c      	itt	ne
 800fb44:	3402      	addne	r4, #2
 800fb46:	9409      	strne	r4, [sp, #36]	; 0x24
 800fb48:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 800fb4c:	9510      	str	r5, [sp, #64]	; 0x40
 800fb4e:	f040 8337 	bne.w	80101c0 <_vfprintf_r+0x9a0>
 800fb52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fb54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb56:	1a2c      	subs	r4, r5, r0
 800fb58:	2c00      	cmp	r4, #0
 800fb5a:	f340 8331 	ble.w	80101c0 <_vfprintf_r+0x9a0>
 800fb5e:	2c10      	cmp	r4, #16
 800fb60:	f244 4ab4 	movw	sl, #17588	; 0x44b4
 800fb64:	f340 87a7 	ble.w	8010ab6 <_vfprintf_r+0x1296>
 800fb68:	4630      	mov	r0, r6
 800fb6a:	971a      	str	r7, [sp, #104]	; 0x68
 800fb6c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800fb6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fb70:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fb72:	4627      	mov	r7, r4
 800fb74:	f6c0 0a01 	movt	sl, #2049	; 0x801
 800fb78:	2510      	movs	r5, #16
 800fb7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fb7c:	e002      	b.n	800fb84 <_vfprintf_r+0x364>
 800fb7e:	3f10      	subs	r7, #16
 800fb80:	2f10      	cmp	r7, #16
 800fb82:	dd17      	ble.n	800fbb4 <_vfprintf_r+0x394>
 800fb84:	3201      	adds	r2, #1
 800fb86:	3110      	adds	r1, #16
 800fb88:	2a07      	cmp	r2, #7
 800fb8a:	6006      	str	r6, [r0, #0]
 800fb8c:	6045      	str	r5, [r0, #4]
 800fb8e:	9127      	str	r1, [sp, #156]	; 0x9c
 800fb90:	9226      	str	r2, [sp, #152]	; 0x98
 800fb92:	bfd8      	it	le
 800fb94:	3008      	addle	r0, #8
 800fb96:	ddf2      	ble.n	800fb7e <_vfprintf_r+0x35e>
 800fb98:	4620      	mov	r0, r4
 800fb9a:	9907      	ldr	r1, [sp, #28]
 800fb9c:	aa25      	add	r2, sp, #148	; 0x94
 800fb9e:	f7fe ffeb 	bl	800eb78 <__sprint_r>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	f47f af64 	bne.w	800fa70 <_vfprintf_r+0x250>
 800fba8:	3f10      	subs	r7, #16
 800fbaa:	2f10      	cmp	r7, #16
 800fbac:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800fbae:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fbb0:	a832      	add	r0, sp, #200	; 0xc8
 800fbb2:	dce7      	bgt.n	800fb84 <_vfprintf_r+0x364>
 800fbb4:	463c      	mov	r4, r7
 800fbb6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800fbb8:	4606      	mov	r6, r0
 800fbba:	3201      	adds	r2, #1
 800fbbc:	4421      	add	r1, r4
 800fbbe:	2a07      	cmp	r2, #7
 800fbc0:	9127      	str	r1, [sp, #156]	; 0x9c
 800fbc2:	9226      	str	r2, [sp, #152]	; 0x98
 800fbc4:	f8c6 a000 	str.w	sl, [r6]
 800fbc8:	6074      	str	r4, [r6, #4]
 800fbca:	f300 849e 	bgt.w	801050a <_vfprintf_r+0xcea>
 800fbce:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 800fbd2:	3608      	adds	r6, #8
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	f1ba 0f00 	cmp.w	sl, #0
 800fbda:	d00e      	beq.n	800fbfa <_vfprintf_r+0x3da>
 800fbdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fbde:	3301      	adds	r3, #1
 800fbe0:	3401      	adds	r4, #1
 800fbe2:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	2b07      	cmp	r3, #7
 800fbea:	e886 0006 	stmia.w	r6, {r1, r2}
 800fbee:	9427      	str	r4, [sp, #156]	; 0x9c
 800fbf0:	9326      	str	r3, [sp, #152]	; 0x98
 800fbf2:	bfd8      	it	le
 800fbf4:	3608      	addle	r6, #8
 800fbf6:	f300 82e5 	bgt.w	80101c4 <_vfprintf_r+0x9a4>
 800fbfa:	f1bb 0f00 	cmp.w	fp, #0
 800fbfe:	d00d      	beq.n	800fc1c <_vfprintf_r+0x3fc>
 800fc00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc02:	3301      	adds	r3, #1
 800fc04:	3402      	adds	r4, #2
 800fc06:	a91e      	add	r1, sp, #120	; 0x78
 800fc08:	2202      	movs	r2, #2
 800fc0a:	2b07      	cmp	r3, #7
 800fc0c:	e886 0006 	stmia.w	r6, {r1, r2}
 800fc10:	9427      	str	r4, [sp, #156]	; 0x9c
 800fc12:	9326      	str	r3, [sp, #152]	; 0x98
 800fc14:	bfd8      	it	le
 800fc16:	3608      	addle	r6, #8
 800fc18:	f300 8406 	bgt.w	8010428 <_vfprintf_r+0xc08>
 800fc1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc1e:	2b80      	cmp	r3, #128	; 0x80
 800fc20:	f000 8352 	beq.w	80102c8 <_vfprintf_r+0xaa8>
 800fc24:	9d08      	ldr	r5, [sp, #32]
 800fc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc28:	ebc3 0a05 	rsb	sl, r3, r5
 800fc2c:	f1ba 0f00 	cmp.w	sl, #0
 800fc30:	dd44      	ble.n	800fcbc <_vfprintf_r+0x49c>
 800fc32:	f1ba 0f10 	cmp.w	sl, #16
 800fc36:	f244 4590 	movw	r5, #17552	; 0x4490
 800fc3a:	bfdc      	itt	le
 800fc3c:	f6c0 0501 	movtle	r5, #2049	; 0x801
 800fc40:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 800fc42:	dd27      	ble.n	800fc94 <_vfprintf_r+0x474>
 800fc44:	f6c0 0501 	movt	r5, #2049	; 0x801
 800fc48:	4622      	mov	r2, r4
 800fc4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc4c:	4654      	mov	r4, sl
 800fc4e:	f04f 0b10 	mov.w	fp, #16
 800fc52:	46aa      	mov	sl, r5
 800fc54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800fc56:	e002      	b.n	800fc5e <_vfprintf_r+0x43e>
 800fc58:	3c10      	subs	r4, #16
 800fc5a:	2c10      	cmp	r4, #16
 800fc5c:	dd17      	ble.n	800fc8e <_vfprintf_r+0x46e>
 800fc5e:	3301      	adds	r3, #1
 800fc60:	3210      	adds	r2, #16
 800fc62:	2b07      	cmp	r3, #7
 800fc64:	e886 0880 	stmia.w	r6, {r7, fp}
 800fc68:	9227      	str	r2, [sp, #156]	; 0x9c
 800fc6a:	9326      	str	r3, [sp, #152]	; 0x98
 800fc6c:	bfd8      	it	le
 800fc6e:	3608      	addle	r6, #8
 800fc70:	ddf2      	ble.n	800fc58 <_vfprintf_r+0x438>
 800fc72:	4628      	mov	r0, r5
 800fc74:	9907      	ldr	r1, [sp, #28]
 800fc76:	aa25      	add	r2, sp, #148	; 0x94
 800fc78:	f7fe ff7e 	bl	800eb78 <__sprint_r>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f47f aef7 	bne.w	800fa70 <_vfprintf_r+0x250>
 800fc82:	3c10      	subs	r4, #16
 800fc84:	2c10      	cmp	r4, #16
 800fc86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800fc88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fc8a:	ae32      	add	r6, sp, #200	; 0xc8
 800fc8c:	dce7      	bgt.n	800fc5e <_vfprintf_r+0x43e>
 800fc8e:	4655      	mov	r5, sl
 800fc90:	46a2      	mov	sl, r4
 800fc92:	4614      	mov	r4, r2
 800fc94:	3301      	adds	r3, #1
 800fc96:	4454      	add	r4, sl
 800fc98:	2b07      	cmp	r3, #7
 800fc9a:	e886 0420 	stmia.w	r6, {r5, sl}
 800fc9e:	9427      	str	r4, [sp, #156]	; 0x9c
 800fca0:	9326      	str	r3, [sp, #152]	; 0x98
 800fca2:	bfd8      	it	le
 800fca4:	3608      	addle	r6, #8
 800fca6:	dd09      	ble.n	800fcbc <_vfprintf_r+0x49c>
 800fca8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fcaa:	9907      	ldr	r1, [sp, #28]
 800fcac:	aa25      	add	r2, sp, #148	; 0x94
 800fcae:	f7fe ff63 	bl	800eb78 <__sprint_r>
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	f47f aedc 	bne.w	800fa70 <_vfprintf_r+0x250>
 800fcb8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800fcba:	ae32      	add	r6, sp, #200	; 0xc8
 800fcbc:	9d05      	ldr	r5, [sp, #20]
 800fcbe:	05ea      	lsls	r2, r5, #23
 800fcc0:	f100 828b 	bmi.w	80101da <_vfprintf_r+0x9ba>
 800fcc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fcc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800fcc8:	f8c6 8000 	str.w	r8, [r6]
 800fccc:	3301      	adds	r3, #1
 800fcce:	442c      	add	r4, r5
 800fcd0:	2b07      	cmp	r3, #7
 800fcd2:	9427      	str	r4, [sp, #156]	; 0x9c
 800fcd4:	6075      	str	r5, [r6, #4]
 800fcd6:	9326      	str	r3, [sp, #152]	; 0x98
 800fcd8:	f300 8396 	bgt.w	8010408 <_vfprintf_r+0xbe8>
 800fcdc:	3608      	adds	r6, #8
 800fcde:	9d05      	ldr	r5, [sp, #20]
 800fce0:	076a      	lsls	r2, r5, #29
 800fce2:	d546      	bpl.n	800fd72 <_vfprintf_r+0x552>
 800fce4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fce8:	1a45      	subs	r5, r0, r1
 800fcea:	2d00      	cmp	r5, #0
 800fcec:	dd41      	ble.n	800fd72 <_vfprintf_r+0x552>
 800fcee:	2d10      	cmp	r5, #16
 800fcf0:	f244 4ab4 	movw	sl, #17588	; 0x44b4
 800fcf4:	bfdc      	itt	le
 800fcf6:	f6c0 0a01 	movtle	sl, #2049	; 0x801
 800fcfa:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 800fcfc:	dd27      	ble.n	800fd4e <_vfprintf_r+0x52e>
 800fcfe:	9705      	str	r7, [sp, #20]
 800fd00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd02:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800fd06:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800fd0a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fd0c:	f6c0 0a01 	movt	sl, #2049	; 0x801
 800fd10:	f04f 0810 	mov.w	r8, #16
 800fd14:	e002      	b.n	800fd1c <_vfprintf_r+0x4fc>
 800fd16:	3d10      	subs	r5, #16
 800fd18:	2d10      	cmp	r5, #16
 800fd1a:	dd17      	ble.n	800fd4c <_vfprintf_r+0x52c>
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	3410      	adds	r4, #16
 800fd20:	2b07      	cmp	r3, #7
 800fd22:	e886 0180 	stmia.w	r6, {r7, r8}
 800fd26:	9427      	str	r4, [sp, #156]	; 0x9c
 800fd28:	9326      	str	r3, [sp, #152]	; 0x98
 800fd2a:	bfd8      	it	le
 800fd2c:	3608      	addle	r6, #8
 800fd2e:	ddf2      	ble.n	800fd16 <_vfprintf_r+0x4f6>
 800fd30:	4648      	mov	r0, r9
 800fd32:	4659      	mov	r1, fp
 800fd34:	aa25      	add	r2, sp, #148	; 0x94
 800fd36:	f7fe ff1f 	bl	800eb78 <__sprint_r>
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	f040 8443 	bne.w	80105c6 <_vfprintf_r+0xda6>
 800fd40:	3d10      	subs	r5, #16
 800fd42:	2d10      	cmp	r5, #16
 800fd44:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800fd46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fd48:	ae32      	add	r6, sp, #200	; 0xc8
 800fd4a:	dce7      	bgt.n	800fd1c <_vfprintf_r+0x4fc>
 800fd4c:	9f05      	ldr	r7, [sp, #20]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	442c      	add	r4, r5
 800fd52:	2b07      	cmp	r3, #7
 800fd54:	9427      	str	r4, [sp, #156]	; 0x9c
 800fd56:	9326      	str	r3, [sp, #152]	; 0x98
 800fd58:	f8c6 a000 	str.w	sl, [r6]
 800fd5c:	6075      	str	r5, [r6, #4]
 800fd5e:	dd08      	ble.n	800fd72 <_vfprintf_r+0x552>
 800fd60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fd62:	9907      	ldr	r1, [sp, #28]
 800fd64:	aa25      	add	r2, sp, #148	; 0x94
 800fd66:	f7fe ff07 	bl	800eb78 <__sprint_r>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	f47f ae80 	bne.w	800fa70 <_vfprintf_r+0x250>
 800fd70:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800fd72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fd74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd76:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fd78:	4281      	cmp	r1, r0
 800fd7a:	bfac      	ite	ge
 800fd7c:	186d      	addge	r5, r5, r1
 800fd7e:	182d      	addlt	r5, r5, r0
 800fd80:	950f      	str	r5, [sp, #60]	; 0x3c
 800fd82:	2c00      	cmp	r4, #0
 800fd84:	f47f ae6c 	bne.w	800fa60 <_vfprintf_r+0x240>
 800fd88:	2300      	movs	r3, #0
 800fd8a:	9326      	str	r3, [sp, #152]	; 0x98
 800fd8c:	ae32      	add	r6, sp, #200	; 0xc8
 800fd8e:	e5a0      	b.n	800f8d2 <_vfprintf_r+0xb2>
 800fd90:	08e3      	lsrs	r3, r4, #3
 800fd92:	4690      	mov	r8, r2
 800fd94:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 800fd98:	08ea      	lsrs	r2, r5, #3
 800fd9a:	f004 0107 	and.w	r1, r4, #7
 800fd9e:	4615      	mov	r5, r2
 800fda0:	461c      	mov	r4, r3
 800fda2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800fda6:	ea54 0105 	orrs.w	r1, r4, r5
 800fdaa:	f888 3000 	strb.w	r3, [r8]
 800fdae:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800fdb2:	d1ed      	bne.n	800fd90 <_vfprintf_r+0x570>
 800fdb4:	9c05      	ldr	r4, [sp, #20]
 800fdb6:	07e0      	lsls	r0, r4, #31
 800fdb8:	4641      	mov	r1, r8
 800fdba:	f100 84e8 	bmi.w	801078e <_vfprintf_r+0xf6e>
 800fdbe:	9d04      	ldr	r5, [sp, #16]
 800fdc0:	ebc8 0505 	rsb	r5, r8, r5
 800fdc4:	950b      	str	r5, [sp, #44]	; 0x2c
 800fdc6:	e6a8      	b.n	800fb1a <_vfprintf_r+0x2fa>
 800fdc8:	9d05      	ldr	r5, [sp, #20]
 800fdca:	9306      	str	r3, [sp, #24]
 800fdcc:	f015 0320 	ands.w	r3, r5, #32
 800fdd0:	f000 80b2 	beq.w	800ff38 <_vfprintf_r+0x718>
 800fdd4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fdd6:	1de3      	adds	r3, r4, #7
 800fdd8:	f023 0307 	bic.w	r3, r3, #7
 800fddc:	f103 0508 	add.w	r5, r3, #8
 800fde0:	950e      	str	r5, [sp, #56]	; 0x38
 800fde2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fde6:	2300      	movs	r3, #0
 800fde8:	e661      	b.n	800faae <_vfprintf_r+0x28e>
 800fdea:	f893 9000 	ldrb.w	r9, [r3]
 800fdee:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 800fdf2:	f103 0001 	add.w	r0, r3, #1
 800fdf6:	f000 8784 	beq.w	8010d02 <_vfprintf_r+0x14e2>
 800fdfa:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 800fdfe:	2909      	cmp	r1, #9
 800fe00:	bf82      	ittt	hi
 800fe02:	2400      	movhi	r4, #0
 800fe04:	4603      	movhi	r3, r0
 800fe06:	9408      	strhi	r4, [sp, #32]
 800fe08:	f63f ad98 	bhi.w	800f93c <_vfprintf_r+0x11c>
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	f810 9b01 	ldrb.w	r9, [r0], #1
 800fe12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fe16:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800fe1a:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 800fe1e:	2909      	cmp	r1, #9
 800fe20:	d9f5      	bls.n	800fe0e <_vfprintf_r+0x5ee>
 800fe22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe26:	9308      	str	r3, [sp, #32]
 800fe28:	4603      	mov	r3, r0
 800fe2a:	e587      	b.n	800f93c <_vfprintf_r+0x11c>
 800fe2c:	9d05      	ldr	r5, [sp, #20]
 800fe2e:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800fe32:	f045 0510 	orr.w	r5, r5, #16
 800fe36:	9505      	str	r5, [sp, #20]
 800fe38:	9c05      	ldr	r4, [sp, #20]
 800fe3a:	9306      	str	r3, [sp, #24]
 800fe3c:	06a2      	lsls	r2, r4, #26
 800fe3e:	f140 80e8 	bpl.w	8010012 <_vfprintf_r+0x7f2>
 800fe42:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fe44:	1de9      	adds	r1, r5, #7
 800fe46:	f021 0107 	bic.w	r1, r1, #7
 800fe4a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800fe4e:	3108      	adds	r1, #8
 800fe50:	910e      	str	r1, [sp, #56]	; 0x38
 800fe52:	4614      	mov	r4, r2
 800fe54:	461d      	mov	r5, r3
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	f173 0100 	sbcs.w	r1, r3, #0
 800fe5c:	f2c0 84a3 	blt.w	80107a6 <_vfprintf_r+0xf86>
 800fe60:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 800fe64:	2301      	movs	r3, #1
 800fe66:	e626      	b.n	800fab6 <_vfprintf_r+0x296>
 800fe68:	9c05      	ldr	r4, [sp, #20]
 800fe6a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800fe6e:	9405      	str	r4, [sp, #20]
 800fe70:	f893 9000 	ldrb.w	r9, [r3]
 800fe74:	e561      	b.n	800f93a <_vfprintf_r+0x11a>
 800fe76:	2500      	movs	r5, #0
 800fe78:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 800fe7c:	950d      	str	r5, [sp, #52]	; 0x34
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f813 9b01 	ldrb.w	r9, [r3], #1
 800fe84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fe88:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800fe8c:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 800fe90:	2909      	cmp	r1, #9
 800fe92:	d9f5      	bls.n	800fe80 <_vfprintf_r+0x660>
 800fe94:	900d      	str	r0, [sp, #52]	; 0x34
 800fe96:	e551      	b.n	800f93c <_vfprintf_r+0x11c>
 800fe98:	9c05      	ldr	r4, [sp, #20]
 800fe9a:	f044 0408 	orr.w	r4, r4, #8
 800fe9e:	9405      	str	r4, [sp, #20]
 800fea0:	f893 9000 	ldrb.w	r9, [r3]
 800fea4:	e549      	b.n	800f93a <_vfprintf_r+0x11a>
 800fea6:	9c05      	ldr	r4, [sp, #20]
 800fea8:	9306      	str	r3, [sp, #24]
 800feaa:	0724      	lsls	r4, r4, #28
 800feac:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800feb0:	f140 850f 	bpl.w	80108d2 <_vfprintf_r+0x10b2>
 800feb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800feb6:	1deb      	adds	r3, r5, #7
 800feb8:	f023 0307 	bic.w	r3, r3, #7
 800febc:	f103 0408 	add.w	r4, r3, #8
 800fec0:	681d      	ldr	r5, [r3, #0]
 800fec2:	940e      	str	r4, [sp, #56]	; 0x38
 800fec4:	9516      	str	r5, [sp, #88]	; 0x58
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	9318      	str	r3, [sp, #96]	; 0x60
 800feca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fecc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fece:	ec43 2b10 	vmov	d0, r2, r3
 800fed2:	f003 fac7 	bl	8013464 <__fpclassifyd>
 800fed6:	2801      	cmp	r0, #1
 800fed8:	f040 846f 	bne.w	80107ba <_vfprintf_r+0xf9a>
 800fedc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fede:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fee0:	2200      	movs	r2, #0
 800fee2:	2300      	movs	r3, #0
 800fee4:	f7fc fefa 	bl	800ccdc <__aeabi_dcmplt>
 800fee8:	2800      	cmp	r0, #0
 800feea:	f040 8618 	bne.w	8010b1e <_vfprintf_r+0x12fe>
 800feee:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 800fef2:	2503      	movs	r5, #3
 800fef4:	9509      	str	r5, [sp, #36]	; 0x24
 800fef6:	9d05      	ldr	r5, [sp, #20]
 800fef8:	2400      	movs	r4, #0
 800fefa:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800fefe:	f244 48a4 	movw	r8, #17572	; 0x44a4
 800ff02:	f244 43a0 	movw	r3, #17568	; 0x44a0
 800ff06:	f6c0 0801 	movt	r8, #2049	; 0x801
 800ff0a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800ff0e:	9408      	str	r4, [sp, #32]
 800ff10:	9505      	str	r5, [sp, #20]
 800ff12:	2403      	movs	r4, #3
 800ff14:	2500      	movs	r5, #0
 800ff16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ff1a:	bfd8      	it	le
 800ff1c:	4698      	movle	r8, r3
 800ff1e:	940b      	str	r4, [sp, #44]	; 0x2c
 800ff20:	9513      	str	r5, [sp, #76]	; 0x4c
 800ff22:	e602      	b.n	800fb2a <_vfprintf_r+0x30a>
 800ff24:	9c05      	ldr	r4, [sp, #20]
 800ff26:	9306      	str	r3, [sp, #24]
 800ff28:	f044 0410 	orr.w	r4, r4, #16
 800ff2c:	9405      	str	r4, [sp, #20]
 800ff2e:	9d05      	ldr	r5, [sp, #20]
 800ff30:	f015 0320 	ands.w	r3, r5, #32
 800ff34:	f47f af4e 	bne.w	800fdd4 <_vfprintf_r+0x5b4>
 800ff38:	9c05      	ldr	r4, [sp, #20]
 800ff3a:	f014 0210 	ands.w	r2, r4, #16
 800ff3e:	f040 832a 	bne.w	8010596 <_vfprintf_r+0xd76>
 800ff42:	9c05      	ldr	r4, [sp, #20]
 800ff44:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 800ff48:	f000 8325 	beq.w	8010596 <_vfprintf_r+0xd76>
 800ff4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ff4e:	8804      	ldrh	r4, [r0, #0]
 800ff50:	3004      	adds	r0, #4
 800ff52:	4613      	mov	r3, r2
 800ff54:	2500      	movs	r5, #0
 800ff56:	900e      	str	r0, [sp, #56]	; 0x38
 800ff58:	e5a9      	b.n	800faae <_vfprintf_r+0x28e>
 800ff5a:	9d05      	ldr	r5, [sp, #20]
 800ff5c:	9306      	str	r3, [sp, #24]
 800ff5e:	f045 0510 	orr.w	r5, r5, #16
 800ff62:	9505      	str	r5, [sp, #20]
 800ff64:	9c05      	ldr	r4, [sp, #20]
 800ff66:	06a3      	lsls	r3, r4, #26
 800ff68:	f53f ad97 	bmi.w	800fa9a <_vfprintf_r+0x27a>
 800ff6c:	9d05      	ldr	r5, [sp, #20]
 800ff6e:	06ed      	lsls	r5, r5, #27
 800ff70:	f100 8318 	bmi.w	80105a4 <_vfprintf_r+0xd84>
 800ff74:	9c05      	ldr	r4, [sp, #20]
 800ff76:	0664      	lsls	r4, r4, #25
 800ff78:	f140 8314 	bpl.w	80105a4 <_vfprintf_r+0xd84>
 800ff7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ff7e:	8804      	ldrh	r4, [r0, #0]
 800ff80:	3004      	adds	r0, #4
 800ff82:	2500      	movs	r5, #0
 800ff84:	2301      	movs	r3, #1
 800ff86:	900e      	str	r0, [sp, #56]	; 0x38
 800ff88:	e591      	b.n	800faae <_vfprintf_r+0x28e>
 800ff8a:	9d05      	ldr	r5, [sp, #20]
 800ff8c:	9306      	str	r3, [sp, #24]
 800ff8e:	f244 4450 	movw	r4, #17488	; 0x4450
 800ff92:	f6c0 0401 	movt	r4, #2049	; 0x801
 800ff96:	06a8      	lsls	r0, r5, #26
 800ff98:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800ff9c:	9415      	str	r4, [sp, #84]	; 0x54
 800ff9e:	f140 8091 	bpl.w	80100c4 <_vfprintf_r+0x8a4>
 800ffa2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ffa4:	1de3      	adds	r3, r4, #7
 800ffa6:	f023 0307 	bic.w	r3, r3, #7
 800ffaa:	f103 0508 	add.w	r5, r3, #8
 800ffae:	950e      	str	r5, [sp, #56]	; 0x38
 800ffb0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ffb4:	9805      	ldr	r0, [sp, #20]
 800ffb6:	07c3      	lsls	r3, r0, #31
 800ffb8:	f140 8242 	bpl.w	8010440 <_vfprintf_r+0xc20>
 800ffbc:	ea54 0105 	orrs.w	r1, r4, r5
 800ffc0:	f000 823e 	beq.w	8010440 <_vfprintf_r+0xc20>
 800ffc4:	2330      	movs	r3, #48	; 0x30
 800ffc6:	f040 0002 	orr.w	r0, r0, #2
 800ffca:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800ffce:	f88d 9079 	strb.w	r9, [sp, #121]	; 0x79
 800ffd2:	9005      	str	r0, [sp, #20]
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	e56a      	b.n	800faae <_vfprintf_r+0x28e>
 800ffd8:	9306      	str	r3, [sp, #24]
 800ffda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f04f 0a00 	mov.w	sl, #0
 800ffe4:	2501      	movs	r5, #1
 800ffe6:	3404      	adds	r4, #4
 800ffe8:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 800ffec:	9509      	str	r5, [sp, #36]	; 0x24
 800ffee:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
 800fff2:	940e      	str	r4, [sp, #56]	; 0x38
 800fff4:	f8cd a020 	str.w	sl, [sp, #32]
 800fff8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800fffc:	950b      	str	r5, [sp, #44]	; 0x2c
 800fffe:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 8010002:	e598      	b.n	800fb36 <_vfprintf_r+0x316>
 8010004:	9c05      	ldr	r4, [sp, #20]
 8010006:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 801000a:	06a2      	lsls	r2, r4, #26
 801000c:	9306      	str	r3, [sp, #24]
 801000e:	f53f af18 	bmi.w	800fe42 <_vfprintf_r+0x622>
 8010012:	9c05      	ldr	r4, [sp, #20]
 8010014:	06e3      	lsls	r3, r4, #27
 8010016:	f100 82cd 	bmi.w	80105b4 <_vfprintf_r+0xd94>
 801001a:	9c05      	ldr	r4, [sp, #20]
 801001c:	0665      	lsls	r5, r4, #25
 801001e:	f140 82c9 	bpl.w	80105b4 <_vfprintf_r+0xd94>
 8010022:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010024:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010028:	3004      	adds	r0, #4
 801002a:	17e5      	asrs	r5, r4, #31
 801002c:	4622      	mov	r2, r4
 801002e:	462b      	mov	r3, r5
 8010030:	900e      	str	r0, [sp, #56]	; 0x38
 8010032:	e710      	b.n	800fe56 <_vfprintf_r+0x636>
 8010034:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010036:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010038:	6824      	ldr	r4, [r4, #0]
 801003a:	2c00      	cmp	r4, #0
 801003c:	940d      	str	r4, [sp, #52]	; 0x34
 801003e:	f105 0104 	add.w	r1, r5, #4
 8010042:	f6ff acdb 	blt.w	800f9fc <_vfprintf_r+0x1dc>
 8010046:	910e      	str	r1, [sp, #56]	; 0x38
 8010048:	f893 9000 	ldrb.w	r9, [r3]
 801004c:	e475      	b.n	800f93a <_vfprintf_r+0x11a>
 801004e:	9c05      	ldr	r4, [sp, #20]
 8010050:	f044 0420 	orr.w	r4, r4, #32
 8010054:	9405      	str	r4, [sp, #20]
 8010056:	f893 9000 	ldrb.w	r9, [r3]
 801005a:	e46e      	b.n	800f93a <_vfprintf_r+0x11a>
 801005c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801005e:	9306      	str	r3, [sp, #24]
 8010060:	f8d4 8000 	ldr.w	r8, [r4]
 8010064:	2500      	movs	r5, #0
 8010066:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
 801006a:	3404      	adds	r4, #4
 801006c:	f1b8 0f00 	cmp.w	r8, #0
 8010070:	f000 8540 	beq.w	8010af4 <_vfprintf_r+0x12d4>
 8010074:	9808      	ldr	r0, [sp, #32]
 8010076:	2800      	cmp	r0, #0
 8010078:	4640      	mov	r0, r8
 801007a:	f2c0 850e 	blt.w	8010a9a <_vfprintf_r+0x127a>
 801007e:	4629      	mov	r1, r5
 8010080:	9a08      	ldr	r2, [sp, #32]
 8010082:	f7fe f8b1 	bl	800e1e8 <memchr>
 8010086:	2800      	cmp	r0, #0
 8010088:	f000 858b 	beq.w	8010ba2 <_vfprintf_r+0x1382>
 801008c:	9908      	ldr	r1, [sp, #32]
 801008e:	940e      	str	r4, [sp, #56]	; 0x38
 8010090:	ebc8 0000 	rsb	r0, r8, r0
 8010094:	4288      	cmp	r0, r1
 8010096:	bfb8      	it	lt
 8010098:	4601      	movlt	r1, r0
 801009a:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 801009e:	910b      	str	r1, [sp, #44]	; 0x2c
 80100a0:	9508      	str	r5, [sp, #32]
 80100a2:	9409      	str	r4, [sp, #36]	; 0x24
 80100a4:	9513      	str	r5, [sp, #76]	; 0x4c
 80100a6:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 80100aa:	e53e      	b.n	800fb2a <_vfprintf_r+0x30a>
 80100ac:	9d05      	ldr	r5, [sp, #20]
 80100ae:	9306      	str	r3, [sp, #24]
 80100b0:	f244 4464 	movw	r4, #17508	; 0x4464
 80100b4:	f6c0 0401 	movt	r4, #2049	; 0x801
 80100b8:	06a8      	lsls	r0, r5, #26
 80100ba:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 80100be:	9415      	str	r4, [sp, #84]	; 0x54
 80100c0:	f53f af6f 	bmi.w	800ffa2 <_vfprintf_r+0x782>
 80100c4:	9c05      	ldr	r4, [sp, #20]
 80100c6:	06e1      	lsls	r1, r4, #27
 80100c8:	f100 825f 	bmi.w	801058a <_vfprintf_r+0xd6a>
 80100cc:	9c05      	ldr	r4, [sp, #20]
 80100ce:	0662      	lsls	r2, r4, #25
 80100d0:	f140 825b 	bpl.w	801058a <_vfprintf_r+0xd6a>
 80100d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80100d6:	8804      	ldrh	r4, [r0, #0]
 80100d8:	3004      	adds	r0, #4
 80100da:	2500      	movs	r5, #0
 80100dc:	900e      	str	r0, [sp, #56]	; 0x38
 80100de:	e769      	b.n	800ffb4 <_vfprintf_r+0x794>
 80100e0:	f893 9000 	ldrb.w	r9, [r3]
 80100e4:	222b      	movs	r2, #43	; 0x2b
 80100e6:	e428      	b.n	800f93a <_vfprintf_r+0x11a>
 80100e8:	f893 9000 	ldrb.w	r9, [r3]
 80100ec:	2a00      	cmp	r2, #0
 80100ee:	f47f ac24 	bne.w	800f93a <_vfprintf_r+0x11a>
 80100f2:	2220      	movs	r2, #32
 80100f4:	e421      	b.n	800f93a <_vfprintf_r+0x11a>
 80100f6:	9d05      	ldr	r5, [sp, #20]
 80100f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100fa:	9306      	str	r3, [sp, #24]
 80100fc:	f045 0502 	orr.w	r5, r5, #2
 8010100:	f244 4064 	movw	r0, #17508	; 0x4464
 8010104:	2330      	movs	r3, #48	; 0x30
 8010106:	f04f 0978 	mov.w	r9, #120	; 0x78
 801010a:	9505      	str	r5, [sp, #20]
 801010c:	f6c0 0001 	movt	r0, #2049	; 0x801
 8010110:	1d15      	adds	r5, r2, #4
 8010112:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8010116:	950e      	str	r5, [sp, #56]	; 0x38
 8010118:	6814      	ldr	r4, [r2, #0]
 801011a:	f88d 9079 	strb.w	r9, [sp, #121]	; 0x79
 801011e:	2500      	movs	r5, #0
 8010120:	9015      	str	r0, [sp, #84]	; 0x54
 8010122:	2302      	movs	r3, #2
 8010124:	e4c3      	b.n	800faae <_vfprintf_r+0x28e>
 8010126:	9d05      	ldr	r5, [sp, #20]
 8010128:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 801012c:	9505      	str	r5, [sp, #20]
 801012e:	f893 9000 	ldrb.w	r9, [r3]
 8010132:	e402      	b.n	800f93a <_vfprintf_r+0x11a>
 8010134:	f893 9000 	ldrb.w	r9, [r3]
 8010138:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
 801013c:	bf0c      	ite	eq
 801013e:	9c05      	ldreq	r4, [sp, #20]
 8010140:	9d05      	ldrne	r5, [sp, #20]
 8010142:	4619      	mov	r1, r3
 8010144:	bf09      	itett	eq
 8010146:	f044 0420 	orreq.w	r4, r4, #32
 801014a:	f045 0510 	orrne.w	r5, r5, #16
 801014e:	3301      	addeq	r3, #1
 8010150:	9405      	streq	r4, [sp, #20]
 8010152:	bf0c      	ite	eq
 8010154:	f891 9001 	ldrbeq.w	r9, [r1, #1]
 8010158:	9505      	strne	r5, [sp, #20]
 801015a:	f7ff bbee 	b.w	800f93a <_vfprintf_r+0x11a>
 801015e:	9d05      	ldr	r5, [sp, #20]
 8010160:	9306      	str	r3, [sp, #24]
 8010162:	06a9      	lsls	r1, r5, #26
 8010164:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 8010168:	f140 83c0 	bpl.w	80108ec <_vfprintf_r+0x10cc>
 801016c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801016e:	6821      	ldr	r1, [r4, #0]
 8010170:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8010172:	17e5      	asrs	r5, r4, #31
 8010174:	462b      	mov	r3, r5
 8010176:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010178:	4622      	mov	r2, r4
 801017a:	3504      	adds	r5, #4
 801017c:	950e      	str	r5, [sp, #56]	; 0x38
 801017e:	e9c1 2300 	strd	r2, r3, [r1]
 8010182:	f7ff bba6 	b.w	800f8d2 <_vfprintf_r+0xb2>
 8010186:	9d05      	ldr	r5, [sp, #20]
 8010188:	f045 0501 	orr.w	r5, r5, #1
 801018c:	9505      	str	r5, [sp, #20]
 801018e:	f893 9000 	ldrb.w	r9, [r3]
 8010192:	f7ff bbd2 	b.w	800f93a <_vfprintf_r+0x11a>
 8010196:	9306      	str	r3, [sp, #24]
 8010198:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 801019c:	f1b9 0f00 	cmp.w	r9, #0
 80101a0:	f000 8407 	beq.w	80109b2 <_vfprintf_r+0x1192>
 80101a4:	2300      	movs	r3, #0
 80101a6:	2501      	movs	r5, #1
 80101a8:	469a      	mov	sl, r3
 80101aa:	9509      	str	r5, [sp, #36]	; 0x24
 80101ac:	f88d 90a0 	strb.w	r9, [sp, #160]	; 0xa0
 80101b0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 80101b4:	9308      	str	r3, [sp, #32]
 80101b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80101b8:	950b      	str	r5, [sp, #44]	; 0x2c
 80101ba:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 80101be:	e4ba      	b.n	800fb36 <_vfprintf_r+0x316>
 80101c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80101c2:	e508      	b.n	800fbd6 <_vfprintf_r+0x3b6>
 80101c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80101c6:	9907      	ldr	r1, [sp, #28]
 80101c8:	aa25      	add	r2, sp, #148	; 0x94
 80101ca:	f7fe fcd5 	bl	800eb78 <__sprint_r>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	f47f ac4e 	bne.w	800fa70 <_vfprintf_r+0x250>
 80101d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80101d6:	ae32      	add	r6, sp, #200	; 0xc8
 80101d8:	e50f      	b.n	800fbfa <_vfprintf_r+0x3da>
 80101da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80101de:	f340 80c2 	ble.w	8010366 <_vfprintf_r+0xb46>
 80101e2:	9816      	ldr	r0, [sp, #88]	; 0x58
 80101e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80101e6:	2200      	movs	r2, #0
 80101e8:	2300      	movs	r3, #0
 80101ea:	f7fc fd6d 	bl	800ccc8 <__aeabi_dcmpeq>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	f000 8129 	beq.w	8010446 <_vfprintf_r+0xc26>
 80101f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80101f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80101f8:	3301      	adds	r3, #1
 80101fa:	3401      	adds	r4, #1
 80101fc:	2201      	movs	r2, #1
 80101fe:	2b07      	cmp	r3, #7
 8010200:	6035      	str	r5, [r6, #0]
 8010202:	6072      	str	r2, [r6, #4]
 8010204:	9427      	str	r4, [sp, #156]	; 0x9c
 8010206:	9326      	str	r3, [sp, #152]	; 0x98
 8010208:	bfd8      	it	le
 801020a:	3608      	addle	r6, #8
 801020c:	f300 8379 	bgt.w	8010902 <_vfprintf_r+0x10e2>
 8010210:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010214:	42ab      	cmp	r3, r5
 8010216:	db03      	blt.n	8010220 <_vfprintf_r+0xa00>
 8010218:	9d05      	ldr	r5, [sp, #20]
 801021a:	07eb      	lsls	r3, r5, #31
 801021c:	f57f ad5f 	bpl.w	800fcde <_vfprintf_r+0x4be>
 8010220:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010224:	6035      	str	r5, [r6, #0]
 8010226:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010228:	3301      	adds	r3, #1
 801022a:	442c      	add	r4, r5
 801022c:	2b07      	cmp	r3, #7
 801022e:	6075      	str	r5, [r6, #4]
 8010230:	9427      	str	r4, [sp, #156]	; 0x9c
 8010232:	9326      	str	r3, [sp, #152]	; 0x98
 8010234:	bfd8      	it	le
 8010236:	3608      	addle	r6, #8
 8010238:	f300 83fe 	bgt.w	8010a38 <_vfprintf_r+0x1218>
 801023c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801023e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8010242:	f1b8 0f00 	cmp.w	r8, #0
 8010246:	f77f ad4a 	ble.w	800fcde <_vfprintf_r+0x4be>
 801024a:	f1b8 0f10 	cmp.w	r8, #16
 801024e:	f244 4590 	movw	r5, #17552	; 0x4490
 8010252:	f340 853a 	ble.w	8010cca <_vfprintf_r+0x14aa>
 8010256:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010258:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801025c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8010260:	f6c0 0501 	movt	r5, #2049	; 0x801
 8010264:	f04f 0910 	mov.w	r9, #16
 8010268:	e005      	b.n	8010276 <_vfprintf_r+0xa56>
 801026a:	f1a8 0810 	sub.w	r8, r8, #16
 801026e:	f1b8 0f10 	cmp.w	r8, #16
 8010272:	f340 80c0 	ble.w	80103f6 <_vfprintf_r+0xbd6>
 8010276:	3301      	adds	r3, #1
 8010278:	3410      	adds	r4, #16
 801027a:	2b07      	cmp	r3, #7
 801027c:	e886 0280 	stmia.w	r6, {r7, r9}
 8010280:	9427      	str	r4, [sp, #156]	; 0x9c
 8010282:	9326      	str	r3, [sp, #152]	; 0x98
 8010284:	bfd8      	it	le
 8010286:	3608      	addle	r6, #8
 8010288:	ddef      	ble.n	801026a <_vfprintf_r+0xa4a>
 801028a:	4650      	mov	r0, sl
 801028c:	4659      	mov	r1, fp
 801028e:	aa25      	add	r2, sp, #148	; 0x94
 8010290:	f7fe fc72 	bl	800eb78 <__sprint_r>
 8010294:	2800      	cmp	r0, #0
 8010296:	f040 8196 	bne.w	80105c6 <_vfprintf_r+0xda6>
 801029a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801029c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801029e:	ae32      	add	r6, sp, #200	; 0xc8
 80102a0:	e7e3      	b.n	801026a <_vfprintf_r+0xa4a>
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	f040 80bb 	bne.w	801041e <_vfprintf_r+0xbfe>
 80102a8:	9c05      	ldr	r4, [sp, #20]
 80102aa:	07e1      	lsls	r1, r4, #31
 80102ac:	bf5c      	itt	pl
 80102ae:	930b      	strpl	r3, [sp, #44]	; 0x2c
 80102b0:	f10d 08c8 	addpl.w	r8, sp, #200	; 0xc8
 80102b4:	f57f ac31 	bpl.w	800fb1a <_vfprintf_r+0x2fa>
 80102b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80102ba:	2330      	movs	r3, #48	; 0x30
 80102bc:	f88d 30c7 	strb.w	r3, [sp, #199]	; 0xc7
 80102c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80102c2:	f10d 08c7 	add.w	r8, sp, #199	; 0xc7
 80102c6:	e428      	b.n	800fb1a <_vfprintf_r+0x2fa>
 80102c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80102ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102cc:	ebc0 0a05 	rsb	sl, r0, r5
 80102d0:	f1ba 0f00 	cmp.w	sl, #0
 80102d4:	f77f aca6 	ble.w	800fc24 <_vfprintf_r+0x404>
 80102d8:	f1ba 0f10 	cmp.w	sl, #16
 80102dc:	f244 4590 	movw	r5, #17552	; 0x4490
 80102e0:	bfdc      	itt	le
 80102e2:	f6c0 0501 	movtle	r5, #2049	; 0x801
 80102e6:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 80102e8:	dd27      	ble.n	801033a <_vfprintf_r+0xb1a>
 80102ea:	f6c0 0501 	movt	r5, #2049	; 0x801
 80102ee:	4622      	mov	r2, r4
 80102f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80102f2:	4654      	mov	r4, sl
 80102f4:	f04f 0b10 	mov.w	fp, #16
 80102f8:	46aa      	mov	sl, r5
 80102fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80102fc:	e002      	b.n	8010304 <_vfprintf_r+0xae4>
 80102fe:	3c10      	subs	r4, #16
 8010300:	2c10      	cmp	r4, #16
 8010302:	dd17      	ble.n	8010334 <_vfprintf_r+0xb14>
 8010304:	3301      	adds	r3, #1
 8010306:	3210      	adds	r2, #16
 8010308:	2b07      	cmp	r3, #7
 801030a:	e886 0880 	stmia.w	r6, {r7, fp}
 801030e:	9227      	str	r2, [sp, #156]	; 0x9c
 8010310:	9326      	str	r3, [sp, #152]	; 0x98
 8010312:	bfd8      	it	le
 8010314:	3608      	addle	r6, #8
 8010316:	ddf2      	ble.n	80102fe <_vfprintf_r+0xade>
 8010318:	4628      	mov	r0, r5
 801031a:	9907      	ldr	r1, [sp, #28]
 801031c:	aa25      	add	r2, sp, #148	; 0x94
 801031e:	f7fe fc2b 	bl	800eb78 <__sprint_r>
 8010322:	2800      	cmp	r0, #0
 8010324:	f47f aba4 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010328:	3c10      	subs	r4, #16
 801032a:	2c10      	cmp	r4, #16
 801032c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801032e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010330:	ae32      	add	r6, sp, #200	; 0xc8
 8010332:	dce7      	bgt.n	8010304 <_vfprintf_r+0xae4>
 8010334:	4655      	mov	r5, sl
 8010336:	46a2      	mov	sl, r4
 8010338:	4614      	mov	r4, r2
 801033a:	3301      	adds	r3, #1
 801033c:	4454      	add	r4, sl
 801033e:	2b07      	cmp	r3, #7
 8010340:	e886 0420 	stmia.w	r6, {r5, sl}
 8010344:	9427      	str	r4, [sp, #156]	; 0x9c
 8010346:	9326      	str	r3, [sp, #152]	; 0x98
 8010348:	bfd8      	it	le
 801034a:	3608      	addle	r6, #8
 801034c:	f77f ac6a 	ble.w	800fc24 <_vfprintf_r+0x404>
 8010350:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010352:	9907      	ldr	r1, [sp, #28]
 8010354:	aa25      	add	r2, sp, #148	; 0x94
 8010356:	f7fe fc0f 	bl	800eb78 <__sprint_r>
 801035a:	2800      	cmp	r0, #0
 801035c:	f47f ab88 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010360:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010362:	ae32      	add	r6, sp, #200	; 0xc8
 8010364:	e45e      	b.n	800fc24 <_vfprintf_r+0x404>
 8010366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010368:	2d01      	cmp	r5, #1
 801036a:	f340 81b1 	ble.w	80106d0 <_vfprintf_r+0xeb0>
 801036e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010370:	f8c6 8000 	str.w	r8, [r6]
 8010374:	3301      	adds	r3, #1
 8010376:	1c62      	adds	r2, r4, #1
 8010378:	2101      	movs	r1, #1
 801037a:	2b07      	cmp	r3, #7
 801037c:	6071      	str	r1, [r6, #4]
 801037e:	9227      	str	r2, [sp, #156]	; 0x9c
 8010380:	9326      	str	r3, [sp, #152]	; 0x98
 8010382:	bfd8      	it	le
 8010384:	3608      	addle	r6, #8
 8010386:	f300 81ce 	bgt.w	8010726 <_vfprintf_r+0xf06>
 801038a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801038c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801038e:	4422      	add	r2, r4
 8010390:	6035      	str	r5, [r6, #0]
 8010392:	1c5c      	adds	r4, r3, #1
 8010394:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010396:	9227      	str	r2, [sp, #156]	; 0x9c
 8010398:	2c07      	cmp	r4, #7
 801039a:	9426      	str	r4, [sp, #152]	; 0x98
 801039c:	6075      	str	r5, [r6, #4]
 801039e:	f300 81ce 	bgt.w	801073e <_vfprintf_r+0xf1e>
 80103a2:	3608      	adds	r6, #8
 80103a4:	4691      	mov	r9, r2
 80103a6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80103a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80103aa:	2200      	movs	r2, #0
 80103ac:	2300      	movs	r3, #0
 80103ae:	f7fc fc8b 	bl	800ccc8 <__aeabi_dcmpeq>
 80103b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103b4:	2800      	cmp	r0, #0
 80103b6:	f040 80b6 	bne.w	8010526 <_vfprintf_r+0xd06>
 80103ba:	1e6b      	subs	r3, r5, #1
 80103bc:	3401      	adds	r4, #1
 80103be:	f108 0101 	add.w	r1, r8, #1
 80103c2:	eb03 0209 	add.w	r2, r3, r9
 80103c6:	2c07      	cmp	r4, #7
 80103c8:	6031      	str	r1, [r6, #0]
 80103ca:	9426      	str	r4, [sp, #152]	; 0x98
 80103cc:	9227      	str	r2, [sp, #156]	; 0x9c
 80103ce:	6073      	str	r3, [r6, #4]
 80103d0:	f300 819c 	bgt.w	801070c <_vfprintf_r+0xeec>
 80103d4:	3608      	adds	r6, #8
 80103d6:	4691      	mov	r9, r2
 80103d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80103da:	1c63      	adds	r3, r4, #1
 80103dc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80103de:	9326      	str	r3, [sp, #152]	; 0x98
 80103e0:	444a      	add	r2, r9
 80103e2:	a921      	add	r1, sp, #132	; 0x84
 80103e4:	2b07      	cmp	r3, #7
 80103e6:	9227      	str	r2, [sp, #156]	; 0x9c
 80103e8:	e886 0012 	stmia.w	r6, {r1, r4}
 80103ec:	dc0c      	bgt.n	8010408 <_vfprintf_r+0xbe8>
 80103ee:	3608      	adds	r6, #8
 80103f0:	4614      	mov	r4, r2
 80103f2:	e474      	b.n	800fcde <_vfprintf_r+0x4be>
 80103f4:	4614      	mov	r4, r2
 80103f6:	3301      	adds	r3, #1
 80103f8:	4444      	add	r4, r8
 80103fa:	2b07      	cmp	r3, #7
 80103fc:	9427      	str	r4, [sp, #156]	; 0x9c
 80103fe:	9326      	str	r3, [sp, #152]	; 0x98
 8010400:	e886 0120 	stmia.w	r6, {r5, r8}
 8010404:	f77f ac6a 	ble.w	800fcdc <_vfprintf_r+0x4bc>
 8010408:	980a      	ldr	r0, [sp, #40]	; 0x28
 801040a:	9907      	ldr	r1, [sp, #28]
 801040c:	aa25      	add	r2, sp, #148	; 0x94
 801040e:	f7fe fbb3 	bl	800eb78 <__sprint_r>
 8010412:	2800      	cmp	r0, #0
 8010414:	f47f ab2c 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010418:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801041a:	ae32      	add	r6, sp, #200	; 0xc8
 801041c:	e45f      	b.n	800fcde <_vfprintf_r+0x4be>
 801041e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010420:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8010424:	f7ff bb79 	b.w	800fb1a <_vfprintf_r+0x2fa>
 8010428:	980a      	ldr	r0, [sp, #40]	; 0x28
 801042a:	9907      	ldr	r1, [sp, #28]
 801042c:	aa25      	add	r2, sp, #148	; 0x94
 801042e:	f7fe fba3 	bl	800eb78 <__sprint_r>
 8010432:	2800      	cmp	r0, #0
 8010434:	f47f ab1c 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010438:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801043a:	ae32      	add	r6, sp, #200	; 0xc8
 801043c:	f7ff bbee 	b.w	800fc1c <_vfprintf_r+0x3fc>
 8010440:	2302      	movs	r3, #2
 8010442:	f7ff bb34 	b.w	800faae <_vfprintf_r+0x28e>
 8010446:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010448:	2b00      	cmp	r3, #0
 801044a:	f340 8265 	ble.w	8010918 <_vfprintf_r+0x10f8>
 801044e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010450:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010452:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8010456:	4285      	cmp	r5, r0
 8010458:	bfa8      	it	ge
 801045a:	4605      	movge	r5, r0
 801045c:	2d00      	cmp	r5, #0
 801045e:	44c3      	add	fp, r8
 8010460:	dd0c      	ble.n	801047c <_vfprintf_r+0xc5c>
 8010462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010464:	f8c6 8000 	str.w	r8, [r6]
 8010468:	3301      	adds	r3, #1
 801046a:	442c      	add	r4, r5
 801046c:	2b07      	cmp	r3, #7
 801046e:	6075      	str	r5, [r6, #4]
 8010470:	9427      	str	r4, [sp, #156]	; 0x9c
 8010472:	9326      	str	r3, [sp, #152]	; 0x98
 8010474:	bfd8      	it	le
 8010476:	3608      	addle	r6, #8
 8010478:	f300 8323 	bgt.w	8010ac2 <_vfprintf_r+0x12a2>
 801047c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801047e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010482:	ebc5 0901 	rsb	r9, r5, r1
 8010486:	f1b9 0f00 	cmp.w	r9, #0
 801048a:	f340 80b5 	ble.w	80105f8 <_vfprintf_r+0xdd8>
 801048e:	f1b9 0f10 	cmp.w	r9, #16
 8010492:	f244 4590 	movw	r5, #17552	; 0x4490
 8010496:	bfdc      	itt	le
 8010498:	f6c0 0501 	movtle	r5, #2049	; 0x801
 801049c:	9b26      	ldrle	r3, [sp, #152]	; 0x98
 801049e:	f340 8097 	ble.w	80105d0 <_vfprintf_r+0xdb0>
 80104a2:	f6c0 0501 	movt	r5, #2049	; 0x801
 80104a6:	4622      	mov	r2, r4
 80104a8:	9508      	str	r5, [sp, #32]
 80104aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80104ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80104ae:	9d07      	ldr	r5, [sp, #28]
 80104b0:	f04f 0a10 	mov.w	sl, #16
 80104b4:	e005      	b.n	80104c2 <_vfprintf_r+0xca2>
 80104b6:	f1a9 0910 	sub.w	r9, r9, #16
 80104ba:	f1b9 0f10 	cmp.w	r9, #16
 80104be:	f340 8085 	ble.w	80105cc <_vfprintf_r+0xdac>
 80104c2:	3301      	adds	r3, #1
 80104c4:	3210      	adds	r2, #16
 80104c6:	2b07      	cmp	r3, #7
 80104c8:	e886 0480 	stmia.w	r6, {r7, sl}
 80104cc:	9227      	str	r2, [sp, #156]	; 0x9c
 80104ce:	9326      	str	r3, [sp, #152]	; 0x98
 80104d0:	bfd8      	it	le
 80104d2:	3608      	addle	r6, #8
 80104d4:	ddef      	ble.n	80104b6 <_vfprintf_r+0xc96>
 80104d6:	4620      	mov	r0, r4
 80104d8:	4629      	mov	r1, r5
 80104da:	aa25      	add	r2, sp, #148	; 0x94
 80104dc:	f7fe fb4c 	bl	800eb78 <__sprint_r>
 80104e0:	2800      	cmp	r0, #0
 80104e2:	f040 8273 	bne.w	80109cc <_vfprintf_r+0x11ac>
 80104e6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80104e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80104ea:	ae32      	add	r6, sp, #200	; 0xc8
 80104ec:	e7e3      	b.n	80104b6 <_vfprintf_r+0xc96>
 80104ee:	2d00      	cmp	r5, #0
 80104f0:	bf08      	it	eq
 80104f2:	2c0a      	cmpeq	r4, #10
 80104f4:	f080 8130 	bcs.w	8010758 <_vfprintf_r+0xf38>
 80104f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80104fa:	3430      	adds	r4, #48	; 0x30
 80104fc:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
 8010500:	950b      	str	r5, [sp, #44]	; 0x2c
 8010502:	f10d 08c7 	add.w	r8, sp, #199	; 0xc7
 8010506:	f7ff bb08 	b.w	800fb1a <_vfprintf_r+0x2fa>
 801050a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801050c:	9907      	ldr	r1, [sp, #28]
 801050e:	aa25      	add	r2, sp, #148	; 0x94
 8010510:	f7fe fb32 	bl	800eb78 <__sprint_r>
 8010514:	2800      	cmp	r0, #0
 8010516:	f47f aaab 	bne.w	800fa70 <_vfprintf_r+0x250>
 801051a:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 801051e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010520:	ae32      	add	r6, sp, #200	; 0xc8
 8010522:	f7ff bb58 	b.w	800fbd6 <_vfprintf_r+0x3b6>
 8010526:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 801052a:	f1b8 0f00 	cmp.w	r8, #0
 801052e:	f77f af53 	ble.w	80103d8 <_vfprintf_r+0xbb8>
 8010532:	f244 4590 	movw	r5, #17552	; 0x4490
 8010536:	f1b8 0f10 	cmp.w	r8, #16
 801053a:	f6c0 0501 	movt	r5, #2049	; 0x801
 801053e:	f340 80dc 	ble.w	80106fa <_vfprintf_r+0xeda>
 8010542:	464b      	mov	r3, r9
 8010544:	f04f 0a10 	mov.w	sl, #16
 8010548:	46a9      	mov	r9, r5
 801054a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801054e:	9d07      	ldr	r5, [sp, #28]
 8010550:	e005      	b.n	801055e <_vfprintf_r+0xd3e>
 8010552:	f1a8 0810 	sub.w	r8, r8, #16
 8010556:	f1b8 0f10 	cmp.w	r8, #16
 801055a:	f340 80cc 	ble.w	80106f6 <_vfprintf_r+0xed6>
 801055e:	3401      	adds	r4, #1
 8010560:	3310      	adds	r3, #16
 8010562:	2c07      	cmp	r4, #7
 8010564:	e886 0480 	stmia.w	r6, {r7, sl}
 8010568:	9327      	str	r3, [sp, #156]	; 0x9c
 801056a:	9426      	str	r4, [sp, #152]	; 0x98
 801056c:	bfd8      	it	le
 801056e:	3608      	addle	r6, #8
 8010570:	ddef      	ble.n	8010552 <_vfprintf_r+0xd32>
 8010572:	4658      	mov	r0, fp
 8010574:	4629      	mov	r1, r5
 8010576:	aa25      	add	r2, sp, #148	; 0x94
 8010578:	f7fe fafe 	bl	800eb78 <__sprint_r>
 801057c:	2800      	cmp	r0, #0
 801057e:	f040 8225 	bne.w	80109cc <_vfprintf_r+0x11ac>
 8010582:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010584:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8010586:	ae32      	add	r6, sp, #200	; 0xc8
 8010588:	e7e3      	b.n	8010552 <_vfprintf_r+0xd32>
 801058a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801058c:	682c      	ldr	r4, [r5, #0]
 801058e:	3504      	adds	r5, #4
 8010590:	950e      	str	r5, [sp, #56]	; 0x38
 8010592:	2500      	movs	r5, #0
 8010594:	e50e      	b.n	800ffb4 <_vfprintf_r+0x794>
 8010596:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010598:	682c      	ldr	r4, [r5, #0]
 801059a:	3504      	adds	r5, #4
 801059c:	950e      	str	r5, [sp, #56]	; 0x38
 801059e:	2500      	movs	r5, #0
 80105a0:	f7ff ba85 	b.w	800faae <_vfprintf_r+0x28e>
 80105a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80105a6:	682c      	ldr	r4, [r5, #0]
 80105a8:	3504      	adds	r5, #4
 80105aa:	950e      	str	r5, [sp, #56]	; 0x38
 80105ac:	2301      	movs	r3, #1
 80105ae:	2500      	movs	r5, #0
 80105b0:	f7ff ba7d 	b.w	800faae <_vfprintf_r+0x28e>
 80105b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80105b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80105b8:	682c      	ldr	r4, [r5, #0]
 80105ba:	3004      	adds	r0, #4
 80105bc:	17e5      	asrs	r5, r4, #31
 80105be:	900e      	str	r0, [sp, #56]	; 0x38
 80105c0:	4622      	mov	r2, r4
 80105c2:	462b      	mov	r3, r5
 80105c4:	e447      	b.n	800fe56 <_vfprintf_r+0x636>
 80105c6:	46d9      	mov	r9, fp
 80105c8:	f7ff ba54 	b.w	800fa74 <_vfprintf_r+0x254>
 80105cc:	9d08      	ldr	r5, [sp, #32]
 80105ce:	4614      	mov	r4, r2
 80105d0:	3301      	adds	r3, #1
 80105d2:	444c      	add	r4, r9
 80105d4:	2b07      	cmp	r3, #7
 80105d6:	e886 0220 	stmia.w	r6, {r5, r9}
 80105da:	9427      	str	r4, [sp, #156]	; 0x9c
 80105dc:	9326      	str	r3, [sp, #152]	; 0x98
 80105de:	bfd8      	it	le
 80105e0:	3608      	addle	r6, #8
 80105e2:	dd09      	ble.n	80105f8 <_vfprintf_r+0xdd8>
 80105e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80105e6:	9907      	ldr	r1, [sp, #28]
 80105e8:	aa25      	add	r2, sp, #148	; 0x94
 80105ea:	f7fe fac5 	bl	800eb78 <__sprint_r>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	f47f aa3e 	bne.w	800fa70 <_vfprintf_r+0x250>
 80105f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80105f6:	ae32      	add	r6, sp, #200	; 0xc8
 80105f8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80105fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80105fc:	44a8      	add	r8, r5
 80105fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010600:	42ab      	cmp	r3, r5
 8010602:	db4c      	blt.n	801069e <_vfprintf_r+0xe7e>
 8010604:	9d05      	ldr	r5, [sp, #20]
 8010606:	07e8      	lsls	r0, r5, #31
 8010608:	d449      	bmi.n	801069e <_vfprintf_r+0xe7e>
 801060a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801060c:	ebc8 050b 	rsb	r5, r8, fp
 8010610:	1ac3      	subs	r3, r0, r3
 8010612:	42ab      	cmp	r3, r5
 8010614:	bfb8      	it	lt
 8010616:	461d      	movlt	r5, r3
 8010618:	2d00      	cmp	r5, #0
 801061a:	dd0c      	ble.n	8010636 <_vfprintf_r+0xe16>
 801061c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801061e:	f8c6 8000 	str.w	r8, [r6]
 8010622:	3201      	adds	r2, #1
 8010624:	442c      	add	r4, r5
 8010626:	2a07      	cmp	r2, #7
 8010628:	6075      	str	r5, [r6, #4]
 801062a:	9427      	str	r4, [sp, #156]	; 0x9c
 801062c:	9226      	str	r2, [sp, #152]	; 0x98
 801062e:	bfd8      	it	le
 8010630:	3608      	addle	r6, #8
 8010632:	f300 8251 	bgt.w	8010ad8 <_vfprintf_r+0x12b8>
 8010636:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801063a:	ebc5 0803 	rsb	r8, r5, r3
 801063e:	f1b8 0f00 	cmp.w	r8, #0
 8010642:	f77f ab4c 	ble.w	800fcde <_vfprintf_r+0x4be>
 8010646:	f1b8 0f10 	cmp.w	r8, #16
 801064a:	f244 4590 	movw	r5, #17552	; 0x4490
 801064e:	f340 833c 	ble.w	8010cca <_vfprintf_r+0x14aa>
 8010652:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010654:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010658:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801065c:	f6c0 0501 	movt	r5, #2049	; 0x801
 8010660:	f04f 0910 	mov.w	r9, #16
 8010664:	4622      	mov	r2, r4
 8010666:	e005      	b.n	8010674 <_vfprintf_r+0xe54>
 8010668:	f1a8 0810 	sub.w	r8, r8, #16
 801066c:	f1b8 0f10 	cmp.w	r8, #16
 8010670:	f77f aec0 	ble.w	80103f4 <_vfprintf_r+0xbd4>
 8010674:	3301      	adds	r3, #1
 8010676:	3210      	adds	r2, #16
 8010678:	2b07      	cmp	r3, #7
 801067a:	e886 0280 	stmia.w	r6, {r7, r9}
 801067e:	9227      	str	r2, [sp, #156]	; 0x9c
 8010680:	9326      	str	r3, [sp, #152]	; 0x98
 8010682:	bfd8      	it	le
 8010684:	3608      	addle	r6, #8
 8010686:	ddef      	ble.n	8010668 <_vfprintf_r+0xe48>
 8010688:	4650      	mov	r0, sl
 801068a:	4659      	mov	r1, fp
 801068c:	aa25      	add	r2, sp, #148	; 0x94
 801068e:	f7fe fa73 	bl	800eb78 <__sprint_r>
 8010692:	2800      	cmp	r0, #0
 8010694:	d197      	bne.n	80105c6 <_vfprintf_r+0xda6>
 8010696:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010698:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801069a:	ae32      	add	r6, sp, #200	; 0xc8
 801069c:	e7e4      	b.n	8010668 <_vfprintf_r+0xe48>
 801069e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80106a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80106a2:	6035      	str	r5, [r6, #0]
 80106a4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80106a6:	3201      	adds	r2, #1
 80106a8:	442c      	add	r4, r5
 80106aa:	2a07      	cmp	r2, #7
 80106ac:	6075      	str	r5, [r6, #4]
 80106ae:	9427      	str	r4, [sp, #156]	; 0x9c
 80106b0:	9226      	str	r2, [sp, #152]	; 0x98
 80106b2:	bfd8      	it	le
 80106b4:	3608      	addle	r6, #8
 80106b6:	dda8      	ble.n	801060a <_vfprintf_r+0xdea>
 80106b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80106ba:	9907      	ldr	r1, [sp, #28]
 80106bc:	aa25      	add	r2, sp, #148	; 0x94
 80106be:	f7fe fa5b 	bl	800eb78 <__sprint_r>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	f47f a9d4 	bne.w	800fa70 <_vfprintf_r+0x250>
 80106c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80106ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80106cc:	ae32      	add	r6, sp, #200	; 0xc8
 80106ce:	e79c      	b.n	801060a <_vfprintf_r+0xdea>
 80106d0:	9d05      	ldr	r5, [sp, #20]
 80106d2:	07e9      	lsls	r1, r5, #31
 80106d4:	f53f ae4b 	bmi.w	801036e <_vfprintf_r+0xb4e>
 80106d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80106da:	f8c6 8000 	str.w	r8, [r6]
 80106de:	1c63      	adds	r3, r4, #1
 80106e0:	1c54      	adds	r4, r2, #1
 80106e2:	2c07      	cmp	r4, #7
 80106e4:	f04f 0201 	mov.w	r2, #1
 80106e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80106ea:	9426      	str	r4, [sp, #152]	; 0x98
 80106ec:	6072      	str	r2, [r6, #4]
 80106ee:	dc0d      	bgt.n	801070c <_vfprintf_r+0xeec>
 80106f0:	3608      	adds	r6, #8
 80106f2:	4699      	mov	r9, r3
 80106f4:	e670      	b.n	80103d8 <_vfprintf_r+0xbb8>
 80106f6:	464d      	mov	r5, r9
 80106f8:	4699      	mov	r9, r3
 80106fa:	3401      	adds	r4, #1
 80106fc:	eb08 0309 	add.w	r3, r8, r9
 8010700:	2c07      	cmp	r4, #7
 8010702:	9327      	str	r3, [sp, #156]	; 0x9c
 8010704:	9426      	str	r4, [sp, #152]	; 0x98
 8010706:	e886 0120 	stmia.w	r6, {r5, r8}
 801070a:	ddf1      	ble.n	80106f0 <_vfprintf_r+0xed0>
 801070c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801070e:	9907      	ldr	r1, [sp, #28]
 8010710:	aa25      	add	r2, sp, #148	; 0x94
 8010712:	f7fe fa31 	bl	800eb78 <__sprint_r>
 8010716:	2800      	cmp	r0, #0
 8010718:	f47f a9aa 	bne.w	800fa70 <_vfprintf_r+0x250>
 801071c:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8010720:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8010722:	ae32      	add	r6, sp, #200	; 0xc8
 8010724:	e658      	b.n	80103d8 <_vfprintf_r+0xbb8>
 8010726:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010728:	9907      	ldr	r1, [sp, #28]
 801072a:	aa25      	add	r2, sp, #148	; 0x94
 801072c:	f7fe fa24 	bl	800eb78 <__sprint_r>
 8010730:	2800      	cmp	r0, #0
 8010732:	f47f a99d 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010736:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8010738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801073a:	ae32      	add	r6, sp, #200	; 0xc8
 801073c:	e625      	b.n	801038a <_vfprintf_r+0xb6a>
 801073e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010740:	9907      	ldr	r1, [sp, #28]
 8010742:	aa25      	add	r2, sp, #148	; 0x94
 8010744:	f7fe fa18 	bl	800eb78 <__sprint_r>
 8010748:	2800      	cmp	r0, #0
 801074a:	f47f a991 	bne.w	800fa70 <_vfprintf_r+0x250>
 801074e:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 8010752:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8010754:	ae32      	add	r6, sp, #200	; 0xc8
 8010756:	e626      	b.n	80103a6 <_vfprintf_r+0xb86>
 8010758:	f10d 0bc7 	add.w	fp, sp, #199	; 0xc7
 801075c:	4620      	mov	r0, r4
 801075e:	4629      	mov	r1, r5
 8010760:	220a      	movs	r2, #10
 8010762:	2300      	movs	r3, #0
 8010764:	f7fc fcd2 	bl	800d10c <__aeabi_uldivmod>
 8010768:	3230      	adds	r2, #48	; 0x30
 801076a:	f88b 2000 	strb.w	r2, [fp]
 801076e:	4620      	mov	r0, r4
 8010770:	4629      	mov	r1, r5
 8010772:	220a      	movs	r2, #10
 8010774:	2300      	movs	r3, #0
 8010776:	f7fc fcc9 	bl	800d10c <__aeabi_uldivmod>
 801077a:	4604      	mov	r4, r0
 801077c:	460d      	mov	r5, r1
 801077e:	ea54 0005 	orrs.w	r0, r4, r5
 8010782:	46d8      	mov	r8, fp
 8010784:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010788:	d1e8      	bne.n	801075c <_vfprintf_r+0xf3c>
 801078a:	f7ff b9c2 	b.w	800fb12 <_vfprintf_r+0x2f2>
 801078e:	2b30      	cmp	r3, #48	; 0x30
 8010790:	f43f a9bf 	beq.w	800fb12 <_vfprintf_r+0x2f2>
 8010794:	9c04      	ldr	r4, [sp, #16]
 8010796:	2330      	movs	r3, #48	; 0x30
 8010798:	1aa4      	subs	r4, r4, r2
 801079a:	4690      	mov	r8, r2
 801079c:	940b      	str	r4, [sp, #44]	; 0x2c
 801079e:	f801 3c01 	strb.w	r3, [r1, #-1]
 80107a2:	f7ff b9ba 	b.w	800fb1a <_vfprintf_r+0x2fa>
 80107a6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80107aa:	4264      	negs	r4, r4
 80107ac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80107b0:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 80107b4:	2301      	movs	r3, #1
 80107b6:	f7ff b97e 	b.w	800fab6 <_vfprintf_r+0x296>
 80107ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80107bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80107be:	ec43 2b10 	vmov	d0, r2, r3
 80107c2:	f002 fe4f 	bl	8013464 <__fpclassifyd>
 80107c6:	2800      	cmp	r0, #0
 80107c8:	f000 8111 	beq.w	80109ee <_vfprintf_r+0x11ce>
 80107cc:	9c08      	ldr	r4, [sp, #32]
 80107ce:	3401      	adds	r4, #1
 80107d0:	bf08      	it	eq
 80107d2:	2406      	moveq	r4, #6
 80107d4:	f029 0520 	bic.w	r5, r9, #32
 80107d8:	bf08      	it	eq
 80107da:	9408      	streq	r4, [sp, #32]
 80107dc:	d006      	beq.n	80107ec <_vfprintf_r+0xfcc>
 80107de:	2d47      	cmp	r5, #71	; 0x47
 80107e0:	d104      	bne.n	80107ec <_vfprintf_r+0xfcc>
 80107e2:	9c08      	ldr	r4, [sp, #32]
 80107e4:	2c00      	cmp	r4, #0
 80107e6:	bf08      	it	eq
 80107e8:	2401      	moveq	r4, #1
 80107ea:	9408      	str	r4, [sp, #32]
 80107ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80107ee:	9c05      	ldr	r4, [sp, #20]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80107f6:	9410      	str	r4, [sp, #64]	; 0x40
 80107f8:	bfbd      	ittte	lt
 80107fa:	461c      	movlt	r4, r3
 80107fc:	f104 4a00 	addlt.w	sl, r4, #2147483648	; 0x80000000
 8010800:	f04f 0b2d 	movlt.w	fp, #45	; 0x2d
 8010804:	f8dd a060 	ldrge.w	sl, [sp, #96]	; 0x60
 8010808:	bfa8      	it	ge
 801080a:	f04f 0b00 	movge.w	fp, #0
 801080e:	f1b5 0046 	subs.w	r0, r5, #70	; 0x46
 8010812:	f1d0 0c00 	rsbs	ip, r0, #0
 8010816:	eb5c 0c00 	adcs.w	ip, ip, r0
 801081a:	f1bc 0f00 	cmp.w	ip, #0
 801081e:	f040 818f 	bne.w	8010b40 <_vfprintf_r+0x1320>
 8010822:	2d45      	cmp	r5, #69	; 0x45
 8010824:	f040 81ff 	bne.w	8010c26 <_vfprintf_r+0x1406>
 8010828:	9808      	ldr	r0, [sp, #32]
 801082a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801082c:	1c44      	adds	r4, r0, #1
 801082e:	4653      	mov	r3, sl
 8010830:	a820      	add	r0, sp, #128	; 0x80
 8010832:	a923      	add	r1, sp, #140	; 0x8c
 8010834:	ec43 2b10 	vmov	d0, r2, r3
 8010838:	e88d 0003 	stmia.w	sp, {r0, r1}
 801083c:	4622      	mov	r2, r4
 801083e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010840:	2102      	movs	r1, #2
 8010842:	ab1f      	add	r3, sp, #124	; 0x7c
 8010844:	f000 fbfc 	bl	8011040 <_dtoa_r>
 8010848:	4680      	mov	r8, r0
 801084a:	4404      	add	r4, r0
 801084c:	2300      	movs	r3, #0
 801084e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010850:	4651      	mov	r1, sl
 8010852:	2200      	movs	r2, #0
 8010854:	f7fc fa38 	bl	800ccc8 <__aeabi_dcmpeq>
 8010858:	4623      	mov	r3, r4
 801085a:	b948      	cbnz	r0, 8010870 <_vfprintf_r+0x1050>
 801085c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801085e:	429c      	cmp	r4, r3
 8010860:	d906      	bls.n	8010870 <_vfprintf_r+0x1050>
 8010862:	2130      	movs	r1, #48	; 0x30
 8010864:	1c5a      	adds	r2, r3, #1
 8010866:	9223      	str	r2, [sp, #140]	; 0x8c
 8010868:	7019      	strb	r1, [r3, #0]
 801086a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801086c:	429c      	cmp	r4, r3
 801086e:	d8f9      	bhi.n	8010864 <_vfprintf_r+0x1044>
 8010870:	ebc8 0303 	rsb	r3, r8, r3
 8010874:	2d47      	cmp	r5, #71	; 0x47
 8010876:	930c      	str	r3, [sp, #48]	; 0x30
 8010878:	f000 818b 	beq.w	8010b92 <_vfprintf_r+0x1372>
 801087c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010880:	f340 826a 	ble.w	8010d58 <_vfprintf_r+0x1538>
 8010884:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010888:	f000 81dd 	beq.w	8010c46 <_vfprintf_r+0x1426>
 801088c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801088e:	9513      	str	r5, [sp, #76]	; 0x4c
 8010890:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010894:	42ac      	cmp	r4, r5
 8010896:	f2c0 81c8 	blt.w	8010c2a <_vfprintf_r+0x140a>
 801089a:	9c05      	ldr	r4, [sp, #20]
 801089c:	07e0      	lsls	r0, r4, #31
 801089e:	bf49      	itett	mi
 80108a0:	9b13      	ldrmi	r3, [sp, #76]	; 0x4c
 80108a2:	9d13      	ldrpl	r5, [sp, #76]	; 0x4c
 80108a4:	3301      	addmi	r3, #1
 80108a6:	930b      	strmi	r3, [sp, #44]	; 0x2c
 80108a8:	bf5a      	itte	pl
 80108aa:	ea25 73e5 	bicpl.w	r3, r5, r5, asr #31
 80108ae:	950b      	strpl	r5, [sp, #44]	; 0x2c
 80108b0:	ea23 73e3 	bicmi.w	r3, r3, r3, asr #31
 80108b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80108b8:	f1bb 0f00 	cmp.w	fp, #0
 80108bc:	f040 8135 	bne.w	8010b2a <_vfprintf_r+0x130a>
 80108c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80108c2:	9309      	str	r3, [sp, #36]	; 0x24
 80108c4:	9405      	str	r4, [sp, #20]
 80108c6:	f8cd b020 	str.w	fp, [sp, #32]
 80108ca:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 80108ce:	f7ff b92c 	b.w	800fb2a <_vfprintf_r+0x30a>
 80108d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80108d4:	1de3      	adds	r3, r4, #7
 80108d6:	f023 0307 	bic.w	r3, r3, #7
 80108da:	f103 0508 	add.w	r5, r3, #8
 80108de:	681c      	ldr	r4, [r3, #0]
 80108e0:	950e      	str	r5, [sp, #56]	; 0x38
 80108e2:	9416      	str	r4, [sp, #88]	; 0x58
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	9318      	str	r3, [sp, #96]	; 0x60
 80108e8:	f7ff baef 	b.w	800feca <_vfprintf_r+0x6aa>
 80108ec:	9c05      	ldr	r4, [sp, #20]
 80108ee:	06e2      	lsls	r2, r4, #27
 80108f0:	d56f      	bpl.n	80109d2 <_vfprintf_r+0x11b2>
 80108f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80108f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80108f6:	682b      	ldr	r3, [r5, #0]
 80108f8:	3504      	adds	r5, #4
 80108fa:	950e      	str	r5, [sp, #56]	; 0x38
 80108fc:	601c      	str	r4, [r3, #0]
 80108fe:	f7fe bfe8 	b.w	800f8d2 <_vfprintf_r+0xb2>
 8010902:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010904:	9907      	ldr	r1, [sp, #28]
 8010906:	aa25      	add	r2, sp, #148	; 0x94
 8010908:	f7fe f936 	bl	800eb78 <__sprint_r>
 801090c:	2800      	cmp	r0, #0
 801090e:	f47f a8af 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010912:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010914:	ae32      	add	r6, sp, #200	; 0xc8
 8010916:	e47b      	b.n	8010210 <_vfprintf_r+0x9f0>
 8010918:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801091a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801091c:	3201      	adds	r2, #1
 801091e:	3401      	adds	r4, #1
 8010920:	2101      	movs	r1, #1
 8010922:	2a07      	cmp	r2, #7
 8010924:	6035      	str	r5, [r6, #0]
 8010926:	9427      	str	r4, [sp, #156]	; 0x9c
 8010928:	9226      	str	r2, [sp, #152]	; 0x98
 801092a:	6071      	str	r1, [r6, #4]
 801092c:	dc78      	bgt.n	8010a20 <_vfprintf_r+0x1200>
 801092e:	3608      	adds	r6, #8
 8010930:	4618      	mov	r0, r3
 8010932:	b928      	cbnz	r0, 8010940 <_vfprintf_r+0x1120>
 8010934:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010936:	b91d      	cbnz	r5, 8010940 <_vfprintf_r+0x1120>
 8010938:	9d05      	ldr	r5, [sp, #20]
 801093a:	07ed      	lsls	r5, r5, #31
 801093c:	f57f a9cf 	bpl.w	800fcde <_vfprintf_r+0x4be>
 8010940:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010942:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010944:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010946:	4421      	add	r1, r4
 8010948:	3301      	adds	r3, #1
 801094a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801094c:	6035      	str	r5, [r6, #0]
 801094e:	2b07      	cmp	r3, #7
 8010950:	9127      	str	r1, [sp, #156]	; 0x9c
 8010952:	6074      	str	r4, [r6, #4]
 8010954:	9326      	str	r3, [sp, #152]	; 0x98
 8010956:	bfd8      	it	le
 8010958:	f106 0208 	addle.w	r2, r6, #8
 801095c:	f300 8156 	bgt.w	8010c0c <_vfprintf_r+0x13ec>
 8010960:	4244      	negs	r4, r0
 8010962:	2c00      	cmp	r4, #0
 8010964:	f340 8089 	ble.w	8010a7a <_vfprintf_r+0x125a>
 8010968:	f244 4590 	movw	r5, #17552	; 0x4490
 801096c:	2c10      	cmp	r4, #16
 801096e:	f6c0 0501 	movt	r5, #2049	; 0x801
 8010972:	dd6d      	ble.n	8010a50 <_vfprintf_r+0x1230>
 8010974:	2610      	movs	r6, #16
 8010976:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801097a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801097e:	e002      	b.n	8010986 <_vfprintf_r+0x1166>
 8010980:	3c10      	subs	r4, #16
 8010982:	2c10      	cmp	r4, #16
 8010984:	dd64      	ble.n	8010a50 <_vfprintf_r+0x1230>
 8010986:	3301      	adds	r3, #1
 8010988:	3110      	adds	r1, #16
 801098a:	2b07      	cmp	r3, #7
 801098c:	6017      	str	r7, [r2, #0]
 801098e:	6056      	str	r6, [r2, #4]
 8010990:	9127      	str	r1, [sp, #156]	; 0x9c
 8010992:	9326      	str	r3, [sp, #152]	; 0x98
 8010994:	bfd8      	it	le
 8010996:	3208      	addle	r2, #8
 8010998:	ddf2      	ble.n	8010980 <_vfprintf_r+0x1160>
 801099a:	4648      	mov	r0, r9
 801099c:	4651      	mov	r1, sl
 801099e:	aa25      	add	r2, sp, #148	; 0x94
 80109a0:	f7fe f8ea 	bl	800eb78 <__sprint_r>
 80109a4:	2800      	cmp	r0, #0
 80109a6:	f040 815d 	bne.w	8010c64 <_vfprintf_r+0x1444>
 80109aa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80109ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80109ae:	aa32      	add	r2, sp, #200	; 0xc8
 80109b0:	e7e6      	b.n	8010980 <_vfprintf_r+0x1160>
 80109b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80109b4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	f43f a85b 	beq.w	800fa74 <_vfprintf_r+0x254>
 80109be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80109c0:	4649      	mov	r1, r9
 80109c2:	aa25      	add	r2, sp, #148	; 0x94
 80109c4:	f7fe f8d8 	bl	800eb78 <__sprint_r>
 80109c8:	f7ff b854 	b.w	800fa74 <_vfprintf_r+0x254>
 80109cc:	46a9      	mov	r9, r5
 80109ce:	f7ff b851 	b.w	800fa74 <_vfprintf_r+0x254>
 80109d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80109d4:	9d05      	ldr	r5, [sp, #20]
 80109d6:	6823      	ldr	r3, [r4, #0]
 80109d8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80109dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80109de:	f104 0404 	add.w	r4, r4, #4
 80109e2:	940e      	str	r4, [sp, #56]	; 0x38
 80109e4:	bf14      	ite	ne
 80109e6:	801d      	strhne	r5, [r3, #0]
 80109e8:	601d      	streq	r5, [r3, #0]
 80109ea:	f7fe bf72 	b.w	800f8d2 <_vfprintf_r+0xb2>
 80109ee:	9d05      	ldr	r5, [sp, #20]
 80109f0:	9008      	str	r0, [sp, #32]
 80109f2:	f244 48ac 	movw	r8, #17580	; 0x44ac
 80109f6:	f244 43a8 	movw	r3, #17576	; 0x44a8
 80109fa:	2403      	movs	r4, #3
 80109fc:	f6c0 0801 	movt	r8, #2049	; 0x801
 8010a00:	f6c0 0301 	movt	r3, #2049	; 0x801
 8010a04:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8010a08:	9409      	str	r4, [sp, #36]	; 0x24
 8010a0a:	9505      	str	r5, [sp, #20]
 8010a0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010a10:	bfd8      	it	le
 8010a12:	4698      	movle	r8, r3
 8010a14:	9013      	str	r0, [sp, #76]	; 0x4c
 8010a16:	940b      	str	r4, [sp, #44]	; 0x2c
 8010a18:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8010a1c:	f7ff b885 	b.w	800fb2a <_vfprintf_r+0x30a>
 8010a20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a22:	9907      	ldr	r1, [sp, #28]
 8010a24:	aa25      	add	r2, sp, #148	; 0x94
 8010a26:	f7fe f8a7 	bl	800eb78 <__sprint_r>
 8010a2a:	2800      	cmp	r0, #0
 8010a2c:	f47f a820 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010a30:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010a32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010a34:	ae32      	add	r6, sp, #200	; 0xc8
 8010a36:	e77c      	b.n	8010932 <_vfprintf_r+0x1112>
 8010a38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a3a:	9907      	ldr	r1, [sp, #28]
 8010a3c:	aa25      	add	r2, sp, #148	; 0x94
 8010a3e:	f7fe f89b 	bl	800eb78 <__sprint_r>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f47f a814 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010a48:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010a4a:	ae32      	add	r6, sp, #200	; 0xc8
 8010a4c:	f7ff bbf6 	b.w	801023c <_vfprintf_r+0xa1c>
 8010a50:	3301      	adds	r3, #1
 8010a52:	4421      	add	r1, r4
 8010a54:	2b07      	cmp	r3, #7
 8010a56:	6015      	str	r5, [r2, #0]
 8010a58:	6054      	str	r4, [r2, #4]
 8010a5a:	9127      	str	r1, [sp, #156]	; 0x9c
 8010a5c:	9326      	str	r3, [sp, #152]	; 0x98
 8010a5e:	bfd8      	it	le
 8010a60:	3208      	addle	r2, #8
 8010a62:	dd0a      	ble.n	8010a7a <_vfprintf_r+0x125a>
 8010a64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010a66:	9907      	ldr	r1, [sp, #28]
 8010a68:	aa25      	add	r2, sp, #148	; 0x94
 8010a6a:	f7fe f885 	bl	800eb78 <__sprint_r>
 8010a6e:	2800      	cmp	r0, #0
 8010a70:	f47e affe 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010a74:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010a76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010a78:	aa32      	add	r2, sp, #200	; 0xc8
 8010a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a7c:	f8c2 8000 	str.w	r8, [r2]
 8010a80:	3301      	adds	r3, #1
 8010a82:	4429      	add	r1, r5
 8010a84:	2b07      	cmp	r3, #7
 8010a86:	9127      	str	r1, [sp, #156]	; 0x9c
 8010a88:	9326      	str	r3, [sp, #152]	; 0x98
 8010a8a:	6055      	str	r5, [r2, #4]
 8010a8c:	f73f acbc 	bgt.w	8010408 <_vfprintf_r+0xbe8>
 8010a90:	f102 0608 	add.w	r6, r2, #8
 8010a94:	460c      	mov	r4, r1
 8010a96:	f7ff b922 	b.w	800fcde <_vfprintf_r+0x4be>
 8010a9a:	9508      	str	r5, [sp, #32]
 8010a9c:	f7fd fffe 	bl	800ea9c <strlen>
 8010aa0:	940e      	str	r4, [sp, #56]	; 0x38
 8010aa2:	9c08      	ldr	r4, [sp, #32]
 8010aa4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010aa6:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8010aaa:	9509      	str	r5, [sp, #36]	; 0x24
 8010aac:	9413      	str	r4, [sp, #76]	; 0x4c
 8010aae:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8010ab2:	f7ff b83a 	b.w	800fb2a <_vfprintf_r+0x30a>
 8010ab6:	f6c0 0a01 	movt	sl, #2049	; 0x801
 8010aba:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010abc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010abe:	f7ff b87c 	b.w	800fbba <_vfprintf_r+0x39a>
 8010ac2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010ac4:	9907      	ldr	r1, [sp, #28]
 8010ac6:	aa25      	add	r2, sp, #148	; 0x94
 8010ac8:	f7fe f856 	bl	800eb78 <__sprint_r>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	f47e afcf 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010ad2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010ad4:	ae32      	add	r6, sp, #200	; 0xc8
 8010ad6:	e4d1      	b.n	801047c <_vfprintf_r+0xc5c>
 8010ad8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010ada:	9907      	ldr	r1, [sp, #28]
 8010adc:	aa25      	add	r2, sp, #148	; 0x94
 8010ade:	f7fe f84b 	bl	800eb78 <__sprint_r>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	f47e afc4 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010ae8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010aea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010aec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8010aee:	1acb      	subs	r3, r1, r3
 8010af0:	ae32      	add	r6, sp, #200	; 0xc8
 8010af2:	e5a0      	b.n	8010636 <_vfprintf_r+0xe16>
 8010af4:	9d08      	ldr	r5, [sp, #32]
 8010af6:	940e      	str	r4, [sp, #56]	; 0x38
 8010af8:	2d06      	cmp	r5, #6
 8010afa:	bf28      	it	cs
 8010afc:	2506      	movcs	r5, #6
 8010afe:	46c2      	mov	sl, r8
 8010b00:	950b      	str	r5, [sp, #44]	; 0x2c
 8010b02:	f244 4878 	movw	r8, #17528	; 0x4478
 8010b06:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010b0a:	f8cd a020 	str.w	sl, [sp, #32]
 8010b0e:	4654      	mov	r4, sl
 8010b10:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8010b14:	9509      	str	r5, [sp, #36]	; 0x24
 8010b16:	f6c0 0801 	movt	r8, #2049	; 0x801
 8010b1a:	f7ff b806 	b.w	800fb2a <_vfprintf_r+0x30a>
 8010b1e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8010b22:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8010b26:	f7ff b9e4 	b.w	800fef2 <_vfprintf_r+0x6d2>
 8010b2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b2e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8010b32:	2400      	movs	r4, #0
 8010b34:	9505      	str	r5, [sp, #20]
 8010b36:	f88d a077 	strb.w	sl, [sp, #119]	; 0x77
 8010b3a:	9408      	str	r4, [sp, #32]
 8010b3c:	f7fe bff8 	b.w	800fb30 <_vfprintf_r+0x310>
 8010b40:	2103      	movs	r1, #3
 8010b42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010b44:	f8cd c008 	str.w	ip, [sp, #8]
 8010b48:	4653      	mov	r3, sl
 8010b4a:	a823      	add	r0, sp, #140	; 0x8c
 8010b4c:	ac20      	add	r4, sp, #128	; 0x80
 8010b4e:	ec43 2b10 	vmov	d0, r2, r3
 8010b52:	9001      	str	r0, [sp, #4]
 8010b54:	9400      	str	r4, [sp, #0]
 8010b56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010b58:	9a08      	ldr	r2, [sp, #32]
 8010b5a:	ab1f      	add	r3, sp, #124	; 0x7c
 8010b5c:	f000 fa70 	bl	8011040 <_dtoa_r>
 8010b60:	2d47      	cmp	r5, #71	; 0x47
 8010b62:	4680      	mov	r8, r0
 8010b64:	f8dd c008 	ldr.w	ip, [sp, #8]
 8010b68:	d102      	bne.n	8010b70 <_vfprintf_r+0x1350>
 8010b6a:	9c05      	ldr	r4, [sp, #20]
 8010b6c:	07e1      	lsls	r1, r4, #31
 8010b6e:	d50d      	bpl.n	8010b8c <_vfprintf_r+0x136c>
 8010b70:	9c08      	ldr	r4, [sp, #32]
 8010b72:	4444      	add	r4, r8
 8010b74:	f1bc 0f00 	cmp.w	ip, #0
 8010b78:	f43f ae68 	beq.w	801084c <_vfprintf_r+0x102c>
 8010b7c:	f898 3000 	ldrb.w	r3, [r8]
 8010b80:	2b30      	cmp	r3, #48	; 0x30
 8010b82:	f000 80af 	beq.w	8010ce4 <_vfprintf_r+0x14c4>
 8010b86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b88:	441c      	add	r4, r3
 8010b8a:	e65f      	b.n	801084c <_vfprintf_r+0x102c>
 8010b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b8e:	1a1b      	subs	r3, r3, r0
 8010b90:	930c      	str	r3, [sp, #48]	; 0x30
 8010b92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b94:	1cda      	adds	r2, r3, #3
 8010b96:	db11      	blt.n	8010bbc <_vfprintf_r+0x139c>
 8010b98:	9c08      	ldr	r4, [sp, #32]
 8010b9a:	429c      	cmp	r4, r3
 8010b9c:	db0e      	blt.n	8010bbc <_vfprintf_r+0x139c>
 8010b9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8010ba0:	e676      	b.n	8010890 <_vfprintf_r+0x1070>
 8010ba2:	9d08      	ldr	r5, [sp, #32]
 8010ba4:	940e      	str	r4, [sp, #56]	; 0x38
 8010ba6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8010baa:	9509      	str	r5, [sp, #36]	; 0x24
 8010bac:	9d08      	ldr	r5, [sp, #32]
 8010bae:	9013      	str	r0, [sp, #76]	; 0x4c
 8010bb0:	950b      	str	r5, [sp, #44]	; 0x2c
 8010bb2:	9008      	str	r0, [sp, #32]
 8010bb4:	f89d a077 	ldrb.w	sl, [sp, #119]	; 0x77
 8010bb8:	f7fe bfb7 	b.w	800fb2a <_vfprintf_r+0x30a>
 8010bbc:	f1a9 0902 	sub.w	r9, r9, #2
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	931f      	str	r3, [sp, #124]	; 0x7c
 8010bc6:	bfba      	itte	lt
 8010bc8:	425b      	neglt	r3, r3
 8010bca:	222d      	movlt	r2, #45	; 0x2d
 8010bcc:	222b      	movge	r2, #43	; 0x2b
 8010bce:	2b09      	cmp	r3, #9
 8010bd0:	f88d 9084 	strb.w	r9, [sp, #132]	; 0x84
 8010bd4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
 8010bd8:	dc47      	bgt.n	8010c6a <_vfprintf_r+0x144a>
 8010bda:	3330      	adds	r3, #48	; 0x30
 8010bdc:	2230      	movs	r2, #48	; 0x30
 8010bde:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8010be2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 8010be6:	ab22      	add	r3, sp, #136	; 0x88
 8010be8:	aa21      	add	r2, sp, #132	; 0x84
 8010bea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010bec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010bee:	1a9a      	subs	r2, r3, r2
 8010bf0:	4414      	add	r4, r2
 8010bf2:	2d01      	cmp	r5, #1
 8010bf4:	9219      	str	r2, [sp, #100]	; 0x64
 8010bf6:	940b      	str	r4, [sp, #44]	; 0x2c
 8010bf8:	f340 80a4 	ble.w	8010d44 <_vfprintf_r+0x1524>
 8010bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bfe:	2400      	movs	r4, #0
 8010c00:	3301      	adds	r3, #1
 8010c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c04:	9413      	str	r4, [sp, #76]	; 0x4c
 8010c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010c0a:	e655      	b.n	80108b8 <_vfprintf_r+0x1098>
 8010c0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010c0e:	9907      	ldr	r1, [sp, #28]
 8010c10:	aa25      	add	r2, sp, #148	; 0x94
 8010c12:	f7fd ffb1 	bl	800eb78 <__sprint_r>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	f47e af2a 	bne.w	800fa70 <_vfprintf_r+0x250>
 8010c1c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010c1e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c22:	aa32      	add	r2, sp, #200	; 0xc8
 8010c24:	e69c      	b.n	8010960 <_vfprintf_r+0x1140>
 8010c26:	2102      	movs	r1, #2
 8010c28:	e78b      	b.n	8010b42 <_vfprintf_r+0x1322>
 8010c2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010c2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c2e:	2c00      	cmp	r4, #0
 8010c30:	bfd4      	ite	le
 8010c32:	f1c4 0302 	rsble	r3, r4, #2
 8010c36:	2301      	movgt	r3, #1
 8010c38:	441d      	add	r5, r3
 8010c3a:	950b      	str	r5, [sp, #44]	; 0x2c
 8010c3c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8010c40:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010c44:	e638      	b.n	80108b8 <_vfprintf_r+0x1098>
 8010c46:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8010c48:	2c00      	cmp	r4, #0
 8010c4a:	9413      	str	r4, [sp, #76]	; 0x4c
 8010c4c:	dd6b      	ble.n	8010d26 <_vfprintf_r+0x1506>
 8010c4e:	9d08      	ldr	r5, [sp, #32]
 8010c50:	2d00      	cmp	r5, #0
 8010c52:	d13f      	bne.n	8010cd4 <_vfprintf_r+0x14b4>
 8010c54:	9c05      	ldr	r4, [sp, #20]
 8010c56:	07e5      	lsls	r5, r4, #31
 8010c58:	d43c      	bmi.n	8010cd4 <_vfprintf_r+0x14b4>
 8010c5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010c5c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8010c60:	950b      	str	r5, [sp, #44]	; 0x2c
 8010c62:	e629      	b.n	80108b8 <_vfprintf_r+0x1098>
 8010c64:	46d1      	mov	r9, sl
 8010c66:	f7fe bf05 	b.w	800fa74 <_vfprintf_r+0x254>
 8010c6a:	f246 6067 	movw	r0, #26215	; 0x6667
 8010c6e:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8010c72:	f10d 0192 	add.w	r1, sp, #146	; 0x92
 8010c76:	fb80 5403 	smull	r5, r4, r0, r3
 8010c7a:	17da      	asrs	r2, r3, #31
 8010c7c:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8010c80:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8010c84:	460d      	mov	r5, r1
 8010c86:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8010c8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c8e:	2a09      	cmp	r2, #9
 8010c90:	7029      	strb	r1, [r5, #0]
 8010c92:	4613      	mov	r3, r2
 8010c94:	f105 31ff 	add.w	r1, r5, #4294967295	; 0xffffffff
 8010c98:	dced      	bgt.n	8010c76 <_vfprintf_r+0x1456>
 8010c9a:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8010c9e:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	4288      	cmp	r0, r1
 8010ca6:	f805 2c01 	strb.w	r2, [r5, #-1]
 8010caa:	d957      	bls.n	8010d5c <_vfprintf_r+0x153c>
 8010cac:	f10d 0185 	add.w	r1, sp, #133	; 0x85
 8010cb0:	462b      	mov	r3, r5
 8010cb2:	e001      	b.n	8010cb8 <_vfprintf_r+0x1498>
 8010cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cb8:	4283      	cmp	r3, r0
 8010cba:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010cbe:	d1f9      	bne.n	8010cb4 <_vfprintf_r+0x1494>
 8010cc0:	a842      	add	r0, sp, #264	; 0x108
 8010cc2:	ebc5 0340 	rsb	r3, r5, r0, lsl #1
 8010cc6:	3bf6      	subs	r3, #246	; 0xf6
 8010cc8:	e78e      	b.n	8010be8 <_vfprintf_r+0x13c8>
 8010cca:	f6c0 0501 	movt	r5, #2049	; 0x801
 8010cce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010cd0:	f7ff bb91 	b.w	80103f6 <_vfprintf_r+0xbd6>
 8010cd4:	9c08      	ldr	r4, [sp, #32]
 8010cd6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010cd8:	1c63      	adds	r3, r4, #1
 8010cda:	441d      	add	r5, r3
 8010cdc:	950b      	str	r5, [sp, #44]	; 0x2c
 8010cde:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8010ce2:	e5e9      	b.n	80108b8 <_vfprintf_r+0x1098>
 8010ce4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010ce6:	4651      	mov	r1, sl
 8010ce8:	2200      	movs	r2, #0
 8010cea:	2300      	movs	r3, #0
 8010cec:	f7fb ffec 	bl	800ccc8 <__aeabi_dcmpeq>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	f47f af48 	bne.w	8010b86 <_vfprintf_r+0x1366>
 8010cf6:	9808      	ldr	r0, [sp, #32]
 8010cf8:	f1c0 0301 	rsb	r3, r0, #1
 8010cfc:	931f      	str	r3, [sp, #124]	; 0x7c
 8010cfe:	441c      	add	r4, r3
 8010d00:	e5a4      	b.n	801084c <_vfprintf_r+0x102c>
 8010d02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010d04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010d06:	682d      	ldr	r5, [r5, #0]
 8010d08:	f893 9001 	ldrb.w	r9, [r3, #1]
 8010d0c:	9508      	str	r5, [sp, #32]
 8010d0e:	2d00      	cmp	r5, #0
 8010d10:	f104 0104 	add.w	r1, r4, #4
 8010d14:	bfb8      	it	lt
 8010d16:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8010d1a:	910e      	str	r1, [sp, #56]	; 0x38
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	bfb8      	it	lt
 8010d20:	9508      	strlt	r5, [sp, #32]
 8010d22:	f7fe be0a 	b.w	800f93a <_vfprintf_r+0x11a>
 8010d26:	9c08      	ldr	r4, [sp, #32]
 8010d28:	b934      	cbnz	r4, 8010d38 <_vfprintf_r+0x1518>
 8010d2a:	9d05      	ldr	r5, [sp, #20]
 8010d2c:	07ec      	lsls	r4, r5, #31
 8010d2e:	bf5c      	itt	pl
 8010d30:	2301      	movpl	r3, #1
 8010d32:	930b      	strpl	r3, [sp, #44]	; 0x2c
 8010d34:	f57f adc0 	bpl.w	80108b8 <_vfprintf_r+0x1098>
 8010d38:	9b08      	ldr	r3, [sp, #32]
 8010d3a:	3302      	adds	r3, #2
 8010d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d42:	e5b9      	b.n	80108b8 <_vfprintf_r+0x1098>
 8010d44:	9c05      	ldr	r4, [sp, #20]
 8010d46:	f014 0301 	ands.w	r3, r4, #1
 8010d4a:	f47f af57 	bne.w	8010bfc <_vfprintf_r+0x13dc>
 8010d4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010d50:	9313      	str	r3, [sp, #76]	; 0x4c
 8010d52:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8010d56:	e5af      	b.n	80108b8 <_vfprintf_r+0x1098>
 8010d58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d5a:	e731      	b.n	8010bc0 <_vfprintf_r+0x13a0>
 8010d5c:	f10d 0386 	add.w	r3, sp, #134	; 0x86
 8010d60:	e742      	b.n	8010be8 <_vfprintf_r+0x13c8>
 8010d62:	bf00      	nop

08010d64 <vfprintf>:
 8010d64:	b430      	push	{r4, r5}
 8010d66:	f240 5488 	movw	r4, #1416	; 0x588
 8010d6a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8010d6e:	460d      	mov	r5, r1
 8010d70:	4613      	mov	r3, r2
 8010d72:	4601      	mov	r1, r0
 8010d74:	462a      	mov	r2, r5
 8010d76:	6820      	ldr	r0, [r4, #0]
 8010d78:	bc30      	pop	{r4, r5}
 8010d7a:	f7fe bd51 	b.w	800f820 <_vfprintf_r>
 8010d7e:	bf00      	nop

08010d80 <__sbprintf>:
 8010d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d84:	460c      	mov	r4, r1
 8010d86:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8010d8a:	69e7      	ldr	r7, [r4, #28]
 8010d8c:	f8b1 900c 	ldrh.w	r9, [r1, #12]
 8010d90:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8010d92:	f8b4 800e 	ldrh.w	r8, [r4, #14]
 8010d96:	9707      	str	r7, [sp, #28]
 8010d98:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8010d9a:	9119      	str	r1, [sp, #100]	; 0x64
 8010d9c:	ad1a      	add	r5, sp, #104	; 0x68
 8010d9e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8010da2:	f04f 0e00 	mov.w	lr, #0
 8010da6:	f029 0902 	bic.w	r9, r9, #2
 8010daa:	4669      	mov	r1, sp
 8010dac:	9500      	str	r5, [sp, #0]
 8010dae:	9504      	str	r5, [sp, #16]
 8010db0:	9602      	str	r6, [sp, #8]
 8010db2:	9605      	str	r6, [sp, #20]
 8010db4:	f8ad 900c 	strh.w	r9, [sp, #12]
 8010db8:	f8ad 800e 	strh.w	r8, [sp, #14]
 8010dbc:	9709      	str	r7, [sp, #36]	; 0x24
 8010dbe:	f8cd e018 	str.w	lr, [sp, #24]
 8010dc2:	4606      	mov	r6, r0
 8010dc4:	f7fe fd2c 	bl	800f820 <_vfprintf_r>
 8010dc8:	1e05      	subs	r5, r0, #0
 8010dca:	db07      	blt.n	8010ddc <__sbprintf+0x5c>
 8010dcc:	4630      	mov	r0, r6
 8010dce:	4669      	mov	r1, sp
 8010dd0:	f001 f9d6 	bl	8012180 <_fflush_r>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	bf18      	it	ne
 8010dd8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8010ddc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010de0:	065e      	lsls	r6, r3, #25
 8010de2:	bf48      	it	mi
 8010de4:	89a3      	ldrhmi	r3, [r4, #12]
 8010de6:	4628      	mov	r0, r5
 8010de8:	bf44      	itt	mi
 8010dea:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8010dee:	81a3      	strhmi	r3, [r4, #12]
 8010df0:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8010df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010df8 <_write_r>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	f641 342c 	movw	r4, #6956	; 0x1b2c
 8010dfe:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8010e02:	4606      	mov	r6, r0
 8010e04:	2500      	movs	r5, #0
 8010e06:	4608      	mov	r0, r1
 8010e08:	4611      	mov	r1, r2
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	6025      	str	r5, [r4, #0]
 8010e0e:	f7f7 f907 	bl	8008020 <_write>
 8010e12:	1c43      	adds	r3, r0, #1
 8010e14:	d000      	beq.n	8010e18 <_write_r+0x20>
 8010e16:	bd70      	pop	{r4, r5, r6, pc}
 8010e18:	6823      	ldr	r3, [r4, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d0fb      	beq.n	8010e16 <_write_r+0x1e>
 8010e1e:	6033      	str	r3, [r6, #0]
 8010e20:	bd70      	pop	{r4, r5, r6, pc}
 8010e22:	bf00      	nop

08010e24 <__swsetup_r>:
 8010e24:	b538      	push	{r3, r4, r5, lr}
 8010e26:	f240 5388 	movw	r3, #1416	; 0x588
 8010e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8010e2e:	4605      	mov	r5, r0
 8010e30:	6818      	ldr	r0, [r3, #0]
 8010e32:	460c      	mov	r4, r1
 8010e34:	b110      	cbz	r0, 8010e3c <__swsetup_r+0x18>
 8010e36:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	d036      	beq.n	8010eaa <__swsetup_r+0x86>
 8010e3c:	89a2      	ldrh	r2, [r4, #12]
 8010e3e:	b293      	uxth	r3, r2
 8010e40:	0718      	lsls	r0, r3, #28
 8010e42:	d50c      	bpl.n	8010e5e <__swsetup_r+0x3a>
 8010e44:	6921      	ldr	r1, [r4, #16]
 8010e46:	b1a9      	cbz	r1, 8010e74 <__swsetup_r+0x50>
 8010e48:	f013 0201 	ands.w	r2, r3, #1
 8010e4c:	d01e      	beq.n	8010e8c <__swsetup_r+0x68>
 8010e4e:	6963      	ldr	r3, [r4, #20]
 8010e50:	2200      	movs	r2, #0
 8010e52:	425b      	negs	r3, r3
 8010e54:	61a3      	str	r3, [r4, #24]
 8010e56:	60a2      	str	r2, [r4, #8]
 8010e58:	b1f1      	cbz	r1, 8010e98 <__swsetup_r+0x74>
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	06d9      	lsls	r1, r3, #27
 8010e60:	d53b      	bpl.n	8010eda <__swsetup_r+0xb6>
 8010e62:	075b      	lsls	r3, r3, #29
 8010e64:	d424      	bmi.n	8010eb0 <__swsetup_r+0x8c>
 8010e66:	6921      	ldr	r1, [r4, #16]
 8010e68:	f042 0308 	orr.w	r3, r2, #8
 8010e6c:	81a3      	strh	r3, [r4, #12]
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	2900      	cmp	r1, #0
 8010e72:	d1e9      	bne.n	8010e48 <__swsetup_r+0x24>
 8010e74:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8010e78:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8010e7c:	d0e4      	beq.n	8010e48 <__swsetup_r+0x24>
 8010e7e:	4621      	mov	r1, r4
 8010e80:	4628      	mov	r0, r5
 8010e82:	f001 fd31 	bl	80128e8 <__smakebuf_r>
 8010e86:	89a3      	ldrh	r3, [r4, #12]
 8010e88:	6921      	ldr	r1, [r4, #16]
 8010e8a:	e7dd      	b.n	8010e48 <__swsetup_r+0x24>
 8010e8c:	0798      	lsls	r0, r3, #30
 8010e8e:	bf58      	it	pl
 8010e90:	6962      	ldrpl	r2, [r4, #20]
 8010e92:	60a2      	str	r2, [r4, #8]
 8010e94:	2900      	cmp	r1, #0
 8010e96:	d1e0      	bne.n	8010e5a <__swsetup_r+0x36>
 8010e98:	89a3      	ldrh	r3, [r4, #12]
 8010e9a:	061a      	lsls	r2, r3, #24
 8010e9c:	d5dd      	bpl.n	8010e5a <__swsetup_r+0x36>
 8010e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ea2:	81a3      	strh	r3, [r4, #12]
 8010ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ea8:	bd38      	pop	{r3, r4, r5, pc}
 8010eaa:	f7fc fced 	bl	800d888 <__sinit>
 8010eae:	e7c5      	b.n	8010e3c <__swsetup_r+0x18>
 8010eb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010eb2:	b149      	cbz	r1, 8010ec8 <__swsetup_r+0xa4>
 8010eb4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010eb8:	4299      	cmp	r1, r3
 8010eba:	d003      	beq.n	8010ec4 <__swsetup_r+0xa0>
 8010ebc:	4628      	mov	r0, r5
 8010ebe:	f001 fa51 	bl	8012364 <_free_r>
 8010ec2:	89a2      	ldrh	r2, [r4, #12]
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8010ec8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8010ecc:	6921      	ldr	r1, [r4, #16]
 8010ece:	0412      	lsls	r2, r2, #16
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	0c12      	lsrs	r2, r2, #16
 8010ed4:	e884 000a 	stmia.w	r4, {r1, r3}
 8010ed8:	e7c6      	b.n	8010e68 <__swsetup_r+0x44>
 8010eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ede:	2309      	movs	r3, #9
 8010ee0:	602b      	str	r3, [r5, #0]
 8010ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ee6:	81a2      	strh	r2, [r4, #12]
 8010ee8:	bd38      	pop	{r3, r4, r5, pc}
 8010eea:	bf00      	nop

08010eec <_close_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	f641 342c 	movw	r4, #6956	; 0x1b2c
 8010ef2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	4605      	mov	r5, r0
 8010efa:	4608      	mov	r0, r1
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	f7f6 fff9 	bl	8007ef4 <_close>
 8010f02:	1c43      	adds	r3, r0, #1
 8010f04:	d000      	beq.n	8010f08 <_close_r+0x1c>
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	6823      	ldr	r3, [r4, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d0fb      	beq.n	8010f06 <_close_r+0x1a>
 8010f0e:	602b      	str	r3, [r5, #0]
 8010f10:	bd38      	pop	{r3, r4, r5, pc}
 8010f12:	bf00      	nop

08010f14 <quorem>:
 8010f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f18:	6903      	ldr	r3, [r0, #16]
 8010f1a:	690d      	ldr	r5, [r1, #16]
 8010f1c:	429d      	cmp	r5, r3
 8010f1e:	4683      	mov	fp, r0
 8010f20:	b083      	sub	sp, #12
 8010f22:	bfc8      	it	gt
 8010f24:	2000      	movgt	r0, #0
 8010f26:	f300 8088 	bgt.w	801103a <quorem+0x126>
 8010f2a:	3d01      	subs	r5, #1
 8010f2c:	f101 0414 	add.w	r4, r1, #20
 8010f30:	f10b 0a14 	add.w	sl, fp, #20
 8010f34:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8010f38:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8010f3c:	3201      	adds	r2, #1
 8010f3e:	fbb3 f8f2 	udiv	r8, r3, r2
 8010f42:	00aa      	lsls	r2, r5, #2
 8010f44:	4691      	mov	r9, r2
 8010f46:	9200      	str	r2, [sp, #0]
 8010f48:	4452      	add	r2, sl
 8010f4a:	44a1      	add	r9, r4
 8010f4c:	9201      	str	r2, [sp, #4]
 8010f4e:	f1b8 0f00 	cmp.w	r8, #0
 8010f52:	d03d      	beq.n	8010fd0 <quorem+0xbc>
 8010f54:	f04f 0e00 	mov.w	lr, #0
 8010f58:	4670      	mov	r0, lr
 8010f5a:	4622      	mov	r2, r4
 8010f5c:	4653      	mov	r3, sl
 8010f5e:	468c      	mov	ip, r1
 8010f60:	f852 6b04 	ldr.w	r6, [r2], #4
 8010f64:	6819      	ldr	r1, [r3, #0]
 8010f66:	b2b7      	uxth	r7, r6
 8010f68:	0c36      	lsrs	r6, r6, #16
 8010f6a:	fb07 ee08 	mla	lr, r7, r8, lr
 8010f6e:	fb06 f608 	mul.w	r6, r6, r8
 8010f72:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 8010f76:	fa1f f78e 	uxth.w	r7, lr
 8010f7a:	1bc7      	subs	r7, r0, r7
 8010f7c:	b2b0      	uxth	r0, r6
 8010f7e:	fa17 f781 	uxtah	r7, r7, r1
 8010f82:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 8010f86:	eb00 4027 	add.w	r0, r0, r7, asr #16
 8010f8a:	b2bf      	uxth	r7, r7
 8010f8c:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8010f90:	4591      	cmp	r9, r2
 8010f92:	f843 7b04 	str.w	r7, [r3], #4
 8010f96:	ea4f 4020 	mov.w	r0, r0, asr #16
 8010f9a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8010f9e:	d2df      	bcs.n	8010f60 <quorem+0x4c>
 8010fa0:	9a00      	ldr	r2, [sp, #0]
 8010fa2:	f85a 3002 	ldr.w	r3, [sl, r2]
 8010fa6:	4661      	mov	r1, ip
 8010fa8:	b993      	cbnz	r3, 8010fd0 <quorem+0xbc>
 8010faa:	9a01      	ldr	r2, [sp, #4]
 8010fac:	1f13      	subs	r3, r2, #4
 8010fae:	459a      	cmp	sl, r3
 8010fb0:	d20c      	bcs.n	8010fcc <quorem+0xb8>
 8010fb2:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8010fb6:	b94b      	cbnz	r3, 8010fcc <quorem+0xb8>
 8010fb8:	f1a2 0308 	sub.w	r3, r2, #8
 8010fbc:	e002      	b.n	8010fc4 <quorem+0xb0>
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	3b04      	subs	r3, #4
 8010fc2:	b91a      	cbnz	r2, 8010fcc <quorem+0xb8>
 8010fc4:	459a      	cmp	sl, r3
 8010fc6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8010fca:	d3f8      	bcc.n	8010fbe <quorem+0xaa>
 8010fcc:	f8cb 5010 	str.w	r5, [fp, #16]
 8010fd0:	4658      	mov	r0, fp
 8010fd2:	f001 ffd5 	bl	8012f80 <__mcmp>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	db2e      	blt.n	8011038 <quorem+0x124>
 8010fda:	f108 0801 	add.w	r8, r8, #1
 8010fde:	4653      	mov	r3, sl
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f854 6b04 	ldr.w	r6, [r4], #4
 8010fe6:	6818      	ldr	r0, [r3, #0]
 8010fe8:	b2b1      	uxth	r1, r6
 8010fea:	1a52      	subs	r2, r2, r1
 8010fec:	0c36      	lsrs	r6, r6, #16
 8010fee:	fa12 f180 	uxtah	r1, r2, r0
 8010ff2:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 8010ff6:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8010ffa:	b289      	uxth	r1, r1
 8010ffc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011000:	45a1      	cmp	r9, r4
 8011002:	f843 1b04 	str.w	r1, [r3], #4
 8011006:	ea4f 4222 	mov.w	r2, r2, asr #16
 801100a:	d2ea      	bcs.n	8010fe2 <quorem+0xce>
 801100c:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 8011010:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 8011014:	b982      	cbnz	r2, 8011038 <quorem+0x124>
 8011016:	1f1a      	subs	r2, r3, #4
 8011018:	4592      	cmp	sl, r2
 801101a:	d20b      	bcs.n	8011034 <quorem+0x120>
 801101c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8011020:	b942      	cbnz	r2, 8011034 <quorem+0x120>
 8011022:	3b08      	subs	r3, #8
 8011024:	e002      	b.n	801102c <quorem+0x118>
 8011026:	681a      	ldr	r2, [r3, #0]
 8011028:	3b04      	subs	r3, #4
 801102a:	b91a      	cbnz	r2, 8011034 <quorem+0x120>
 801102c:	459a      	cmp	sl, r3
 801102e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8011032:	d3f8      	bcc.n	8011026 <quorem+0x112>
 8011034:	f8cb 5010 	str.w	r5, [fp, #16]
 8011038:	4640      	mov	r0, r8
 801103a:	b003      	add	sp, #12
 801103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011040 <_dtoa_r>:
 8011040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011044:	b09b      	sub	sp, #108	; 0x6c
 8011046:	4604      	mov	r4, r0
 8011048:	9102      	str	r1, [sp, #8]
 801104a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801104c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801104e:	9205      	str	r2, [sp, #20]
 8011050:	9306      	str	r3, [sp, #24]
 8011052:	ec5b ab10 	vmov	sl, fp, d0
 8011056:	b141      	cbz	r1, 801106a <_dtoa_r+0x2a>
 8011058:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801105a:	2201      	movs	r2, #1
 801105c:	409a      	lsls	r2, r3
 801105e:	604b      	str	r3, [r1, #4]
 8011060:	608a      	str	r2, [r1, #8]
 8011062:	f001 fd3b 	bl	8012adc <_Bfree>
 8011066:	2300      	movs	r3, #0
 8011068:	6423      	str	r3, [r4, #64]	; 0x40
 801106a:	f1bb 0f00 	cmp.w	fp, #0
 801106e:	bfb5      	itete	lt
 8011070:	2301      	movlt	r3, #1
 8011072:	2300      	movge	r3, #0
 8011074:	602b      	strlt	r3, [r5, #0]
 8011076:	602b      	strge	r3, [r5, #0]
 8011078:	f04f 0300 	mov.w	r3, #0
 801107c:	bfb4      	ite	lt
 801107e:	f02b 4900 	biclt.w	r9, fp, #2147483648	; 0x80000000
 8011082:	46d9      	movge	r9, fp
 8011084:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8011088:	f04f 0200 	mov.w	r2, #0
 801108c:	ea09 0303 	and.w	r3, r9, r3
 8011090:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8011094:	bfb8      	it	lt
 8011096:	46cb      	movlt	fp, r9
 8011098:	4293      	cmp	r3, r2
 801109a:	d016      	beq.n	80110ca <_dtoa_r+0x8a>
 801109c:	2200      	movs	r2, #0
 801109e:	2300      	movs	r3, #0
 80110a0:	4650      	mov	r0, sl
 80110a2:	4659      	mov	r1, fp
 80110a4:	f7fb fe10 	bl	800ccc8 <__aeabi_dcmpeq>
 80110a8:	4656      	mov	r6, sl
 80110aa:	465f      	mov	r7, fp
 80110ac:	4680      	mov	r8, r0
 80110ae:	b328      	cbz	r0, 80110fc <_dtoa_r+0xbc>
 80110b0:	9e06      	ldr	r6, [sp, #24]
 80110b2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80110b4:	2301      	movs	r3, #1
 80110b6:	6033      	str	r3, [r6, #0]
 80110b8:	2d00      	cmp	r5, #0
 80110ba:	f000 80db 	beq.w	8011274 <_dtoa_r+0x234>
 80110be:	48a8      	ldr	r0, [pc, #672]	; (8011360 <_dtoa_r+0x320>)
 80110c0:	6028      	str	r0, [r5, #0]
 80110c2:	3801      	subs	r0, #1
 80110c4:	b01b      	add	sp, #108	; 0x6c
 80110c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ca:	9d06      	ldr	r5, [sp, #24]
 80110cc:	f242 730f 	movw	r3, #9999	; 0x270f
 80110d0:	f244 40d0 	movw	r0, #17616	; 0x44d0
 80110d4:	602b      	str	r3, [r5, #0]
 80110d6:	f6c0 0001 	movt	r0, #2049	; 0x801
 80110da:	f1ba 0f00 	cmp.w	sl, #0
 80110de:	f000 80a9 	beq.w	8011234 <_dtoa_r+0x1f4>
 80110e2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80110e4:	2e00      	cmp	r6, #0
 80110e6:	d0ed      	beq.n	80110c4 <_dtoa_r+0x84>
 80110e8:	78c3      	ldrb	r3, [r0, #3]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f040 80b1 	bne.w	8011252 <_dtoa_r+0x212>
 80110f0:	1cc3      	adds	r3, r0, #3
 80110f2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80110f4:	602b      	str	r3, [r5, #0]
 80110f6:	b01b      	add	sp, #108	; 0x6c
 80110f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fc:	4620      	mov	r0, r4
 80110fe:	ec47 6b10 	vmov	d0, r6, r7
 8011102:	a919      	add	r1, sp, #100	; 0x64
 8011104:	aa18      	add	r2, sp, #96	; 0x60
 8011106:	f002 f847 	bl	8013198 <__d2b>
 801110a:	ea5f 5519 	movs.w	r5, r9, lsr #20
 801110e:	900b      	str	r0, [sp, #44]	; 0x2c
 8011110:	f040 80a2 	bne.w	8011258 <_dtoa_r+0x218>
 8011114:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8011116:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8011118:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 801111c:	443d      	add	r5, r7
 801111e:	429d      	cmp	r5, r3
 8011120:	f2c0 825c 	blt.w	80115dc <_dtoa_r+0x59c>
 8011124:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8011128:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 801112c:	1b5b      	subs	r3, r3, r5
 801112e:	f205 4212 	addw	r2, r5, #1042	; 0x412
 8011132:	fa09 f303 	lsl.w	r3, r9, r3
 8011136:	fa2a f202 	lsr.w	r2, sl, r2
 801113a:	ea43 0002 	orr.w	r0, r3, r2
 801113e:	f7fb fae5 	bl	800c70c <__aeabi_ui2d>
 8011142:	2601      	movs	r6, #1
 8011144:	3d01      	subs	r5, #1
 8011146:	46b8      	mov	r8, r7
 8011148:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801114c:	9615      	str	r6, [sp, #84]	; 0x54
 801114e:	2300      	movs	r3, #0
 8011150:	2200      	movs	r2, #0
 8011152:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8011156:	f7fb f99b 	bl	800c490 <__aeabi_dsub>
 801115a:	a37b      	add	r3, pc, #492	; (adr r3, 8011348 <_dtoa_r+0x308>)
 801115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011160:	f7fb fb4a 	bl	800c7f8 <__aeabi_dmul>
 8011164:	a37a      	add	r3, pc, #488	; (adr r3, 8011350 <_dtoa_r+0x310>)
 8011166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116a:	f7fb f993 	bl	800c494 <__adddf3>
 801116e:	4606      	mov	r6, r0
 8011170:	4628      	mov	r0, r5
 8011172:	460f      	mov	r7, r1
 8011174:	f7fb fada 	bl	800c72c <__aeabi_i2d>
 8011178:	a377      	add	r3, pc, #476	; (adr r3, 8011358 <_dtoa_r+0x318>)
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	f7fb fb3b 	bl	800c7f8 <__aeabi_dmul>
 8011182:	4602      	mov	r2, r0
 8011184:	460b      	mov	r3, r1
 8011186:	4630      	mov	r0, r6
 8011188:	4639      	mov	r1, r7
 801118a:	f7fb f983 	bl	800c494 <__adddf3>
 801118e:	4606      	mov	r6, r0
 8011190:	460f      	mov	r7, r1
 8011192:	f7fb ff93 	bl	800d0bc <__aeabi_d2iz>
 8011196:	4639      	mov	r1, r7
 8011198:	9004      	str	r0, [sp, #16]
 801119a:	2200      	movs	r2, #0
 801119c:	4630      	mov	r0, r6
 801119e:	2300      	movs	r3, #0
 80111a0:	f7fb fd9c 	bl	800ccdc <__aeabi_dcmplt>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	f040 8202 	bne.w	80115ae <_dtoa_r+0x56e>
 80111aa:	9e04      	ldr	r6, [sp, #16]
 80111ac:	2e16      	cmp	r6, #22
 80111ae:	bf84      	itt	hi
 80111b0:	2601      	movhi	r6, #1
 80111b2:	9614      	strhi	r6, [sp, #80]	; 0x50
 80111b4:	d812      	bhi.n	80111dc <_dtoa_r+0x19c>
 80111b6:	f244 43e0 	movw	r3, #17632	; 0x44e0
 80111ba:	f6c0 0301 	movt	r3, #2049	; 0x801
 80111be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80111c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111c6:	4652      	mov	r2, sl
 80111c8:	465b      	mov	r3, fp
 80111ca:	f7fb fda5 	bl	800cd18 <__aeabi_dcmpgt>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	f000 820c 	beq.w	80115ec <_dtoa_r+0x5ac>
 80111d4:	3e01      	subs	r6, #1
 80111d6:	9604      	str	r6, [sp, #16]
 80111d8:	2600      	movs	r6, #0
 80111da:	9614      	str	r6, [sp, #80]	; 0x50
 80111dc:	ebc5 0508 	rsb	r5, r5, r8
 80111e0:	3d01      	subs	r5, #1
 80111e2:	bf48      	it	mi
 80111e4:	2600      	movmi	r6, #0
 80111e6:	9508      	str	r5, [sp, #32]
 80111e8:	bf48      	it	mi
 80111ea:	9608      	strmi	r6, [sp, #32]
 80111ec:	9e04      	ldr	r6, [sp, #16]
 80111ee:	bf4b      	itete	mi
 80111f0:	426d      	negmi	r5, r5
 80111f2:	2500      	movpl	r5, #0
 80111f4:	950a      	strmi	r5, [sp, #40]	; 0x28
 80111f6:	950a      	strpl	r5, [sp, #40]	; 0x28
 80111f8:	2e00      	cmp	r6, #0
 80111fa:	f2c0 81e6 	blt.w	80115ca <_dtoa_r+0x58a>
 80111fe:	9d08      	ldr	r5, [sp, #32]
 8011200:	960f      	str	r6, [sp, #60]	; 0x3c
 8011202:	4435      	add	r5, r6
 8011204:	2600      	movs	r6, #0
 8011206:	9508      	str	r5, [sp, #32]
 8011208:	960c      	str	r6, [sp, #48]	; 0x30
 801120a:	9d02      	ldr	r5, [sp, #8]
 801120c:	2d09      	cmp	r5, #9
 801120e:	d836      	bhi.n	801127e <_dtoa_r+0x23e>
 8011210:	2d05      	cmp	r5, #5
 8011212:	bfc4      	itt	gt
 8011214:	3d04      	subgt	r5, #4
 8011216:	9502      	strgt	r5, [sp, #8]
 8011218:	9e02      	ldr	r6, [sp, #8]
 801121a:	f1a6 0302 	sub.w	r3, r6, #2
 801121e:	bfcc      	ite	gt
 8011220:	2500      	movgt	r5, #0
 8011222:	2501      	movle	r5, #1
 8011224:	2b03      	cmp	r3, #3
 8011226:	d82c      	bhi.n	8011282 <_dtoa_r+0x242>
 8011228:	e8df f013 	tbh	[pc, r3, lsl #1]
 801122c:	02100342 	.word	0x02100342
 8011230:	056c0350 	.word	0x056c0350
 8011234:	f244 42c4 	movw	r2, #17604	; 0x44c4
 8011238:	f244 43d0 	movw	r3, #17616	; 0x44d0
 801123c:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8011240:	f6c0 0201 	movt	r2, #2049	; 0x801
 8011244:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011248:	2800      	cmp	r0, #0
 801124a:	bf0c      	ite	eq
 801124c:	4610      	moveq	r0, r2
 801124e:	4618      	movne	r0, r3
 8011250:	e747      	b.n	80110e2 <_dtoa_r+0xa2>
 8011252:	f100 0308 	add.w	r3, r0, #8
 8011256:	e74c      	b.n	80110f2 <_dtoa_r+0xb2>
 8011258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801125c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011260:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8011264:	4650      	mov	r0, sl
 8011266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801126a:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 801126e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011272:	e76c      	b.n	801114e <_dtoa_r+0x10e>
 8011274:	f244 40b0 	movw	r0, #17584	; 0x44b0
 8011278:	f6c0 0001 	movt	r0, #2049	; 0x801
 801127c:	e722      	b.n	80110c4 <_dtoa_r+0x84>
 801127e:	2600      	movs	r6, #0
 8011280:	9602      	str	r6, [sp, #8]
 8011282:	2500      	movs	r5, #0
 8011284:	6465      	str	r5, [r4, #68]	; 0x44
 8011286:	4629      	mov	r1, r5
 8011288:	4620      	mov	r0, r4
 801128a:	f001 fc01 	bl	8012a90 <_Balloc>
 801128e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011292:	9505      	str	r5, [sp, #20]
 8011294:	2501      	movs	r5, #1
 8011296:	9007      	str	r0, [sp, #28]
 8011298:	960e      	str	r6, [sp, #56]	; 0x38
 801129a:	6420      	str	r0, [r4, #64]	; 0x40
 801129c:	9609      	str	r6, [sp, #36]	; 0x24
 801129e:	950d      	str	r5, [sp, #52]	; 0x34
 80112a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f2c0 80bb 	blt.w	801141e <_dtoa_r+0x3de>
 80112a8:	9e04      	ldr	r6, [sp, #16]
 80112aa:	2e0e      	cmp	r6, #14
 80112ac:	f300 80b7 	bgt.w	801141e <_dtoa_r+0x3de>
 80112b0:	f244 43e0 	movw	r3, #17632	; 0x44e0
 80112b4:	f6c0 0301 	movt	r3, #2049	; 0x801
 80112b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80112bc:	9d05      	ldr	r5, [sp, #20]
 80112be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80112c0:	ed93 7b00 	vldr	d7, [r3]
 80112c4:	0fea      	lsrs	r2, r5, #31
 80112c6:	2e00      	cmp	r6, #0
 80112c8:	bfcc      	ite	gt
 80112ca:	2200      	movgt	r2, #0
 80112cc:	f002 0201 	andle.w	r2, r2, #1
 80112d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112d4:	2a00      	cmp	r2, #0
 80112d6:	f040 844c 	bne.w	8011b72 <_dtoa_r+0xb32>
 80112da:	ec53 2b17 	vmov	r2, r3, d7
 80112de:	4650      	mov	r0, sl
 80112e0:	4659      	mov	r1, fp
 80112e2:	f7fb fbb3 	bl	800ca4c <__aeabi_ddiv>
 80112e6:	f7fb fee9 	bl	800d0bc <__aeabi_d2iz>
 80112ea:	4680      	mov	r8, r0
 80112ec:	f7fb fa1e 	bl	800c72c <__aeabi_i2d>
 80112f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112f4:	f7fb fa80 	bl	800c7f8 <__aeabi_dmul>
 80112f8:	460b      	mov	r3, r1
 80112fa:	4602      	mov	r2, r0
 80112fc:	4659      	mov	r1, fp
 80112fe:	4650      	mov	r0, sl
 8011300:	f7fb f8c6 	bl	800c490 <__aeabi_dsub>
 8011304:	9d07      	ldr	r5, [sp, #28]
 8011306:	f108 0330 	add.w	r3, r8, #48	; 0x30
 801130a:	702b      	strb	r3, [r5, #0]
 801130c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801130e:	2b01      	cmp	r3, #1
 8011310:	4606      	mov	r6, r0
 8011312:	460f      	mov	r7, r1
 8011314:	f105 0501 	add.w	r5, r5, #1
 8011318:	d054      	beq.n	80113c4 <_dtoa_r+0x384>
 801131a:	2300      	movs	r3, #0
 801131c:	2200      	movs	r2, #0
 801131e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011322:	f7fb fa69 	bl	800c7f8 <__aeabi_dmul>
 8011326:	2200      	movs	r2, #0
 8011328:	2300      	movs	r3, #0
 801132a:	4606      	mov	r6, r0
 801132c:	460f      	mov	r7, r1
 801132e:	f7fb fccb 	bl	800ccc8 <__aeabi_dcmpeq>
 8011332:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011336:	2800      	cmp	r0, #0
 8011338:	f040 84fe 	bne.w	8011d38 <_dtoa_r+0xcf8>
 801133c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801133e:	44a9      	add	r9, r5
 8011340:	9d07      	ldr	r5, [sp, #28]
 8011342:	f105 0a02 	add.w	sl, r5, #2
 8011346:	e018      	b.n	801137a <_dtoa_r+0x33a>
 8011348:	636f4361 	.word	0x636f4361
 801134c:	3fd287a7 	.word	0x3fd287a7
 8011350:	8b60c8b3 	.word	0x8b60c8b3
 8011354:	3fc68a28 	.word	0x3fc68a28
 8011358:	509f79fb 	.word	0x509f79fb
 801135c:	3fd34413 	.word	0x3fd34413
 8011360:	080144b1 	.word	0x080144b1
 8011364:	f7fb fa48 	bl	800c7f8 <__aeabi_dmul>
 8011368:	2200      	movs	r2, #0
 801136a:	2300      	movs	r3, #0
 801136c:	4606      	mov	r6, r0
 801136e:	460f      	mov	r7, r1
 8011370:	f7fb fcaa 	bl	800ccc8 <__aeabi_dcmpeq>
 8011374:	2800      	cmp	r0, #0
 8011376:	f040 84dd 	bne.w	8011d34 <_dtoa_r+0xcf4>
 801137a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801137e:	4630      	mov	r0, r6
 8011380:	4639      	mov	r1, r7
 8011382:	f7fb fb63 	bl	800ca4c <__aeabi_ddiv>
 8011386:	f7fb fe99 	bl	800d0bc <__aeabi_d2iz>
 801138a:	4680      	mov	r8, r0
 801138c:	f7fb f9ce 	bl	800c72c <__aeabi_i2d>
 8011390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011394:	f7fb fa30 	bl	800c7f8 <__aeabi_dmul>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4630      	mov	r0, r6
 801139e:	4639      	mov	r1, r7
 80113a0:	f7fb f876 	bl	800c490 <__aeabi_dsub>
 80113a4:	f108 0530 	add.w	r5, r8, #48	; 0x30
 80113a8:	2300      	movs	r3, #0
 80113aa:	45ca      	cmp	sl, r9
 80113ac:	f80a 5c01 	strb.w	r5, [sl, #-1]
 80113b0:	4606      	mov	r6, r0
 80113b2:	4655      	mov	r5, sl
 80113b4:	460f      	mov	r7, r1
 80113b6:	f04f 0200 	mov.w	r2, #0
 80113ba:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80113be:	f10a 0a01 	add.w	sl, sl, #1
 80113c2:	d1cf      	bne.n	8011364 <_dtoa_r+0x324>
 80113c4:	4632      	mov	r2, r6
 80113c6:	463b      	mov	r3, r7
 80113c8:	4630      	mov	r0, r6
 80113ca:	4639      	mov	r1, r7
 80113cc:	f7fb f862 	bl	800c494 <__adddf3>
 80113d0:	4606      	mov	r6, r0
 80113d2:	460f      	mov	r7, r1
 80113d4:	4632      	mov	r2, r6
 80113d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113da:	463b      	mov	r3, r7
 80113dc:	f7fb fc7e 	bl	800ccdc <__aeabi_dcmplt>
 80113e0:	2800      	cmp	r0, #0
 80113e2:	f000 8560 	beq.w	8011ea6 <_dtoa_r+0xe66>
 80113e6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80113ea:	9e04      	ldr	r6, [sp, #16]
 80113ec:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80113f0:	9616      	str	r6, [sp, #88]	; 0x58
 80113f2:	9507      	str	r5, [sp, #28]
 80113f4:	462a      	mov	r2, r5
 80113f6:	e005      	b.n	8011404 <_dtoa_r+0x3c4>
 80113f8:	4599      	cmp	r9, r3
 80113fa:	f000 84cf 	beq.w	8011d9c <_dtoa_r+0xd5c>
 80113fe:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8011402:	461a      	mov	r2, r3
 8011404:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011408:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 801140c:	d0f4      	beq.n	80113f8 <_dtoa_r+0x3b8>
 801140e:	9207      	str	r2, [sp, #28]
 8011410:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8011412:	f108 0201 	add.w	r2, r8, #1
 8011416:	b2d2      	uxtb	r2, r2
 8011418:	9604      	str	r6, [sp, #16]
 801141a:	701a      	strb	r2, [r3, #0]
 801141c:	e0b1      	b.n	8011582 <_dtoa_r+0x542>
 801141e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011420:	2d00      	cmp	r5, #0
 8011422:	f040 80e5 	bne.w	80115f0 <_dtoa_r+0x5b0>
 8011426:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011428:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801142a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801142e:	9908      	ldr	r1, [sp, #32]
 8011430:	2900      	cmp	r1, #0
 8011432:	bfc8      	it	gt
 8011434:	2d00      	cmpgt	r5, #0
 8011436:	dd09      	ble.n	801144c <_dtoa_r+0x40c>
 8011438:	460b      	mov	r3, r1
 801143a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801143c:	42ab      	cmp	r3, r5
 801143e:	bfa8      	it	ge
 8011440:	462b      	movge	r3, r5
 8011442:	1ad2      	subs	r2, r2, r3
 8011444:	1ac9      	subs	r1, r1, r3
 8011446:	920a      	str	r2, [sp, #40]	; 0x28
 8011448:	1aed      	subs	r5, r5, r3
 801144a:	9108      	str	r1, [sp, #32]
 801144c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801144e:	2b00      	cmp	r3, #0
 8011450:	dd1a      	ble.n	8011488 <_dtoa_r+0x448>
 8011452:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011454:	2900      	cmp	r1, #0
 8011456:	f000 8465 	beq.w	8011d24 <_dtoa_r+0xce4>
 801145a:	2e00      	cmp	r6, #0
 801145c:	dd10      	ble.n	8011480 <_dtoa_r+0x440>
 801145e:	4641      	mov	r1, r8
 8011460:	4632      	mov	r2, r6
 8011462:	4620      	mov	r0, r4
 8011464:	f001 fcde 	bl	8012e24 <__pow5mult>
 8011468:	4680      	mov	r8, r0
 801146a:	4641      	mov	r1, r8
 801146c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801146e:	4620      	mov	r0, r4
 8011470:	f001 fc2e 	bl	8012cd0 <__multiply>
 8011474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011476:	4607      	mov	r7, r0
 8011478:	4620      	mov	r0, r4
 801147a:	f001 fb2f 	bl	8012adc <_Bfree>
 801147e:	970b      	str	r7, [sp, #44]	; 0x2c
 8011480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011482:	1b9a      	subs	r2, r3, r6
 8011484:	f040 8495 	bne.w	8011db2 <_dtoa_r+0xd72>
 8011488:	2101      	movs	r1, #1
 801148a:	4620      	mov	r0, r4
 801148c:	f001 fc16 	bl	8012cbc <__i2b>
 8011490:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011492:	2900      	cmp	r1, #0
 8011494:	4606      	mov	r6, r0
 8011496:	dd05      	ble.n	80114a4 <_dtoa_r+0x464>
 8011498:	4601      	mov	r1, r0
 801149a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801149c:	4620      	mov	r0, r4
 801149e:	f001 fcc1 	bl	8012e24 <__pow5mult>
 80114a2:	4606      	mov	r6, r0
 80114a4:	9a02      	ldr	r2, [sp, #8]
 80114a6:	2a01      	cmp	r2, #1
 80114a8:	f340 8379 	ble.w	8011b9e <_dtoa_r+0xb5e>
 80114ac:	2700      	movs	r7, #0
 80114ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80114b0:	2001      	movs	r0, #1
 80114b2:	2900      	cmp	r1, #0
 80114b4:	f040 8333 	bne.w	8011b1e <_dtoa_r+0xade>
 80114b8:	9b08      	ldr	r3, [sp, #32]
 80114ba:	4403      	add	r3, r0
 80114bc:	f013 031f 	ands.w	r3, r3, #31
 80114c0:	f000 8286 	beq.w	80119d0 <_dtoa_r+0x990>
 80114c4:	f1c3 0220 	rsb	r2, r3, #32
 80114c8:	2a04      	cmp	r2, #4
 80114ca:	f340 855b 	ble.w	8011f84 <_dtoa_r+0xf44>
 80114ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114d0:	f8dd e020 	ldr.w	lr, [sp, #32]
 80114d4:	f1c3 031c 	rsb	r3, r3, #28
 80114d8:	441a      	add	r2, r3
 80114da:	449e      	add	lr, r3
 80114dc:	920a      	str	r2, [sp, #40]	; 0x28
 80114de:	441d      	add	r5, r3
 80114e0:	f8cd e020 	str.w	lr, [sp, #32]
 80114e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	dd05      	ble.n	80114f6 <_dtoa_r+0x4b6>
 80114ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80114ec:	461a      	mov	r2, r3
 80114ee:	4620      	mov	r0, r4
 80114f0:	f001 fce8 	bl	8012ec4 <__lshift>
 80114f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80114f6:	9908      	ldr	r1, [sp, #32]
 80114f8:	2900      	cmp	r1, #0
 80114fa:	dd05      	ble.n	8011508 <_dtoa_r+0x4c8>
 80114fc:	4631      	mov	r1, r6
 80114fe:	9a08      	ldr	r2, [sp, #32]
 8011500:	4620      	mov	r0, r4
 8011502:	f001 fcdf 	bl	8012ec4 <__lshift>
 8011506:	4606      	mov	r6, r0
 8011508:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801150a:	2a00      	cmp	r2, #0
 801150c:	f040 8310 	bne.w	8011b30 <_dtoa_r+0xaf0>
 8011510:	9a02      	ldr	r2, [sp, #8]
 8011512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011514:	2a02      	cmp	r2, #2
 8011516:	bfd4      	ite	le
 8011518:	2300      	movle	r3, #0
 801151a:	2301      	movgt	r3, #1
 801151c:	2900      	cmp	r1, #0
 801151e:	bfc8      	it	gt
 8011520:	2300      	movgt	r3, #0
 8011522:	2b00      	cmp	r3, #0
 8011524:	f000 820a 	beq.w	801193c <_dtoa_r+0x8fc>
 8011528:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801152a:	2d00      	cmp	r5, #0
 801152c:	f040 81ff 	bne.w	801192e <_dtoa_r+0x8ee>
 8011530:	4631      	mov	r1, r6
 8011532:	462b      	mov	r3, r5
 8011534:	2205      	movs	r2, #5
 8011536:	4620      	mov	r0, r4
 8011538:	f001 fada 	bl	8012af0 <__multadd>
 801153c:	4606      	mov	r6, r0
 801153e:	4631      	mov	r1, r6
 8011540:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011542:	f001 fd1d 	bl	8012f80 <__mcmp>
 8011546:	2800      	cmp	r0, #0
 8011548:	f340 81f1 	ble.w	801192e <_dtoa_r+0x8ee>
 801154c:	9d04      	ldr	r5, [sp, #16]
 801154e:	3501      	adds	r5, #1
 8011550:	9504      	str	r5, [sp, #16]
 8011552:	9d07      	ldr	r5, [sp, #28]
 8011554:	46a9      	mov	r9, r5
 8011556:	2331      	movs	r3, #49	; 0x31
 8011558:	f109 0101 	add.w	r1, r9, #1
 801155c:	702b      	strb	r3, [r5, #0]
 801155e:	9107      	str	r1, [sp, #28]
 8011560:	2500      	movs	r5, #0
 8011562:	4631      	mov	r1, r6
 8011564:	4620      	mov	r0, r4
 8011566:	f001 fab9 	bl	8012adc <_Bfree>
 801156a:	f1b8 0f00 	cmp.w	r8, #0
 801156e:	d008      	beq.n	8011582 <_dtoa_r+0x542>
 8011570:	4545      	cmp	r5, r8
 8011572:	bf18      	it	ne
 8011574:	2d00      	cmpne	r5, #0
 8011576:	f040 8239 	bne.w	80119ec <_dtoa_r+0x9ac>
 801157a:	4641      	mov	r1, r8
 801157c:	4620      	mov	r0, r4
 801157e:	f001 faad 	bl	8012adc <_Bfree>
 8011582:	4620      	mov	r0, r4
 8011584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011586:	f001 faa9 	bl	8012adc <_Bfree>
 801158a:	9e04      	ldr	r6, [sp, #16]
 801158c:	9d07      	ldr	r5, [sp, #28]
 801158e:	2200      	movs	r2, #0
 8011590:	1c73      	adds	r3, r6, #1
 8011592:	702a      	strb	r2, [r5, #0]
 8011594:	9e06      	ldr	r6, [sp, #24]
 8011596:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8011598:	6033      	str	r3, [r6, #0]
 801159a:	4648      	mov	r0, r9
 801159c:	2d00      	cmp	r5, #0
 801159e:	f43f ad91 	beq.w	80110c4 <_dtoa_r+0x84>
 80115a2:	9e07      	ldr	r6, [sp, #28]
 80115a4:	4648      	mov	r0, r9
 80115a6:	602e      	str	r6, [r5, #0]
 80115a8:	b01b      	add	sp, #108	; 0x6c
 80115aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ae:	9804      	ldr	r0, [sp, #16]
 80115b0:	f7fb f8bc 	bl	800c72c <__aeabi_i2d>
 80115b4:	4632      	mov	r2, r6
 80115b6:	463b      	mov	r3, r7
 80115b8:	f7fb fb86 	bl	800ccc8 <__aeabi_dcmpeq>
 80115bc:	2800      	cmp	r0, #0
 80115be:	f47f adf4 	bne.w	80111aa <_dtoa_r+0x16a>
 80115c2:	9e04      	ldr	r6, [sp, #16]
 80115c4:	3e01      	subs	r6, #1
 80115c6:	9604      	str	r6, [sp, #16]
 80115c8:	e5ef      	b.n	80111aa <_dtoa_r+0x16a>
 80115ca:	9e04      	ldr	r6, [sp, #16]
 80115cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80115ce:	1bad      	subs	r5, r5, r6
 80115d0:	950a      	str	r5, [sp, #40]	; 0x28
 80115d2:	4275      	negs	r5, r6
 80115d4:	2600      	movs	r6, #0
 80115d6:	950c      	str	r5, [sp, #48]	; 0x30
 80115d8:	960f      	str	r6, [sp, #60]	; 0x3c
 80115da:	e616      	b.n	801120a <_dtoa_r+0x1ca>
 80115dc:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80115e0:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80115e4:	1b40      	subs	r0, r0, r5
 80115e6:	fa0a f000 	lsl.w	r0, sl, r0
 80115ea:	e5a8      	b.n	801113e <_dtoa_r+0xfe>
 80115ec:	9014      	str	r0, [sp, #80]	; 0x50
 80115ee:	e5f5      	b.n	80111dc <_dtoa_r+0x19c>
 80115f0:	9e02      	ldr	r6, [sp, #8]
 80115f2:	2e01      	cmp	r6, #1
 80115f4:	f340 840f 	ble.w	8011e16 <_dtoa_r+0xdd6>
 80115f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80115fa:	1e6e      	subs	r6, r5, #1
 80115fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80115fe:	42b5      	cmp	r5, r6
 8011600:	bfbf      	itttt	lt
 8011602:	9d0c      	ldrlt	r5, [sp, #48]	; 0x30
 8011604:	960c      	strlt	r6, [sp, #48]	; 0x30
 8011606:	ebc5 0306 	rsblt	r3, r5, r6
 801160a:	9d0f      	ldrlt	r5, [sp, #60]	; 0x3c
 801160c:	bfb6      	itet	lt
 801160e:	18ed      	addlt	r5, r5, r3
 8011610:	ebc6 0605 	rsbge	r6, r6, r5
 8011614:	950f      	strlt	r5, [sp, #60]	; 0x3c
 8011616:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011618:	bfb8      	it	lt
 801161a:	2600      	movlt	r6, #0
 801161c:	2d00      	cmp	r5, #0
 801161e:	bfb3      	iteet	lt
 8011620:	f8dd e028 	ldrlt.w	lr, [sp, #40]	; 0x28
 8011624:	9d0a      	ldrge	r5, [sp, #40]	; 0x28
 8011626:	9b09      	ldrge	r3, [sp, #36]	; 0x24
 8011628:	ebc5 050e 	rsblt	r5, r5, lr
 801162c:	bfb8      	it	lt
 801162e:	2300      	movlt	r3, #0
 8011630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011632:	f8dd e020 	ldr.w	lr, [sp, #32]
 8011636:	441a      	add	r2, r3
 8011638:	449e      	add	lr, r3
 801163a:	4620      	mov	r0, r4
 801163c:	2101      	movs	r1, #1
 801163e:	920a      	str	r2, [sp, #40]	; 0x28
 8011640:	f8cd e020 	str.w	lr, [sp, #32]
 8011644:	f001 fb3a 	bl	8012cbc <__i2b>
 8011648:	4680      	mov	r8, r0
 801164a:	e6f0      	b.n	801142e <_dtoa_r+0x3ee>
 801164c:	2600      	movs	r6, #0
 801164e:	960d      	str	r6, [sp, #52]	; 0x34
 8011650:	9e05      	ldr	r6, [sp, #20]
 8011652:	f8dd e010 	ldr.w	lr, [sp, #16]
 8011656:	4476      	add	r6, lr
 8011658:	960e      	str	r6, [sp, #56]	; 0x38
 801165a:	3601      	adds	r6, #1
 801165c:	2e00      	cmp	r6, #0
 801165e:	9609      	str	r6, [sp, #36]	; 0x24
 8011660:	f340 8353 	ble.w	8011d0a <_dtoa_r+0xcca>
 8011664:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011666:	2e0e      	cmp	r6, #14
 8011668:	bf8c      	ite	hi
 801166a:	2500      	movhi	r5, #0
 801166c:	f005 0501 	andls.w	r5, r5, #1
 8011670:	2100      	movs	r1, #0
 8011672:	2e17      	cmp	r6, #23
 8011674:	6461      	str	r1, [r4, #68]	; 0x44
 8011676:	d90a      	bls.n	801168e <_dtoa_r+0x64e>
 8011678:	2201      	movs	r2, #1
 801167a:	2304      	movs	r3, #4
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	f103 0014 	add.w	r0, r3, #20
 8011682:	42b0      	cmp	r0, r6
 8011684:	4611      	mov	r1, r2
 8011686:	f102 0201 	add.w	r2, r2, #1
 801168a:	d9f7      	bls.n	801167c <_dtoa_r+0x63c>
 801168c:	6461      	str	r1, [r4, #68]	; 0x44
 801168e:	4620      	mov	r0, r4
 8011690:	f001 f9fe 	bl	8012a90 <_Balloc>
 8011694:	9007      	str	r0, [sp, #28]
 8011696:	6420      	str	r0, [r4, #64]	; 0x40
 8011698:	2d00      	cmp	r5, #0
 801169a:	f43f ae01 	beq.w	80112a0 <_dtoa_r+0x260>
 801169e:	9d04      	ldr	r5, [sp, #16]
 80116a0:	2d00      	cmp	r5, #0
 80116a2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 80116a6:	f340 81aa 	ble.w	80119fe <_dtoa_r+0x9be>
 80116aa:	f244 43e0 	movw	r3, #17632	; 0x44e0
 80116ae:	f005 020f 	and.w	r2, r5, #15
 80116b2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80116b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ba:	112d      	asrs	r5, r5, #4
 80116bc:	e9d3 6700 	ldrd	r6, r7, [r3]
 80116c0:	06eb      	lsls	r3, r5, #27
 80116c2:	f140 818e 	bpl.w	80119e2 <_dtoa_r+0x9a2>
 80116c6:	f244 53a8 	movw	r3, #17832	; 0x45a8
 80116ca:	f6c0 0301 	movt	r3, #2049	; 0x801
 80116ce:	4650      	mov	r0, sl
 80116d0:	4659      	mov	r1, fp
 80116d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80116d6:	f7fb f9b9 	bl	800ca4c <__aeabi_ddiv>
 80116da:	f005 050f 	and.w	r5, r5, #15
 80116de:	4682      	mov	sl, r0
 80116e0:	468b      	mov	fp, r1
 80116e2:	f04f 0803 	mov.w	r8, #3
 80116e6:	b19d      	cbz	r5, 8011710 <_dtoa_r+0x6d0>
 80116e8:	f244 59a8 	movw	r9, #17832	; 0x45a8
 80116ec:	f6c0 0901 	movt	r9, #2049	; 0x801
 80116f0:	4630      	mov	r0, r6
 80116f2:	4639      	mov	r1, r7
 80116f4:	07ef      	lsls	r7, r5, #31
 80116f6:	d505      	bpl.n	8011704 <_dtoa_r+0x6c4>
 80116f8:	e9d9 2300 	ldrd	r2, r3, [r9]
 80116fc:	f7fb f87c 	bl	800c7f8 <__aeabi_dmul>
 8011700:	f108 0801 	add.w	r8, r8, #1
 8011704:	106d      	asrs	r5, r5, #1
 8011706:	f109 0908 	add.w	r9, r9, #8
 801170a:	d1f3      	bne.n	80116f4 <_dtoa_r+0x6b4>
 801170c:	4606      	mov	r6, r0
 801170e:	460f      	mov	r7, r1
 8011710:	4632      	mov	r2, r6
 8011712:	463b      	mov	r3, r7
 8011714:	4650      	mov	r0, sl
 8011716:	4659      	mov	r1, fp
 8011718:	f7fb f998 	bl	800ca4c <__aeabi_ddiv>
 801171c:	4606      	mov	r6, r0
 801171e:	460f      	mov	r7, r1
 8011720:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011722:	b155      	cbz	r5, 801173a <_dtoa_r+0x6fa>
 8011724:	2300      	movs	r3, #0
 8011726:	4630      	mov	r0, r6
 8011728:	4639      	mov	r1, r7
 801172a:	2200      	movs	r2, #0
 801172c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8011730:	f7fb fad4 	bl	800ccdc <__aeabi_dcmplt>
 8011734:	2800      	cmp	r0, #0
 8011736:	f040 8306 	bne.w	8011d46 <_dtoa_r+0xd06>
 801173a:	4640      	mov	r0, r8
 801173c:	f7fa fff6 	bl	800c72c <__aeabi_i2d>
 8011740:	4632      	mov	r2, r6
 8011742:	463b      	mov	r3, r7
 8011744:	f7fb f858 	bl	800c7f8 <__aeabi_dmul>
 8011748:	2300      	movs	r3, #0
 801174a:	2200      	movs	r2, #0
 801174c:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8011750:	f7fa fea0 	bl	800c494 <__adddf3>
 8011754:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011756:	4680      	mov	r8, r0
 8011758:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801175c:	2d00      	cmp	r5, #0
 801175e:	f000 80ca 	beq.w	80118f6 <_dtoa_r+0x8b6>
 8011762:	9d04      	ldr	r5, [sp, #16]
 8011764:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8011768:	9516      	str	r5, [sp, #88]	; 0x58
 801176a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801176c:	f244 43e0 	movw	r3, #17632	; 0x44e0
 8011770:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011774:	2d00      	cmp	r5, #0
 8011776:	f000 816f 	beq.w	8011a58 <_dtoa_r+0xa18>
 801177a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 801177e:	2100      	movs	r1, #0
 8011780:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011784:	2000      	movs	r0, #0
 8011786:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 801178a:	f8cd c004 	str.w	ip, [sp, #4]
 801178e:	f7fb f95d 	bl	800ca4c <__aeabi_ddiv>
 8011792:	4642      	mov	r2, r8
 8011794:	464b      	mov	r3, r9
 8011796:	f7fa fe7b 	bl	800c490 <__aeabi_dsub>
 801179a:	4682      	mov	sl, r0
 801179c:	468b      	mov	fp, r1
 801179e:	4630      	mov	r0, r6
 80117a0:	4639      	mov	r1, r7
 80117a2:	f7fb fc8b 	bl	800d0bc <__aeabi_d2iz>
 80117a6:	4605      	mov	r5, r0
 80117a8:	f7fa ffc0 	bl	800c72c <__aeabi_i2d>
 80117ac:	4602      	mov	r2, r0
 80117ae:	460b      	mov	r3, r1
 80117b0:	4630      	mov	r0, r6
 80117b2:	4639      	mov	r1, r7
 80117b4:	f7fa fe6c 	bl	800c490 <__aeabi_dsub>
 80117b8:	3530      	adds	r5, #48	; 0x30
 80117ba:	fa5f f885 	uxtb.w	r8, r5
 80117be:	9d07      	ldr	r5, [sp, #28]
 80117c0:	4606      	mov	r6, r0
 80117c2:	460f      	mov	r7, r1
 80117c4:	f885 8000 	strb.w	r8, [r5]
 80117c8:	4650      	mov	r0, sl
 80117ca:	3501      	adds	r5, #1
 80117cc:	4659      	mov	r1, fp
 80117ce:	4632      	mov	r2, r6
 80117d0:	463b      	mov	r3, r7
 80117d2:	9500      	str	r5, [sp, #0]
 80117d4:	f7fb faa0 	bl	800cd18 <__aeabi_dcmpgt>
 80117d8:	2800      	cmp	r0, #0
 80117da:	d162      	bne.n	80118a2 <_dtoa_r+0x862>
 80117dc:	2100      	movs	r1, #0
 80117de:	4632      	mov	r2, r6
 80117e0:	463b      	mov	r3, r7
 80117e2:	2000      	movs	r0, #0
 80117e4:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80117e8:	f7fa fe52 	bl	800c490 <__aeabi_dsub>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	4650      	mov	r0, sl
 80117f2:	4659      	mov	r1, fp
 80117f4:	f7fb fa90 	bl	800cd18 <__aeabi_dcmpgt>
 80117f8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f040 83b6 	bne.w	8011f6e <_dtoa_r+0xf2e>
 8011802:	f1bc 0f01 	cmp.w	ip, #1
 8011806:	f340 80f7 	ble.w	80119f8 <_dtoa_r+0x9b8>
 801180a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801180e:	9417      	str	r4, [sp, #92]	; 0x5c
 8011810:	44e1      	add	r9, ip
 8011812:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8011816:	f8dd 9000 	ldr.w	r9, [sp]
 801181a:	e010      	b.n	801183e <_dtoa_r+0x7fe>
 801181c:	2100      	movs	r1, #0
 801181e:	2000      	movs	r0, #0
 8011820:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8011824:	f7fa fe34 	bl	800c490 <__aeabi_dsub>
 8011828:	4652      	mov	r2, sl
 801182a:	465b      	mov	r3, fp
 801182c:	f7fb fa56 	bl	800ccdc <__aeabi_dcmplt>
 8011830:	2800      	cmp	r0, #0
 8011832:	f040 831c 	bne.w	8011e6e <_dtoa_r+0xe2e>
 8011836:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011838:	45a9      	cmp	r9, r5
 801183a:	f000 80dc 	beq.w	80119f6 <_dtoa_r+0x9b6>
 801183e:	2300      	movs	r3, #0
 8011840:	4650      	mov	r0, sl
 8011842:	4659      	mov	r1, fp
 8011844:	2200      	movs	r2, #0
 8011846:	f2c4 0324 	movt	r3, #16420	; 0x4024
 801184a:	f7fa ffd5 	bl	800c7f8 <__aeabi_dmul>
 801184e:	2300      	movs	r3, #0
 8011850:	2200      	movs	r2, #0
 8011852:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011856:	4682      	mov	sl, r0
 8011858:	468b      	mov	fp, r1
 801185a:	4630      	mov	r0, r6
 801185c:	4639      	mov	r1, r7
 801185e:	f7fa ffcb 	bl	800c7f8 <__aeabi_dmul>
 8011862:	460d      	mov	r5, r1
 8011864:	4604      	mov	r4, r0
 8011866:	f7fb fc29 	bl	800d0bc <__aeabi_d2iz>
 801186a:	4680      	mov	r8, r0
 801186c:	f7fa ff5e 	bl	800c72c <__aeabi_i2d>
 8011870:	4602      	mov	r2, r0
 8011872:	460b      	mov	r3, r1
 8011874:	4620      	mov	r0, r4
 8011876:	4629      	mov	r1, r5
 8011878:	f7fa fe0a 	bl	800c490 <__aeabi_dsub>
 801187c:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8011880:	fa5f f888 	uxtb.w	r8, r8
 8011884:	4652      	mov	r2, sl
 8011886:	465b      	mov	r3, fp
 8011888:	f809 8b01 	strb.w	r8, [r9], #1
 801188c:	4606      	mov	r6, r0
 801188e:	460f      	mov	r7, r1
 8011890:	f7fb fa24 	bl	800ccdc <__aeabi_dcmplt>
 8011894:	4632      	mov	r2, r6
 8011896:	463b      	mov	r3, r7
 8011898:	2800      	cmp	r0, #0
 801189a:	d0bf      	beq.n	801181c <_dtoa_r+0x7dc>
 801189c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801189e:	f8cd 9000 	str.w	r9, [sp]
 80118a2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80118a4:	9e00      	ldr	r6, [sp, #0]
 80118a6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80118aa:	9504      	str	r5, [sp, #16]
 80118ac:	9607      	str	r6, [sp, #28]
 80118ae:	e668      	b.n	8011582 <_dtoa_r+0x542>
 80118b0:	2600      	movs	r6, #0
 80118b2:	960d      	str	r6, [sp, #52]	; 0x34
 80118b4:	9e05      	ldr	r6, [sp, #20]
 80118b6:	2e00      	cmp	r6, #0
 80118b8:	f340 822f 	ble.w	8011d1a <_dtoa_r+0xcda>
 80118bc:	2e0e      	cmp	r6, #14
 80118be:	bf8c      	ite	hi
 80118c0:	2500      	movhi	r5, #0
 80118c2:	f005 0501 	andls.w	r5, r5, #1
 80118c6:	960e      	str	r6, [sp, #56]	; 0x38
 80118c8:	9609      	str	r6, [sp, #36]	; 0x24
 80118ca:	e6d1      	b.n	8011670 <_dtoa_r+0x630>
 80118cc:	2601      	movs	r6, #1
 80118ce:	960d      	str	r6, [sp, #52]	; 0x34
 80118d0:	e7f0      	b.n	80118b4 <_dtoa_r+0x874>
 80118d2:	4640      	mov	r0, r8
 80118d4:	f7fa ff2a 	bl	800c72c <__aeabi_i2d>
 80118d8:	4602      	mov	r2, r0
 80118da:	460b      	mov	r3, r1
 80118dc:	4630      	mov	r0, r6
 80118de:	4639      	mov	r1, r7
 80118e0:	f7fa ff8a 	bl	800c7f8 <__aeabi_dmul>
 80118e4:	2300      	movs	r3, #0
 80118e6:	2200      	movs	r2, #0
 80118e8:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80118ec:	f7fa fdd2 	bl	800c494 <__adddf3>
 80118f0:	4680      	mov	r8, r0
 80118f2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80118f6:	2300      	movs	r3, #0
 80118f8:	4630      	mov	r0, r6
 80118fa:	2200      	movs	r2, #0
 80118fc:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8011900:	4639      	mov	r1, r7
 8011902:	f7fa fdc5 	bl	800c490 <__aeabi_dsub>
 8011906:	4642      	mov	r2, r8
 8011908:	464b      	mov	r3, r9
 801190a:	4682      	mov	sl, r0
 801190c:	468b      	mov	fp, r1
 801190e:	f7fb fa03 	bl	800cd18 <__aeabi_dcmpgt>
 8011912:	4606      	mov	r6, r0
 8011914:	2800      	cmp	r0, #0
 8011916:	f040 80ff 	bne.w	8011b18 <_dtoa_r+0xad8>
 801191a:	4642      	mov	r2, r8
 801191c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011920:	4650      	mov	r0, sl
 8011922:	4659      	mov	r1, fp
 8011924:	f7fb f9da 	bl	800ccdc <__aeabi_dcmplt>
 8011928:	2800      	cmp	r0, #0
 801192a:	d065      	beq.n	80119f8 <_dtoa_r+0x9b8>
 801192c:	46b0      	mov	r8, r6
 801192e:	9d05      	ldr	r5, [sp, #20]
 8011930:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011934:	43ed      	mvns	r5, r5
 8011936:	9504      	str	r5, [sp, #16]
 8011938:	2500      	movs	r5, #0
 801193a:	e612      	b.n	8011562 <_dtoa_r+0x522>
 801193c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801193e:	2a00      	cmp	r2, #0
 8011940:	f040 815f 	bne.w	8011c02 <_dtoa_r+0xbc2>
 8011944:	2500      	movs	r5, #0
 8011946:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801194a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801194e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8011952:	e006      	b.n	8011962 <_dtoa_r+0x922>
 8011954:	4649      	mov	r1, r9
 8011956:	4620      	mov	r0, r4
 8011958:	220a      	movs	r2, #10
 801195a:	2300      	movs	r3, #0
 801195c:	f001 f8c8 	bl	8012af0 <__multadd>
 8011960:	4681      	mov	r9, r0
 8011962:	4648      	mov	r0, r9
 8011964:	4631      	mov	r1, r6
 8011966:	f7ff fad5 	bl	8010f14 <quorem>
 801196a:	3030      	adds	r0, #48	; 0x30
 801196c:	f80b 0005 	strb.w	r0, [fp, r5]
 8011970:	3501      	adds	r5, #1
 8011972:	4555      	cmp	r5, sl
 8011974:	dbee      	blt.n	8011954 <_dtoa_r+0x914>
 8011976:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011978:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801197c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8011980:	2d01      	cmp	r5, #1
 8011982:	bfac      	ite	ge
 8011984:	44ab      	addge	fp, r5
 8011986:	f10b 0b01 	addlt.w	fp, fp, #1
 801198a:	4607      	mov	r7, r0
 801198c:	2500      	movs	r5, #0
 801198e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011990:	2201      	movs	r2, #1
 8011992:	4620      	mov	r0, r4
 8011994:	f001 fa96 	bl	8012ec4 <__lshift>
 8011998:	4631      	mov	r1, r6
 801199a:	900b      	str	r0, [sp, #44]	; 0x2c
 801199c:	f001 faf0 	bl	8012f80 <__mcmp>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	f340 826e 	ble.w	8011e82 <_dtoa_r+0xe42>
 80119a6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80119aa:	9907      	ldr	r1, [sp, #28]
 80119ac:	e005      	b.n	80119ba <_dtoa_r+0x97a>
 80119ae:	4299      	cmp	r1, r3
 80119b0:	f000 8223 	beq.w	8011dfa <_dtoa_r+0xdba>
 80119b4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80119b8:	469b      	mov	fp, r3
 80119ba:	2a39      	cmp	r2, #57	; 0x39
 80119bc:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80119c0:	d0f5      	beq.n	80119ae <_dtoa_r+0x96e>
 80119c2:	3201      	adds	r2, #1
 80119c4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80119c8:	701a      	strb	r2, [r3, #0]
 80119ca:	f8cd b01c 	str.w	fp, [sp, #28]
 80119ce:	e5c8      	b.n	8011562 <_dtoa_r+0x522>
 80119d0:	231c      	movs	r3, #28
 80119d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80119d4:	9a08      	ldr	r2, [sp, #32]
 80119d6:	4419      	add	r1, r3
 80119d8:	441a      	add	r2, r3
 80119da:	910a      	str	r1, [sp, #40]	; 0x28
 80119dc:	441d      	add	r5, r3
 80119de:	9208      	str	r2, [sp, #32]
 80119e0:	e580      	b.n	80114e4 <_dtoa_r+0x4a4>
 80119e2:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 80119e6:	f04f 0802 	mov.w	r8, #2
 80119ea:	e67c      	b.n	80116e6 <_dtoa_r+0x6a6>
 80119ec:	4629      	mov	r1, r5
 80119ee:	4620      	mov	r0, r4
 80119f0:	f001 f874 	bl	8012adc <_Bfree>
 80119f4:	e5c1      	b.n	801157a <_dtoa_r+0x53a>
 80119f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80119f8:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 80119fc:	e450      	b.n	80112a0 <_dtoa_r+0x260>
 80119fe:	9e04      	ldr	r6, [sp, #16]
 8011a00:	4275      	negs	r5, r6
 8011a02:	2d00      	cmp	r5, #0
 8011a04:	f000 819a 	beq.w	8011d3c <_dtoa_r+0xcfc>
 8011a08:	f244 43e0 	movw	r3, #17632	; 0x44e0
 8011a0c:	f005 020f 	and.w	r2, r5, #15
 8011a10:	f6c0 0301 	movt	r3, #2049	; 0x801
 8011a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011a20:	f7fa feea 	bl	800c7f8 <__aeabi_dmul>
 8011a24:	112d      	asrs	r5, r5, #4
 8011a26:	4606      	mov	r6, r0
 8011a28:	460f      	mov	r7, r1
 8011a2a:	f000 829c 	beq.w	8011f66 <_dtoa_r+0xf26>
 8011a2e:	f244 59a8 	movw	r9, #17832	; 0x45a8
 8011a32:	f6c0 0901 	movt	r9, #2049	; 0x801
 8011a36:	f04f 0802 	mov.w	r8, #2
 8011a3a:	07ee      	lsls	r6, r5, #31
 8011a3c:	d505      	bpl.n	8011a4a <_dtoa_r+0xa0a>
 8011a3e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011a42:	f7fa fed9 	bl	800c7f8 <__aeabi_dmul>
 8011a46:	f108 0801 	add.w	r8, r8, #1
 8011a4a:	106d      	asrs	r5, r5, #1
 8011a4c:	f109 0908 	add.w	r9, r9, #8
 8011a50:	d1f3      	bne.n	8011a3a <_dtoa_r+0x9fa>
 8011a52:	4606      	mov	r6, r0
 8011a54:	460f      	mov	r7, r1
 8011a56:	e663      	b.n	8011720 <_dtoa_r+0x6e0>
 8011a58:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8011a5c:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8011a60:	4642      	mov	r2, r8
 8011a62:	464b      	mov	r3, r9
 8011a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a68:	f8cd c004 	str.w	ip, [sp, #4]
 8011a6c:	f7fa fec4 	bl	800c7f8 <__aeabi_dmul>
 8011a70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011a74:	4639      	mov	r1, r7
 8011a76:	4630      	mov	r0, r6
 8011a78:	f7fb fb20 	bl	800d0bc <__aeabi_d2iz>
 8011a7c:	4605      	mov	r5, r0
 8011a7e:	f7fa fe55 	bl	800c72c <__aeabi_i2d>
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	4630      	mov	r0, r6
 8011a88:	4639      	mov	r1, r7
 8011a8a:	f7fa fd01 	bl	800c490 <__aeabi_dsub>
 8011a8e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8011a92:	3530      	adds	r5, #48	; 0x30
 8011a94:	f88e 5000 	strb.w	r5, [lr]
 8011a98:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011a9c:	f1bc 0f01 	cmp.w	ip, #1
 8011aa0:	4606      	mov	r6, r0
 8011aa2:	460f      	mov	r7, r1
 8011aa4:	f10e 0a01 	add.w	sl, lr, #1
 8011aa8:	d01f      	beq.n	8011aea <_dtoa_r+0xaaa>
 8011aaa:	9d07      	ldr	r5, [sp, #28]
 8011aac:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8011ab0:	44e1      	add	r9, ip
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011aba:	f7fa fe9d 	bl	800c7f8 <__aeabi_dmul>
 8011abe:	460f      	mov	r7, r1
 8011ac0:	4606      	mov	r6, r0
 8011ac2:	f7fb fafb 	bl	800d0bc <__aeabi_d2iz>
 8011ac6:	4680      	mov	r8, r0
 8011ac8:	f7fa fe30 	bl	800c72c <__aeabi_i2d>
 8011acc:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	4639      	mov	r1, r7
 8011ad8:	f7fa fcda 	bl	800c490 <__aeabi_dsub>
 8011adc:	f805 8f01 	strb.w	r8, [r5, #1]!
 8011ae0:	454d      	cmp	r5, r9
 8011ae2:	d1e6      	bne.n	8011ab2 <_dtoa_r+0xa72>
 8011ae4:	4606      	mov	r6, r0
 8011ae6:	460f      	mov	r7, r1
 8011ae8:	44da      	add	sl, fp
 8011aea:	2300      	movs	r3, #0
 8011aec:	2200      	movs	r2, #0
 8011aee:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8011af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011af6:	f7fa fccd 	bl	800c494 <__adddf3>
 8011afa:	4632      	mov	r2, r6
 8011afc:	463b      	mov	r3, r7
 8011afe:	f7fb f8ed 	bl	800ccdc <__aeabi_dcmplt>
 8011b02:	2800      	cmp	r0, #0
 8011b04:	f000 815c 	beq.w	8011dc0 <_dtoa_r+0xd80>
 8011b08:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011b0c:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
 8011b10:	f8cd a01c 	str.w	sl, [sp, #28]
 8011b14:	4652      	mov	r2, sl
 8011b16:	e475      	b.n	8011404 <_dtoa_r+0x3c4>
 8011b18:	2600      	movs	r6, #0
 8011b1a:	46b0      	mov	r8, r6
 8011b1c:	e516      	b.n	801154c <_dtoa_r+0x50c>
 8011b1e:	6933      	ldr	r3, [r6, #16]
 8011b20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011b24:	6918      	ldr	r0, [r3, #16]
 8011b26:	f001 f87d 	bl	8012c24 <__hi0bits>
 8011b2a:	f1c0 0020 	rsb	r0, r0, #32
 8011b2e:	e4c3      	b.n	80114b8 <_dtoa_r+0x478>
 8011b30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011b32:	4631      	mov	r1, r6
 8011b34:	f001 fa24 	bl	8012f80 <__mcmp>
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	f6bf ace9 	bge.w	8011510 <_dtoa_r+0x4d0>
 8011b3e:	f8dd e010 	ldr.w	lr, [sp, #16]
 8011b42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011b44:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8011b48:	4620      	mov	r0, r4
 8011b4a:	220a      	movs	r2, #10
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	f8cd e010 	str.w	lr, [sp, #16]
 8011b52:	f000 ffcd 	bl	8012af0 <__multadd>
 8011b56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011b58:	900b      	str	r0, [sp, #44]	; 0x2c
 8011b5a:	2900      	cmp	r1, #0
 8011b5c:	d13b      	bne.n	8011bd6 <_dtoa_r+0xb96>
 8011b5e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011b60:	2d00      	cmp	r5, #0
 8011b62:	dc03      	bgt.n	8011b6c <_dtoa_r+0xb2c>
 8011b64:	9d02      	ldr	r5, [sp, #8]
 8011b66:	2d02      	cmp	r5, #2
 8011b68:	f300 8208 	bgt.w	8011f7c <_dtoa_r+0xf3c>
 8011b6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011b6e:	9509      	str	r5, [sp, #36]	; 0x24
 8011b70:	e6e8      	b.n	8011944 <_dtoa_r+0x904>
 8011b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011b74:	2d00      	cmp	r5, #0
 8011b76:	f040 8194 	bne.w	8011ea2 <_dtoa_r+0xe62>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8011b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b86:	f7fa fe37 	bl	800c7f8 <__aeabi_dmul>
 8011b8a:	4652      	mov	r2, sl
 8011b8c:	465b      	mov	r3, fp
 8011b8e:	f7fb f8b9 	bl	800cd04 <__aeabi_dcmpge>
 8011b92:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011b94:	46b0      	mov	r8, r6
 8011b96:	2800      	cmp	r0, #0
 8011b98:	f47f aec9 	bne.w	801192e <_dtoa_r+0x8ee>
 8011b9c:	e4d6      	b.n	801154c <_dtoa_r+0x50c>
 8011b9e:	f1ba 0f00 	cmp.w	sl, #0
 8011ba2:	f47f ac83 	bne.w	80114ac <_dtoa_r+0x46c>
 8011ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011baa:	4657      	mov	r7, sl
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	f47f ac7e 	bne.w	80114ae <_dtoa_r+0x46e>
 8011bb2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8011bb6:	0d3f      	lsrs	r7, r7, #20
 8011bb8:	053f      	lsls	r7, r7, #20
 8011bba:	2f00      	cmp	r7, #0
 8011bbc:	f43f ac77 	beq.w	80114ae <_dtoa_r+0x46e>
 8011bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bc2:	f8dd e020 	ldr.w	lr, [sp, #32]
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	f10e 0e01 	add.w	lr, lr, #1
 8011bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8011bce:	f8cd e020 	str.w	lr, [sp, #32]
 8011bd2:	2701      	movs	r7, #1
 8011bd4:	e46b      	b.n	80114ae <_dtoa_r+0x46e>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	4641      	mov	r1, r8
 8011bda:	220a      	movs	r2, #10
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f000 ff87 	bl	8012af0 <__multadd>
 8011be2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011be4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	bfcc      	ite	gt
 8011bec:	2300      	movgt	r3, #0
 8011bee:	2301      	movle	r3, #1
 8011bf0:	f1be 0f02 	cmp.w	lr, #2
 8011bf4:	bfd8      	it	le
 8011bf6:	2300      	movle	r3, #0
 8011bf8:	4680      	mov	r8, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	f040 81be 	bne.w	8011f7c <_dtoa_r+0xf3c>
 8011c00:	9209      	str	r2, [sp, #36]	; 0x24
 8011c02:	2d00      	cmp	r5, #0
 8011c04:	dd05      	ble.n	8011c12 <_dtoa_r+0xbd2>
 8011c06:	4641      	mov	r1, r8
 8011c08:	462a      	mov	r2, r5
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f001 f95a 	bl	8012ec4 <__lshift>
 8011c10:	4680      	mov	r8, r0
 8011c12:	46c4      	mov	ip, r8
 8011c14:	2f00      	cmp	r7, #0
 8011c16:	f040 8157 	bne.w	8011ec8 <_dtoa_r+0xe88>
 8011c1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011c1c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8011c20:	9907      	ldr	r1, [sp, #28]
 8011c22:	44ae      	add	lr, r5
 8011c24:	f00a 0501 	and.w	r5, sl, #1
 8011c28:	9509      	str	r5, [sp, #36]	; 0x24
 8011c2a:	4637      	mov	r7, r6
 8011c2c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8011c30:	1c4d      	adds	r5, r1, #1
 8011c32:	46e1      	mov	r9, ip
 8011c34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011c36:	e00a      	b.n	8011c4e <_dtoa_r+0xc0e>
 8011c38:	f000 ff5a 	bl	8012af0 <__multadd>
 8011c3c:	4649      	mov	r1, r9
 8011c3e:	4680      	mov	r8, r0
 8011c40:	220a      	movs	r2, #10
 8011c42:	4620      	mov	r0, r4
 8011c44:	2300      	movs	r3, #0
 8011c46:	f000 ff53 	bl	8012af0 <__multadd>
 8011c4a:	4681      	mov	r9, r0
 8011c4c:	3501      	adds	r5, #1
 8011c4e:	4639      	mov	r1, r7
 8011c50:	4630      	mov	r0, r6
 8011c52:	f7ff f95f 	bl	8010f14 <quorem>
 8011c56:	4641      	mov	r1, r8
 8011c58:	4682      	mov	sl, r0
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	f001 f990 	bl	8012f80 <__mcmp>
 8011c60:	464a      	mov	r2, r9
 8011c62:	4683      	mov	fp, r0
 8011c64:	4639      	mov	r1, r7
 8011c66:	4620      	mov	r0, r4
 8011c68:	f001 f9ac 	bl	8012fc4 <__mdiff>
 8011c6c:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 8011c70:	9205      	str	r2, [sp, #20]
 8011c72:	68c2      	ldr	r2, [r0, #12]
 8011c74:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8011c78:	4603      	mov	r3, r0
 8011c7a:	f8cd e020 	str.w	lr, [sp, #32]
 8011c7e:	2a00      	cmp	r2, #0
 8011c80:	d13e      	bne.n	8011d00 <_dtoa_r+0xcc0>
 8011c82:	4619      	mov	r1, r3
 8011c84:	4630      	mov	r0, r6
 8011c86:	9301      	str	r3, [sp, #4]
 8011c88:	f001 f97a 	bl	8012f80 <__mcmp>
 8011c8c:	9b01      	ldr	r3, [sp, #4]
 8011c8e:	4602      	mov	r2, r0
 8011c90:	4619      	mov	r1, r3
 8011c92:	4620      	mov	r0, r4
 8011c94:	9201      	str	r2, [sp, #4]
 8011c96:	f000 ff21 	bl	8012adc <_Bfree>
 8011c9a:	9a01      	ldr	r2, [sp, #4]
 8011c9c:	9902      	ldr	r1, [sp, #8]
 8011c9e:	4311      	orrs	r1, r2
 8011ca0:	d103      	bne.n	8011caa <_dtoa_r+0xc6a>
 8011ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f000 814d 	beq.w	8011f44 <_dtoa_r+0xf04>
 8011caa:	f1bb 0f00 	cmp.w	fp, #0
 8011cae:	f2c0 80ba 	blt.w	8011e26 <_dtoa_r+0xde6>
 8011cb2:	9b02      	ldr	r3, [sp, #8]
 8011cb4:	ea5b 0303 	orrs.w	r3, fp, r3
 8011cb8:	d103      	bne.n	8011cc2 <_dtoa_r+0xc82>
 8011cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011cbc:	2900      	cmp	r1, #0
 8011cbe:	f000 80b2 	beq.w	8011e26 <_dtoa_r+0xde6>
 8011cc2:	2a00      	cmp	r2, #0
 8011cc4:	f300 811d 	bgt.w	8011f02 <_dtoa_r+0xec2>
 8011cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cca:	9a05      	ldr	r2, [sp, #20]
 8011ccc:	429d      	cmp	r5, r3
 8011cce:	f805 2c01 	strb.w	r2, [r5, #-1]
 8011cd2:	46ab      	mov	fp, r5
 8011cd4:	f000 8127 	beq.w	8011f26 <_dtoa_r+0xee6>
 8011cd8:	4631      	mov	r1, r6
 8011cda:	220a      	movs	r2, #10
 8011cdc:	2300      	movs	r3, #0
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 ff06 	bl	8012af0 <__multadd>
 8011ce4:	45c8      	cmp	r8, r9
 8011ce6:	4606      	mov	r6, r0
 8011ce8:	4641      	mov	r1, r8
 8011cea:	4620      	mov	r0, r4
 8011cec:	f04f 020a 	mov.w	r2, #10
 8011cf0:	f04f 0300 	mov.w	r3, #0
 8011cf4:	d1a0      	bne.n	8011c38 <_dtoa_r+0xbf8>
 8011cf6:	f000 fefb 	bl	8012af0 <__multadd>
 8011cfa:	4680      	mov	r8, r0
 8011cfc:	4681      	mov	r9, r0
 8011cfe:	e7a5      	b.n	8011c4c <_dtoa_r+0xc0c>
 8011d00:	2201      	movs	r2, #1
 8011d02:	e7c5      	b.n	8011c90 <_dtoa_r+0xc50>
 8011d04:	2601      	movs	r6, #1
 8011d06:	960d      	str	r6, [sp, #52]	; 0x34
 8011d08:	e4a2      	b.n	8011650 <_dtoa_r+0x610>
 8011d0a:	2e0e      	cmp	r6, #14
 8011d0c:	bf8c      	ite	hi
 8011d0e:	2300      	movhi	r3, #0
 8011d10:	2301      	movls	r3, #1
 8011d12:	2100      	movs	r1, #0
 8011d14:	401d      	ands	r5, r3
 8011d16:	6461      	str	r1, [r4, #68]	; 0x44
 8011d18:	e4b9      	b.n	801168e <_dtoa_r+0x64e>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8011d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d20:	9305      	str	r3, [sp, #20]
 8011d22:	e7f6      	b.n	8011d12 <_dtoa_r+0xcd2>
 8011d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f001 f87b 	bl	8012e24 <__pow5mult>
 8011d2e:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d30:	f7ff bbaa 	b.w	8011488 <_dtoa_r+0x448>
 8011d34:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011d38:	9507      	str	r5, [sp, #28]
 8011d3a:	e422      	b.n	8011582 <_dtoa_r+0x542>
 8011d3c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8011d40:	f04f 0802 	mov.w	r8, #2
 8011d44:	e4ec      	b.n	8011720 <_dtoa_r+0x6e0>
 8011d46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011d48:	2d00      	cmp	r5, #0
 8011d4a:	f43f adc2 	beq.w	80118d2 <_dtoa_r+0x892>
 8011d4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011d50:	2d00      	cmp	r5, #0
 8011d52:	f77f ae51 	ble.w	80119f8 <_dtoa_r+0x9b8>
 8011d56:	2300      	movs	r3, #0
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8011d5e:	4630      	mov	r0, r6
 8011d60:	4639      	mov	r1, r7
 8011d62:	f7fa fd49 	bl	800c7f8 <__aeabi_dmul>
 8011d66:	4606      	mov	r6, r0
 8011d68:	f108 0001 	add.w	r0, r8, #1
 8011d6c:	460f      	mov	r7, r1
 8011d6e:	f7fa fcdd 	bl	800c72c <__aeabi_i2d>
 8011d72:	4602      	mov	r2, r0
 8011d74:	460b      	mov	r3, r1
 8011d76:	4630      	mov	r0, r6
 8011d78:	4639      	mov	r1, r7
 8011d7a:	f7fa fd3d 	bl	800c7f8 <__aeabi_dmul>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	2200      	movs	r2, #0
 8011d82:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8011d86:	f7fa fb85 	bl	800c494 <__adddf3>
 8011d8a:	9d04      	ldr	r5, [sp, #16]
 8011d8c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8011d90:	3d01      	subs	r5, #1
 8011d92:	4680      	mov	r8, r0
 8011d94:	9516      	str	r5, [sp, #88]	; 0x58
 8011d96:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8011d9a:	e4e6      	b.n	801176a <_dtoa_r+0x72a>
 8011d9c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8011d9e:	9207      	str	r2, [sp, #28]
 8011da0:	2230      	movs	r2, #48	; 0x30
 8011da2:	f889 2000 	strb.w	r2, [r9]
 8011da6:	3501      	adds	r5, #1
 8011da8:	2231      	movs	r2, #49	; 0x31
 8011daa:	9504      	str	r5, [sp, #16]
 8011dac:	701a      	strb	r2, [r3, #0]
 8011dae:	f7ff bbe8 	b.w	8011582 <_dtoa_r+0x542>
 8011db2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011db4:	4620      	mov	r0, r4
 8011db6:	f001 f835 	bl	8012e24 <__pow5mult>
 8011dba:	900b      	str	r0, [sp, #44]	; 0x2c
 8011dbc:	f7ff bb64 	b.w	8011488 <_dtoa_r+0x448>
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8011dcc:	f7fa fb60 	bl	800c490 <__aeabi_dsub>
 8011dd0:	4632      	mov	r2, r6
 8011dd2:	463b      	mov	r3, r7
 8011dd4:	f7fa ffa0 	bl	800cd18 <__aeabi_dcmpgt>
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	f43f ae0d 	beq.w	80119f8 <_dtoa_r+0x9b8>
 8011dde:	4653      	mov	r3, sl
 8011de0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011de4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8011de8:	2a30      	cmp	r2, #48	; 0x30
 8011dea:	d0f8      	beq.n	8011dde <_dtoa_r+0xd9e>
 8011dec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8011dee:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011df2:	9504      	str	r5, [sp, #16]
 8011df4:	9307      	str	r3, [sp, #28]
 8011df6:	f7ff bbc4 	b.w	8011582 <_dtoa_r+0x542>
 8011dfa:	f8dd e010 	ldr.w	lr, [sp, #16]
 8011dfe:	9907      	ldr	r1, [sp, #28]
 8011e00:	f8cd b01c 	str.w	fp, [sp, #28]
 8011e04:	2331      	movs	r3, #49	; 0x31
 8011e06:	f10e 0e01 	add.w	lr, lr, #1
 8011e0a:	f8cd e010 	str.w	lr, [sp, #16]
 8011e0e:	700b      	strb	r3, [r1, #0]
 8011e10:	4689      	mov	r9, r1
 8011e12:	f7ff bba6 	b.w	8011562 <_dtoa_r+0x522>
 8011e16:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011e18:	2d00      	cmp	r5, #0
 8011e1a:	d06b      	beq.n	8011ef4 <_dtoa_r+0xeb4>
 8011e1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011e20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011e22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011e24:	e404      	b.n	8011630 <_dtoa_r+0x5f0>
 8011e26:	2a00      	cmp	r2, #0
 8011e28:	960b      	str	r6, [sp, #44]	; 0x2c
 8011e2a:	46cc      	mov	ip, r9
 8011e2c:	463e      	mov	r6, r7
 8011e2e:	9f05      	ldr	r7, [sp, #20]
 8011e30:	dd13      	ble.n	8011e5a <_dtoa_r+0xe1a>
 8011e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8011e38:	2201      	movs	r2, #1
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f001 f842 	bl	8012ec4 <__lshift>
 8011e40:	4631      	mov	r1, r6
 8011e42:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e44:	f001 f89c 	bl	8012f80 <__mcmp>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8011e4e:	f340 8084 	ble.w	8011f5a <_dtoa_r+0xf1a>
 8011e52:	2f39      	cmp	r7, #57	; 0x39
 8011e54:	d06d      	beq.n	8011f32 <_dtoa_r+0xef2>
 8011e56:	f10a 0731 	add.w	r7, sl, #49	; 0x31
 8011e5a:	9b08      	ldr	r3, [sp, #32]
 8011e5c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011e60:	701f      	strb	r7, [r3, #0]
 8011e62:	1c59      	adds	r1, r3, #1
 8011e64:	4645      	mov	r5, r8
 8011e66:	9107      	str	r1, [sp, #28]
 8011e68:	46e0      	mov	r8, ip
 8011e6a:	f7ff bb7a 	b.w	8011562 <_dtoa_r+0x522>
 8011e6e:	f8cd 9000 	str.w	r9, [sp]
 8011e72:	9d00      	ldr	r5, [sp, #0]
 8011e74:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011e78:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8011e7a:	9507      	str	r5, [sp, #28]
 8011e7c:	462a      	mov	r2, r5
 8011e7e:	f7ff bac1 	b.w	8011404 <_dtoa_r+0x3c4>
 8011e82:	d102      	bne.n	8011e8a <_dtoa_r+0xe4a>
 8011e84:	07fb      	lsls	r3, r7, #31
 8011e86:	f53f ad8e 	bmi.w	80119a6 <_dtoa_r+0x966>
 8011e8a:	465b      	mov	r3, fp
 8011e8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011e90:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8011e94:	2a30      	cmp	r2, #48	; 0x30
 8011e96:	d0f8      	beq.n	8011e8a <_dtoa_r+0xe4a>
 8011e98:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011e9c:	9307      	str	r3, [sp, #28]
 8011e9e:	f7ff bb60 	b.w	8011562 <_dtoa_r+0x522>
 8011ea2:	2600      	movs	r6, #0
 8011ea4:	e542      	b.n	801192c <_dtoa_r+0x8ec>
 8011ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eaa:	4632      	mov	r2, r6
 8011eac:	463b      	mov	r3, r7
 8011eae:	f7fa ff0b 	bl	800ccc8 <__aeabi_dcmpeq>
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	f43f af3e 	beq.w	8011d34 <_dtoa_r+0xcf4>
 8011eb8:	f018 0f01 	tst.w	r8, #1
 8011ebc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011ec0:	f43f af3a 	beq.w	8011d38 <_dtoa_r+0xcf8>
 8011ec4:	f7ff ba91 	b.w	80113ea <_dtoa_r+0x3aa>
 8011ec8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ecc:	4620      	mov	r0, r4
 8011ece:	f000 fddf 	bl	8012a90 <_Balloc>
 8011ed2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011ed6:	1c9a      	adds	r2, r3, #2
 8011ed8:	4605      	mov	r5, r0
 8011eda:	0092      	lsls	r2, r2, #2
 8011edc:	f108 010c 	add.w	r1, r8, #12
 8011ee0:	300c      	adds	r0, #12
 8011ee2:	f7fa ff43 	bl	800cd6c <memcpy>
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	4629      	mov	r1, r5
 8011eea:	2201      	movs	r2, #1
 8011eec:	f000 ffea 	bl	8012ec4 <__lshift>
 8011ef0:	4684      	mov	ip, r0
 8011ef2:	e692      	b.n	8011c1a <_dtoa_r+0xbda>
 8011ef4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011ef6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011ef8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011efa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011efe:	f7ff bb97 	b.w	8011630 <_dtoa_r+0x5f0>
 8011f02:	960b      	str	r6, [sp, #44]	; 0x2c
 8011f04:	463e      	mov	r6, r7
 8011f06:	9f05      	ldr	r7, [sp, #20]
 8011f08:	2f39      	cmp	r7, #57	; 0x39
 8011f0a:	46cc      	mov	ip, r9
 8011f0c:	d011      	beq.n	8011f32 <_dtoa_r+0xef2>
 8011f0e:	9908      	ldr	r1, [sp, #32]
 8011f10:	9d08      	ldr	r5, [sp, #32]
 8011f12:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011f16:	3701      	adds	r7, #1
 8011f18:	3101      	adds	r1, #1
 8011f1a:	702f      	strb	r7, [r5, #0]
 8011f1c:	9107      	str	r1, [sp, #28]
 8011f1e:	4645      	mov	r5, r8
 8011f20:	46e0      	mov	r8, ip
 8011f22:	f7ff bb1e 	b.w	8011562 <_dtoa_r+0x522>
 8011f26:	960b      	str	r6, [sp, #44]	; 0x2c
 8011f28:	4645      	mov	r5, r8
 8011f2a:	463e      	mov	r6, r7
 8011f2c:	46c8      	mov	r8, r9
 8011f2e:	9f05      	ldr	r7, [sp, #20]
 8011f30:	e52d      	b.n	801198e <_dtoa_r+0x94e>
 8011f32:	9b08      	ldr	r3, [sp, #32]
 8011f34:	9907      	ldr	r1, [sp, #28]
 8011f36:	2239      	movs	r2, #57	; 0x39
 8011f38:	4645      	mov	r5, r8
 8011f3a:	701a      	strb	r2, [r3, #0]
 8011f3c:	46e0      	mov	r8, ip
 8011f3e:	f103 0b01 	add.w	fp, r3, #1
 8011f42:	e53a      	b.n	80119ba <_dtoa_r+0x97a>
 8011f44:	960b      	str	r6, [sp, #44]	; 0x2c
 8011f46:	463e      	mov	r6, r7
 8011f48:	9f05      	ldr	r7, [sp, #20]
 8011f4a:	2f39      	cmp	r7, #57	; 0x39
 8011f4c:	46cc      	mov	ip, r9
 8011f4e:	d0f0      	beq.n	8011f32 <_dtoa_r+0xef2>
 8011f50:	f1bb 0f00 	cmp.w	fp, #0
 8011f54:	f73f af7f 	bgt.w	8011e56 <_dtoa_r+0xe16>
 8011f58:	e77f      	b.n	8011e5a <_dtoa_r+0xe1a>
 8011f5a:	f47f af7e 	bne.w	8011e5a <_dtoa_r+0xe1a>
 8011f5e:	07fa      	lsls	r2, r7, #31
 8011f60:	f57f af7b 	bpl.w	8011e5a <_dtoa_r+0xe1a>
 8011f64:	e775      	b.n	8011e52 <_dtoa_r+0xe12>
 8011f66:	f04f 0802 	mov.w	r8, #2
 8011f6a:	f7ff bbd9 	b.w	8011720 <_dtoa_r+0x6e0>
 8011f6e:	9e00      	ldr	r6, [sp, #0]
 8011f70:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011f74:	9607      	str	r6, [sp, #28]
 8011f76:	4632      	mov	r2, r6
 8011f78:	f7ff ba44 	b.w	8011404 <_dtoa_r+0x3c4>
 8011f7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011f7e:	9509      	str	r5, [sp, #36]	; 0x24
 8011f80:	f7ff bad2 	b.w	8011528 <_dtoa_r+0x4e8>
 8011f84:	f43f aaae 	beq.w	80114e4 <_dtoa_r+0x4a4>
 8011f88:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8011f8c:	e521      	b.n	80119d2 <_dtoa_r+0x992>
 8011f8e:	bf00      	nop

08011f90 <_fclose_r>:
 8011f90:	b570      	push	{r4, r5, r6, lr}
 8011f92:	460c      	mov	r4, r1
 8011f94:	4605      	mov	r5, r0
 8011f96:	b131      	cbz	r1, 8011fa6 <_fclose_r+0x16>
 8011f98:	b110      	cbz	r0, 8011fa0 <_fclose_r+0x10>
 8011f9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d030      	beq.n	8012002 <_fclose_r+0x72>
 8011fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fa4:	b90b      	cbnz	r3, 8011faa <_fclose_r+0x1a>
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	bd70      	pop	{r4, r5, r6, pc}
 8011faa:	4628      	mov	r0, r5
 8011fac:	4621      	mov	r1, r4
 8011fae:	f000 f8e7 	bl	8012180 <_fflush_r>
 8011fb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011fb4:	4606      	mov	r6, r0
 8011fb6:	b13b      	cbz	r3, 8011fc8 <_fclose_r+0x38>
 8011fb8:	4628      	mov	r0, r5
 8011fba:	69e1      	ldr	r1, [r4, #28]
 8011fbc:	4798      	blx	r3
 8011fbe:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 8011fc2:	bf28      	it	cs
 8011fc4:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
 8011fc8:	89a3      	ldrh	r3, [r4, #12]
 8011fca:	061b      	lsls	r3, r3, #24
 8011fcc:	d41c      	bmi.n	8012008 <_fclose_r+0x78>
 8011fce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011fd0:	b141      	cbz	r1, 8011fe4 <_fclose_r+0x54>
 8011fd2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8011fd6:	4299      	cmp	r1, r3
 8011fd8:	d002      	beq.n	8011fe0 <_fclose_r+0x50>
 8011fda:	4628      	mov	r0, r5
 8011fdc:	f000 f9c2 	bl	8012364 <_free_r>
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8011fe4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011fe6:	b121      	cbz	r1, 8011ff2 <_fclose_r+0x62>
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f000 f9bb 	bl	8012364 <_free_r>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	6463      	str	r3, [r4, #68]	; 0x44
 8011ff2:	f7fb fd0b 	bl	800da0c <__sfp_lock_acquire>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	81a3      	strh	r3, [r4, #12]
 8011ffa:	f7fb fd09 	bl	800da10 <__sfp_lock_release>
 8011ffe:	4630      	mov	r0, r6
 8012000:	bd70      	pop	{r4, r5, r6, pc}
 8012002:	f7fb fc41 	bl	800d888 <__sinit>
 8012006:	e7cb      	b.n	8011fa0 <_fclose_r+0x10>
 8012008:	4628      	mov	r0, r5
 801200a:	6921      	ldr	r1, [r4, #16]
 801200c:	f000 f9aa 	bl	8012364 <_free_r>
 8012010:	e7dd      	b.n	8011fce <_fclose_r+0x3e>
 8012012:	bf00      	nop

08012014 <fclose>:
 8012014:	f240 5388 	movw	r3, #1416	; 0x588
 8012018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801201c:	4601      	mov	r1, r0
 801201e:	6818      	ldr	r0, [r3, #0]
 8012020:	f7ff bfb6 	b.w	8011f90 <_fclose_r>

08012024 <__sflush_r>:
 8012024:	898b      	ldrh	r3, [r1, #12]
 8012026:	b29a      	uxth	r2, r3
 8012028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801202c:	460d      	mov	r5, r1
 801202e:	0711      	lsls	r1, r2, #28
 8012030:	4680      	mov	r8, r0
 8012032:	d43c      	bmi.n	80120ae <__sflush_r+0x8a>
 8012034:	686a      	ldr	r2, [r5, #4]
 8012036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801203a:	2a00      	cmp	r2, #0
 801203c:	81ab      	strh	r3, [r5, #12]
 801203e:	dd5a      	ble.n	80120f6 <__sflush_r+0xd2>
 8012040:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8012042:	2c00      	cmp	r4, #0
 8012044:	d04c      	beq.n	80120e0 <__sflush_r+0xbc>
 8012046:	b29b      	uxth	r3, r3
 8012048:	f403 5680 	and.w	r6, r3, #4096	; 0x1000
 801204c:	2200      	movs	r2, #0
 801204e:	b2b6      	uxth	r6, r6
 8012050:	f8d8 7000 	ldr.w	r7, [r8]
 8012054:	f8c8 2000 	str.w	r2, [r8]
 8012058:	2e00      	cmp	r6, #0
 801205a:	d050      	beq.n	80120fe <__sflush_r+0xda>
 801205c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801205e:	075e      	lsls	r6, r3, #29
 8012060:	d505      	bpl.n	801206e <__sflush_r+0x4a>
 8012062:	6869      	ldr	r1, [r5, #4]
 8012064:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012066:	1a52      	subs	r2, r2, r1
 8012068:	b10b      	cbz	r3, 801206e <__sflush_r+0x4a>
 801206a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801206c:	1ad2      	subs	r2, r2, r3
 801206e:	4640      	mov	r0, r8
 8012070:	69e9      	ldr	r1, [r5, #28]
 8012072:	2300      	movs	r3, #0
 8012074:	47a0      	blx	r4
 8012076:	1c44      	adds	r4, r0, #1
 8012078:	d04c      	beq.n	8012114 <__sflush_r+0xf0>
 801207a:	89ab      	ldrh	r3, [r5, #12]
 801207c:	692a      	ldr	r2, [r5, #16]
 801207e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012082:	b29b      	uxth	r3, r3
 8012084:	2100      	movs	r1, #0
 8012086:	602a      	str	r2, [r5, #0]
 8012088:	04da      	lsls	r2, r3, #19
 801208a:	81ab      	strh	r3, [r5, #12]
 801208c:	6069      	str	r1, [r5, #4]
 801208e:	d44e      	bmi.n	801212e <__sflush_r+0x10a>
 8012090:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8012092:	f8c8 7000 	str.w	r7, [r8]
 8012096:	b319      	cbz	r1, 80120e0 <__sflush_r+0xbc>
 8012098:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801209c:	4299      	cmp	r1, r3
 801209e:	d002      	beq.n	80120a6 <__sflush_r+0x82>
 80120a0:	4640      	mov	r0, r8
 80120a2:	f000 f95f 	bl	8012364 <_free_r>
 80120a6:	2000      	movs	r0, #0
 80120a8:	6328      	str	r0, [r5, #48]	; 0x30
 80120aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ae:	692e      	ldr	r6, [r5, #16]
 80120b0:	b1b6      	cbz	r6, 80120e0 <__sflush_r+0xbc>
 80120b2:	0791      	lsls	r1, r2, #30
 80120b4:	682c      	ldr	r4, [r5, #0]
 80120b6:	bf08      	it	eq
 80120b8:	696b      	ldreq	r3, [r5, #20]
 80120ba:	602e      	str	r6, [r5, #0]
 80120bc:	bf18      	it	ne
 80120be:	2300      	movne	r3, #0
 80120c0:	1ba4      	subs	r4, r4, r6
 80120c2:	60ab      	str	r3, [r5, #8]
 80120c4:	e00a      	b.n	80120dc <__sflush_r+0xb8>
 80120c6:	4632      	mov	r2, r6
 80120c8:	4623      	mov	r3, r4
 80120ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80120cc:	69e9      	ldr	r1, [r5, #28]
 80120ce:	4640      	mov	r0, r8
 80120d0:	47b8      	blx	r7
 80120d2:	2800      	cmp	r0, #0
 80120d4:	ebc0 0404 	rsb	r4, r0, r4
 80120d8:	4406      	add	r6, r0
 80120da:	dd04      	ble.n	80120e6 <__sflush_r+0xc2>
 80120dc:	2c00      	cmp	r4, #0
 80120de:	dcf2      	bgt.n	80120c6 <__sflush_r+0xa2>
 80120e0:	2000      	movs	r0, #0
 80120e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e6:	89ab      	ldrh	r3, [r5, #12]
 80120e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120ec:	81ab      	strh	r3, [r5, #12]
 80120ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80120f8:	2a00      	cmp	r2, #0
 80120fa:	dca1      	bgt.n	8012040 <__sflush_r+0x1c>
 80120fc:	e7f0      	b.n	80120e0 <__sflush_r+0xbc>
 80120fe:	4632      	mov	r2, r6
 8012100:	2301      	movs	r3, #1
 8012102:	4640      	mov	r0, r8
 8012104:	69e9      	ldr	r1, [r5, #28]
 8012106:	47a0      	blx	r4
 8012108:	1c43      	adds	r3, r0, #1
 801210a:	4602      	mov	r2, r0
 801210c:	d01e      	beq.n	801214c <__sflush_r+0x128>
 801210e:	89ab      	ldrh	r3, [r5, #12]
 8012110:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8012112:	e7a4      	b.n	801205e <__sflush_r+0x3a>
 8012114:	f8d8 3000 	ldr.w	r3, [r8]
 8012118:	b95b      	cbnz	r3, 8012132 <__sflush_r+0x10e>
 801211a:	89a9      	ldrh	r1, [r5, #12]
 801211c:	606b      	str	r3, [r5, #4]
 801211e:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8012122:	b29b      	uxth	r3, r3
 8012124:	692a      	ldr	r2, [r5, #16]
 8012126:	81ab      	strh	r3, [r5, #12]
 8012128:	04db      	lsls	r3, r3, #19
 801212a:	602a      	str	r2, [r5, #0]
 801212c:	d5b0      	bpl.n	8012090 <__sflush_r+0x6c>
 801212e:	6528      	str	r0, [r5, #80]	; 0x50
 8012130:	e7ae      	b.n	8012090 <__sflush_r+0x6c>
 8012132:	2b1d      	cmp	r3, #29
 8012134:	d001      	beq.n	801213a <__sflush_r+0x116>
 8012136:	2b16      	cmp	r3, #22
 8012138:	d11b      	bne.n	8012172 <__sflush_r+0x14e>
 801213a:	89a9      	ldrh	r1, [r5, #12]
 801213c:	692b      	ldr	r3, [r5, #16]
 801213e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8012142:	2200      	movs	r2, #0
 8012144:	81a9      	strh	r1, [r5, #12]
 8012146:	602b      	str	r3, [r5, #0]
 8012148:	606a      	str	r2, [r5, #4]
 801214a:	e7a1      	b.n	8012090 <__sflush_r+0x6c>
 801214c:	f8d8 3000 	ldr.w	r3, [r8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d0dc      	beq.n	801210e <__sflush_r+0xea>
 8012154:	2b1d      	cmp	r3, #29
 8012156:	bf18      	it	ne
 8012158:	2b16      	cmpne	r3, #22
 801215a:	bf15      	itete	ne
 801215c:	89ab      	ldrhne	r3, [r5, #12]
 801215e:	f8c8 7000 	streq.w	r7, [r8]
 8012162:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8012166:	4630      	moveq	r0, r6
 8012168:	bf1c      	itt	ne
 801216a:	81ab      	strhne	r3, [r5, #12]
 801216c:	4610      	movne	r0, r2
 801216e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012172:	89ab      	ldrh	r3, [r5, #12]
 8012174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012178:	81ab      	strh	r3, [r5, #12]
 801217a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801217e:	bf00      	nop

08012180 <_fflush_r>:
 8012180:	b510      	push	{r4, lr}
 8012182:	4604      	mov	r4, r0
 8012184:	b082      	sub	sp, #8
 8012186:	b108      	cbz	r0, 801218c <_fflush_r+0xc>
 8012188:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801218a:	b153      	cbz	r3, 80121a2 <_fflush_r+0x22>
 801218c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8012190:	b908      	cbnz	r0, 8012196 <_fflush_r+0x16>
 8012192:	b002      	add	sp, #8
 8012194:	bd10      	pop	{r4, pc}
 8012196:	4620      	mov	r0, r4
 8012198:	b002      	add	sp, #8
 801219a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801219e:	f7ff bf41 	b.w	8012024 <__sflush_r>
 80121a2:	9101      	str	r1, [sp, #4]
 80121a4:	f7fb fb70 	bl	800d888 <__sinit>
 80121a8:	9901      	ldr	r1, [sp, #4]
 80121aa:	e7ef      	b.n	801218c <_fflush_r+0xc>

080121ac <fflush>:
 80121ac:	b138      	cbz	r0, 80121be <fflush+0x12>
 80121ae:	f240 5388 	movw	r3, #1416	; 0x588
 80121b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80121b6:	4601      	mov	r1, r0
 80121b8:	6818      	ldr	r0, [r3, #0]
 80121ba:	f7ff bfe1 	b.w	8012180 <_fflush_r>
 80121be:	f244 433c 	movw	r3, #17468	; 0x443c
 80121c2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80121c6:	f242 1181 	movw	r1, #8577	; 0x2181
 80121ca:	6818      	ldr	r0, [r3, #0]
 80121cc:	f6c0 0101 	movt	r1, #2049	; 0x801
 80121d0:	f7fb bcae 	b.w	800db30 <_fwalk_reent>

080121d4 <_fputwc_r>:
 80121d4:	8993      	ldrh	r3, [r2, #12]
 80121d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121da:	460f      	mov	r7, r1
 80121dc:	0499      	lsls	r1, r3, #18
 80121de:	4614      	mov	r4, r2
 80121e0:	bf5f      	itttt	pl
 80121e2:	6e52      	ldrpl	r2, [r2, #100]	; 0x64
 80121e4:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80121e8:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80121ec:	81a3      	strhpl	r3, [r4, #12]
 80121ee:	bf58      	it	pl
 80121f0:	6662      	strpl	r2, [r4, #100]	; 0x64
 80121f2:	b082      	sub	sp, #8
 80121f4:	4680      	mov	r8, r0
 80121f6:	f000 fb3d 	bl	8012874 <__locale_mb_cur_max>
 80121fa:	2801      	cmp	r0, #1
 80121fc:	d03d      	beq.n	801227a <_fputwc_r+0xa6>
 80121fe:	463a      	mov	r2, r7
 8012200:	4640      	mov	r0, r8
 8012202:	a901      	add	r1, sp, #4
 8012204:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8012208:	f001 f9b2 	bl	8013570 <_wcrtomb_r>
 801220c:	1c42      	adds	r2, r0, #1
 801220e:	4606      	mov	r6, r0
 8012210:	d02c      	beq.n	801226c <_fputwc_r+0x98>
 8012212:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012216:	2800      	cmp	r0, #0
 8012218:	d037      	beq.n	801228a <_fputwc_r+0xb6>
 801221a:	2500      	movs	r5, #0
 801221c:	e009      	b.n	8012232 <_fputwc_r+0x5e>
 801221e:	6823      	ldr	r3, [r4, #0]
 8012220:	7019      	strb	r1, [r3, #0]
 8012222:	6823      	ldr	r3, [r4, #0]
 8012224:	3301      	adds	r3, #1
 8012226:	6023      	str	r3, [r4, #0]
 8012228:	3501      	adds	r5, #1
 801222a:	42b5      	cmp	r5, r6
 801222c:	d22d      	bcs.n	801228a <_fputwc_r+0xb6>
 801222e:	ab01      	add	r3, sp, #4
 8012230:	5ce9      	ldrb	r1, [r5, r3]
 8012232:	68a3      	ldr	r3, [r4, #8]
 8012234:	3b01      	subs	r3, #1
 8012236:	2b00      	cmp	r3, #0
 8012238:	60a3      	str	r3, [r4, #8]
 801223a:	daf0      	bge.n	801221e <_fputwc_r+0x4a>
 801223c:	69a2      	ldr	r2, [r4, #24]
 801223e:	4293      	cmp	r3, r2
 8012240:	db05      	blt.n	801224e <_fputwc_r+0x7a>
 8012242:	6823      	ldr	r3, [r4, #0]
 8012244:	7019      	strb	r1, [r3, #0]
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	7819      	ldrb	r1, [r3, #0]
 801224a:	290a      	cmp	r1, #10
 801224c:	d1ea      	bne.n	8012224 <_fputwc_r+0x50>
 801224e:	4640      	mov	r0, r8
 8012250:	4622      	mov	r2, r4
 8012252:	f001 f931 	bl	80134b8 <__swbuf_r>
 8012256:	f1b0 33ff 	subs.w	r3, r0, #4294967295	; 0xffffffff
 801225a:	4258      	negs	r0, r3
 801225c:	4158      	adcs	r0, r3
 801225e:	2800      	cmp	r0, #0
 8012260:	d0e2      	beq.n	8012228 <_fputwc_r+0x54>
 8012262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012266:	b002      	add	sp, #8
 8012268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801226c:	89a3      	ldrh	r3, [r4, #12]
 801226e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012272:	81a3      	strh	r3, [r4, #12]
 8012274:	b002      	add	sp, #8
 8012276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801227a:	1e7b      	subs	r3, r7, #1
 801227c:	2bfe      	cmp	r3, #254	; 0xfe
 801227e:	d8be      	bhi.n	80121fe <_fputwc_r+0x2a>
 8012280:	b2f9      	uxtb	r1, r7
 8012282:	4606      	mov	r6, r0
 8012284:	f88d 1004 	strb.w	r1, [sp, #4]
 8012288:	e7c7      	b.n	801221a <_fputwc_r+0x46>
 801228a:	4638      	mov	r0, r7
 801228c:	b002      	add	sp, #8
 801228e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012292:	bf00      	nop

08012294 <fputwc>:
 8012294:	f240 5388 	movw	r3, #1416	; 0x588
 8012298:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	681c      	ldr	r4, [r3, #0]
 80122a0:	4606      	mov	r6, r0
 80122a2:	460d      	mov	r5, r1
 80122a4:	b124      	cbz	r4, 80122b0 <fputwc+0x1c>
 80122a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80122a8:	b913      	cbnz	r3, 80122b0 <fputwc+0x1c>
 80122aa:	4620      	mov	r0, r4
 80122ac:	f7fb faec 	bl	800d888 <__sinit>
 80122b0:	4620      	mov	r0, r4
 80122b2:	4631      	mov	r1, r6
 80122b4:	462a      	mov	r2, r5
 80122b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122ba:	f7ff bf8b 	b.w	80121d4 <_fputwc_r>
 80122be:	bf00      	nop

080122c0 <_malloc_trim_r>:
 80122c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122c2:	f240 548c 	movw	r4, #1420	; 0x58c
 80122c6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80122ca:	460f      	mov	r7, r1
 80122cc:	4605      	mov	r5, r0
 80122ce:	f7fc f81d 	bl	800e30c <__malloc_lock>
 80122d2:	68a3      	ldr	r3, [r4, #8]
 80122d4:	685e      	ldr	r6, [r3, #4]
 80122d6:	f026 0603 	bic.w	r6, r6, #3
 80122da:	1bf7      	subs	r7, r6, r7
 80122dc:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 80122e0:	0b3f      	lsrs	r7, r7, #12
 80122e2:	3f01      	subs	r7, #1
 80122e4:	033f      	lsls	r7, r7, #12
 80122e6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80122ea:	db07      	blt.n	80122fc <_malloc_trim_r+0x3c>
 80122ec:	4628      	mov	r0, r5
 80122ee:	2100      	movs	r1, #0
 80122f0:	f7f5 fe60 	bl	8007fb4 <_sbrk_r>
 80122f4:	68a3      	ldr	r3, [r4, #8]
 80122f6:	4433      	add	r3, r6
 80122f8:	4298      	cmp	r0, r3
 80122fa:	d004      	beq.n	8012306 <_malloc_trim_r+0x46>
 80122fc:	4628      	mov	r0, r5
 80122fe:	f7fc f807 	bl	800e310 <__malloc_unlock>
 8012302:	2000      	movs	r0, #0
 8012304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012306:	4628      	mov	r0, r5
 8012308:	4279      	negs	r1, r7
 801230a:	f7f5 fe53 	bl	8007fb4 <_sbrk_r>
 801230e:	3001      	adds	r0, #1
 8012310:	d010      	beq.n	8012334 <_malloc_trim_r+0x74>
 8012312:	f640 3318 	movw	r3, #2840	; 0xb18
 8012316:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801231a:	68a1      	ldr	r1, [r4, #8]
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	1bf6      	subs	r6, r6, r7
 8012320:	f046 0601 	orr.w	r6, r6, #1
 8012324:	4628      	mov	r0, r5
 8012326:	1bd7      	subs	r7, r2, r7
 8012328:	604e      	str	r6, [r1, #4]
 801232a:	601f      	str	r7, [r3, #0]
 801232c:	f7fb fff0 	bl	800e310 <__malloc_unlock>
 8012330:	2001      	movs	r0, #1
 8012332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012334:	4628      	mov	r0, r5
 8012336:	2100      	movs	r1, #0
 8012338:	f7f5 fe3c 	bl	8007fb4 <_sbrk_r>
 801233c:	68a3      	ldr	r3, [r4, #8]
 801233e:	1ac2      	subs	r2, r0, r3
 8012340:	2a0f      	cmp	r2, #15
 8012342:	dddb      	ble.n	80122fc <_malloc_trim_r+0x3c>
 8012344:	f640 1498 	movw	r4, #2456	; 0x998
 8012348:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801234c:	f640 3118 	movw	r1, #2840	; 0xb18
 8012350:	6824      	ldr	r4, [r4, #0]
 8012352:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8012356:	f042 0201 	orr.w	r2, r2, #1
 801235a:	1b00      	subs	r0, r0, r4
 801235c:	605a      	str	r2, [r3, #4]
 801235e:	6008      	str	r0, [r1, #0]
 8012360:	e7cc      	b.n	80122fc <_malloc_trim_r+0x3c>
 8012362:	bf00      	nop

08012364 <_free_r>:
 8012364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012368:	460e      	mov	r6, r1
 801236a:	4681      	mov	r9, r0
 801236c:	2900      	cmp	r1, #0
 801236e:	d060      	beq.n	8012432 <_free_r+0xce>
 8012370:	f7fb ffcc 	bl	800e30c <__malloc_lock>
 8012374:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8012378:	f1a6 0408 	sub.w	r4, r6, #8
 801237c:	f021 0301 	bic.w	r3, r1, #1
 8012380:	18e2      	adds	r2, r4, r3
 8012382:	f240 558c 	movw	r5, #1420	; 0x58c
 8012386:	6857      	ldr	r7, [r2, #4]
 8012388:	f2c2 0500 	movt	r5, #8192	; 0x2000
 801238c:	f027 0003 	bic.w	r0, r7, #3
 8012390:	68af      	ldr	r7, [r5, #8]
 8012392:	4297      	cmp	r7, r2
 8012394:	d063      	beq.n	801245e <_free_r+0xfa>
 8012396:	f011 0c01 	ands.w	ip, r1, #1
 801239a:	6050      	str	r0, [r2, #4]
 801239c:	bf18      	it	ne
 801239e:	2100      	movne	r1, #0
 80123a0:	d111      	bne.n	80123c6 <_free_r+0x62>
 80123a2:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80123a6:	1a64      	subs	r4, r4, r1
 80123a8:	f105 0808 	add.w	r8, r5, #8
 80123ac:	68a6      	ldr	r6, [r4, #8]
 80123ae:	4546      	cmp	r6, r8
 80123b0:	bf18      	it	ne
 80123b2:	f8d4 800c 	ldrne.w	r8, [r4, #12]
 80123b6:	440b      	add	r3, r1
 80123b8:	bf1d      	ittte	ne
 80123ba:	f8c6 800c 	strne.w	r8, [r6, #12]
 80123be:	4661      	movne	r1, ip
 80123c0:	f8c8 6008 	strne.w	r6, [r8, #8]
 80123c4:	2101      	moveq	r1, #1
 80123c6:	1816      	adds	r6, r2, r0
 80123c8:	6876      	ldr	r6, [r6, #4]
 80123ca:	07f6      	lsls	r6, r6, #31
 80123cc:	d408      	bmi.n	80123e0 <_free_r+0x7c>
 80123ce:	4403      	add	r3, r0
 80123d0:	6890      	ldr	r0, [r2, #8]
 80123d2:	b911      	cbnz	r1, 80123da <_free_r+0x76>
 80123d4:	4e49      	ldr	r6, [pc, #292]	; (80124fc <_free_r+0x198>)
 80123d6:	42b0      	cmp	r0, r6
 80123d8:	d060      	beq.n	801249c <_free_r+0x138>
 80123da:	68d2      	ldr	r2, [r2, #12]
 80123dc:	60c2      	str	r2, [r0, #12]
 80123de:	6090      	str	r0, [r2, #8]
 80123e0:	f043 0201 	orr.w	r2, r3, #1
 80123e4:	6062      	str	r2, [r4, #4]
 80123e6:	50e3      	str	r3, [r4, r3]
 80123e8:	b9f1      	cbnz	r1, 8012428 <_free_r+0xc4>
 80123ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80123ee:	d322      	bcc.n	8012436 <_free_r+0xd2>
 80123f0:	0a5a      	lsrs	r2, r3, #9
 80123f2:	2a04      	cmp	r2, #4
 80123f4:	d85b      	bhi.n	80124ae <_free_r+0x14a>
 80123f6:	0998      	lsrs	r0, r3, #6
 80123f8:	3038      	adds	r0, #56	; 0x38
 80123fa:	0041      	lsls	r1, r0, #1
 80123fc:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8012400:	f240 518c 	movw	r1, #1420	; 0x58c
 8012404:	68aa      	ldr	r2, [r5, #8]
 8012406:	42aa      	cmp	r2, r5
 8012408:	f2c2 0100 	movt	r1, #8192	; 0x2000
 801240c:	d05b      	beq.n	80124c6 <_free_r+0x162>
 801240e:	6851      	ldr	r1, [r2, #4]
 8012410:	f021 0103 	bic.w	r1, r1, #3
 8012414:	428b      	cmp	r3, r1
 8012416:	d202      	bcs.n	801241e <_free_r+0xba>
 8012418:	6892      	ldr	r2, [r2, #8]
 801241a:	4295      	cmp	r5, r2
 801241c:	d1f7      	bne.n	801240e <_free_r+0xaa>
 801241e:	68d3      	ldr	r3, [r2, #12]
 8012420:	60e3      	str	r3, [r4, #12]
 8012422:	60a2      	str	r2, [r4, #8]
 8012424:	609c      	str	r4, [r3, #8]
 8012426:	60d4      	str	r4, [r2, #12]
 8012428:	4648      	mov	r0, r9
 801242a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801242e:	f7fb bf6f 	b.w	800e310 <__malloc_unlock>
 8012432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012436:	08db      	lsrs	r3, r3, #3
 8012438:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801243c:	6868      	ldr	r0, [r5, #4]
 801243e:	6891      	ldr	r1, [r2, #8]
 8012440:	60e2      	str	r2, [r4, #12]
 8012442:	2601      	movs	r6, #1
 8012444:	109b      	asrs	r3, r3, #2
 8012446:	fa06 f303 	lsl.w	r3, r6, r3
 801244a:	4318      	orrs	r0, r3
 801244c:	60a1      	str	r1, [r4, #8]
 801244e:	6068      	str	r0, [r5, #4]
 8012450:	6094      	str	r4, [r2, #8]
 8012452:	4648      	mov	r0, r9
 8012454:	60cc      	str	r4, [r1, #12]
 8012456:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801245a:	f7fb bf59 	b.w	800e310 <__malloc_unlock>
 801245e:	07cf      	lsls	r7, r1, #31
 8012460:	4418      	add	r0, r3
 8012462:	d407      	bmi.n	8012474 <_free_r+0x110>
 8012464:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8012468:	1ae4      	subs	r4, r4, r3
 801246a:	4418      	add	r0, r3
 801246c:	68a2      	ldr	r2, [r4, #8]
 801246e:	68e3      	ldr	r3, [r4, #12]
 8012470:	60d3      	str	r3, [r2, #12]
 8012472:	609a      	str	r2, [r3, #8]
 8012474:	f640 1294 	movw	r2, #2452	; 0x994
 8012478:	f2c2 0200 	movt	r2, #8192	; 0x2000
 801247c:	f040 0101 	orr.w	r1, r0, #1
 8012480:	6813      	ldr	r3, [r2, #0]
 8012482:	6061      	str	r1, [r4, #4]
 8012484:	4298      	cmp	r0, r3
 8012486:	60ac      	str	r4, [r5, #8]
 8012488:	d3ce      	bcc.n	8012428 <_free_r+0xc4>
 801248a:	f640 3314 	movw	r3, #2836	; 0xb14
 801248e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8012492:	4648      	mov	r0, r9
 8012494:	6819      	ldr	r1, [r3, #0]
 8012496:	f7ff ff13 	bl	80122c0 <_malloc_trim_r>
 801249a:	e7c5      	b.n	8012428 <_free_r+0xc4>
 801249c:	f043 0201 	orr.w	r2, r3, #1
 80124a0:	616c      	str	r4, [r5, #20]
 80124a2:	612c      	str	r4, [r5, #16]
 80124a4:	60e0      	str	r0, [r4, #12]
 80124a6:	60a0      	str	r0, [r4, #8]
 80124a8:	6062      	str	r2, [r4, #4]
 80124aa:	50e3      	str	r3, [r4, r3]
 80124ac:	e7bc      	b.n	8012428 <_free_r+0xc4>
 80124ae:	2a14      	cmp	r2, #20
 80124b0:	bf9c      	itt	ls
 80124b2:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 80124b6:	0041      	lslls	r1, r0, #1
 80124b8:	d9a0      	bls.n	80123fc <_free_r+0x98>
 80124ba:	2a54      	cmp	r2, #84	; 0x54
 80124bc:	d80c      	bhi.n	80124d8 <_free_r+0x174>
 80124be:	0b18      	lsrs	r0, r3, #12
 80124c0:	306e      	adds	r0, #110	; 0x6e
 80124c2:	0041      	lsls	r1, r0, #1
 80124c4:	e79a      	b.n	80123fc <_free_r+0x98>
 80124c6:	684b      	ldr	r3, [r1, #4]
 80124c8:	1080      	asrs	r0, r0, #2
 80124ca:	2501      	movs	r5, #1
 80124cc:	fa05 f000 	lsl.w	r0, r5, r0
 80124d0:	4303      	orrs	r3, r0
 80124d2:	604b      	str	r3, [r1, #4]
 80124d4:	4613      	mov	r3, r2
 80124d6:	e7a3      	b.n	8012420 <_free_r+0xbc>
 80124d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80124dc:	d803      	bhi.n	80124e6 <_free_r+0x182>
 80124de:	0bd8      	lsrs	r0, r3, #15
 80124e0:	3077      	adds	r0, #119	; 0x77
 80124e2:	0041      	lsls	r1, r0, #1
 80124e4:	e78a      	b.n	80123fc <_free_r+0x98>
 80124e6:	f240 5154 	movw	r1, #1364	; 0x554
 80124ea:	428a      	cmp	r2, r1
 80124ec:	bf9d      	ittte	ls
 80124ee:	0c98      	lsrls	r0, r3, #18
 80124f0:	307c      	addls	r0, #124	; 0x7c
 80124f2:	0041      	lslls	r1, r0, #1
 80124f4:	21fc      	movhi	r1, #252	; 0xfc
 80124f6:	bf88      	it	hi
 80124f8:	207e      	movhi	r0, #126	; 0x7e
 80124fa:	e77f      	b.n	80123fc <_free_r+0x98>
 80124fc:	20000594 	.word	0x20000594

08012500 <__sfvwrite_r>:
 8012500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012504:	6893      	ldr	r3, [r2, #8]
 8012506:	b083      	sub	sp, #12
 8012508:	4616      	mov	r6, r2
 801250a:	4681      	mov	r9, r0
 801250c:	460c      	mov	r4, r1
 801250e:	b33b      	cbz	r3, 8012560 <__sfvwrite_r+0x60>
 8012510:	898b      	ldrh	r3, [r1, #12]
 8012512:	0719      	lsls	r1, r3, #28
 8012514:	d528      	bpl.n	8012568 <__sfvwrite_r+0x68>
 8012516:	6922      	ldr	r2, [r4, #16]
 8012518:	b332      	cbz	r2, 8012568 <__sfvwrite_r+0x68>
 801251a:	f003 0202 	and.w	r2, r3, #2
 801251e:	b292      	uxth	r2, r2
 8012520:	6835      	ldr	r5, [r6, #0]
 8012522:	2a00      	cmp	r2, #0
 8012524:	d02e      	beq.n	8012584 <__sfvwrite_r+0x84>
 8012526:	f04f 0a00 	mov.w	sl, #0
 801252a:	f44f 4b7c 	mov.w	fp, #64512	; 0xfc00
 801252e:	46d0      	mov	r8, sl
 8012530:	f6c7 7bff 	movt	fp, #32767	; 0x7fff
 8012534:	45d8      	cmp	r8, fp
 8012536:	bf34      	ite	cc
 8012538:	4643      	movcc	r3, r8
 801253a:	465b      	movcs	r3, fp
 801253c:	4652      	mov	r2, sl
 801253e:	4648      	mov	r0, r9
 8012540:	f1b8 0f00 	cmp.w	r8, #0
 8012544:	d04f      	beq.n	80125e6 <__sfvwrite_r+0xe6>
 8012546:	69e1      	ldr	r1, [r4, #28]
 8012548:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801254a:	47b8      	blx	r7
 801254c:	2800      	cmp	r0, #0
 801254e:	dd56      	ble.n	80125fe <__sfvwrite_r+0xfe>
 8012550:	68b3      	ldr	r3, [r6, #8]
 8012552:	1a1b      	subs	r3, r3, r0
 8012554:	4482      	add	sl, r0
 8012556:	ebc0 0808 	rsb	r8, r0, r8
 801255a:	60b3      	str	r3, [r6, #8]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d1e9      	bne.n	8012534 <__sfvwrite_r+0x34>
 8012560:	2000      	movs	r0, #0
 8012562:	b003      	add	sp, #12
 8012564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012568:	4648      	mov	r0, r9
 801256a:	4621      	mov	r1, r4
 801256c:	f7fe fc5a 	bl	8010e24 <__swsetup_r>
 8012570:	2800      	cmp	r0, #0
 8012572:	f040 8147 	bne.w	8012804 <__sfvwrite_r+0x304>
 8012576:	89a3      	ldrh	r3, [r4, #12]
 8012578:	6835      	ldr	r5, [r6, #0]
 801257a:	f003 0202 	and.w	r2, r3, #2
 801257e:	b292      	uxth	r2, r2
 8012580:	2a00      	cmp	r2, #0
 8012582:	d1d0      	bne.n	8012526 <__sfvwrite_r+0x26>
 8012584:	f013 0a01 	ands.w	sl, r3, #1
 8012588:	d142      	bne.n	8012610 <__sfvwrite_r+0x110>
 801258a:	46d0      	mov	r8, sl
 801258c:	f1b8 0f00 	cmp.w	r8, #0
 8012590:	d023      	beq.n	80125da <__sfvwrite_r+0xda>
 8012592:	059a      	lsls	r2, r3, #22
 8012594:	68a7      	ldr	r7, [r4, #8]
 8012596:	d576      	bpl.n	8012686 <__sfvwrite_r+0x186>
 8012598:	45b8      	cmp	r8, r7
 801259a:	f0c0 80a4 	bcc.w	80126e6 <__sfvwrite_r+0x1e6>
 801259e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80125a2:	f040 80b2 	bne.w	801270a <__sfvwrite_r+0x20a>
 80125a6:	6820      	ldr	r0, [r4, #0]
 80125a8:	46bb      	mov	fp, r7
 80125aa:	4651      	mov	r1, sl
 80125ac:	465a      	mov	r2, fp
 80125ae:	f000 fa0d 	bl	80129cc <memmove>
 80125b2:	68a2      	ldr	r2, [r4, #8]
 80125b4:	6821      	ldr	r1, [r4, #0]
 80125b6:	1bd2      	subs	r2, r2, r7
 80125b8:	eb01 030b 	add.w	r3, r1, fp
 80125bc:	60a2      	str	r2, [r4, #8]
 80125be:	6023      	str	r3, [r4, #0]
 80125c0:	4642      	mov	r2, r8
 80125c2:	68b3      	ldr	r3, [r6, #8]
 80125c4:	1a9b      	subs	r3, r3, r2
 80125c6:	4492      	add	sl, r2
 80125c8:	ebc2 0808 	rsb	r8, r2, r8
 80125cc:	60b3      	str	r3, [r6, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d0c6      	beq.n	8012560 <__sfvwrite_r+0x60>
 80125d2:	89a3      	ldrh	r3, [r4, #12]
 80125d4:	f1b8 0f00 	cmp.w	r8, #0
 80125d8:	d1db      	bne.n	8012592 <__sfvwrite_r+0x92>
 80125da:	f8d5 a000 	ldr.w	sl, [r5]
 80125de:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80125e2:	3508      	adds	r5, #8
 80125e4:	e7d2      	b.n	801258c <__sfvwrite_r+0x8c>
 80125e6:	f8d5 a000 	ldr.w	sl, [r5]
 80125ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80125ee:	3508      	adds	r5, #8
 80125f0:	e7a0      	b.n	8012534 <__sfvwrite_r+0x34>
 80125f2:	4648      	mov	r0, r9
 80125f4:	4621      	mov	r1, r4
 80125f6:	f7ff fdc3 	bl	8012180 <_fflush_r>
 80125fa:	2800      	cmp	r0, #0
 80125fc:	d059      	beq.n	80126b2 <__sfvwrite_r+0x1b2>
 80125fe:	89a3      	ldrh	r3, [r4, #12]
 8012600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012608:	81a3      	strh	r3, [r4, #12]
 801260a:	b003      	add	sp, #12
 801260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012610:	4692      	mov	sl, r2
 8012612:	9201      	str	r2, [sp, #4]
 8012614:	4693      	mov	fp, r2
 8012616:	4690      	mov	r8, r2
 8012618:	f1b8 0f00 	cmp.w	r8, #0
 801261c:	d02b      	beq.n	8012676 <__sfvwrite_r+0x176>
 801261e:	9f01      	ldr	r7, [sp, #4]
 8012620:	2f00      	cmp	r7, #0
 8012622:	d064      	beq.n	80126ee <__sfvwrite_r+0x1ee>
 8012624:	6820      	ldr	r0, [r4, #0]
 8012626:	6921      	ldr	r1, [r4, #16]
 8012628:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801262c:	6962      	ldr	r2, [r4, #20]
 801262e:	45c2      	cmp	sl, r8
 8012630:	bf34      	ite	cc
 8012632:	4653      	movcc	r3, sl
 8012634:	4643      	movcs	r3, r8
 8012636:	4288      	cmp	r0, r1
 8012638:	461f      	mov	r7, r3
 801263a:	d903      	bls.n	8012644 <__sfvwrite_r+0x144>
 801263c:	4494      	add	ip, r2
 801263e:	4563      	cmp	r3, ip
 8012640:	f300 80ae 	bgt.w	80127a0 <__sfvwrite_r+0x2a0>
 8012644:	4293      	cmp	r3, r2
 8012646:	db36      	blt.n	80126b6 <__sfvwrite_r+0x1b6>
 8012648:	4613      	mov	r3, r2
 801264a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801264c:	69e1      	ldr	r1, [r4, #28]
 801264e:	4648      	mov	r0, r9
 8012650:	465a      	mov	r2, fp
 8012652:	47b8      	blx	r7
 8012654:	1e07      	subs	r7, r0, #0
 8012656:	ddd2      	ble.n	80125fe <__sfvwrite_r+0xfe>
 8012658:	ebba 0a07 	subs.w	sl, sl, r7
 801265c:	d03a      	beq.n	80126d4 <__sfvwrite_r+0x1d4>
 801265e:	68b3      	ldr	r3, [r6, #8]
 8012660:	1bdb      	subs	r3, r3, r7
 8012662:	44bb      	add	fp, r7
 8012664:	ebc7 0808 	rsb	r8, r7, r8
 8012668:	60b3      	str	r3, [r6, #8]
 801266a:	2b00      	cmp	r3, #0
 801266c:	f43f af78 	beq.w	8012560 <__sfvwrite_r+0x60>
 8012670:	f1b8 0f00 	cmp.w	r8, #0
 8012674:	d1d3      	bne.n	801261e <__sfvwrite_r+0x11e>
 8012676:	2700      	movs	r7, #0
 8012678:	f8d5 b000 	ldr.w	fp, [r5]
 801267c:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8012680:	9701      	str	r7, [sp, #4]
 8012682:	3508      	adds	r5, #8
 8012684:	e7c8      	b.n	8012618 <__sfvwrite_r+0x118>
 8012686:	6820      	ldr	r0, [r4, #0]
 8012688:	6923      	ldr	r3, [r4, #16]
 801268a:	4298      	cmp	r0, r3
 801268c:	d802      	bhi.n	8012694 <__sfvwrite_r+0x194>
 801268e:	6963      	ldr	r3, [r4, #20]
 8012690:	4598      	cmp	r8, r3
 8012692:	d272      	bcs.n	801277a <__sfvwrite_r+0x27a>
 8012694:	45b8      	cmp	r8, r7
 8012696:	bf38      	it	cc
 8012698:	4647      	movcc	r7, r8
 801269a:	463a      	mov	r2, r7
 801269c:	4651      	mov	r1, sl
 801269e:	f000 f995 	bl	80129cc <memmove>
 80126a2:	68a3      	ldr	r3, [r4, #8]
 80126a4:	6822      	ldr	r2, [r4, #0]
 80126a6:	1bdb      	subs	r3, r3, r7
 80126a8:	443a      	add	r2, r7
 80126aa:	60a3      	str	r3, [r4, #8]
 80126ac:	6022      	str	r2, [r4, #0]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d09f      	beq.n	80125f2 <__sfvwrite_r+0xf2>
 80126b2:	463a      	mov	r2, r7
 80126b4:	e785      	b.n	80125c2 <__sfvwrite_r+0xc2>
 80126b6:	461a      	mov	r2, r3
 80126b8:	4659      	mov	r1, fp
 80126ba:	9300      	str	r3, [sp, #0]
 80126bc:	f000 f986 	bl	80129cc <memmove>
 80126c0:	9b00      	ldr	r3, [sp, #0]
 80126c2:	68a1      	ldr	r1, [r4, #8]
 80126c4:	6822      	ldr	r2, [r4, #0]
 80126c6:	1ac9      	subs	r1, r1, r3
 80126c8:	ebba 0a07 	subs.w	sl, sl, r7
 80126cc:	4413      	add	r3, r2
 80126ce:	60a1      	str	r1, [r4, #8]
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	d1c4      	bne.n	801265e <__sfvwrite_r+0x15e>
 80126d4:	4648      	mov	r0, r9
 80126d6:	4621      	mov	r1, r4
 80126d8:	f7ff fd52 	bl	8012180 <_fflush_r>
 80126dc:	2800      	cmp	r0, #0
 80126de:	d18e      	bne.n	80125fe <__sfvwrite_r+0xfe>
 80126e0:	f8cd a004 	str.w	sl, [sp, #4]
 80126e4:	e7bb      	b.n	801265e <__sfvwrite_r+0x15e>
 80126e6:	6820      	ldr	r0, [r4, #0]
 80126e8:	4647      	mov	r7, r8
 80126ea:	46c3      	mov	fp, r8
 80126ec:	e75d      	b.n	80125aa <__sfvwrite_r+0xaa>
 80126ee:	4658      	mov	r0, fp
 80126f0:	210a      	movs	r1, #10
 80126f2:	4642      	mov	r2, r8
 80126f4:	f7fb fd78 	bl	800e1e8 <memchr>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d07e      	beq.n	80127fa <__sfvwrite_r+0x2fa>
 80126fc:	f100 0a01 	add.w	sl, r0, #1
 8012700:	2701      	movs	r7, #1
 8012702:	ebcb 0a0a 	rsb	sl, fp, sl
 8012706:	9701      	str	r7, [sp, #4]
 8012708:	e78c      	b.n	8012624 <__sfvwrite_r+0x124>
 801270a:	6822      	ldr	r2, [r4, #0]
 801270c:	6921      	ldr	r1, [r4, #16]
 801270e:	6967      	ldr	r7, [r4, #20]
 8012710:	ebc1 0c02 	rsb	ip, r1, r2
 8012714:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012718:	f10c 0201 	add.w	r2, ip, #1
 801271c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8012720:	4442      	add	r2, r8
 8012722:	107f      	asrs	r7, r7, #1
 8012724:	4297      	cmp	r7, r2
 8012726:	bf34      	ite	cc
 8012728:	4617      	movcc	r7, r2
 801272a:	463a      	movcs	r2, r7
 801272c:	055b      	lsls	r3, r3, #21
 801272e:	d54d      	bpl.n	80127cc <__sfvwrite_r+0x2cc>
 8012730:	4611      	mov	r1, r2
 8012732:	4648      	mov	r0, r9
 8012734:	f8cd c000 	str.w	ip, [sp]
 8012738:	f7fb faa4 	bl	800dc84 <_malloc_r>
 801273c:	f8dd c000 	ldr.w	ip, [sp]
 8012740:	4683      	mov	fp, r0
 8012742:	2800      	cmp	r0, #0
 8012744:	d061      	beq.n	801280a <__sfvwrite_r+0x30a>
 8012746:	4662      	mov	r2, ip
 8012748:	6921      	ldr	r1, [r4, #16]
 801274a:	f8cd c000 	str.w	ip, [sp]
 801274e:	f7fa fb0d 	bl	800cd6c <memcpy>
 8012752:	89a2      	ldrh	r2, [r4, #12]
 8012754:	f8dd c000 	ldr.w	ip, [sp]
 8012758:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801275c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012760:	81a2      	strh	r2, [r4, #12]
 8012762:	eb0b 000c 	add.w	r0, fp, ip
 8012766:	ebcc 0207 	rsb	r2, ip, r7
 801276a:	f8c4 b010 	str.w	fp, [r4, #16]
 801276e:	6167      	str	r7, [r4, #20]
 8012770:	6020      	str	r0, [r4, #0]
 8012772:	60a2      	str	r2, [r4, #8]
 8012774:	4647      	mov	r7, r8
 8012776:	46c3      	mov	fp, r8
 8012778:	e717      	b.n	80125aa <__sfvwrite_r+0xaa>
 801277a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801277e:	4590      	cmp	r8, r2
 8012780:	bf38      	it	cc
 8012782:	4642      	movcc	r2, r8
 8012784:	fb92 f2f3 	sdiv	r2, r2, r3
 8012788:	fb02 f303 	mul.w	r3, r2, r3
 801278c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801278e:	69e1      	ldr	r1, [r4, #28]
 8012790:	4648      	mov	r0, r9
 8012792:	4652      	mov	r2, sl
 8012794:	47b8      	blx	r7
 8012796:	2800      	cmp	r0, #0
 8012798:	f77f af31 	ble.w	80125fe <__sfvwrite_r+0xfe>
 801279c:	4602      	mov	r2, r0
 801279e:	e710      	b.n	80125c2 <__sfvwrite_r+0xc2>
 80127a0:	4662      	mov	r2, ip
 80127a2:	4659      	mov	r1, fp
 80127a4:	f8cd c000 	str.w	ip, [sp]
 80127a8:	f000 f910 	bl	80129cc <memmove>
 80127ac:	f8dd c000 	ldr.w	ip, [sp]
 80127b0:	6823      	ldr	r3, [r4, #0]
 80127b2:	4463      	add	r3, ip
 80127b4:	6023      	str	r3, [r4, #0]
 80127b6:	4648      	mov	r0, r9
 80127b8:	4621      	mov	r1, r4
 80127ba:	f7ff fce1 	bl	8012180 <_fflush_r>
 80127be:	f8dd c000 	ldr.w	ip, [sp]
 80127c2:	2800      	cmp	r0, #0
 80127c4:	f47f af1b 	bne.w	80125fe <__sfvwrite_r+0xfe>
 80127c8:	4667      	mov	r7, ip
 80127ca:	e745      	b.n	8012658 <__sfvwrite_r+0x158>
 80127cc:	4648      	mov	r0, r9
 80127ce:	f8cd c000 	str.w	ip, [sp]
 80127d2:	f7fb fdcd 	bl	800e370 <_realloc_r>
 80127d6:	f8dd c000 	ldr.w	ip, [sp]
 80127da:	4683      	mov	fp, r0
 80127dc:	2800      	cmp	r0, #0
 80127de:	d1c0      	bne.n	8012762 <__sfvwrite_r+0x262>
 80127e0:	4648      	mov	r0, r9
 80127e2:	6921      	ldr	r1, [r4, #16]
 80127e4:	f7ff fdbe 	bl	8012364 <_free_r>
 80127e8:	89a3      	ldrh	r3, [r4, #12]
 80127ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80127ee:	041b      	lsls	r3, r3, #16
 80127f0:	220c      	movs	r2, #12
 80127f2:	0c1b      	lsrs	r3, r3, #16
 80127f4:	f8c9 2000 	str.w	r2, [r9]
 80127f8:	e702      	b.n	8012600 <__sfvwrite_r+0x100>
 80127fa:	2701      	movs	r7, #1
 80127fc:	f108 0a01 	add.w	sl, r8, #1
 8012800:	9701      	str	r7, [sp, #4]
 8012802:	e70f      	b.n	8012624 <__sfvwrite_r+0x124>
 8012804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012808:	e6ab      	b.n	8012562 <__sfvwrite_r+0x62>
 801280a:	230c      	movs	r3, #12
 801280c:	f8c9 3000 	str.w	r3, [r9]
 8012810:	89a3      	ldrh	r3, [r4, #12]
 8012812:	e6f5      	b.n	8012600 <__sfvwrite_r+0x100>

08012814 <_setlocale_r>:
 8012814:	b510      	push	{r4, lr}
 8012816:	4614      	mov	r4, r2
 8012818:	b13a      	cbz	r2, 801282a <_setlocale_r+0x16>
 801281a:	f244 41d4 	movw	r1, #17620	; 0x44d4
 801281e:	f6c0 0101 	movt	r1, #2049	; 0x801
 8012822:	4610      	mov	r0, r2
 8012824:	f7fa fb3c 	bl	800cea0 <strcmp>
 8012828:	b920      	cbnz	r0, 8012834 <_setlocale_r+0x20>
 801282a:	f244 4038 	movw	r0, #17464	; 0x4438
 801282e:	f6c0 0001 	movt	r0, #2049	; 0x801
 8012832:	bd10      	pop	{r4, pc}
 8012834:	f244 4138 	movw	r1, #17464	; 0x4438
 8012838:	f6c0 0101 	movt	r1, #2049	; 0x801
 801283c:	4620      	mov	r0, r4
 801283e:	f7fa fb2f 	bl	800cea0 <strcmp>
 8012842:	2800      	cmp	r0, #0
 8012844:	d0f1      	beq.n	801282a <_setlocale_r+0x16>
 8012846:	f244 3100 	movw	r1, #17152	; 0x4300
 801284a:	4620      	mov	r0, r4
 801284c:	f6c0 0101 	movt	r1, #2049	; 0x801
 8012850:	f7fa fb26 	bl	800cea0 <strcmp>
 8012854:	f244 4338 	movw	r3, #17464	; 0x4438
 8012858:	f6c0 0301 	movt	r3, #2049	; 0x801
 801285c:	2800      	cmp	r0, #0
 801285e:	bf0c      	ite	eq
 8012860:	4618      	moveq	r0, r3
 8012862:	2000      	movne	r0, #0
 8012864:	bd10      	pop	{r4, pc}
 8012866:	bf00      	nop

08012868 <__locale_charset>:
 8012868:	f640 10f4 	movw	r0, #2548	; 0x9f4
 801286c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop

08012874 <__locale_mb_cur_max>:
 8012874:	f640 2314 	movw	r3, #2580	; 0xa14
 8012878:	f2c2 0300 	movt	r3, #8192	; 0x2000
 801287c:	6818      	ldr	r0, [r3, #0]
 801287e:	4770      	bx	lr

08012880 <__locale_msgcharset>:
 8012880:	f640 109c 	movw	r0, #2460	; 0x99c
 8012884:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012888:	4770      	bx	lr
 801288a:	bf00      	nop

0801288c <__locale_cjk_lang>:
 801288c:	2000      	movs	r0, #0
 801288e:	4770      	bx	lr

08012890 <_localeconv_r>:
 8012890:	f640 10bc 	movw	r0, #2492	; 0x9bc
 8012894:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop

0801289c <setlocale>:
 801289c:	f240 5388 	movw	r3, #1416	; 0x588
 80128a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80128a4:	460a      	mov	r2, r1
 80128a6:	4601      	mov	r1, r0
 80128a8:	6818      	ldr	r0, [r3, #0]
 80128aa:	f7ff bfb3 	b.w	8012814 <_setlocale_r>
 80128ae:	bf00      	nop

080128b0 <localeconv>:
 80128b0:	f640 10bc 	movw	r0, #2492	; 0x9bc
 80128b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop

080128bc <_lseek_r>:
 80128bc:	b570      	push	{r4, r5, r6, lr}
 80128be:	f641 342c 	movw	r4, #6956	; 0x1b2c
 80128c2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80128c6:	4606      	mov	r6, r0
 80128c8:	2500      	movs	r5, #0
 80128ca:	4608      	mov	r0, r1
 80128cc:	4611      	mov	r1, r2
 80128ce:	461a      	mov	r2, r3
 80128d0:	6025      	str	r5, [r4, #0]
 80128d2:	f7f5 fb23 	bl	8007f1c <_lseek>
 80128d6:	1c43      	adds	r3, r0, #1
 80128d8:	d000      	beq.n	80128dc <_lseek_r+0x20>
 80128da:	bd70      	pop	{r4, r5, r6, pc}
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d0fb      	beq.n	80128da <_lseek_r+0x1e>
 80128e2:	6033      	str	r3, [r6, #0]
 80128e4:	bd70      	pop	{r4, r5, r6, pc}
 80128e6:	bf00      	nop

080128e8 <__smakebuf_r>:
 80128e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128ea:	898b      	ldrh	r3, [r1, #12]
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	0796      	lsls	r6, r2, #30
 80128f0:	b091      	sub	sp, #68	; 0x44
 80128f2:	460c      	mov	r4, r1
 80128f4:	4605      	mov	r5, r0
 80128f6:	d43a      	bmi.n	801296e <__smakebuf_r+0x86>
 80128f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128fc:	2900      	cmp	r1, #0
 80128fe:	db17      	blt.n	8012930 <__smakebuf_r+0x48>
 8012900:	aa01      	add	r2, sp, #4
 8012902:	f000 fee5 	bl	80136d0 <_fstat_r>
 8012906:	2800      	cmp	r0, #0
 8012908:	db10      	blt.n	801292c <__smakebuf_r+0x44>
 801290a:	9b02      	ldr	r3, [sp, #8]
 801290c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012910:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 8012914:	424f      	negs	r7, r1
 8012916:	414f      	adcs	r7, r1
 8012918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801291c:	d02f      	beq.n	801297e <__smakebuf_r+0x96>
 801291e:	89a3      	ldrh	r3, [r4, #12]
 8012920:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012924:	81a3      	strh	r3, [r4, #12]
 8012926:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801292a:	e00b      	b.n	8012944 <__smakebuf_r+0x5c>
 801292c:	89a3      	ldrh	r3, [r4, #12]
 801292e:	b29a      	uxth	r2, r3
 8012930:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012938:	81a3      	strh	r3, [r4, #12]
 801293a:	bf14      	ite	ne
 801293c:	2640      	movne	r6, #64	; 0x40
 801293e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8012942:	2700      	movs	r7, #0
 8012944:	4628      	mov	r0, r5
 8012946:	4631      	mov	r1, r6
 8012948:	f7fb f99c 	bl	800dc84 <_malloc_r>
 801294c:	2800      	cmp	r0, #0
 801294e:	d030      	beq.n	80129b2 <__smakebuf_r+0xca>
 8012950:	89a2      	ldrh	r2, [r4, #12]
 8012952:	f64d 0335 	movw	r3, #55349	; 0xd835
 8012956:	f6c0 0300 	movt	r3, #2048	; 0x800
 801295a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801295e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012960:	6020      	str	r0, [r4, #0]
 8012962:	6120      	str	r0, [r4, #16]
 8012964:	6166      	str	r6, [r4, #20]
 8012966:	81a2      	strh	r2, [r4, #12]
 8012968:	b9bf      	cbnz	r7, 801299a <__smakebuf_r+0xb2>
 801296a:	b011      	add	sp, #68	; 0x44
 801296c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801296e:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8012972:	2201      	movs	r2, #1
 8012974:	600b      	str	r3, [r1, #0]
 8012976:	610b      	str	r3, [r1, #16]
 8012978:	614a      	str	r2, [r1, #20]
 801297a:	b011      	add	sp, #68	; 0x44
 801297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801297e:	f64e 2375 	movw	r3, #60021	; 0xea75
 8012982:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012984:	f6c0 0300 	movt	r3, #2048	; 0x800
 8012988:	429a      	cmp	r2, r3
 801298a:	d1c8      	bne.n	801291e <__smakebuf_r+0x36>
 801298c:	89a3      	ldrh	r3, [r4, #12]
 801298e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8012992:	4333      	orrs	r3, r6
 8012994:	81a3      	strh	r3, [r4, #12]
 8012996:	64e6      	str	r6, [r4, #76]	; 0x4c
 8012998:	e7d4      	b.n	8012944 <__smakebuf_r+0x5c>
 801299a:	4628      	mov	r0, r5
 801299c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129a0:	f000 feaa 	bl	80136f8 <_isatty_r>
 80129a4:	2800      	cmp	r0, #0
 80129a6:	d0e0      	beq.n	801296a <__smakebuf_r+0x82>
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	f043 0301 	orr.w	r3, r3, #1
 80129ae:	81a3      	strh	r3, [r4, #12]
 80129b0:	e7db      	b.n	801296a <__smakebuf_r+0x82>
 80129b2:	89a3      	ldrh	r3, [r4, #12]
 80129b4:	059a      	lsls	r2, r3, #22
 80129b6:	d4d8      	bmi.n	801296a <__smakebuf_r+0x82>
 80129b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80129bc:	f043 0302 	orr.w	r3, r3, #2
 80129c0:	2101      	movs	r1, #1
 80129c2:	81a3      	strh	r3, [r4, #12]
 80129c4:	6022      	str	r2, [r4, #0]
 80129c6:	6122      	str	r2, [r4, #16]
 80129c8:	6161      	str	r1, [r4, #20]
 80129ca:	e7ce      	b.n	801296a <__smakebuf_r+0x82>

080129cc <memmove>:
 80129cc:	4288      	cmp	r0, r1
 80129ce:	b4f0      	push	{r4, r5, r6, r7}
 80129d0:	d910      	bls.n	80129f4 <memmove+0x28>
 80129d2:	188c      	adds	r4, r1, r2
 80129d4:	42a0      	cmp	r0, r4
 80129d6:	d20d      	bcs.n	80129f4 <memmove+0x28>
 80129d8:	1885      	adds	r5, r0, r2
 80129da:	1e53      	subs	r3, r2, #1
 80129dc:	b142      	cbz	r2, 80129f0 <memmove+0x24>
 80129de:	4621      	mov	r1, r4
 80129e0:	462a      	mov	r2, r5
 80129e2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 80129e6:	3b01      	subs	r3, #1
 80129e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129ec:	1c5c      	adds	r4, r3, #1
 80129ee:	d1f8      	bne.n	80129e2 <memmove+0x16>
 80129f0:	bcf0      	pop	{r4, r5, r6, r7}
 80129f2:	4770      	bx	lr
 80129f4:	2a0f      	cmp	r2, #15
 80129f6:	d940      	bls.n	8012a7a <memmove+0xae>
 80129f8:	ea40 0301 	orr.w	r3, r0, r1
 80129fc:	079b      	lsls	r3, r3, #30
 80129fe:	d140      	bne.n	8012a82 <memmove+0xb6>
 8012a00:	f1a2 0710 	sub.w	r7, r2, #16
 8012a04:	093f      	lsrs	r7, r7, #4
 8012a06:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8012a0a:	3610      	adds	r6, #16
 8012a0c:	460c      	mov	r4, r1
 8012a0e:	4603      	mov	r3, r0
 8012a10:	6825      	ldr	r5, [r4, #0]
 8012a12:	601d      	str	r5, [r3, #0]
 8012a14:	6865      	ldr	r5, [r4, #4]
 8012a16:	605d      	str	r5, [r3, #4]
 8012a18:	68a5      	ldr	r5, [r4, #8]
 8012a1a:	609d      	str	r5, [r3, #8]
 8012a1c:	68e5      	ldr	r5, [r4, #12]
 8012a1e:	3310      	adds	r3, #16
 8012a20:	f843 5c04 	str.w	r5, [r3, #-4]
 8012a24:	42b3      	cmp	r3, r6
 8012a26:	f104 0410 	add.w	r4, r4, #16
 8012a2a:	d1f1      	bne.n	8012a10 <memmove+0x44>
 8012a2c:	1c7b      	adds	r3, r7, #1
 8012a2e:	f002 0c0f 	and.w	ip, r2, #15
 8012a32:	011b      	lsls	r3, r3, #4
 8012a34:	f1bc 0f03 	cmp.w	ip, #3
 8012a38:	4419      	add	r1, r3
 8012a3a:	4403      	add	r3, r0
 8012a3c:	d923      	bls.n	8012a86 <memmove+0xba>
 8012a3e:	460e      	mov	r6, r1
 8012a40:	461d      	mov	r5, r3
 8012a42:	4664      	mov	r4, ip
 8012a44:	f856 7b04 	ldr.w	r7, [r6], #4
 8012a48:	3c04      	subs	r4, #4
 8012a4a:	2c03      	cmp	r4, #3
 8012a4c:	f845 7b04 	str.w	r7, [r5], #4
 8012a50:	d8f8      	bhi.n	8012a44 <memmove+0x78>
 8012a52:	f1ac 0404 	sub.w	r4, ip, #4
 8012a56:	f024 0403 	bic.w	r4, r4, #3
 8012a5a:	3404      	adds	r4, #4
 8012a5c:	f002 0203 	and.w	r2, r2, #3
 8012a60:	4423      	add	r3, r4
 8012a62:	4421      	add	r1, r4
 8012a64:	2a00      	cmp	r2, #0
 8012a66:	d0c3      	beq.n	80129f0 <memmove+0x24>
 8012a68:	441a      	add	r2, r3
 8012a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a6e:	f803 4b01 	strb.w	r4, [r3], #1
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d1f9      	bne.n	8012a6a <memmove+0x9e>
 8012a76:	bcf0      	pop	{r4, r5, r6, r7}
 8012a78:	4770      	bx	lr
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	d1f3      	bne.n	8012a68 <memmove+0x9c>
 8012a80:	e7b6      	b.n	80129f0 <memmove+0x24>
 8012a82:	4603      	mov	r3, r0
 8012a84:	e7f0      	b.n	8012a68 <memmove+0x9c>
 8012a86:	4662      	mov	r2, ip
 8012a88:	2a00      	cmp	r2, #0
 8012a8a:	d1ed      	bne.n	8012a68 <memmove+0x9c>
 8012a8c:	e7b0      	b.n	80129f0 <memmove+0x24>
 8012a8e:	bf00      	nop

08012a90 <_Balloc>:
 8012a90:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8012a92:	b570      	push	{r4, r5, r6, lr}
 8012a94:	4605      	mov	r5, r0
 8012a96:	460c      	mov	r4, r1
 8012a98:	b14a      	cbz	r2, 8012aae <_Balloc+0x1e>
 8012a9a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8012a9e:	b180      	cbz	r0, 8012ac2 <_Balloc+0x32>
 8012aa0:	6801      	ldr	r1, [r0, #0]
 8012aa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	6102      	str	r2, [r0, #16]
 8012aaa:	60c2      	str	r2, [r0, #12]
 8012aac:	bd70      	pop	{r4, r5, r6, pc}
 8012aae:	2221      	movs	r2, #33	; 0x21
 8012ab0:	2104      	movs	r1, #4
 8012ab2:	f000 fddd 	bl	8013670 <_calloc_r>
 8012ab6:	64e8      	str	r0, [r5, #76]	; 0x4c
 8012ab8:	4602      	mov	r2, r0
 8012aba:	2800      	cmp	r0, #0
 8012abc:	d1ed      	bne.n	8012a9a <_Balloc+0xa>
 8012abe:	2000      	movs	r0, #0
 8012ac0:	bd70      	pop	{r4, r5, r6, pc}
 8012ac2:	2101      	movs	r1, #1
 8012ac4:	fa01 f604 	lsl.w	r6, r1, r4
 8012ac8:	1d72      	adds	r2, r6, #5
 8012aca:	4628      	mov	r0, r5
 8012acc:	0092      	lsls	r2, r2, #2
 8012ace:	f000 fdcf 	bl	8013670 <_calloc_r>
 8012ad2:	2800      	cmp	r0, #0
 8012ad4:	d0f3      	beq.n	8012abe <_Balloc+0x2e>
 8012ad6:	6044      	str	r4, [r0, #4]
 8012ad8:	6086      	str	r6, [r0, #8]
 8012ada:	e7e4      	b.n	8012aa6 <_Balloc+0x16>

08012adc <_Bfree>:
 8012adc:	b131      	cbz	r1, 8012aec <_Bfree+0x10>
 8012ade:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012ae0:	684a      	ldr	r2, [r1, #4]
 8012ae2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ae6:	6008      	str	r0, [r1, #0]
 8012ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop

08012af0 <__multadd>:
 8012af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012af4:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8012af8:	b082      	sub	sp, #8
 8012afa:	4689      	mov	r9, r1
 8012afc:	4682      	mov	sl, r0
 8012afe:	f101 0514 	add.w	r5, r1, #20
 8012b02:	2400      	movs	r4, #0
 8012b04:	682f      	ldr	r7, [r5, #0]
 8012b06:	b2be      	uxth	r6, r7
 8012b08:	0c3f      	lsrs	r7, r7, #16
 8012b0a:	fb02 3606 	mla	r6, r2, r6, r3
 8012b0e:	fb02 f307 	mul.w	r3, r2, r7
 8012b12:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8012b16:	3401      	adds	r4, #1
 8012b18:	b2b6      	uxth	r6, r6
 8012b1a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8012b1e:	45a0      	cmp	r8, r4
 8012b20:	f845 6b04 	str.w	r6, [r5], #4
 8012b24:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8012b28:	dcec      	bgt.n	8012b04 <__multadd+0x14>
 8012b2a:	b153      	cbz	r3, 8012b42 <__multadd+0x52>
 8012b2c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8012b30:	4590      	cmp	r8, r2
 8012b32:	da0a      	bge.n	8012b4a <__multadd+0x5a>
 8012b34:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8012b38:	f108 0201 	add.w	r2, r8, #1
 8012b3c:	614b      	str	r3, [r1, #20]
 8012b3e:	f8c9 2010 	str.w	r2, [r9, #16]
 8012b42:	4648      	mov	r0, r9
 8012b44:	b002      	add	sp, #8
 8012b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b4a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012b4e:	9301      	str	r3, [sp, #4]
 8012b50:	3101      	adds	r1, #1
 8012b52:	4650      	mov	r0, sl
 8012b54:	f7ff ff9c 	bl	8012a90 <_Balloc>
 8012b58:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012b5c:	3202      	adds	r2, #2
 8012b5e:	f109 010c 	add.w	r1, r9, #12
 8012b62:	4604      	mov	r4, r0
 8012b64:	0092      	lsls	r2, r2, #2
 8012b66:	300c      	adds	r0, #12
 8012b68:	f7fa f900 	bl	800cd6c <memcpy>
 8012b6c:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 8012b70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012b74:	9b01      	ldr	r3, [sp, #4]
 8012b76:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8012b7a:	f8c9 0000 	str.w	r0, [r9]
 8012b7e:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 8012b82:	46a1      	mov	r9, r4
 8012b84:	e7d6      	b.n	8012b34 <__multadd+0x44>
 8012b86:	bf00      	nop

08012b88 <__s2b>:
 8012b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b8c:	4699      	mov	r9, r3
 8012b8e:	f648 6339 	movw	r3, #36409	; 0x8e39
 8012b92:	f109 0408 	add.w	r4, r9, #8
 8012b96:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 8012b9a:	fb83 5304 	smull	r5, r3, r3, r4
 8012b9e:	17e4      	asrs	r4, r4, #31
 8012ba0:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	4607      	mov	r7, r0
 8012ba8:	460c      	mov	r4, r1
 8012baa:	4690      	mov	r8, r2
 8012bac:	9e08      	ldr	r6, [sp, #32]
 8012bae:	dd36      	ble.n	8012c1e <__s2b+0x96>
 8012bb0:	2501      	movs	r5, #1
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	006d      	lsls	r5, r5, #1
 8012bb6:	42ab      	cmp	r3, r5
 8012bb8:	f101 0101 	add.w	r1, r1, #1
 8012bbc:	dcfa      	bgt.n	8012bb4 <__s2b+0x2c>
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	f7ff ff66 	bl	8012a90 <_Balloc>
 8012bc4:	f1b8 0f09 	cmp.w	r8, #9
 8012bc8:	f04f 0301 	mov.w	r3, #1
 8012bcc:	6146      	str	r6, [r0, #20]
 8012bce:	6103      	str	r3, [r0, #16]
 8012bd0:	bfdc      	itt	le
 8012bd2:	340a      	addle	r4, #10
 8012bd4:	f04f 0809 	movle.w	r8, #9
 8012bd8:	dd10      	ble.n	8012bfc <__s2b+0x74>
 8012bda:	f104 0609 	add.w	r6, r4, #9
 8012bde:	4635      	mov	r5, r6
 8012be0:	4444      	add	r4, r8
 8012be2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012be6:	4601      	mov	r1, r0
 8012be8:	3b30      	subs	r3, #48	; 0x30
 8012bea:	4638      	mov	r0, r7
 8012bec:	220a      	movs	r2, #10
 8012bee:	f7ff ff7f 	bl	8012af0 <__multadd>
 8012bf2:	42a5      	cmp	r5, r4
 8012bf4:	d1f5      	bne.n	8012be2 <__s2b+0x5a>
 8012bf6:	eb06 0408 	add.w	r4, r6, r8
 8012bfa:	3c08      	subs	r4, #8
 8012bfc:	45c1      	cmp	r9, r8
 8012bfe:	dd0c      	ble.n	8012c1a <__s2b+0x92>
 8012c00:	ebc8 0809 	rsb	r8, r8, r9
 8012c04:	44a0      	add	r8, r4
 8012c06:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012c0a:	4601      	mov	r1, r0
 8012c0c:	3b30      	subs	r3, #48	; 0x30
 8012c0e:	4638      	mov	r0, r7
 8012c10:	220a      	movs	r2, #10
 8012c12:	f7ff ff6d 	bl	8012af0 <__multadd>
 8012c16:	4544      	cmp	r4, r8
 8012c18:	d1f5      	bne.n	8012c06 <__s2b+0x7e>
 8012c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c1e:	2100      	movs	r1, #0
 8012c20:	e7cd      	b.n	8012bbe <__s2b+0x36>
 8012c22:	bf00      	nop

08012c24 <__hi0bits>:
 8012c24:	0c03      	lsrs	r3, r0, #16
 8012c26:	bf06      	itte	eq
 8012c28:	0400      	lsleq	r0, r0, #16
 8012c2a:	2310      	moveq	r3, #16
 8012c2c:	2300      	movne	r3, #0
 8012c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012c32:	bf04      	itt	eq
 8012c34:	0200      	lsleq	r0, r0, #8
 8012c36:	3308      	addeq	r3, #8
 8012c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012c3c:	bf04      	itt	eq
 8012c3e:	0100      	lsleq	r0, r0, #4
 8012c40:	3304      	addeq	r3, #4
 8012c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012c46:	bf04      	itt	eq
 8012c48:	0080      	lsleq	r0, r0, #2
 8012c4a:	3302      	addeq	r3, #2
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	db05      	blt.n	8012c5c <__hi0bits+0x38>
 8012c50:	0042      	lsls	r2, r0, #1
 8012c52:	d401      	bmi.n	8012c58 <__hi0bits+0x34>
 8012c54:	2020      	movs	r0, #32
 8012c56:	4770      	bx	lr
 8012c58:	1c58      	adds	r0, r3, #1
 8012c5a:	4770      	bx	lr
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	4770      	bx	lr

08012c60 <__lo0bits>:
 8012c60:	6803      	ldr	r3, [r0, #0]
 8012c62:	f013 0207 	ands.w	r2, r3, #7
 8012c66:	d00b      	beq.n	8012c80 <__lo0bits+0x20>
 8012c68:	07d9      	lsls	r1, r3, #31
 8012c6a:	d424      	bmi.n	8012cb6 <__lo0bits+0x56>
 8012c6c:	079a      	lsls	r2, r3, #30
 8012c6e:	bf4b      	itete	mi
 8012c70:	085b      	lsrmi	r3, r3, #1
 8012c72:	089b      	lsrpl	r3, r3, #2
 8012c74:	6003      	strmi	r3, [r0, #0]
 8012c76:	6003      	strpl	r3, [r0, #0]
 8012c78:	bf4c      	ite	mi
 8012c7a:	2001      	movmi	r0, #1
 8012c7c:	2002      	movpl	r0, #2
 8012c7e:	4770      	bx	lr
 8012c80:	b299      	uxth	r1, r3
 8012c82:	b909      	cbnz	r1, 8012c88 <__lo0bits+0x28>
 8012c84:	0c1b      	lsrs	r3, r3, #16
 8012c86:	2210      	movs	r2, #16
 8012c88:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012c8c:	bf04      	itt	eq
 8012c8e:	0a1b      	lsreq	r3, r3, #8
 8012c90:	3208      	addeq	r2, #8
 8012c92:	0719      	lsls	r1, r3, #28
 8012c94:	bf04      	itt	eq
 8012c96:	091b      	lsreq	r3, r3, #4
 8012c98:	3204      	addeq	r2, #4
 8012c9a:	0799      	lsls	r1, r3, #30
 8012c9c:	bf04      	itt	eq
 8012c9e:	089b      	lsreq	r3, r3, #2
 8012ca0:	3202      	addeq	r2, #2
 8012ca2:	07d9      	lsls	r1, r3, #31
 8012ca4:	d404      	bmi.n	8012cb0 <__lo0bits+0x50>
 8012ca6:	085b      	lsrs	r3, r3, #1
 8012ca8:	d101      	bne.n	8012cae <__lo0bits+0x4e>
 8012caa:	2020      	movs	r0, #32
 8012cac:	4770      	bx	lr
 8012cae:	3201      	adds	r2, #1
 8012cb0:	6003      	str	r3, [r0, #0]
 8012cb2:	4610      	mov	r0, r2
 8012cb4:	4770      	bx	lr
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop

08012cbc <__i2b>:
 8012cbc:	b510      	push	{r4, lr}
 8012cbe:	460c      	mov	r4, r1
 8012cc0:	2101      	movs	r1, #1
 8012cc2:	f7ff fee5 	bl	8012a90 <_Balloc>
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	6144      	str	r4, [r0, #20]
 8012cca:	6102      	str	r2, [r0, #16]
 8012ccc:	bd10      	pop	{r4, pc}
 8012cce:	bf00      	nop

08012cd0 <__multiply>:
 8012cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd4:	690c      	ldr	r4, [r1, #16]
 8012cd6:	6917      	ldr	r7, [r2, #16]
 8012cd8:	42bc      	cmp	r4, r7
 8012cda:	b085      	sub	sp, #20
 8012cdc:	4688      	mov	r8, r1
 8012cde:	4691      	mov	r9, r2
 8012ce0:	da04      	bge.n	8012cec <__multiply+0x1c>
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	46c8      	mov	r8, r9
 8012ce6:	463c      	mov	r4, r7
 8012ce8:	4689      	mov	r9, r1
 8012cea:	4617      	mov	r7, r2
 8012cec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012cf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012cf4:	19e6      	adds	r6, r4, r7
 8012cf6:	429e      	cmp	r6, r3
 8012cf8:	bfc8      	it	gt
 8012cfa:	3101      	addgt	r1, #1
 8012cfc:	f7ff fec8 	bl	8012a90 <_Balloc>
 8012d00:	f100 0514 	add.w	r5, r0, #20
 8012d04:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8012d08:	4565      	cmp	r5, ip
 8012d0a:	9001      	str	r0, [sp, #4]
 8012d0c:	bf3c      	itt	cc
 8012d0e:	462b      	movcc	r3, r5
 8012d10:	2000      	movcc	r0, #0
 8012d12:	d203      	bcs.n	8012d1c <__multiply+0x4c>
 8012d14:	f843 0b04 	str.w	r0, [r3], #4
 8012d18:	459c      	cmp	ip, r3
 8012d1a:	d8fb      	bhi.n	8012d14 <__multiply+0x44>
 8012d1c:	f109 0914 	add.w	r9, r9, #20
 8012d20:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 8012d24:	4599      	cmp	r9, r3
 8012d26:	f108 0814 	add.w	r8, r8, #20
 8012d2a:	bf38      	it	cc
 8012d2c:	f8cd c008 	strcc.w	ip, [sp, #8]
 8012d30:	f8cd 8000 	str.w	r8, [sp]
 8012d34:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8012d38:	bf3e      	ittt	cc
 8012d3a:	464f      	movcc	r7, r9
 8012d3c:	469c      	movcc	ip, r3
 8012d3e:	9603      	strcc	r6, [sp, #12]
 8012d40:	d25c      	bcs.n	8012dfc <__multiply+0x12c>
 8012d42:	f857 3b04 	ldr.w	r3, [r7], #4
 8012d46:	fa1f f883 	uxth.w	r8, r3
 8012d4a:	f1b8 0f00 	cmp.w	r8, #0
 8012d4e:	d024      	beq.n	8012d9a <__multiply+0xca>
 8012d50:	9a00      	ldr	r2, [sp, #0]
 8012d52:	462b      	mov	r3, r5
 8012d54:	f04f 0900 	mov.w	r9, #0
 8012d58:	e000      	b.n	8012d5c <__multiply+0x8c>
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	f852 6b04 	ldr.w	r6, [r2], #4
 8012d60:	6819      	ldr	r1, [r3, #0]
 8012d62:	fa1f fb86 	uxth.w	fp, r6
 8012d66:	fa1f fa81 	uxth.w	sl, r1
 8012d6a:	0c30      	lsrs	r0, r6, #16
 8012d6c:	0c09      	lsrs	r1, r1, #16
 8012d6e:	fb08 a60b 	mla	r6, r8, fp, sl
 8012d72:	44b1      	add	r9, r6
 8012d74:	fb08 1000 	mla	r0, r8, r0, r1
 8012d78:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	fa1f f989 	uxth.w	r9, r9
 8012d82:	ea49 4600 	orr.w	r6, r9, r0, lsl #16
 8012d86:	4294      	cmp	r4, r2
 8012d88:	ea4f 4910 	mov.w	r9, r0, lsr #16
 8012d8c:	f841 6b04 	str.w	r6, [r1], #4
 8012d90:	d8e3      	bhi.n	8012d5a <__multiply+0x8a>
 8012d92:	f8c3 9004 	str.w	r9, [r3, #4]
 8012d96:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8012d9a:	ea5f 4913 	movs.w	r9, r3, lsr #16
 8012d9e:	d026      	beq.n	8012dee <__multiply+0x11e>
 8012da0:	f8d5 a000 	ldr.w	sl, [r5]
 8012da4:	9b00      	ldr	r3, [sp, #0]
 8012da6:	f04f 0b00 	mov.w	fp, #0
 8012daa:	4629      	mov	r1, r5
 8012dac:	465e      	mov	r6, fp
 8012dae:	4650      	mov	r0, sl
 8012db0:	e000      	b.n	8012db4 <__multiply+0xe4>
 8012db2:	4611      	mov	r1, r2
 8012db4:	f8b3 b000 	ldrh.w	fp, [r3]
 8012db8:	0c00      	lsrs	r0, r0, #16
 8012dba:	fb09 0b0b 	mla	fp, r9, fp, r0
 8012dbe:	44b3      	add	fp, r6
 8012dc0:	fa1f f08a 	uxth.w	r0, sl
 8012dc4:	460a      	mov	r2, r1
 8012dc6:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 8012dca:	f842 0b04 	str.w	r0, [r2], #4
 8012dce:	f853 ab04 	ldr.w	sl, [r3], #4
 8012dd2:	6848      	ldr	r0, [r1, #4]
 8012dd4:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8012dd8:	b286      	uxth	r6, r0
 8012dda:	fb09 6a0a 	mla	sl, r9, sl, r6
 8012dde:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 8012de2:	429c      	cmp	r4, r3
 8012de4:	ea4f 461a 	mov.w	r6, sl, lsr #16
 8012de8:	d8e3      	bhi.n	8012db2 <__multiply+0xe2>
 8012dea:	f8c1 a004 	str.w	sl, [r1, #4]
 8012dee:	45bc      	cmp	ip, r7
 8012df0:	f105 0504 	add.w	r5, r5, #4
 8012df4:	d8a5      	bhi.n	8012d42 <__multiply+0x72>
 8012df6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8012dfa:	9e03      	ldr	r6, [sp, #12]
 8012dfc:	2e00      	cmp	r6, #0
 8012dfe:	dd0a      	ble.n	8012e16 <__multiply+0x146>
 8012e00:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8012e04:	f1ac 0c04 	sub.w	ip, ip, #4
 8012e08:	b11b      	cbz	r3, 8012e12 <__multiply+0x142>
 8012e0a:	e004      	b.n	8012e16 <__multiply+0x146>
 8012e0c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8012e10:	b90b      	cbnz	r3, 8012e16 <__multiply+0x146>
 8012e12:	3e01      	subs	r6, #1
 8012e14:	d1fa      	bne.n	8012e0c <__multiply+0x13c>
 8012e16:	9a01      	ldr	r2, [sp, #4]
 8012e18:	4610      	mov	r0, r2
 8012e1a:	6116      	str	r6, [r2, #16]
 8012e1c:	b005      	add	sp, #20
 8012e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e22:	bf00      	nop

08012e24 <__pow5mult>:
 8012e24:	f012 0303 	ands.w	r3, r2, #3
 8012e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e2c:	4614      	mov	r4, r2
 8012e2e:	4607      	mov	r7, r0
 8012e30:	460e      	mov	r6, r1
 8012e32:	d12c      	bne.n	8012e8e <__pow5mult+0x6a>
 8012e34:	10a4      	asrs	r4, r4, #2
 8012e36:	d01c      	beq.n	8012e72 <__pow5mult+0x4e>
 8012e38:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8012e3a:	2d00      	cmp	r5, #0
 8012e3c:	d033      	beq.n	8012ea6 <__pow5mult+0x82>
 8012e3e:	f04f 0800 	mov.w	r8, #0
 8012e42:	e004      	b.n	8012e4e <__pow5mult+0x2a>
 8012e44:	1064      	asrs	r4, r4, #1
 8012e46:	d014      	beq.n	8012e72 <__pow5mult+0x4e>
 8012e48:	6828      	ldr	r0, [r5, #0]
 8012e4a:	b1a8      	cbz	r0, 8012e78 <__pow5mult+0x54>
 8012e4c:	4605      	mov	r5, r0
 8012e4e:	07e0      	lsls	r0, r4, #31
 8012e50:	d5f8      	bpl.n	8012e44 <__pow5mult+0x20>
 8012e52:	4638      	mov	r0, r7
 8012e54:	4631      	mov	r1, r6
 8012e56:	462a      	mov	r2, r5
 8012e58:	f7ff ff3a 	bl	8012cd0 <__multiply>
 8012e5c:	b1ae      	cbz	r6, 8012e8a <__pow5mult+0x66>
 8012e5e:	6872      	ldr	r2, [r6, #4]
 8012e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e66:	1064      	asrs	r4, r4, #1
 8012e68:	6031      	str	r1, [r6, #0]
 8012e6a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8012e6e:	4606      	mov	r6, r0
 8012e70:	d1ea      	bne.n	8012e48 <__pow5mult+0x24>
 8012e72:	4630      	mov	r0, r6
 8012e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e78:	4638      	mov	r0, r7
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	462a      	mov	r2, r5
 8012e7e:	f7ff ff27 	bl	8012cd0 <__multiply>
 8012e82:	6028      	str	r0, [r5, #0]
 8012e84:	f8c0 8000 	str.w	r8, [r0]
 8012e88:	e7e0      	b.n	8012e4c <__pow5mult+0x28>
 8012e8a:	4606      	mov	r6, r0
 8012e8c:	e7da      	b.n	8012e44 <__pow5mult+0x20>
 8012e8e:	f244 52d0 	movw	r2, #17872	; 0x45d0
 8012e92:	1e5d      	subs	r5, r3, #1
 8012e94:	f6c0 0201 	movt	r2, #2049	; 0x801
 8012e98:	2300      	movs	r3, #0
 8012e9a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012e9e:	f7ff fe27 	bl	8012af0 <__multadd>
 8012ea2:	4606      	mov	r6, r0
 8012ea4:	e7c6      	b.n	8012e34 <__pow5mult+0x10>
 8012ea6:	2101      	movs	r1, #1
 8012ea8:	4638      	mov	r0, r7
 8012eaa:	f7ff fdf1 	bl	8012a90 <_Balloc>
 8012eae:	f240 2171 	movw	r1, #625	; 0x271
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	6141      	str	r1, [r0, #20]
 8012eb8:	6102      	str	r2, [r0, #16]
 8012eba:	4605      	mov	r5, r0
 8012ebc:	64b8      	str	r0, [r7, #72]	; 0x48
 8012ebe:	6003      	str	r3, [r0, #0]
 8012ec0:	e7bd      	b.n	8012e3e <__pow5mult+0x1a>
 8012ec2:	bf00      	nop

08012ec4 <__lshift>:
 8012ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec8:	4693      	mov	fp, r2
 8012eca:	690a      	ldr	r2, [r1, #16]
 8012ecc:	688b      	ldr	r3, [r1, #8]
 8012ece:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 8012ed2:	eb0a 0902 	add.w	r9, sl, r2
 8012ed6:	f109 0601 	add.w	r6, r9, #1
 8012eda:	429e      	cmp	r6, r3
 8012edc:	460f      	mov	r7, r1
 8012ede:	4680      	mov	r8, r0
 8012ee0:	6849      	ldr	r1, [r1, #4]
 8012ee2:	dd04      	ble.n	8012eee <__lshift+0x2a>
 8012ee4:	005b      	lsls	r3, r3, #1
 8012ee6:	429e      	cmp	r6, r3
 8012ee8:	f101 0101 	add.w	r1, r1, #1
 8012eec:	dcfa      	bgt.n	8012ee4 <__lshift+0x20>
 8012eee:	4640      	mov	r0, r8
 8012ef0:	f7ff fdce 	bl	8012a90 <_Balloc>
 8012ef4:	f1ba 0f00 	cmp.w	sl, #0
 8012ef8:	f100 0414 	add.w	r4, r0, #20
 8012efc:	dd09      	ble.n	8012f12 <__lshift+0x4e>
 8012efe:	2300      	movs	r3, #0
 8012f00:	461a      	mov	r2, r3
 8012f02:	4625      	mov	r5, r4
 8012f04:	3301      	adds	r3, #1
 8012f06:	4553      	cmp	r3, sl
 8012f08:	f845 2b04 	str.w	r2, [r5], #4
 8012f0c:	d1fa      	bne.n	8012f04 <__lshift+0x40>
 8012f0e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012f12:	693a      	ldr	r2, [r7, #16]
 8012f14:	f107 0314 	add.w	r3, r7, #20
 8012f18:	f01b 0b1f 	ands.w	fp, fp, #31
 8012f1c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8012f20:	d021      	beq.n	8012f66 <__lshift+0xa2>
 8012f22:	f1cb 0a20 	rsb	sl, fp, #32
 8012f26:	2200      	movs	r2, #0
 8012f28:	e000      	b.n	8012f2c <__lshift+0x68>
 8012f2a:	462c      	mov	r4, r5
 8012f2c:	6819      	ldr	r1, [r3, #0]
 8012f2e:	4625      	mov	r5, r4
 8012f30:	fa01 f10b 	lsl.w	r1, r1, fp
 8012f34:	430a      	orrs	r2, r1
 8012f36:	f845 2b04 	str.w	r2, [r5], #4
 8012f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f3e:	4563      	cmp	r3, ip
 8012f40:	fa22 f20a 	lsr.w	r2, r2, sl
 8012f44:	d3f1      	bcc.n	8012f2a <__lshift+0x66>
 8012f46:	6062      	str	r2, [r4, #4]
 8012f48:	b10a      	cbz	r2, 8012f4e <__lshift+0x8a>
 8012f4a:	f109 0602 	add.w	r6, r9, #2
 8012f4e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f58:	3e01      	subs	r6, #1
 8012f5a:	6106      	str	r6, [r0, #16]
 8012f5c:	6039      	str	r1, [r7, #0]
 8012f5e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8012f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f6a:	459c      	cmp	ip, r3
 8012f6c:	f844 2b04 	str.w	r2, [r4], #4
 8012f70:	d9ed      	bls.n	8012f4e <__lshift+0x8a>
 8012f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f76:	459c      	cmp	ip, r3
 8012f78:	f844 2b04 	str.w	r2, [r4], #4
 8012f7c:	d8f3      	bhi.n	8012f66 <__lshift+0xa2>
 8012f7e:	e7e6      	b.n	8012f4e <__lshift+0x8a>

08012f80 <__mcmp>:
 8012f80:	6902      	ldr	r2, [r0, #16]
 8012f82:	690b      	ldr	r3, [r1, #16]
 8012f84:	1ad2      	subs	r2, r2, r3
 8012f86:	b410      	push	{r4}
 8012f88:	bf18      	it	ne
 8012f8a:	4610      	movne	r0, r2
 8012f8c:	d112      	bne.n	8012fb4 <__mcmp+0x34>
 8012f8e:	009b      	lsls	r3, r3, #2
 8012f90:	3014      	adds	r0, #20
 8012f92:	3114      	adds	r1, #20
 8012f94:	4419      	add	r1, r3
 8012f96:	4403      	add	r3, r0
 8012f98:	e001      	b.n	8012f9e <__mcmp+0x1e>
 8012f9a:	4298      	cmp	r0, r3
 8012f9c:	d20d      	bcs.n	8012fba <__mcmp+0x3a>
 8012f9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012fa2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012fa6:	42a2      	cmp	r2, r4
 8012fa8:	d0f7      	beq.n	8012f9a <__mcmp+0x1a>
 8012faa:	4294      	cmp	r4, r2
 8012fac:	bf94      	ite	ls
 8012fae:	2001      	movls	r0, #1
 8012fb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fb8:	4770      	bx	lr
 8012fba:	2000      	movs	r0, #0
 8012fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop

08012fc4 <__mdiff>:
 8012fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc8:	460c      	mov	r4, r1
 8012fca:	4606      	mov	r6, r0
 8012fcc:	4611      	mov	r1, r2
 8012fce:	4620      	mov	r0, r4
 8012fd0:	4615      	mov	r5, r2
 8012fd2:	f7ff ffd5 	bl	8012f80 <__mcmp>
 8012fd6:	1e07      	subs	r7, r0, #0
 8012fd8:	d054      	beq.n	8013084 <__mdiff+0xc0>
 8012fda:	bfbc      	itt	lt
 8012fdc:	4623      	movlt	r3, r4
 8012fde:	462c      	movlt	r4, r5
 8012fe0:	4630      	mov	r0, r6
 8012fe2:	bfb8      	it	lt
 8012fe4:	461d      	movlt	r5, r3
 8012fe6:	6861      	ldr	r1, [r4, #4]
 8012fe8:	bfac      	ite	ge
 8012fea:	2700      	movge	r7, #0
 8012fec:	2701      	movlt	r7, #1
 8012fee:	f7ff fd4f 	bl	8012a90 <_Balloc>
 8012ff2:	692a      	ldr	r2, [r5, #16]
 8012ff4:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8012ff8:	60c7      	str	r7, [r0, #12]
 8012ffa:	3414      	adds	r4, #20
 8012ffc:	3514      	adds	r5, #20
 8012ffe:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8013002:	f100 0314 	add.w	r3, r0, #20
 8013006:	eb04 088c 	add.w	r8, r4, ip, lsl #2
 801300a:	2200      	movs	r2, #0
 801300c:	f854 6b04 	ldr.w	r6, [r4], #4
 8013010:	f855 7b04 	ldr.w	r7, [r5], #4
 8013014:	fa12 f286 	uxtah	r2, r2, r6
 8013018:	b2b9      	uxth	r1, r7
 801301a:	0c3f      	lsrs	r7, r7, #16
 801301c:	1a51      	subs	r1, r2, r1
 801301e:	ebc7 4216 	rsb	r2, r7, r6, lsr #16
 8013022:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8013026:	b289      	uxth	r1, r1
 8013028:	ea41 4602 	orr.w	r6, r1, r2, lsl #16
 801302c:	45a9      	cmp	r9, r5
 801302e:	f843 6b04 	str.w	r6, [r3], #4
 8013032:	ea4f 4222 	mov.w	r2, r2, asr #16
 8013036:	4621      	mov	r1, r4
 8013038:	d8e8      	bhi.n	801300c <__mdiff+0x48>
 801303a:	45a0      	cmp	r8, r4
 801303c:	461f      	mov	r7, r3
 801303e:	d915      	bls.n	801306c <__mdiff+0xa8>
 8013040:	f851 5b04 	ldr.w	r5, [r1], #4
 8013044:	fa12 f285 	uxtah	r2, r2, r5
 8013048:	0c2d      	lsrs	r5, r5, #16
 801304a:	eb05 4522 	add.w	r5, r5, r2, asr #16
 801304e:	b292      	uxth	r2, r2
 8013050:	ea42 4605 	orr.w	r6, r2, r5, lsl #16
 8013054:	4588      	cmp	r8, r1
 8013056:	f843 6b04 	str.w	r6, [r3], #4
 801305a:	ea4f 4225 	mov.w	r2, r5, asr #16
 801305e:	d8ef      	bhi.n	8013040 <__mdiff+0x7c>
 8013060:	43e3      	mvns	r3, r4
 8013062:	4443      	add	r3, r8
 8013064:	f023 0303 	bic.w	r3, r3, #3
 8013068:	3304      	adds	r3, #4
 801306a:	443b      	add	r3, r7
 801306c:	3b04      	subs	r3, #4
 801306e:	b92e      	cbnz	r6, 801307c <__mdiff+0xb8>
 8013070:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013074:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8013078:	2a00      	cmp	r2, #0
 801307a:	d0f9      	beq.n	8013070 <__mdiff+0xac>
 801307c:	f8c0 c010 	str.w	ip, [r0, #16]
 8013080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013084:	4630      	mov	r0, r6
 8013086:	4639      	mov	r1, r7
 8013088:	f7ff fd02 	bl	8012a90 <_Balloc>
 801308c:	2301      	movs	r3, #1
 801308e:	6147      	str	r7, [r0, #20]
 8013090:	6103      	str	r3, [r0, #16]
 8013092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013096:	bf00      	nop

08013098 <__ulp>:
 8013098:	ec53 2b10 	vmov	r2, r3, d0
 801309c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80130a0:	0d1b      	lsrs	r3, r3, #20
 80130a2:	051b      	lsls	r3, r3, #20
 80130a4:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 80130a8:	2900      	cmp	r1, #0
 80130aa:	dd04      	ble.n	80130b6 <__ulp+0x1e>
 80130ac:	460b      	mov	r3, r1
 80130ae:	2200      	movs	r2, #0
 80130b0:	ec43 2b10 	vmov	d0, r2, r3
 80130b4:	4770      	bx	lr
 80130b6:	4249      	negs	r1, r1
 80130b8:	1509      	asrs	r1, r1, #20
 80130ba:	2913      	cmp	r1, #19
 80130bc:	dd0c      	ble.n	80130d8 <__ulp+0x40>
 80130be:	2932      	cmp	r1, #50	; 0x32
 80130c0:	bfdd      	ittte	le
 80130c2:	f1c1 0133 	rsble	r1, r1, #51	; 0x33
 80130c6:	2001      	movle	r0, #1
 80130c8:	fa00 f101 	lslle.w	r1, r0, r1
 80130cc:	2101      	movgt	r1, #1
 80130ce:	2300      	movs	r3, #0
 80130d0:	460a      	mov	r2, r1
 80130d2:	ec43 2b10 	vmov	d0, r2, r3
 80130d6:	4770      	bx	lr
 80130d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80130dc:	fa40 f301 	asr.w	r3, r0, r1
 80130e0:	2200      	movs	r2, #0
 80130e2:	ec43 2b10 	vmov	d0, r2, r3
 80130e6:	4770      	bx	lr

080130e8 <__b2d>:
 80130e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ea:	6904      	ldr	r4, [r0, #16]
 80130ec:	f100 0614 	add.w	r6, r0, #20
 80130f0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80130f4:	460f      	mov	r7, r1
 80130f6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80130fa:	4628      	mov	r0, r5
 80130fc:	f7ff fd92 	bl	8012c24 <__hi0bits>
 8013100:	f1c0 0320 	rsb	r3, r0, #32
 8013104:	280a      	cmp	r0, #10
 8013106:	603b      	str	r3, [r7, #0]
 8013108:	f1a4 0104 	sub.w	r1, r4, #4
 801310c:	dc17      	bgt.n	801313e <__b2d+0x56>
 801310e:	428e      	cmp	r6, r1
 8013110:	f1c0 070b 	rsb	r7, r0, #11
 8013114:	bf38      	it	cc
 8013116:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 801311a:	fa25 fc07 	lsr.w	ip, r5, r7
 801311e:	f100 0015 	add.w	r0, r0, #21
 8013122:	f04c 5c7f 	orr.w	ip, ip, #1069547520	; 0x3fc00000
 8013126:	bf34      	ite	cc
 8013128:	fa21 f707 	lsrcc.w	r7, r1, r7
 801312c:	2700      	movcs	r7, #0
 801312e:	4085      	lsls	r5, r0
 8013130:	f44c 1340 	orr.w	r3, ip, #3145728	; 0x300000
 8013134:	ea47 0205 	orr.w	r2, r7, r5
 8013138:	ec43 2b10 	vmov	d0, r2, r3
 801313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801313e:	428e      	cmp	r6, r1
 8013140:	bf36      	itet	cc
 8013142:	f1a4 0108 	subcc.w	r1, r4, #8
 8013146:	2400      	movcs	r4, #0
 8013148:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
 801314c:	f1b0 070b 	subs.w	r7, r0, #11
 8013150:	d019      	beq.n	8013186 <__b2d+0x9e>
 8013152:	42b1      	cmp	r1, r6
 8013154:	fa05 f507 	lsl.w	r5, r5, r7
 8013158:	bf88      	it	hi
 801315a:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
 801315e:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8013162:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8013166:	fa24 fc00 	lsr.w	ip, r4, r0
 801316a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801316e:	bf8c      	ite	hi
 8013170:	fa21 f000 	lsrhi.w	r0, r1, r0
 8013174:	2000      	movls	r0, #0
 8013176:	40bc      	lsls	r4, r7
 8013178:	ea45 030c 	orr.w	r3, r5, ip
 801317c:	ea40 0204 	orr.w	r2, r0, r4
 8013180:	ec43 2b10 	vmov	d0, r2, r3
 8013184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013186:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 801318a:	f445 1340 	orr.w	r3, r5, #3145728	; 0x300000
 801318e:	4622      	mov	r2, r4
 8013190:	ec43 2b10 	vmov	d0, r2, r3
 8013194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013196:	bf00      	nop

08013198 <__d2b>:
 8013198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801319c:	4689      	mov	r9, r1
 801319e:	b083      	sub	sp, #12
 80131a0:	2101      	movs	r1, #1
 80131a2:	ec55 4b10 	vmov	r4, r5, d0
 80131a6:	4690      	mov	r8, r2
 80131a8:	f7ff fc72 	bl	8012a90 <_Balloc>
 80131ac:	f3c5 570a 	ubfx	r7, r5, #20, #11
 80131b0:	4606      	mov	r6, r0
 80131b2:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80131b6:	b10f      	cbz	r7, 80131bc <__d2b+0x24>
 80131b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80131bc:	9301      	str	r3, [sp, #4]
 80131be:	b314      	cbz	r4, 8013206 <__d2b+0x6e>
 80131c0:	a802      	add	r0, sp, #8
 80131c2:	f840 4d08 	str.w	r4, [r0, #-8]!
 80131c6:	4668      	mov	r0, sp
 80131c8:	f7ff fd4a 	bl	8012c60 <__lo0bits>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d131      	bne.n	8013234 <__d2b+0x9c>
 80131d0:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80131d4:	6172      	str	r2, [r6, #20]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	bf0c      	ite	eq
 80131da:	2401      	moveq	r4, #1
 80131dc:	2402      	movne	r4, #2
 80131de:	61b3      	str	r3, [r6, #24]
 80131e0:	6134      	str	r4, [r6, #16]
 80131e2:	b9d7      	cbnz	r7, 801321a <__d2b+0x82>
 80131e4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80131e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80131ec:	f8c9 0000 	str.w	r0, [r9]
 80131f0:	6918      	ldr	r0, [r3, #16]
 80131f2:	f7ff fd17 	bl	8012c24 <__hi0bits>
 80131f6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80131fa:	f8c8 0000 	str.w	r0, [r8]
 80131fe:	4630      	mov	r0, r6
 8013200:	b003      	add	sp, #12
 8013202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013206:	a801      	add	r0, sp, #4
 8013208:	f7ff fd2a 	bl	8012c60 <__lo0bits>
 801320c:	9b01      	ldr	r3, [sp, #4]
 801320e:	2401      	movs	r4, #1
 8013210:	3020      	adds	r0, #32
 8013212:	6173      	str	r3, [r6, #20]
 8013214:	6134      	str	r4, [r6, #16]
 8013216:	2f00      	cmp	r7, #0
 8013218:	d0e4      	beq.n	80131e4 <__d2b+0x4c>
 801321a:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 801321e:	4407      	add	r7, r0
 8013220:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013224:	f8c9 7000 	str.w	r7, [r9]
 8013228:	f8c8 0000 	str.w	r0, [r8]
 801322c:	4630      	mov	r0, r6
 801322e:	b003      	add	sp, #12
 8013230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013234:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8013238:	f1c0 0120 	rsb	r1, r0, #32
 801323c:	fa03 f101 	lsl.w	r1, r3, r1
 8013240:	430a      	orrs	r2, r1
 8013242:	40c3      	lsrs	r3, r0
 8013244:	9301      	str	r3, [sp, #4]
 8013246:	6172      	str	r2, [r6, #20]
 8013248:	e7c5      	b.n	80131d6 <__d2b+0x3e>
 801324a:	bf00      	nop

0801324c <__ratio>:
 801324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801324e:	b083      	sub	sp, #12
 8013250:	460e      	mov	r6, r1
 8013252:	4669      	mov	r1, sp
 8013254:	4607      	mov	r7, r0
 8013256:	f7ff ff47 	bl	80130e8 <__b2d>
 801325a:	4630      	mov	r0, r6
 801325c:	a901      	add	r1, sp, #4
 801325e:	ec55 4b10 	vmov	r4, r5, d0
 8013262:	f7ff ff41 	bl	80130e8 <__b2d>
 8013266:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801326a:	693f      	ldr	r7, [r7, #16]
 801326c:	6936      	ldr	r6, [r6, #16]
 801326e:	1a41      	subs	r1, r0, r1
 8013270:	ebc6 0e07 	rsb	lr, r6, r7
 8013274:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 8013278:	f1be 0f00 	cmp.w	lr, #0
 801327c:	ec53 2b10 	vmov	r2, r3, d0
 8013280:	4629      	mov	r1, r5
 8013282:	bfc8      	it	gt
 8013284:	eb05 510e 	addgt.w	r1, r5, lr, lsl #20
 8013288:	461f      	mov	r7, r3
 801328a:	bfc7      	ittee	gt
 801328c:	4624      	movgt	r4, r4
 801328e:	460d      	movgt	r5, r1
 8013290:	eba3 570e 	suble.w	r7, r3, lr, lsl #20
 8013294:	4612      	movle	r2, r2
 8013296:	bfd8      	it	le
 8013298:	463b      	movle	r3, r7
 801329a:	4620      	mov	r0, r4
 801329c:	4629      	mov	r1, r5
 801329e:	f7f9 fbd5 	bl	800ca4c <__aeabi_ddiv>
 80132a2:	ec41 0b10 	vmov	d0, r0, r1
 80132a6:	b003      	add	sp, #12
 80132a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132aa:	bf00      	nop

080132ac <_mprec_log10>:
 80132ac:	2817      	cmp	r0, #23
 80132ae:	b510      	push	{r4, lr}
 80132b0:	4604      	mov	r4, r0
 80132b2:	dd0e      	ble.n	80132d2 <_mprec_log10+0x26>
 80132b4:	2100      	movs	r1, #0
 80132b6:	2000      	movs	r0, #0
 80132b8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80132bc:	2300      	movs	r3, #0
 80132be:	2200      	movs	r2, #0
 80132c0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80132c4:	f7f9 fa98 	bl	800c7f8 <__aeabi_dmul>
 80132c8:	3c01      	subs	r4, #1
 80132ca:	d1f7      	bne.n	80132bc <_mprec_log10+0x10>
 80132cc:	ec41 0b10 	vmov	d0, r0, r1
 80132d0:	bd10      	pop	{r4, pc}
 80132d2:	f244 43e0 	movw	r3, #17632	; 0x44e0
 80132d6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80132da:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80132de:	ed93 0b00 	vldr	d0, [r3]
 80132e2:	bd10      	pop	{r4, pc}

080132e4 <__copybits>:
 80132e4:	b470      	push	{r4, r5, r6}
 80132e6:	6915      	ldr	r5, [r2, #16]
 80132e8:	f102 0314 	add.w	r3, r2, #20
 80132ec:	3901      	subs	r1, #1
 80132ee:	114e      	asrs	r6, r1, #5
 80132f0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80132f4:	3601      	adds	r6, #1
 80132f6:	42ab      	cmp	r3, r5
 80132f8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80132fc:	d20c      	bcs.n	8013318 <__copybits+0x34>
 80132fe:	4601      	mov	r1, r0
 8013300:	f853 4b04 	ldr.w	r4, [r3], #4
 8013304:	429d      	cmp	r5, r3
 8013306:	f841 4b04 	str.w	r4, [r1], #4
 801330a:	d8f9      	bhi.n	8013300 <__copybits+0x1c>
 801330c:	1aab      	subs	r3, r5, r2
 801330e:	3b15      	subs	r3, #21
 8013310:	f023 0303 	bic.w	r3, r3, #3
 8013314:	3304      	adds	r3, #4
 8013316:	4418      	add	r0, r3
 8013318:	4286      	cmp	r6, r0
 801331a:	d904      	bls.n	8013326 <__copybits+0x42>
 801331c:	2300      	movs	r3, #0
 801331e:	f840 3b04 	str.w	r3, [r0], #4
 8013322:	4286      	cmp	r6, r0
 8013324:	d8fb      	bhi.n	801331e <__copybits+0x3a>
 8013326:	bc70      	pop	{r4, r5, r6}
 8013328:	4770      	bx	lr
 801332a:	bf00      	nop

0801332c <__any_on>:
 801332c:	6903      	ldr	r3, [r0, #16]
 801332e:	114a      	asrs	r2, r1, #5
 8013330:	3014      	adds	r0, #20
 8013332:	4293      	cmp	r3, r2
 8013334:	b410      	push	{r4}
 8013336:	bfb8      	it	lt
 8013338:	eb00 0383 	addlt.w	r3, r0, r3, lsl #2
 801333c:	db13      	blt.n	8013366 <__any_on+0x3a>
 801333e:	dd10      	ble.n	8013362 <__any_on+0x36>
 8013340:	f011 011f 	ands.w	r1, r1, #31
 8013344:	d00d      	beq.n	8013362 <__any_on+0x36>
 8013346:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 801334a:	fa24 f301 	lsr.w	r3, r4, r1
 801334e:	fa03 f101 	lsl.w	r1, r3, r1
 8013352:	42a1      	cmp	r1, r4
 8013354:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8013358:	d005      	beq.n	8013366 <__any_on+0x3a>
 801335a:	2001      	movs	r0, #1
 801335c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013360:	4770      	bx	lr
 8013362:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8013366:	4298      	cmp	r0, r3
 8013368:	d20a      	bcs.n	8013380 <__any_on+0x54>
 801336a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801336e:	3b04      	subs	r3, #4
 8013370:	b122      	cbz	r2, 801337c <__any_on+0x50>
 8013372:	e7f2      	b.n	801335a <__any_on+0x2e>
 8013374:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013378:	2a00      	cmp	r2, #0
 801337a:	d1ee      	bne.n	801335a <__any_on+0x2e>
 801337c:	4298      	cmp	r0, r3
 801337e:	d3f9      	bcc.n	8013374 <__any_on+0x48>
 8013380:	2000      	movs	r0, #0
 8013382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013386:	4770      	bx	lr

08013388 <_read_r>:
 8013388:	b570      	push	{r4, r5, r6, lr}
 801338a:	f641 342c 	movw	r4, #6956	; 0x1b2c
 801338e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8013392:	4606      	mov	r6, r0
 8013394:	2500      	movs	r5, #0
 8013396:	4608      	mov	r0, r1
 8013398:	4611      	mov	r1, r2
 801339a:	461a      	mov	r2, r3
 801339c:	6025      	str	r5, [r4, #0]
 801339e:	f7f4 fded 	bl	8007f7c <_read>
 80133a2:	1c43      	adds	r3, r0, #1
 80133a4:	d000      	beq.n	80133a8 <_read_r+0x20>
 80133a6:	bd70      	pop	{r4, r5, r6, pc}
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d0fb      	beq.n	80133a6 <_read_r+0x1e>
 80133ae:	6033      	str	r3, [r6, #0]
 80133b0:	bd70      	pop	{r4, r5, r6, pc}
 80133b2:	bf00      	nop

080133b4 <cleanup_glue>:
 80133b4:	b538      	push	{r3, r4, r5, lr}
 80133b6:	460c      	mov	r4, r1
 80133b8:	6809      	ldr	r1, [r1, #0]
 80133ba:	4605      	mov	r5, r0
 80133bc:	b109      	cbz	r1, 80133c2 <cleanup_glue+0xe>
 80133be:	f7ff fff9 	bl	80133b4 <cleanup_glue>
 80133c2:	4628      	mov	r0, r5
 80133c4:	4621      	mov	r1, r4
 80133c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133ca:	f7fe bfcb 	b.w	8012364 <_free_r>
 80133ce:	bf00      	nop

080133d0 <_reclaim_reent>:
 80133d0:	f240 5388 	movw	r3, #1416	; 0x588
 80133d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80133d8:	b570      	push	{r4, r5, r6, lr}
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	4298      	cmp	r0, r3
 80133de:	4605      	mov	r5, r0
 80133e0:	d032      	beq.n	8013448 <_reclaim_reent+0x78>
 80133e2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80133e4:	b1aa      	cbz	r2, 8013412 <_reclaim_reent+0x42>
 80133e6:	2300      	movs	r3, #0
 80133e8:	461e      	mov	r6, r3
 80133ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80133ee:	b909      	cbnz	r1, 80133f4 <_reclaim_reent+0x24>
 80133f0:	e007      	b.n	8013402 <_reclaim_reent+0x32>
 80133f2:	4621      	mov	r1, r4
 80133f4:	680c      	ldr	r4, [r1, #0]
 80133f6:	4628      	mov	r0, r5
 80133f8:	f7fe ffb4 	bl	8012364 <_free_r>
 80133fc:	2c00      	cmp	r4, #0
 80133fe:	d1f8      	bne.n	80133f2 <_reclaim_reent+0x22>
 8013400:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8013402:	3601      	adds	r6, #1
 8013404:	2e20      	cmp	r6, #32
 8013406:	4633      	mov	r3, r6
 8013408:	d1ef      	bne.n	80133ea <_reclaim_reent+0x1a>
 801340a:	4611      	mov	r1, r2
 801340c:	4628      	mov	r0, r5
 801340e:	f7fe ffa9 	bl	8012364 <_free_r>
 8013412:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8013414:	b111      	cbz	r1, 801341c <_reclaim_reent+0x4c>
 8013416:	4628      	mov	r0, r5
 8013418:	f7fe ffa4 	bl	8012364 <_free_r>
 801341c:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8013420:	b159      	cbz	r1, 801343a <_reclaim_reent+0x6a>
 8013422:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8013426:	42b1      	cmp	r1, r6
 8013428:	d101      	bne.n	801342e <_reclaim_reent+0x5e>
 801342a:	e006      	b.n	801343a <_reclaim_reent+0x6a>
 801342c:	4621      	mov	r1, r4
 801342e:	680c      	ldr	r4, [r1, #0]
 8013430:	4628      	mov	r0, r5
 8013432:	f7fe ff97 	bl	8012364 <_free_r>
 8013436:	42a6      	cmp	r6, r4
 8013438:	d1f8      	bne.n	801342c <_reclaim_reent+0x5c>
 801343a:	6d69      	ldr	r1, [r5, #84]	; 0x54
 801343c:	b111      	cbz	r1, 8013444 <_reclaim_reent+0x74>
 801343e:	4628      	mov	r0, r5
 8013440:	f7fe ff90 	bl	8012364 <_free_r>
 8013444:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013446:	b903      	cbnz	r3, 801344a <_reclaim_reent+0x7a>
 8013448:	bd70      	pop	{r4, r5, r6, pc}
 801344a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801344c:	4628      	mov	r0, r5
 801344e:	4798      	blx	r3
 8013450:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 8013454:	2900      	cmp	r1, #0
 8013456:	d0f7      	beq.n	8013448 <_reclaim_reent+0x78>
 8013458:	4628      	mov	r0, r5
 801345a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801345e:	f7ff bfa9 	b.w	80133b4 <cleanup_glue>
 8013462:	bf00      	nop

08013464 <__fpclassifyd>:
 8013464:	ec53 2b10 	vmov	r2, r3, d0
 8013468:	ea52 0103 	orrs.w	r1, r2, r3
 801346c:	d101      	bne.n	8013472 <__fpclassifyd+0xe>
 801346e:	2002      	movs	r0, #2
 8013470:	4770      	bx	lr
 8013472:	f1d2 0101 	rsbs	r1, r2, #1
 8013476:	bf38      	it	cc
 8013478:	2100      	movcc	r1, #0
 801347a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801347e:	bf08      	it	eq
 8013480:	2a00      	cmpeq	r2, #0
 8013482:	d0f4      	beq.n	801346e <__fpclassifyd+0xa>
 8013484:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801348c:	f5a2 1080 	sub.w	r0, r2, #1048576	; 0x100000
 8013490:	f6c7 73df 	movt	r3, #32735	; 0x7fdf
 8013494:	4298      	cmp	r0, r3
 8013496:	d801      	bhi.n	801349c <__fpclassifyd+0x38>
 8013498:	2004      	movs	r0, #4
 801349a:	4770      	bx	lr
 801349c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80134a0:	d201      	bcs.n	80134a6 <__fpclassifyd+0x42>
 80134a2:	2003      	movs	r0, #3
 80134a4:	4770      	bx	lr
 80134a6:	2000      	movs	r0, #0
 80134a8:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 80134ac:	4282      	cmp	r2, r0
 80134ae:	bf14      	ite	ne
 80134b0:	2000      	movne	r0, #0
 80134b2:	f001 0001 	andeq.w	r0, r1, #1
 80134b6:	4770      	bx	lr

080134b8 <__swbuf_r>:
 80134b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ba:	460d      	mov	r5, r1
 80134bc:	4614      	mov	r4, r2
 80134be:	4607      	mov	r7, r0
 80134c0:	b110      	cbz	r0, 80134c8 <__swbuf_r+0x10>
 80134c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d046      	beq.n	8013556 <__swbuf_r+0x9e>
 80134c8:	89a2      	ldrh	r2, [r4, #12]
 80134ca:	69a0      	ldr	r0, [r4, #24]
 80134cc:	b293      	uxth	r3, r2
 80134ce:	60a0      	str	r0, [r4, #8]
 80134d0:	0718      	lsls	r0, r3, #28
 80134d2:	d52d      	bpl.n	8013530 <__swbuf_r+0x78>
 80134d4:	6926      	ldr	r6, [r4, #16]
 80134d6:	2e00      	cmp	r6, #0
 80134d8:	d02a      	beq.n	8013530 <__swbuf_r+0x78>
 80134da:	0499      	lsls	r1, r3, #18
 80134dc:	bf5f      	itttt	pl
 80134de:	6e63      	ldrpl	r3, [r4, #100]	; 0x64
 80134e0:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 80134e4:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80134e8:	6663      	strpl	r3, [r4, #100]	; 0x64
 80134ea:	6823      	ldr	r3, [r4, #0]
 80134ec:	bf58      	it	pl
 80134ee:	81a2      	strhpl	r2, [r4, #12]
 80134f0:	6962      	ldr	r2, [r4, #20]
 80134f2:	1b9e      	subs	r6, r3, r6
 80134f4:	4296      	cmp	r6, r2
 80134f6:	b2ed      	uxtb	r5, r5
 80134f8:	bfb8      	it	lt
 80134fa:	3601      	addlt	r6, #1
 80134fc:	da22      	bge.n	8013544 <__swbuf_r+0x8c>
 80134fe:	68a2      	ldr	r2, [r4, #8]
 8013500:	1c59      	adds	r1, r3, #1
 8013502:	3a01      	subs	r2, #1
 8013504:	60a2      	str	r2, [r4, #8]
 8013506:	6021      	str	r1, [r4, #0]
 8013508:	701d      	strb	r5, [r3, #0]
 801350a:	6963      	ldr	r3, [r4, #20]
 801350c:	42b3      	cmp	r3, r6
 801350e:	d006      	beq.n	801351e <__swbuf_r+0x66>
 8013510:	89a3      	ldrh	r3, [r4, #12]
 8013512:	07db      	lsls	r3, r3, #31
 8013514:	d501      	bpl.n	801351a <__swbuf_r+0x62>
 8013516:	2d0a      	cmp	r5, #10
 8013518:	d001      	beq.n	801351e <__swbuf_r+0x66>
 801351a:	4628      	mov	r0, r5
 801351c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801351e:	4638      	mov	r0, r7
 8013520:	4621      	mov	r1, r4
 8013522:	f7fe fe2d 	bl	8012180 <_fflush_r>
 8013526:	2800      	cmp	r0, #0
 8013528:	d0f7      	beq.n	801351a <__swbuf_r+0x62>
 801352a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801352e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013530:	4638      	mov	r0, r7
 8013532:	4621      	mov	r1, r4
 8013534:	f7fd fc76 	bl	8010e24 <__swsetup_r>
 8013538:	2800      	cmp	r0, #0
 801353a:	d1f6      	bne.n	801352a <__swbuf_r+0x72>
 801353c:	89a2      	ldrh	r2, [r4, #12]
 801353e:	6926      	ldr	r6, [r4, #16]
 8013540:	b293      	uxth	r3, r2
 8013542:	e7ca      	b.n	80134da <__swbuf_r+0x22>
 8013544:	4638      	mov	r0, r7
 8013546:	4621      	mov	r1, r4
 8013548:	f7fe fe1a 	bl	8012180 <_fflush_r>
 801354c:	2800      	cmp	r0, #0
 801354e:	d1ec      	bne.n	801352a <__swbuf_r+0x72>
 8013550:	6823      	ldr	r3, [r4, #0]
 8013552:	2601      	movs	r6, #1
 8013554:	e7d3      	b.n	80134fe <__swbuf_r+0x46>
 8013556:	f7fa f997 	bl	800d888 <__sinit>
 801355a:	e7b5      	b.n	80134c8 <__swbuf_r+0x10>

0801355c <__swbuf>:
 801355c:	f240 5388 	movw	r3, #1416	; 0x588
 8013560:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8013564:	460a      	mov	r2, r1
 8013566:	4601      	mov	r1, r0
 8013568:	6818      	ldr	r0, [r3, #0]
 801356a:	f7ff bfa5 	b.w	80134b8 <__swbuf_r>
 801356e:	bf00      	nop

08013570 <_wcrtomb_r>:
 8013570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013574:	460d      	mov	r5, r1
 8013576:	b086      	sub	sp, #24
 8013578:	4606      	mov	r6, r0
 801357a:	4690      	mov	r8, r2
 801357c:	461f      	mov	r7, r3
 801357e:	b1a9      	cbz	r1, 80135ac <_wcrtomb_r+0x3c>
 8013580:	f640 2418 	movw	r4, #2584	; 0xa18
 8013584:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8013588:	6824      	ldr	r4, [r4, #0]
 801358a:	f7ff f96d 	bl	8012868 <__locale_charset>
 801358e:	9700      	str	r7, [sp, #0]
 8013590:	4603      	mov	r3, r0
 8013592:	4629      	mov	r1, r5
 8013594:	4642      	mov	r2, r8
 8013596:	4630      	mov	r0, r6
 8013598:	47a0      	blx	r4
 801359a:	1c43      	adds	r3, r0, #1
 801359c:	bf01      	itttt	eq
 801359e:	2200      	moveq	r2, #0
 80135a0:	238a      	moveq	r3, #138	; 0x8a
 80135a2:	603a      	streq	r2, [r7, #0]
 80135a4:	6033      	streq	r3, [r6, #0]
 80135a6:	b006      	add	sp, #24
 80135a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135ac:	f640 2318 	movw	r3, #2584	; 0xa18
 80135b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135b4:	681c      	ldr	r4, [r3, #0]
 80135b6:	f7ff f957 	bl	8012868 <__locale_charset>
 80135ba:	9700      	str	r7, [sp, #0]
 80135bc:	4603      	mov	r3, r0
 80135be:	462a      	mov	r2, r5
 80135c0:	4630      	mov	r0, r6
 80135c2:	a903      	add	r1, sp, #12
 80135c4:	47a0      	blx	r4
 80135c6:	e7e8      	b.n	801359a <_wcrtomb_r+0x2a>

080135c8 <wcrtomb>:
 80135c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135cc:	f240 5388 	movw	r3, #1416	; 0x588
 80135d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135d4:	b086      	sub	sp, #24
 80135d6:	681d      	ldr	r5, [r3, #0]
 80135d8:	f640 2318 	movw	r3, #2584	; 0xa18
 80135dc:	4604      	mov	r4, r0
 80135de:	460f      	mov	r7, r1
 80135e0:	4616      	mov	r6, r2
 80135e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80135e6:	b190      	cbz	r0, 801360e <wcrtomb+0x46>
 80135e8:	f8d3 8000 	ldr.w	r8, [r3]
 80135ec:	f7ff f93c 	bl	8012868 <__locale_charset>
 80135f0:	9600      	str	r6, [sp, #0]
 80135f2:	4603      	mov	r3, r0
 80135f4:	4621      	mov	r1, r4
 80135f6:	463a      	mov	r2, r7
 80135f8:	4628      	mov	r0, r5
 80135fa:	47c0      	blx	r8
 80135fc:	1c42      	adds	r2, r0, #1
 80135fe:	bf01      	itttt	eq
 8013600:	2200      	moveq	r2, #0
 8013602:	238a      	moveq	r3, #138	; 0x8a
 8013604:	6032      	streq	r2, [r6, #0]
 8013606:	602b      	streq	r3, [r5, #0]
 8013608:	b006      	add	sp, #24
 801360a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801360e:	681f      	ldr	r7, [r3, #0]
 8013610:	f7ff f92a 	bl	8012868 <__locale_charset>
 8013614:	9600      	str	r6, [sp, #0]
 8013616:	4603      	mov	r3, r0
 8013618:	4622      	mov	r2, r4
 801361a:	4628      	mov	r0, r5
 801361c:	a903      	add	r1, sp, #12
 801361e:	47b8      	blx	r7
 8013620:	e7ec      	b.n	80135fc <wcrtomb+0x34>
 8013622:	bf00      	nop

08013624 <__ascii_wctomb>:
 8013624:	b149      	cbz	r1, 801363a <__ascii_wctomb+0x16>
 8013626:	2aff      	cmp	r2, #255	; 0xff
 8013628:	bf85      	ittet	hi
 801362a:	238a      	movhi	r3, #138	; 0x8a
 801362c:	6003      	strhi	r3, [r0, #0]
 801362e:	700a      	strbls	r2, [r1, #0]
 8013630:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013634:	bf98      	it	ls
 8013636:	2001      	movls	r0, #1
 8013638:	4770      	bx	lr
 801363a:	4608      	mov	r0, r1
 801363c:	4770      	bx	lr
 801363e:	bf00      	nop

08013640 <_wctomb_r>:
 8013640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013644:	f640 2418 	movw	r4, #2584	; 0xa18
 8013648:	f2c2 0400 	movt	r4, #8192	; 0x2000
 801364c:	b082      	sub	sp, #8
 801364e:	4698      	mov	r8, r3
 8013650:	4605      	mov	r5, r0
 8013652:	460f      	mov	r7, r1
 8013654:	4616      	mov	r6, r2
 8013656:	6824      	ldr	r4, [r4, #0]
 8013658:	f7ff f906 	bl	8012868 <__locale_charset>
 801365c:	f8cd 8000 	str.w	r8, [sp]
 8013660:	4603      	mov	r3, r0
 8013662:	4639      	mov	r1, r7
 8013664:	4632      	mov	r2, r6
 8013666:	4628      	mov	r0, r5
 8013668:	47a0      	blx	r4
 801366a:	b002      	add	sp, #8
 801366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013670 <_calloc_r>:
 8013670:	b510      	push	{r4, lr}
 8013672:	fb02 f101 	mul.w	r1, r2, r1
 8013676:	f7fa fb05 	bl	800dc84 <_malloc_r>
 801367a:	4604      	mov	r4, r0
 801367c:	b170      	cbz	r0, 801369c <_calloc_r+0x2c>
 801367e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013682:	f022 0203 	bic.w	r2, r2, #3
 8013686:	3a04      	subs	r2, #4
 8013688:	2a24      	cmp	r2, #36	; 0x24
 801368a:	d81c      	bhi.n	80136c6 <_calloc_r+0x56>
 801368c:	2a13      	cmp	r2, #19
 801368e:	bf98      	it	ls
 8013690:	4603      	movls	r3, r0
 8013692:	d805      	bhi.n	80136a0 <_calloc_r+0x30>
 8013694:	2200      	movs	r2, #0
 8013696:	601a      	str	r2, [r3, #0]
 8013698:	605a      	str	r2, [r3, #4]
 801369a:	609a      	str	r2, [r3, #8]
 801369c:	4620      	mov	r0, r4
 801369e:	bd10      	pop	{r4, pc}
 80136a0:	2300      	movs	r3, #0
 80136a2:	2a1b      	cmp	r2, #27
 80136a4:	6003      	str	r3, [r0, #0]
 80136a6:	6043      	str	r3, [r0, #4]
 80136a8:	bf98      	it	ls
 80136aa:	f100 0308 	addls.w	r3, r0, #8
 80136ae:	d9f1      	bls.n	8013694 <_calloc_r+0x24>
 80136b0:	2a24      	cmp	r2, #36	; 0x24
 80136b2:	6083      	str	r3, [r0, #8]
 80136b4:	60c3      	str	r3, [r0, #12]
 80136b6:	bf05      	ittet	eq
 80136b8:	6103      	streq	r3, [r0, #16]
 80136ba:	6143      	streq	r3, [r0, #20]
 80136bc:	f100 0310 	addne.w	r3, r0, #16
 80136c0:	f100 0318 	addeq.w	r3, r0, #24
 80136c4:	e7e6      	b.n	8013694 <_calloc_r+0x24>
 80136c6:	2100      	movs	r1, #0
 80136c8:	f7fa fdd6 	bl	800e278 <memset>
 80136cc:	4620      	mov	r0, r4
 80136ce:	bd10      	pop	{r4, pc}

080136d0 <_fstat_r>:
 80136d0:	b538      	push	{r3, r4, r5, lr}
 80136d2:	f641 342c 	movw	r4, #6956	; 0x1b2c
 80136d6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80136da:	2300      	movs	r3, #0
 80136dc:	4605      	mov	r5, r0
 80136de:	4608      	mov	r0, r1
 80136e0:	4611      	mov	r1, r2
 80136e2:	6023      	str	r3, [r4, #0]
 80136e4:	f7f4 fc0c 	bl	8007f00 <_fstat>
 80136e8:	1c43      	adds	r3, r0, #1
 80136ea:	d000      	beq.n	80136ee <_fstat_r+0x1e>
 80136ec:	bd38      	pop	{r3, r4, r5, pc}
 80136ee:	6823      	ldr	r3, [r4, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d0fb      	beq.n	80136ec <_fstat_r+0x1c>
 80136f4:	602b      	str	r3, [r5, #0]
 80136f6:	bd38      	pop	{r3, r4, r5, pc}

080136f8 <_isatty_r>:
 80136f8:	b538      	push	{r3, r4, r5, lr}
 80136fa:	f641 342c 	movw	r4, #6956	; 0x1b2c
 80136fe:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8013702:	2300      	movs	r3, #0
 8013704:	4605      	mov	r5, r0
 8013706:	4608      	mov	r0, r1
 8013708:	6023      	str	r3, [r4, #0]
 801370a:	f7f4 fc01 	bl	8007f10 <_isatty>
 801370e:	1c43      	adds	r3, r0, #1
 8013710:	d000      	beq.n	8013714 <_isatty_r+0x1c>
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	6823      	ldr	r3, [r4, #0]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d0fb      	beq.n	8013712 <_isatty_r+0x1a>
 801371a:	602b      	str	r3, [r5, #0]
 801371c:	bd38      	pop	{r3, r4, r5, pc}
 801371e:	bf00      	nop
 8013720:	6e69616d 	.word	0x6e69616d
 8013724:	00000d0a 	.word	0x00000d0a
 8013728:	30303030 	.word	0x30303030
 801372c:	30303030 	.word	0x30303030
 8013730:	30303030 	.word	0x30303030
 8013734:	30303030 	.word	0x30303030
 8013738:	30303030 	.word	0x30303030
 801373c:	30303030 	.word	0x30303030
 8013740:	30303030 	.word	0x30303030
 8013744:	30303030 	.word	0x30303030
 8013748:	00000000 	.word	0x00000000
 801374c:	cd02ab01 	.word	0xcd02ab01
 8013750:	88ef0504 	.word	0x88ef0504
 8013754:	e5d4c3b2 	.word	0xe5d4c3b2
 8013758:	bf987654 	.word	0xbf987654

0801375c <mp_bits_per_limb>:
 801375c:	00000020 000a7325 2f637273 696e696d      ...%s..src/mini
 801376c:	706d672d 0000632e 657a6973 30203e20     -gmp.c..size > 0
 801377c:	00000000 5f706d67 61666564 5f746c75     ....gmp_default_
 801378c:	6f6c6c61 56203a63 75747269 6d206c61     alloc: Virtual m
 801379c:	726f6d65 78652079 73756168 2e646574     emory exhausted.
 80137ac:	00000000 5f706d67 61666564 5f746c75     ....gmp_default_
 80137bc:	6c616572 203a636f 74726956 206c6175     realoc: Virtual 
 80137cc:	6f6d656d 65207972 75616878 64657473     memory exhausted
 80137dc:	0000002e 203e206e 00000030 3e206e61     ....n > 0...an >
 80137ec:	6e62203d 00000000 3d3e206e 00003120     = bn....n >= 1..
 80137fc:	3e206e75 6e76203d 00000000 3e206e76     un >= vn....vn >
 801380c:	0031203d 20746e63 31203d3e 00000000     = 1.cnt >= 1....
 801381c:	20746e63 4d47203c 494c5f50 425f424d     cnt < GMP_LIMB_B
 801382c:	00535449 3d207875 2030203d 75207c7c     ITS.ux == 0 || u
 801383c:	3d3d2078 504d4720 4d494c5f 414d5f42     x == GMP_LIMB_MA
 801384c:	00000058 3d3c2030 26206920 20692026     X...0 <= i && i 
 801385c:	75203d3c 0000006e 3e203175 4d47203d     <= un...u1 >= GM
 801386c:	494c5f50 485f424d 42484749 00005449     P_LIMB_HIGHBIT..
 801387c:	203e2064 00000030 3e203164 00003020     d > 0...d1 > 0..
 801388c:	3e206e64 00003020 3e206e6e 0032203d     dn > 0..nn >= 2.
 801389c:	20307228 28203c3c 5f504d47 424d494c     (r0 << (GMP_LIMB
 80138ac:	5449425f 202d2053 66696873 20292974     _BITS - shift)) 
 80138bc:	30203d3d 00000000 3e206e64 00003220     == 0....dn > 2..
 80138cc:	3e206e6e 6e64203d 00000000 20316428     nn >= dn....(d1 
 80138dc:	4d472026 494c5f50 485f424d 42484749     & GMP_LIMB_HIGHB
 80138ec:	20295449 30203d21 00000000 2d766e69     IT) != 0....inv-
 80138fc:	2031643e 64203d3d 6e645b70 005d312d     >d1 == dp[dn-1].
 801390c:	2d766e69 2030643e 64203d3d 6e645b70     inv->d0 == dp[dn
 801391c:	005d322d 766e6928 31643e2d 47202620     -2].(inv->d1 & G
 801392c:	4c5f504d 5f424d49 48474948 29544942     MP_LIMB_HIGHBIT)
 801393c:	203d2120 00000030 79635f5f 203d3d20      != 0...__cy == 
 801394c:	00000030 203e2075 00000030 3c207228     0...u > 0...(r <
 801395c:	4728203c 4c5f504d 5f424d49 53544942     < (GMP_LIMB_BITS
 801396c:	62202d20 2d766e69 6968733e 29297466      - binv->shift))
 801397c:	203d3d20 00000030 3e206e75 00003020      == 0...un > 0..
 801398c:	755b7075 5d312d6e 30203e20 00000000     up[un-1] > 0....
 801399c:	3d3d206a 006e7320 203c2078 00302e31     j == sn.x < 1.0.
 80139ac:	5f7a706d 5f766964 203a7271 69766944     mpz_div_qr: Divi
 80139bc:	62206564 657a2079 002e6f72 3e206e72     de by zero..rn >
 80139cc:	00003020 3d207963 0030203d 3c206c72      0..cy == 0.rl <
 80139dc:	00006420 3d206e71 2030203d 71207c7c      d..qn == 0 || q
 80139ec:	6e715b70 205d312d 0030203e 7c207528     p[qn-1] > 0.(u |
 80139fc:	20297620 0030203e 5f3e2d72 735f706d      v) > 0.r->_mp_s
 8013a0c:	20657a69 0030203e 5f7a706d 6d776f70     ize > 0.mpz_powm
 8013a1c:	655a203a 6d206f72 6c75646f 00002e6f     : Zero modulo...
 8013a2c:	5f7a706d 6d776f70 654e203a 69746167     mpz_powm: Negati
 8013a3c:	65206576 6e6f7078 20746e65 20646e61     ve exponent and 
 8013a4c:	2d6e6f6e 65766e69 62697472 6220656c     non-invertible b
 8013a5c:	2e657361 00000000 5f7a706d 746f6f72     ase.....mpz_root
 8013a6c:	3a6d6572 67654e20 76697461 72612065     rem: Negative ar
 8013a7c:	656d7567 202c746e 68746977 65766520     gument, with eve
 8013a8c:	6f72206e 002e746f 5f7a706d 746f6f72     n root..mpz_root
 8013a9c:	3a6d6572 72655a20 2068746f 746f6f72     rem: Zeroth root
 8013aac:	0000002e 6e5b2070 205d312d 30203d21     ....p [n-1] != 0
 8013abc:	00000000 5f3e2d73 735f706d 20657a69     ....s->_mp_size 
 8013acc:	28203d3d 29312b6e 0000322f 203e206b     == (n+1)/2..k > 
 8013adc:	00000030 5f3e2d6e 735f706d 20657a69     0...n->_mp_size 
 8013aec:	30203d21 00000000 3d3e206a 00303320     != 0....j >= 30.
 8013afc:	626d696c 646e695f 3c207865 006e6420     limb_index < dn.
 8013b0c:	3d206376 0030203d 3c206e76 00003020     vc == 0.vn < 0..
 8013b1c:	65736162 203d3e20 00000032 65736162     base >= 2...base
 8013b2c:	203d3c20 00003633 33323130 37363534      <= 36..01234567
 8013b3c:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
 8013b4c:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....
 8013b5c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8013b6c:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
 8013b7c:	5a595857 00000000 65736162 203d3d20     WXYZ....base == 
 8013b8c:	7c7c2030 61622820 3e206573 2032203d     0 || (base >= 2 
 8013b9c:	62202626 20657361 33203d3c 00002936     && base <= 36)..
 8013bac:	3c206e72 6c61203d 00636f6c 5f7a706d     rn <= alloc.mpz_
 8013bbc:	6f706d69 203a7472 6c69614e 6f6e2073     import: Nails no
 8013bcc:	75732074 726f7070 2e646574 00000000     t supported.....
 8013bdc:	6564726f 3d3d2072 7c203120 726f207c     order == 1 || or
 8013bec:	20726564 2d203d3d 00000031 69646e65     der == -1...endi
 8013bfc:	3e206e61 312d203d 20262620 69646e65     an >= -1 && endi
 8013c0c:	3c206e61 0031203d 202b2069 74796228     an <= 1.i + (byt
 8013c1c:	3e207365 20293020 72203d3d 0000006e     es > 0) == rn...
 8013c2c:	657a6973 30203e20 207c7c20 5f3e2d75     size > 0 || u->_
 8013c3c:	735f706d 20657a69 30203d3d 00000000     mp_size == 0....
 8013c4c:	626d696c 203d2120 00000030 3d3d2069     limb != 0...i ==
 8013c5c:	006e7520 3d3d206b 756f6320 0000746e      un.k == count..

08013c6c <__func__.6170>:
 8013c6c:	5f706d67 61666564 5f746c75 6f6c6c61     gmp_default_allo
 8013c7c:	00000063                                c...

08013c80 <__func__.6219>:
 8013c80:	5f706d67 61657278 636f6c6c 6d696c5f     gmp_xrealloc_lim
 8013c90:	00007362                                bs..

08013c94 <__func__.6273>:
 8013c94:	5f6e706d 5f646461 00000031              mpn_add_1...

08013ca0 <__func__.6299>:
 8013ca0:	5f6e706d 00646461                       mpn_add.

08013ca8 <__func__.6307>:
 8013ca8:	5f6e706d 5f627573 00000031              mpn_sub_1...

08013cb4 <__func__.6333>:
 8013cb4:	5f6e706d 00627573                       mpn_sub.

08013cbc <__func__.6344>:
 8013cbc:	5f6e706d 5f6c756d 00000031              mpn_mul_1...

08013cc8 <__func__.6368>:
 8013cc8:	5f6e706d 6d646461 315f6c75 00000000     mpn_addmul_1....

08013cd8 <__func__.6392>:
 8013cd8:	5f6e706d 6d627573 315f6c75 00000000     mpn_submul_1....

08013ce8 <__func__.6412>:
 8013ce8:	5f6e706d 006c756d                       mpn_mul.

08013cf0 <__func__.6438>:
 8013cf0:	5f6e706d 6968736c 00007466              mpn_lshift..

08013cfc <__func__.6453>:
 8013cfc:	5f6e706d 69687372 00007466              mpn_rshift..

08013d08 <__func__.6465>:
 8013d08:	5f6e706d 6d6d6f63 735f6e6f 006e6163     mpn_common_scan.

08013d18 <__func__.6500>:
 8013d18:	5f6e706d 65766e69 335f7472 00327962     mpn_invert_3by2.

08013d28 <__func__.6523>:
 8013d28:	5f6e706d 5f766964 315f7271 766e695f     mpn_div_qr_1_inv
 8013d38:	00747265                                ert.

08013d3c <__func__.6538>:
 8013d3c:	5f6e706d 5f766964 325f7271 766e695f     mpn_div_qr_2_inv
 8013d4c:	00747265                                ert.

08013d50 <__func__.6552>:
 8013d50:	5f6e706d 5f766964 695f7271 7265766e     mpn_div_qr_inver
 8013d60:	00000074                                t...

08013d64 <__func__.6599>:
 8013d64:	5f6e706d 5f766964 315f7271 00000000     mpn_div_qr_1....

08013d74 <__func__.6628>:
 8013d74:	5f6e706d 5f766964 325f7271 6572705f     mpn_div_qr_2_pre
 8013d84:	00766e69                                inv.

08013d88 <__func__.6677>:
 8013d88:	5f6e706d 5f766964 705f7271 00003169     mpn_div_qr_pi1..

08013d98 <__func__.6718>:
 8013d98:	5f6e706d 5f766964 705f7271 6e696572     mpn_div_qr_prein
 8013da8:	00000076                                v...

08013dac <__func__.6731>:
 8013dac:	5f6e706d 5f766964 00007271              mpn_div_qr..

08013db8 <__func__.6762>:
 8013db8:	5f6e706d 626d696c 7a69735f 6e695f65     mpn_limb_size_in
 8013dc8:	7361625f 00325f65                       _base_2.

08013dd0 <__func__.6810>:
 8013dd0:	5f6e706d 626d696c 7465675f 7274735f     mpn_limb_get_str
 8013de0:	00000000                                ....

08013de4 <__func__.6843>:
 8013de4:	5f6e706d 5f746567 00727473              mpn_get_str.

08013df0 <__func__.6878>:
 8013df0:	5f6e706d 5f746573 5f727473 6568746f     mpn_set_str_othe
 8013e00:	00000072                                r...

08013e04 <__func__.6961>:
 8013e04:	5f7a706d 626d696c 6f6d5f73 79666964     mpz_limbs_modify
 8013e14:	00000000                                ....

08013e18 <__func__.6990>:
 8013e18:	5f7a706d 5f746573 00000064              mpz_set_d...

08013e24 <__func__.7090>:
 8013e24:	5f7a706d 5f736261 5f627573 00006975     mpz_abs_sub_ui..

08013e34 <__func__.7127>:
 8013e34:	5f7a706d 5f736261 00627573              mpz_abs_sub.

08013e40 <__func__.7301>:
 8013e40:	5f7a706d 5f766964 65325f72 00007078     mpz_div_r_2exp..

08013e50 <__func__.7354>:
 8013e50:	5f7a706d 65766964 74636178 00000000     mpz_divexact....

08013e60 <__func__.7378>:
 8013e60:	5f7a706d 5f766964 755f7271 00000069     mpz_div_qr_ui...

08013e70 <__func__.7451>:
 8013e70:	5f7a706d 65766964 74636178 0069755f     mpz_divexact_ui.

08013e80 <__func__.7461>:
 8013e80:	5f6e706d 5f646367 00003131              mpn_gcd_11..

08013e8c <__func__.7493>:
 8013e8c:	5f7a706d 656b616d 64646f5f 00000000     mpz_make_odd....

08013e9c <__func__.7587>:
 8013e9c:	5f7a706d 6d776f70 00000000              mpz_powm....

08013ea8 <__func__.7644>:
 8013ea8:	5f6e706d 66726570 5f746365 61757173     mpn_perfect_squa
 8013eb8:	705f6572 00000000                       re_p....

08013ec0 <__func__.7655>:
 8013ec0:	5f6e706d 74727173 006d6572              mpn_sqrtrem.

08013ecc <__func__.7679>:
 8013ecc:	5f706d67 6c6c696d 61727265 006e6962     gmp_millerrabin.

08013edc <__func__.7693>:
 8013edc:	5f7a706d 626f7270 705f6261 656d6972     mpz_probab_prime
 8013eec:	0000705f                                _p..

08013ef0 <__func__.7731>:
 8013ef0:	5f7a706d 5f736261 5f627573 00746962     mpz_abs_sub_bit.

08013f00 <__func__.7774>:
 8013f00:	5f7a706d 00646e61                       mpz_and.

08013f08 <__func__.7803>:
 8013f08:	5f7a706d 00726f69                       mpz_ior.

08013f10 <__func__.7831>:
 8013f10:	5f7a706d 00726f78                       mpz_xor.

08013f18 <__func__.7871>:
 8013f18:	5f7a706d 646d6168 00747369              mpz_hamdist.

08013f24 <__func__.7910>:
 8013f24:	5f7a706d 657a6973 61626e69 00006573     mpz_sizeinbase..

08013f34 <__func__.7945>:
 8013f34:	5f7a706d 5f746573 00727473              mpz_set_str.

08013f40 <i.7970>:
 8013f40:	00000002                                ....

08013f44 <__func__.7988>:
 8013f44:	5f7a706d 6f706d69 00007472              mpz_import..

08013f50 <__func__.8007>:
 8013f50:	5f7a706d 6f707865 00007472 334d5453     mpz_export..STM3
 8013f60:	69562032 61757472 6f43206c 726f506d     2 Virtual ComPor
 8013f70:	6e692074 20534820 65646f6d 00000000     t in HS mode....
 8013f80:	334d5453 69562032 61757472 6f43206c     STM32 Virtual Co
 8013f90:	726f506d 6e692074 20534620 65646f4d     mPort in FS Mode
 8013fa0:	00000000 694d5453 656f7263 7463656c     ....STMicroelect
 8013fb0:	696e6f72 00007363 30303030 30303030     ronics..00000000
 8013fc0:	42303530 00000000 30303030 30303030     050B....00000000
 8013fd0:	43303530 00000000 20504356 666e6f43     050C....VCP Conf
 8013fe0:	00006769 20504356 65746e49 63616672     ig..VCP Interfac
 8013ff0:	00000065                                e...

08013ff4 <sbox>:
 8013ff4:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
 8014004:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
 8014014:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
 8014024:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
 8014034:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
 8014044:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
 8014054:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
 8014064:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
 8014074:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
 8014084:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
 8014094:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
 80140a4:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
 80140b4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
 80140c4:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
 80140d4:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
 80140e4:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

080140f4 <Rcon>:
 80140f4:	0402018d 40201008 6c361b80 9a4dabd8     ...... @..6l..M.
 8014104:	63bc5e2f 6a3597c6 fa7db3d4 3991c5ef     /^.c..5j..}....9
 8014114:	bdd3e472 259fc261 6633944a 3a1d83cc     r...a..%J.3f...:
 8014124:	8dcbe874 08040201 80402010 d86c361b     t........ @..6l.
 8014134:	2f9a4dab c663bc5e d46a3597 effa7db3     .M./^.c..5j..}..
 8014144:	723991c5 61bdd3e4 4a259fc2 cc663394     ..9r...a..%J.3f.
 8014154:	743a1d83 018dcbe8 10080402 1b804020     ..:t........ @..
 8014164:	abd86c36 5e2f9a4d 97c663bc b3d46a35     6l..M./^.c..5j..
 8014174:	c5effa7d e4723991 c261bdd3 944a259f     }....9r...a..%J.
 8014184:	83cc6633 e8743a1d 02018dcb 20100804     3f...:t........ 
 8014194:	361b8040 4dabd86c bc5e2f9a 3597c663     @..6l..M./^.c..5
 80141a4:	7db3d46a 91c5effa d3e47239 9fc261bd     j..}....9r...a..
 80141b4:	33944a25 1d83cc66 cbe8743a 0402018d     %J.3f...:t......
 80141c4:	40201008 6c361b80 9a4dabd8 63bc5e2f     .. @..6l..M./^.c
 80141d4:	6a3597c6 fa7db3d4 3991c5ef bdd3e472     ..5j..}....9r...
 80141e4:	259fc261 6633944a 3a1d83cc 00cbe874     a..%J.3f...:t...

080141f4 <rsbox>:
 80141f4:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 8014204:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 8014214:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 8014224:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 8014234:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 8014244:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 8014254:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 8014264:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 8014274:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 8014284:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 8014294:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 80142a4:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 80142b4:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 80142c4:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 80142d4:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 80142e4:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}
 80142f4:	7566202c 6974636e 203a6e6f 00000000     , function: ....
 8014304:	65737361 6f697472 2522206e 66202273     assertion "%s" f
 8014314:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
 8014324:	696c202c 2520656e 25732564 00000a73     , line %d%s%s...

08014334 <_ctype_>:
 8014334:	20202000 20202020 28282020 20282828     .         ((((( 
 8014344:	20202020 20202020 20202020 20202020                     
 8014354:	10108820 10101010 10101010 10101010      ...............
 8014364:	04040410 04040404 10040404 10101010     ................
 8014374:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8014384:	01010101 01010101 01010101 10101010     ................
 8014394:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80143a4:	02020202 02020202 02020202 10101010     ................
 80143b4:	00000020 00000000 00000000 00000000      ...............
	...
 8014438:	00000043                                C...

0801443c <_global_impure_ptr>:
 801443c:	20000160                                `.. 

08014440 <blanks.6717>:
 8014440:	20202020 20202020 20202020 20202020                     
 8014450:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8014460:	00000000 33323130 37363534 62613938     ....0123456789ab
 8014470:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

08014480 <zeroes.6718>:
 8014480:	30303030 30303030 30303030 30303030     0000000000000000

08014490 <zeroes.6775>:
 8014490:	30303030 30303030 30303030 30303030     0000000000000000
 80144a0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 80144b0:	00000030                                0...

080144b4 <blanks.6774>:
 80144b4:	20202020 20202020 20202020 20202020                     
 80144c4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 80144d4:	49534f50 00000058 0000002e              POSIX.......

080144e0 <__mprec_tens>:
 80144e0:	00000000 3ff00000 00000000 40240000     .......?......$@
 80144f0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8014500:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8014510:	00000000 412e8480 00000000 416312d0     .......A......cA
 8014520:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8014530:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8014540:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8014550:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8014560:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8014570:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8014580:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8014590:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 80145a0:	79d99db4 44ea7843                       ...yCx.D

080145a8 <__mprec_bigtens>:
 80145a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 80145b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 80145c8:	7f73bf3c 75154fdd                       <.s..O.u

080145d0 <p05.5266>:
 80145d0:	00000005 00000019 0000007d 00000000     ........}.......

080145e0 <__mprec_tinytens>:
 80145e0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 80145f0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 8014600:	64ac6f43 0ac80628                       Co.d(...

08014608 <load_ccm_section>:
uint8_t TM_USB_VCP_INT_Init = 0;
USB_OTG_CORE_HANDLE	USB_OTG_dev;
extern uint8_t TM_INT_USB_VCP_ReceiveBuffer[USB_VCP_RECEIVE_BUFFER_LENGTH];

void load_ccm_section () __attribute__ ((section (".init")));
void load_ccm_section (){
 8014608:	b082      	sub	sp, #8
    extern char _edata, _sccm, _eccm;
 
    char *src = &_edata;
 801460a:	f640 231c 	movw	r3, #2588	; 0xa1c
 801460e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8014612:	9301      	str	r3, [sp, #4]
    char *dst = &_sccm;
 8014614:	f240 0300 	movw	r3, #0
 8014618:	f2c1 0300 	movt	r3, #4096	; 0x1000
 801461c:	9300      	str	r3, [sp, #0]
    while (dst < &_eccm) {
 801461e:	e007      	b.n	8014630 <load_ccm_section+0x28>
        *dst++ = *src++;
 8014620:	9b00      	ldr	r3, [sp, #0]
 8014622:	1c5a      	adds	r2, r3, #1
 8014624:	9200      	str	r2, [sp, #0]
 8014626:	9a01      	ldr	r2, [sp, #4]
 8014628:	1c51      	adds	r1, r2, #1
 801462a:	9101      	str	r1, [sp, #4]
 801462c:	7812      	ldrb	r2, [r2, #0]
 801462e:	701a      	strb	r2, [r3, #0]
void load_ccm_section (){
    extern char _edata, _sccm, _eccm;
 
    char *src = &_edata;
    char *dst = &_sccm;
    while (dst < &_eccm) {
 8014630:	9a00      	ldr	r2, [sp, #0]
 8014632:	f242 1328 	movw	r3, #8488	; 0x2128
 8014636:	f2c1 0300 	movt	r3, #4096	; 0x1000
 801463a:	429a      	cmp	r2, r3
 801463c:	d3f0      	bcc.n	8014620 <load_ccm_section+0x18>
        *dst++ = *src++;
    }
}
 801463e:	b002      	add	sp, #8
 8014640:	4770      	bx	lr
 8014642:	bf00      	nop
